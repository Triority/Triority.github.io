<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>整大活！CUMTB！</title>
    <url>/2022/CUMTB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这么好的活，不发出来太可惜了<br>[转自一位学弟]</p>
<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://cr.triority.cc/f/3Qtp/%E7%89%A2%E6%88%BF~1.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>整活</tag>
        <tag>CUMTB</tag>
      </tags>
  </entry>
  <entry>
    <title>Capoo-Desktop-Pet：使用PyQT开发桌宠程序并打包为windows软件</title>
    <url>/2022/Capoo-Desktop-Pet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在b站刷到了Capoo的视频，这猫猫也太好玩了哈哈，最近原作者做了一个桌宠app，但是付款方式只有paypel(据说价格挺贵)，so自己搓一个？<br><img src="/2022/Capoo-Desktop-Pet/capoodesktoppet.png" alt="效果图"></p>
<h2 id="PyQt5编写程序"><a href="#PyQt5编写程序" class="headerlink" title="PyQt5编写程序"></a>PyQt5编写程序</h2><p>虽然说一般python不适合写这类应用程序，但是以我C的能力还是算了hhh</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Capoo<br>└ normal<br>.    └ normal1.gif<br>.    └ normal2.gif<br>.    └ normal3.gif<br>.    └ normal4.gif<br>.    └…………..<br>└ click<br>.    └ click.gif<br>└ main.py<br>└ dialog.txt<br>└ tigerIcon.jpg</p>
<p>注释：<br><code>normal</code>文件夹包含需要随机显示的全部图片，程序启动时首先打开的是<code>normal1.gif</code>，其他文件名随意，建议图片设置透明背景<br><code>click.gif</code>是点击时显示的图片<br><code>main.py</code>主程序<br><code>dialog.txt</code>多行文本，随机显示的话，编码格式为GBK<br><code>tigerIcon.jpg</code>状态栏显示的图标</p>
<h3 id="python程序"><a href="#python程序" class="headerlink" title="python程序"></a>python程序</h3><p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DesktopPet</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(DesktopPet, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="comment"># 窗体初始化</span></span><br><span class="line">        <span class="variable language_">self</span>.init()</span><br><span class="line">        <span class="comment"># 托盘化初始</span></span><br><span class="line">        <span class="variable language_">self</span>.initPall()</span><br><span class="line">        <span class="comment"># 宠物静态gif图加载</span></span><br><span class="line">        <span class="variable language_">self</span>.initPetImage()</span><br><span class="line">        <span class="comment"># 宠物正常待机，实现随机切换动作</span></span><br><span class="line">        <span class="variable language_">self</span>.petNormalAction()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗体初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="comment"># 设置窗口属性:窗口无标题栏且固定在最前面</span></span><br><span class="line">        <span class="comment"># FrameWindowHint:无边框窗口</span></span><br><span class="line">        <span class="comment"># WindowStaysOnTopHint: 窗口总显示在最上面</span></span><br><span class="line">        <span class="comment"># SubWindow: 新窗口部件是一个子窗口，而无论窗口部件是否有父窗口部件</span></span><br><span class="line">        <span class="comment"># https://blog.csdn.net/kaida1234/article/details/79863146</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.SubWindow)</span><br><span class="line">        <span class="comment"># setAutoFillBackground(True)表示的是自动填充背景,False为透明背景</span></span><br><span class="line">        <span class="variable language_">self</span>.setAutoFillBackground(<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 窗口透明，窗体空间不透明</span></span><br><span class="line">        <span class="variable language_">self</span>.setAttribute(Qt.WA_TranslucentBackground, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 重绘组件、刷新</span></span><br><span class="line">        <span class="variable language_">self</span>.repaint()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 托盘化设置初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initPall</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 导入准备在托盘化显示上使用的图标</span></span><br><span class="line">        icons = os.path.join(<span class="string">&#x27;tigerIcon.jpg&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置右键显示最小化的菜单项</span></span><br><span class="line">        <span class="comment"># 菜单项退出，点击后调用quit函数</span></span><br><span class="line">        quit_action = QAction(<span class="string">&#x27;退出&#x27;</span>, <span class="variable language_">self</span>, triggered=<span class="variable language_">self</span>.quit)</span><br><span class="line">        <span class="comment"># 设置这个点击选项的图片</span></span><br><span class="line">        quit_action.setIcon(QIcon(icons))</span><br><span class="line">        <span class="comment"># 菜单项显示，点击后调用showing函数</span></span><br><span class="line">        showing = QAction(<span class="string">u&#x27;显示&#x27;</span>, <span class="variable language_">self</span>, triggered=<span class="variable language_">self</span>.showwin)</span><br><span class="line">        <span class="comment"># 新建一个菜单项控件</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon_menu = QMenu(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 在菜单栏添加一个无子菜单的菜单项‘退出’</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon_menu.addAction(quit_action)</span><br><span class="line">        <span class="comment"># 在菜单栏添加一个无子菜单的菜单项‘显示’</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon_menu.addAction(showing)</span><br><span class="line">        <span class="comment"># QSystemTrayIcon类为应用程序在系统托盘中提供一个图标</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon = QSystemTrayIcon(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 设置托盘化图标</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon.setIcon(QIcon(icons))</span><br><span class="line">        <span class="comment"># 设置托盘化菜单项</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon.setContextMenu(<span class="variable language_">self</span>.tray_icon_menu)</span><br><span class="line">        <span class="comment"># 展示</span></span><br><span class="line">        <span class="variable language_">self</span>.tray_icon.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 宠物静态gif图加载</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initPetImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 对话框定义</span></span><br><span class="line">        <span class="variable language_">self</span>.talkLabel = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 对话框样式设计</span></span><br><span class="line">        <span class="variable language_">self</span>.talkLabel.setStyleSheet(<span class="string">&quot;font:15pt &#x27;楷体&#x27;;border-width: 1px;color:blue;&quot;</span>)</span><br><span class="line">        <span class="comment"># 定义显示图片部分</span></span><br><span class="line">        <span class="variable language_">self</span>.image = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># QMovie是一个可以存放动态视频的类，一般是配合QLabel使用的,可以用来存放GIF动态图</span></span><br><span class="line">        <span class="variable language_">self</span>.movie = QMovie(<span class="string">&quot;normal/normal1.gif&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置标签大小</span></span><br><span class="line">        <span class="variable language_">self</span>.movie.setScaledSize(QSize(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">        <span class="comment"># 将Qmovie在定义的image中显示</span></span><br><span class="line">        <span class="variable language_">self</span>.image.setMovie(<span class="variable language_">self</span>.movie)</span><br><span class="line">        <span class="variable language_">self</span>.movie.start()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">1024</span>, <span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 调用自定义的randomPosition，会使得宠物出现位置随机</span></span><br><span class="line">        <span class="variable language_">self</span>.randomPosition()</span><br><span class="line">        <span class="comment"># 展示</span></span><br><span class="line">        <span class="variable language_">self</span>.show()</span><br><span class="line">        <span class="comment"># 将宠物正常待机状态的动图放入pet1中</span></span><br><span class="line">        <span class="variable language_">self</span>.pet1 = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">&quot;normal&quot;</span>):</span><br><span class="line">            <span class="variable language_">self</span>.pet1.append(<span class="string">&quot;normal/&quot;</span> + i)</span><br><span class="line">        <span class="comment"># 将宠物正常待机状态的对话放入pet2中</span></span><br><span class="line">        <span class="variable language_">self</span>.dialog = []</span><br><span class="line">        <span class="comment"># 读取目录下dialog文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dialog.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            text = f.read()</span><br><span class="line">            <span class="comment"># 以\n 即换行符为分隔符，分割放进dialog中</span></span><br><span class="line">            <span class="variable language_">self</span>.dialog = text.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 宠物正常待机动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">petNormalAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 每隔一段时间做个动作</span></span><br><span class="line">        <span class="comment"># 定时器设置</span></span><br><span class="line">        <span class="variable language_">self</span>.timer = QTimer()</span><br><span class="line">        <span class="comment"># 时间到了自动执行</span></span><br><span class="line">        <span class="variable language_">self</span>.timer.timeout.connect(<span class="variable language_">self</span>.randomAct)</span><br><span class="line">        <span class="comment"># 动作时间切换设置</span></span><br><span class="line">        <span class="variable language_">self</span>.timer.start(<span class="number">3000</span>)</span><br><span class="line">        <span class="comment"># 宠物状态设置为正常</span></span><br><span class="line">        <span class="variable language_">self</span>.condition = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 每隔一段时间切换对话</span></span><br><span class="line">        <span class="variable language_">self</span>.talkTimer = QTimer()</span><br><span class="line">        <span class="variable language_">self</span>.talkTimer.timeout.connect(<span class="variable language_">self</span>.talk)</span><br><span class="line">        <span class="variable language_">self</span>.talkTimer.start(<span class="number">3000</span>)</span><br><span class="line">        <span class="comment"># 对话状态设置为常态</span></span><br><span class="line">        <span class="variable language_">self</span>.talk_condition = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 宠物对话框</span></span><br><span class="line">        <span class="variable language_">self</span>.talk()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机动作切换</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomAct</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># condition记录宠物状态，宠物状态为0时，代表正常待机</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.condition:</span><br><span class="line">            <span class="comment"># 随机选择装载在pet1里面的gif图进行展示，实现随机切换</span></span><br><span class="line">            <span class="variable language_">self</span>.movie = QMovie(random.choice(<span class="variable language_">self</span>.pet1))</span><br><span class="line">            <span class="comment"># 宠物大小</span></span><br><span class="line">            <span class="variable language_">self</span>.movie.setScaledSize(QSize(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">            <span class="comment"># 将动画添加到label中</span></span><br><span class="line">            <span class="variable language_">self</span>.image.setMovie(<span class="variable language_">self</span>.movie)</span><br><span class="line">            <span class="comment"># 开始播放动画</span></span><br><span class="line">            <span class="variable language_">self</span>.movie.start()</span><br><span class="line">        <span class="comment"># condition不为0，转为切换特有的动作，实现宠物的点击反馈</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 读取特殊状态图片路径</span></span><br><span class="line">            <span class="variable language_">self</span>.movie = QMovie(<span class="string">&quot;./click/click.gif&quot;</span>)</span><br><span class="line">            <span class="comment"># 宠物大小</span></span><br><span class="line">            <span class="variable language_">self</span>.movie.setScaledSize(QSize(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">            <span class="comment"># 将动画添加到label中</span></span><br><span class="line">            <span class="variable language_">self</span>.image.setMovie(<span class="variable language_">self</span>.movie)</span><br><span class="line">            <span class="comment"># 开始播放动画</span></span><br><span class="line">            <span class="variable language_">self</span>.movie.start()</span><br><span class="line">            <span class="comment"># 宠物状态设置为正常待机</span></span><br><span class="line">            <span class="variable language_">self</span>.condition = <span class="number">0</span></span><br><span class="line">            <span class="variable language_">self</span>.talk_condition = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 宠物对话框行为处理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.talk_condition:</span><br><span class="line">            <span class="comment"># talk_condition为0则选取加载在dialog中的语句</span></span><br><span class="line">            <span class="variable language_">self</span>.talkLabel.setText(random.choice(<span class="variable language_">self</span>.dialog))</span><br><span class="line">            <span class="comment"># 设置样式</span></span><br><span class="line">            <span class="variable language_">self</span>.talkLabel.setStyleSheet(</span><br><span class="line">                <span class="string">&quot;font: bold;&quot;</span></span><br><span class="line">                <span class="string">&quot;font:25pt &#x27;楷体&#x27;;&quot;</span></span><br><span class="line">                <span class="string">&quot;color:white;&quot;</span></span><br><span class="line">                <span class="string">&quot;background-color: white&quot;</span></span><br><span class="line">                <span class="string">&quot;url(:/)&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 根据内容自适应大小</span></span><br><span class="line">            <span class="variable language_">self</span>.talkLabel.adjustSize()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># talk_condition为1显示为别点我，这里同样可以通过if-else-if来拓展对应的行为</span></span><br><span class="line">            <span class="variable language_">self</span>.talkLabel.setText(<span class="string">&quot;别摸我&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.talkLabel.setStyleSheet(</span><br><span class="line">                <span class="string">&quot;font: bold;&quot;</span></span><br><span class="line">                <span class="string">&quot;font:25pt &#x27;楷体&#x27;;&quot;</span></span><br><span class="line">                <span class="string">&quot;color:white;&quot;</span></span><br><span class="line">                <span class="string">&quot;background-color: white&quot;</span></span><br><span class="line">                <span class="string">&quot;url(:/)&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="variable language_">self</span>.talkLabel.adjustSize()</span><br><span class="line">            <span class="comment"># 设置为正常状态</span></span><br><span class="line">            <span class="variable language_">self</span>.talk_condition = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退出操作，关闭程序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.close()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示宠物</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showwin</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># setWindowOpacity（）设置窗体的透明度，通过调整窗体透明度实现宠物的展示和隐藏</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowOpacity(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 宠物随机位置</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomPosition</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># screenGeometry（）函数提供有关可用屏幕几何的信息</span></span><br><span class="line">        screen_geo = QDesktopWidget().screenGeometry()</span><br><span class="line">        <span class="comment"># 获取窗口坐标系</span></span><br><span class="line">        pet_geo = <span class="variable language_">self</span>.geometry()</span><br><span class="line">        width = (screen_geo.width() - pet_geo.width()) * random.random()</span><br><span class="line">        height = (screen_geo.height() - pet_geo.height()) * random.random()</span><br><span class="line">        <span class="variable language_">self</span>.move(width, height)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标左键按下时, 宠物将和鼠标位置绑定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 更改宠物状态为点击</span></span><br><span class="line">        <span class="variable language_">self</span>.condition = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 更改宠物对话状态</span></span><br><span class="line">        <span class="variable language_">self</span>.talk_condition = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 即可调用对话状态改变</span></span><br><span class="line">        <span class="variable language_">self</span>.talk()</span><br><span class="line">        <span class="comment"># 即刻加载宠物点击动画</span></span><br><span class="line">        <span class="variable language_">self</span>.randomAct()</span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            <span class="variable language_">self</span>.is_follow_mouse = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># globalPos() 事件触发点相对于桌面的位置</span></span><br><span class="line">        <span class="comment"># pos() 程序相对于桌面左上角的位置，实际是窗口的左上角坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.mouse_drag_pos = event.globalPos() - <span class="variable language_">self</span>.pos()</span><br><span class="line">        event.accept()</span><br><span class="line">        <span class="comment"># 拖动时鼠标图形的设置</span></span><br><span class="line">        <span class="variable language_">self</span>.setCursor(QCursor(Qt.OpenHandCursor))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标移动时调用，实现宠物随鼠标移动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 如果鼠标左键按下，且处于绑定状态</span></span><br><span class="line">        <span class="keyword">if</span> Qt.LeftButton <span class="keyword">and</span> <span class="variable language_">self</span>.is_follow_mouse:</span><br><span class="line">            <span class="comment"># 宠物随鼠标进行移动</span></span><br><span class="line">            <span class="variable language_">self</span>.move(event.globalPos() - <span class="variable language_">self</span>.mouse_drag_pos)</span><br><span class="line">        event.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标释放调用，取消绑定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.is_follow_mouse = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 鼠标图形设置为箭头</span></span><br><span class="line">        <span class="variable language_">self</span>.setCursor(QCursor(Qt.ArrowCursor))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标移进时调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enterEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 设置鼠标形状 Qt.ClosedHandCursor   非指向手</span></span><br><span class="line">        <span class="variable language_">self</span>.setCursor(Qt.ClosedHandCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 宠物右键点击交互</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">contextMenuEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 定义菜单</span></span><br><span class="line">        menu = QMenu(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 定义菜单项</span></span><br><span class="line">        quitAction = menu.addAction(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        hide = menu.addAction(<span class="string">&quot;隐藏&quot;</span>)</span><br><span class="line">        <span class="comment"># 使用exec_()方法显示菜单。从鼠标右键事件对象中获得当前坐标。mapToGlobal()方法把当前组件的相对坐标转换为窗口（window）的绝对坐标。</span></span><br><span class="line">        action = menu.exec_(<span class="variable language_">self</span>.mapToGlobal(event.pos()))</span><br><span class="line">        <span class="comment"># 点击事件为退出</span></span><br><span class="line">        <span class="keyword">if</span> action == quitAction:</span><br><span class="line">            qApp.quit()</span><br><span class="line">        <span class="comment"># 点击事件为隐藏</span></span><br><span class="line">        <span class="keyword">if</span> action == hide:</span><br><span class="line">            <span class="comment"># 通过设置透明度方式隐藏宠物</span></span><br><span class="line">            <span class="variable language_">self</span>.setWindowOpacity(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建了一个QApplication对象，对象名为app，带两个参数argc,argv</span></span><br><span class="line">    <span class="comment"># 所有的PyQt5应用必须创建一个应用（Application）对象。sys.argv参数是一个来自命令行的参数列表。</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># 窗口组件初始化</span></span><br><span class="line">    pet = DesktopPet()</span><br><span class="line">    <span class="comment"># 1. 进入时间循环；</span></span><br><span class="line">    <span class="comment"># 2. wait，直到响应app可能的输入；</span></span><br><span class="line">    <span class="comment"># 3. QT接收和处理用户及系统交代的事件（消息），并传递到各个窗口；</span></span><br><span class="line">    <span class="comment"># 4. 程序遇到exit()退出时，机会返回exec()的值。</span></span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pyinstaller将程序打包为exe"><a href="#pyinstaller将程序打包为exe" class="headerlink" title="pyinstaller将程序打包为exe"></a>pyinstaller将程序打包为exe</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F -w main.py</span><br></pre></td></tr></table></figure>
<p>打包生成的<code>main.exe</code>放到主目录下</p>
<h2 id="制作安装程序"><a href="#制作安装程序" class="headerlink" title="制作安装程序"></a>制作安装程序</h2><p>刚才打包为exe后是一个文件夹，分享给他人后需要解压之后启动main.exe，可是如果，我是说如果，你有一个女朋友，但是她连解压都不会，so最好做成一个<code>Setup.exe</code>，打开连点下一步，安装之后直接一个桌面快捷方式，那该多好。<br><img src="/2022/Capoo-Desktop-Pet/%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%9B%BE.png" alt="安装程序"></p>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>1.<code>Nullsoft Inst all System(NSIS)</code>：编译 .nsi脚本文件，生成Setup.exe<br>2.<code>VNISEdit</code>：生成 .nsi脚本文件<br>注意，如果没有安装NSIS直接打开VNISEdit，会在选择语言一步卡死，因为候选栏为空。<br>下载链接：<br><a href="VNISEdit.rar">VNISEdit.rar</a><br><a href="nsis-3.02.1-setup.exe">nsis-3.02.1-setup.exe</a></p>
<h3 id="生成-nsi脚本文件"><a href="#生成-nsi脚本文件" class="headerlink" title="生成 .nsi脚本文件"></a>生成 .nsi脚本文件</h3><p>1.打开VNISEdit<br>选择：文件-&gt;新建脚本：向导<br><img src="/2022/Capoo-Desktop-Pet/20221207163210.png" alt="向导"><br>2.填写应用程序信息<br><img src="/2022/Capoo-Desktop-Pet/20221207163234.png" alt="应用程序信息"><br>3.填写安装程序选项<br><img src="/2022/Capoo-Desktop-Pet/20221207163254.png" alt="安装程序选项"><br>4.设置快闪屏幕和背景窗口。花里胡哨的，我直接下一步<br>5.应用程序的目录和授权信息<br>没有授权文件的话，需要把输入框清空，再下一步<br><img src="/2022/Capoo-Desktop-Pet/20221207163311.png" alt="应用程序的目录和授权信息"><br>6.应用程序文件<br>先删除右边框子里所有的默认文件，然后点击添加目录树<br>一定要勾选上下面两个复选框<br><img src="/2022/Capoo-Desktop-Pet/20221207163354.png" alt="应用程序文件"><br>7.应用程序图标<br>记得准备一个ico格式的图标哦<br>8.安装程序之后运行<br>选择我们的主程序，也就是<code>main.exe</code><br><img src="/2022/Capoo-Desktop-Pet/20221207163418.png" alt="主程序"><br>9.解除安装程序，不用改<br>10.保存脚本<br>一定要勾选上前两个复选框<br><img src="/2022/Capoo-Desktop-Pet/20221207163427.png" alt="保存"></p>
<h3 id="编译-nsi脚本"><a href="#编译-nsi脚本" class="headerlink" title="编译 .nsi脚本"></a>编译 .nsi脚本</h3><p>打开Nullsoft Inst all System(NSIS)<br>选择第一个编译nsi<br><img src="/2022/Capoo-Desktop-Pet/20221207163546.png" alt="编译nsi"><br>把之前生成的nsi文件推进去，等他编译完，就大功告成咯</p>
<h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p>安装程序：<br><a href="https://cr.triority.cc/f/vZhl/CapooSetup.exe">CapooSetup.exe</a><br>python编译exe文件：<br><a href="https://cr.triority.cc/f/qYFA/main.exe">main.exe</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>艺画三体高燃混剪</title>
    <url>/2022/Clipping-of-the-three-body-animation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>众所周知，艺画开天花了两个亿做的三体动画发布了，评价也只能说是依托答辩。为此特地将动画中比较精彩的部分剪辑出来，取其精华去其糟粕。我不生产答辩，我只是答辩的搬运工。</p>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=391643147&bvid=BV1Qd4y1h7bF&cid=935350316&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>

]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>整活</tag>
      </tags>
  </entry>
  <entry>
    <title>在极坐标下参考DBSCAN的聚类算法</title>
    <url>/2022/LaserScan-DBSCAN-PolarCoordinates/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DBSCAN聚类算法"><a href="#DBSCAN聚类算法" class="headerlink" title="DBSCAN聚类算法"></a>DBSCAN聚类算法</h2><p>有一个对这个算法进行<a href="https://www.naftaliharris.com/blog/visualizing-dbscan-clustering/" title="可视化的网站">可视化的网站</a><br>我们将激光雷达识别到的点进行聚类来识别不同物体</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之所以不直接使用上述算法，是因为激光雷达的是极坐标下的数据，而且同一个角度的点只会有一个。所以这里借用上述算法的思路，做一个激光雷达专用的聚类算法。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> LaserScan</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 参数设置</span></span><br><span class="line">    ab = <span class="number">200</span>    <span class="comment"># 雷达可视化画面缩放，数值越小可视范围越广</span></span><br><span class="line">    ba = <span class="number">800</span>    <span class="comment">#可视化界面边长</span></span><br><span class="line">    points_range = <span class="number">10</span>   <span class="comment"># 聚类点云范围</span></span><br><span class="line">    points_amount = <span class="number">5</span>   <span class="comment"># 聚类点数量最小值</span></span><br><span class="line">    max_distance = <span class="number">0.15</span> <span class="comment"># 同类点最大距离</span></span><br><span class="line"></span><br><span class="line">    ba2 = <span class="built_in">int</span>(ba/<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 雷达绘图</span></span><br><span class="line">    frame = np.zeros((ba, ba,<span class="number">3</span>), np.uint8)</span><br><span class="line">    angle = data.angle_min</span><br><span class="line">    cv2.circle(frame, (ba2,ba2), <span class="number">5</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> data.ranges:</span><br><span class="line">        <span class="keyword">if</span> math.isinf(r) == <span class="literal">True</span>:</span><br><span class="line">            r = <span class="number">1000</span></span><br><span class="line">        <span class="comment">#将极坐标的信息转为直角坐标信息</span></span><br><span class="line">        x = math.trunc((r * -ab)*math.cos(angle + (-<span class="number">90.0</span>*<span class="number">3.1416</span>/<span class="number">180.0</span>)))</span><br><span class="line">        y = math.trunc((r * ab)*math.sin(angle + (-<span class="number">90.0</span>*<span class="number">3.1416</span>/<span class="number">180.0</span>)))</span><br><span class="line">        <span class="keyword">if</span> y &gt; -ba2 <span class="keyword">and</span> y &lt; ba2 <span class="keyword">and</span> x &lt; ba2 <span class="keyword">and</span> x &gt; -ba2:</span><br><span class="line">            <span class="comment"># 用CV2画线</span></span><br><span class="line">            cv2.line(frame,(x+ba2,y+ba2),(x+ba2,y+ba2),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 角度增加</span></span><br><span class="line">        angle= angle + data.angle_increment</span><br><span class="line"></span><br><span class="line">    out = [<span class="number">0</span>] * <span class="number">1440</span>    <span class="comment">#激光雷达每一圈采集1440个点</span></span><br><span class="line">    <span class="comment">#聚类</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">int</span>(<span class="built_in">len</span>(data.ranges)-<span class="number">1</span>-points_range)):</span><br><span class="line">        p = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,points_range+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(data.ranges[i+<span class="number">1</span>]-data.ranges[i+j+<span class="number">1</span>])&lt;=max_distance:</span><br><span class="line">                p = p + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> p&gt;=points_amount:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i,i+j+<span class="number">1</span>):</span><br><span class="line">                    out[k] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(out)  <span class="comment">#此时输出的是只有0，1的列表，其中1表示有障碍物。</span></span><br><span class="line">    <span class="comment">#连续1检测</span></span><br><span class="line">    p = <span class="number">0</span></span><br><span class="line">    out11 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(out)-<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> out[i]==<span class="number">1</span> <span class="keyword">and</span> out[i-<span class="number">1</span>]==<span class="number">0</span>:</span><br><span class="line">            p = p + <span class="number">1</span></span><br><span class="line">            k = i</span><br><span class="line">        <span class="keyword">if</span> out[i]==<span class="number">1</span> <span class="keyword">and</span> out[i+<span class="number">1</span>]==<span class="number">0</span>:</span><br><span class="line">            out11.append([k,i])</span><br><span class="line">        <span class="keyword">if</span> out[i]==<span class="number">1</span>:</span><br><span class="line">            out[i]=p</span><br><span class="line">    <span class="built_in">print</span>(out)  <span class="comment">#此时out输出给所有障碍物编号后的结果</span></span><br><span class="line">    <span class="built_in">print</span>(out11)    <span class="comment">#每个障碍物角度范围的二维数组</span></span><br><span class="line">    <span class="comment">#聚类效果可视化为绿点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> out11:</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        total1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i[<span class="number">0</span>],i[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> math.isinf(data.ranges[j]) == <span class="literal">False</span> <span class="keyword">and</span> data.ranges[j]&gt;<span class="number">0.1</span>:</span><br><span class="line">                total = total + data.ranges[j]</span><br><span class="line">                total1 = total1 + <span class="number">1</span></span><br><span class="line">        r = total / total1</span><br><span class="line">        angle = data.angle_min + data.angle_increment * <span class="built_in">round</span>((i[<span class="number">0</span>]+i[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">        x = math.trunc((r * -ab)*math.cos(angle + (-<span class="number">90.0</span>*<span class="number">3.1416</span>/<span class="number">180.0</span>)))</span><br><span class="line">        y = math.trunc((r * ab)*math.sin(angle + (-<span class="number">90.0</span>*<span class="number">3.1416</span>/<span class="number">180.0</span>)))</span><br><span class="line">        <span class="keyword">if</span> y &gt; -ba2 <span class="keyword">and</span> y &lt; ba2 <span class="keyword">and</span> x &lt; ba2 <span class="keyword">and</span> x &gt; -ba2:</span><br><span class="line">            cv2.line(frame,(x+ba2,y+ba2),(x+ba2,y+ba2),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">5</span>)</span><br><span class="line">            <span class="built_in">print</span>([x,y])</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frame&#x27;</span>,frame)</span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化节点&#x27;laser_listener&#x27;</span></span><br><span class="line"><span class="comment"># 代表开启一个进程</span></span><br><span class="line"><span class="comment"># 订阅:需要订阅的话题，数据类型，回调函数</span></span><br><span class="line"><span class="comment"># 最后的队列queue_size参数需要换为1，只接收最新的一个消息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">laser_listener</span>():</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;laser_listener&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    rospy.Subscriber(<span class="string">&quot;/scan&quot;</span>, LaserScan,callback,queue_size = <span class="number">1</span>)</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    laser_listener()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>ROS</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>激光雷达数据结构及使用opencv的可视化</title>
    <url>/2022/LaserScan/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="激光雷达数据结构"><a href="#激光雷达数据结构" class="headerlink" title="激光雷达数据结构"></a>激光雷达数据结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosmsg show sensor_msgs/LaserScan</span><br></pre></td></tr></table></figure>
<p>可以看到ros输出的激光雷达数据结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std_msgs/Header header   # Header也是一个结构体,包含了seq,stamp,frame_id,其中seq</span><br><span class="line">                         # 指的是扫描顺序增加的id,stamp包含了开始扫描的时间和与开始扫</span><br><span class="line">                         # 描的时间差,frame_id是扫描的参考系名称.注意扫描是逆时针从正前方开始扫描的.   </span><br><span class="line">　　uint32 seq</span><br><span class="line">　　time stamp</span><br><span class="line">　　string frame_id 　　  # frame在ROS中作用至关重要，消息将和tf绑定才可以读取数据，</span><br><span class="line">float32 angle_min        # 开始扫描的角度(rad)</span><br><span class="line">float32 angle_max        # 结束扫描的角度(rad)</span><br><span class="line">float32 angle_increment  # 每一次扫描增加的角度(rad)</span><br><span class="line"></span><br><span class="line">float32 time_increment   # 测量的时间间隔(second)</span><br><span class="line">float32 scan_time        # 扫描的时间间隔(second)</span><br><span class="line"></span><br><span class="line">float32 range_min        # 距离最小值(m)</span><br><span class="line">float32 range_max        # 距离最大值(m)</span><br><span class="line"></span><br><span class="line">float32[] ranges         # 距离数组(m) (长度360)</span><br><span class="line">float32[] intensities    # 与设备有关,强度数组(长度360)</span><br></pre></td></tr></table></figure>
<p>我们主要需要的就是其中的<code>angle_increment</code>，<code>ranges</code>。<br>下面的程序用于将激光雷达数据可视化，更便于理解使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> LaserScan</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 设置画布为600*600像素</span></span><br><span class="line">    frame = np.zeros((<span class="number">600</span>, <span class="number">600</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">    angle = data.angle_min</span><br><span class="line">    cv2.circle(frame, (<span class="number">300</span>,<span class="number">300</span>), <span class="number">35</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(data.ranges))</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> data.ranges:</span><br><span class="line">        <span class="keyword">if</span> math.isinf(r) == <span class="literal">True</span>:</span><br><span class="line">            r = <span class="number">1000</span></span><br><span class="line">        <span class="comment">#这里就是将极坐标的信息转为直角坐标信息</span></span><br><span class="line">        x = math.trunc((r * -<span class="number">250.0</span>)*math.cos(angle + (-<span class="number">90.0</span>*<span class="number">3.1416</span>/<span class="number">180.0</span>)))</span><br><span class="line">        y = math.trunc((r * <span class="number">250.0</span>)*math.sin(angle + (-<span class="number">90.0</span>*<span class="number">3.1416</span>/<span class="number">180.0</span>)))</span><br><span class="line">        <span class="keyword">if</span> y &gt; -<span class="number">300</span> <span class="keyword">and</span> y &lt; <span class="number">300</span> <span class="keyword">and</span> x&lt;<span class="number">300</span> <span class="keyword">and</span> x&gt;-<span class="number">300</span>:</span><br><span class="line">            cv2.line(frame,(x+<span class="number">300</span>,y+<span class="number">300</span>),(x+<span class="number">300</span>,y+<span class="number">300</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 角度增加</span></span><br><span class="line">        angle= angle + data.angle_increment</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frame&#x27;</span>,frame)</span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化节点，&#x27;laser_listener&#x27;</span></span><br><span class="line"><span class="comment"># 代表开启一个进程！匿名参数也默认是这个</span></span><br><span class="line"><span class="comment"># 订阅的语句。需要订阅的话题，数据类型，回调函数</span></span><br><span class="line"><span class="comment"># 最后的队列，queue_size参数需要换为1，只接收最新的一个消息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">laser_listener</span>():</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;laser_listener&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    rospy.Subscriber(<span class="string">&quot;/scan&quot;</span>, LaserScan,callback,queue_size = <span class="number">1</span>)</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    laser_listener()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到显示图像：<br><img src="/2022/LaserScan/LaserScan.png" alt="激光雷达数据显示"></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>ROS</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用Multiprocessing库进行多进程执行</title>
    <url>/2022/Multiprocessing-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用python进行自动标注过程中，一直使用一个进程，因此运行速度较慢，标注几万张图片需要耗费几个小时，于是想利用多CPU运行自动标注程序。<br>单进程自动标注程序可在<a href="http://triority.cc/2022/06/21/auto-marking/" title="以前文章">以前文章</a>找到。</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>首先想到多线程执行，每个文件夹分一个线程，但是实际运行发现速度并没有提升，仍然使用单个核心运行。查找资料得知：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般来说，编程语言要进行并发编程，多线程会比多进程优先考虑，因为多线程比多进程更省资源。但是由于python底层的GIL的存在，导致了多线程编程时，实际上每个时刻只有一个线程在运行，也即只有一个核被利用起来，并没有起到并行的效果(此说法针对的是cpu密集型的代码，如果是I/O密集型的，多线程还是会有效果的)。于是为了真正利用起来多核，python中需要使用多进程编程。</span><br></pre></td></tr></table></figure>
<p>于是。。。</p>
<h2 id="多进程库multiprocessing"><a href="#多进程库multiprocessing" class="headerlink" title="多进程库multiprocessing"></a>多进程库multiprocessing</h2><h4 id="基本操作流程"><a href="#基本操作流程" class="headerlink" title="基本操作流程"></a>基本操作流程</h4><p>在主进程中实例化一个进程池pool对象—-&gt;往进程池中放入多个进程—-&gt;是否阻塞主进程—-&gt;结束<br>注意，以下内容必须写在程序入口内：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br></pre></td></tr></table></figure>
<h4 id="实例化进程池pool对象"><a href="#实例化进程池pool对象" class="headerlink" title="实例化进程池pool对象"></a>实例化进程池pool对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool = multiprocessing.Pool(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>其中4指最多使用四个核心，如果加入进程更多，将会是后面的阻塞。</p>
<h4 id="放入多个进程"><a href="#放入多个进程" class="headerlink" title="放入多个进程"></a>放入多个进程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool.apply_async(func, (i))</span><br></pre></td></tr></table></figure>
<p><code>func</code>是自定义的函数，后面括号为传入参数。</p>
<h4 id="阻塞主进程并执行"><a href="#阻塞主进程并执行" class="headerlink" title="阻塞主进程并执行"></a>阻塞主进程并执行</h4><p>在结束之前，需要先关闭进程池，此时不能再加入新的进程。close方法必须在join方法调用前调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool.close()</span><br></pre></td></tr></table></figure>
<p>然后阻塞主进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool.join()</span><br></pre></td></tr></table></figure>
<p>其他进程结束后结束阻塞。</p>
<h2 id="多进程自动标注代码"><a href="#多进程自动标注代码" class="headerlink" title="多进程自动标注代码"></a>多进程自动标注代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> funcs <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">times = <span class="number">1</span></span><br><span class="line">photos = os.listdir(<span class="string">r&#x27;photo&#x27;</span>)</span><br><span class="line">backs = os.listdir(<span class="string">r&#x27;back&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_maker</span>(<span class="params">img, back, img_copy</span>):</span><br><span class="line">    <span class="comment"># 亮度</span></span><br><span class="line">    img = random_brightness(img)</span><br><span class="line">    back = random_brightness(back)</span><br><span class="line">    <span class="comment"># 模糊</span></span><br><span class="line">    img = random_blur(img)</span><br><span class="line">    <span class="comment"># 缩放</span></span><br><span class="line">    r = random.randint(<span class="number">5</span>, <span class="number">20</span>) / <span class="number">10</span></span><br><span class="line">    img = cv2.resize(img, (<span class="number">0</span>, <span class="number">0</span>), fx=r, fy=r, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    img_copy = cv2.resize(img_copy, (<span class="number">0</span>, <span class="number">0</span>), fx=r, fy=r, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    <span class="comment"># 仿射变换</span></span><br><span class="line">    img, points = random_horizontally_affine(img)</span><br><span class="line">    xc, yc, wc, hc = points_affine(img_copy, points)</span><br><span class="line">    <span class="comment"># 叠加</span></span><br><span class="line">    back, x, y = overlay(img, back)</span><br><span class="line">    xmin, ymin = (x + xc, y + yc)</span><br><span class="line">    xmax, ymax = (x + xc + wc, y + yc + hc)</span><br><span class="line">    <span class="keyword">return</span> back, xmin, ymin, xmax, ymax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">datas, backs, times, i</span>):</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> backs:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, times):</span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">                img = cv2.imread(<span class="string">&#x27;photo\\&#x27;</span> + i + <span class="string">&#x27;\\&#x27;</span> + j)</span><br><span class="line">                back = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + k)</span><br><span class="line">                rbn = backs[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(backs) - <span class="number">1</span>)]</span><br><span class="line">                back[<span class="number">0</span>:<span class="number">539</span>, <span class="number">960</span>:<span class="number">1919</span>] = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + rbn)[<span class="number">0</span>:<span class="number">539</span>, <span class="number">960</span>:<span class="number">1919</span>]</span><br><span class="line">                rbn = backs[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(backs) - <span class="number">1</span>)]</span><br><span class="line">                back[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">0</span>:<span class="number">969</span>] = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + rbn)[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">0</span>:<span class="number">969</span>]</span><br><span class="line">                rbn = backs[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(backs) - <span class="number">1</span>)]</span><br><span class="line">                back[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">960</span>:<span class="number">1919</span>] = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + rbn)[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">960</span>:<span class="number">1919</span>]</span><br><span class="line">                img_copy = cv2.imread(<span class="string">&#x27;photo_copy\\&#x27;</span> + i + <span class="string">&#x27;\\&#x27;</span> + j)</span><br><span class="line">                save, xmin, ymin, xmax, ymax = data_maker(img, back, img_copy)</span><br><span class="line">                cv2.imwrite(<span class="string">&quot;F:\\out\\photo_output\\&quot;</span> + i + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;.jpg&#x27;</span>, save)</span><br><span class="line">                cv2.rectangle(save, (xmin, ymin), (xmax, ymax), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                cv2.imwrite(<span class="string">&quot;F:\\out\\photo_marked\\&quot;</span> + i + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;.jpg&#x27;</span>, save)</span><br><span class="line">                <span class="comment"># print((m, xmin, ymin, xmax, ymax))</span></span><br><span class="line">                txt = xml_save(<span class="built_in">str</span>(m) + <span class="string">&#x27;.jpg&#x27;</span>, <span class="built_in">str</span>(xmin), <span class="built_in">str</span>(ymin), <span class="built_in">str</span>(xmax), <span class="built_in">str</span>(ymax))</span><br><span class="line">                path = <span class="string">&#x27;F:\\out\\outputs\\&#x27;</span> + i + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">                fw = <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                fw.write(txt)</span><br><span class="line">                fw.close()</span><br><span class="line">                xx = xmax - xmin</span><br><span class="line">                yy = ymax - ymin</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0.2</span> &lt; xx / yy &lt; <span class="number">2</span>:</span><br><span class="line">                    m -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(i + <span class="string">&#x27;进度：&#x27;</span> + <span class="built_in">str</span>(n) + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(datas) * <span class="built_in">len</span>(backs) * times))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> photos:</span><br><span class="line">        datas = os.listdir(<span class="string">&#x27;photo\\&#x27;</span> + i)</span><br><span class="line">        pool.apply_async(kind, (datas, backs, times, i))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sub-process(es) done.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>天气预报</title>
    <url>/2022/Weather-forecast-e-mail/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>城市代号可以在这个网址查看:<a href="https://where.qweather.com/index.html">https://where.qweather.com/index.html</a><br>邮箱自动发送需要填写你的授权密码send_pass!<br>获得密钥key请访问下面网站注册账号并获取web-api应用的密钥<a href="https://dev.qweather.com/">https://dev.qweather.com</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="使用QQ邮箱"><a href="#使用QQ邮箱" class="headerlink" title="使用QQ邮箱"></a>使用QQ邮箱</h3><p>不要问为什么是list-for问就是我也不知道</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line">key=<span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [[<span class="string">&quot;12345@qq.com&quot;</span>,<span class="string">&#x27;100000&#x27;</span>,<span class="string">&#x27;Triority&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">msg,rec_user</span>):</span><br><span class="line">    mail_host=<span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">    send_user=<span class="string">&quot;12345@qq.com&quot;</span></span><br><span class="line">    send_pass=<span class="string">&quot;pass&quot;</span></span><br><span class="line">    message=MIMEText(msg,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;from&#x27;</span>]=Header(send_user,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;to&#x27;</span>]=Header(rec_user,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    subject=<span class="string">&#x27;今日份天气预报来咯&#x27;</span></span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>]=Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj=smtplib.SMTP_SSL(mail_host,<span class="number">465</span>)</span><br><span class="line">        smtpObj.login(send_user,send_pass)</span><br><span class="line">        smtpObj.sendmail(send_user,rec_user,message.as_string())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;succeed&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_time</span>():</span><br><span class="line">    tim=time.localtime(time.time())</span><br><span class="line">    tm_year=tim[<span class="number">0</span>]</span><br><span class="line">    tm_mon=tim[<span class="number">1</span>]</span><br><span class="line">    tm_mday=tim[<span class="number">2</span>]</span><br><span class="line">    tm_hour=tim[<span class="number">3</span>]</span><br><span class="line">    tm_min=tim[<span class="number">4</span>]</span><br><span class="line">    tm_yday = tim[<span class="number">7</span>]</span><br><span class="line">    <span class="keyword">return</span> tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_yday</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now_weather</span>(<span class="params">key,location</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://devapi.qweather.com/v7/weather/now?key=&#x27;</span>+key+<span class="string">&#x27;&amp;location=&#x27;</span>+location</span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    now_res=requests.get(url,headers=header)</span><br><span class="line">    now_res_json=now_res.json()</span><br><span class="line">    now_temp = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;temp&#x27;</span>]<span class="comment">#温度</span></span><br><span class="line">    now_feelsLike = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;feelsLike&#x27;</span>]<span class="comment">#体感温度</span></span><br><span class="line">    now_windScale = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;windScale&#x27;</span>]<span class="comment">#风力等级</span></span><br><span class="line">    now_windSpeed = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;windSpeed&#x27;</span>]<span class="comment">#风速</span></span><br><span class="line">    now_windDir = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;windDir&#x27;</span>]<span class="comment">#风向</span></span><br><span class="line">    now_text = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;text&#x27;</span>]<span class="comment">#描述</span></span><br><span class="line">    now_obsTime = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;obsTime&#x27;</span>]<span class="comment">#观测时间</span></span><br><span class="line">    <span class="keyword">return</span> now_temp,now_feelsLike,now_windScale,now_windSpeed,now_windDir,now_text,now_obsTime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">today_weather</span>(<span class="params">key,location</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://devapi.qweather.com/v7/weather/3d?key=&#x27;</span>+key+<span class="string">&#x27;&amp;location=&#x27;</span>+location</span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    now_res=requests.get(url,headers=header)</span><br><span class="line">    now_res_json=now_res.json()</span><br><span class="line">    sunrise = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;sunrise&#x27;</span>]<span class="comment">#日出时间</span></span><br><span class="line">    sunset = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;sunset&#x27;</span>]<span class="comment">#日落时间</span></span><br><span class="line">    moonrise = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;moonrise&#x27;</span>]<span class="comment">#月升时间</span></span><br><span class="line">    moonset = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;moonset&#x27;</span>]<span class="comment">#月落时间</span></span><br><span class="line">    tempMax = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;tempMax&#x27;</span>]<span class="comment">#当天最高温度</span></span><br><span class="line">    tempMin = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;tempMin&#x27;</span>]<span class="comment">#当天最低温度</span></span><br><span class="line">    textDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;textDay&#x27;</span>]<span class="comment">#白天天气状况</span></span><br><span class="line">    textNight = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;textNight&#x27;</span>]<span class="comment">#晚间天气状况</span></span><br><span class="line">    windDirDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;windDirDay&#x27;</span>]<span class="comment">#白天风向</span></span><br><span class="line">    windScaleDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;windScaleDay&#x27;</span>]<span class="comment">#白天风力等级</span></span><br><span class="line">    windSpeedDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;windSpeedDay&#x27;</span>]<span class="comment">#白天风速</span></span><br><span class="line">    precip = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;precip&#x27;</span>]<span class="comment">#当天总降水量</span></span><br><span class="line">    uvIndex = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;uvIndex&#x27;</span>]<span class="comment">#紫外线强度指数</span></span><br><span class="line">    humidity = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;humidity&#x27;</span>]<span class="comment">#相对湿度</span></span><br><span class="line">    <span class="keyword">return</span> sunrise, sunset, moonrise, moonset, tempMax, tempMin, textDay, textNight, windDirDay, windScaleDay, windSpeedDay, precip, uvIndex, humidity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now_air</span>(<span class="params">key,location</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://devapi.qweather.com/v7/air/now?key=&#x27;</span>+key+<span class="string">&#x27;&amp;location=&#x27;</span>+location</span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    now_res=requests.get(url,headers=header)</span><br><span class="line">    now_res_json=now_res.json()</span><br><span class="line">    category = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;category&#x27;</span>]<span class="comment">#空气质量指数级别</span></span><br><span class="line">    aqi = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;aqi&#x27;</span>]<span class="comment">#空气质量指数</span></span><br><span class="line">    <span class="keyword">return</span> category, aqi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">txt</span>(<span class="params">key,location,name</span>):</span><br><span class="line">    tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_yday = get_time()</span><br><span class="line">    now_temp, now_feelsLike, now_windScale, now_windSpeed, now_windDir, now_text, now_obsTime = now_weather(key,location)</span><br><span class="line">    sunrise, sunset, moonrise, moonset, tempMax, tempMin, textDay, textNight, windDirDay,  windScaleDay, windSpeedDay, precip, uvIndex, humidity = today_weather(key,location)</span><br><span class="line">    category, aqi = now_air(key,location)</span><br><span class="line">    msg =<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;HTML Editor - LDDGO.NET&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Dear &#x27;&#x27;&#x27;</span>+name+<span class="string">&#x27;&#x27;&#x27;:&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;早安!&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天是&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_year)+<span class="string">&#x27;&#x27;&#x27;年&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mon)+<span class="string">&#x27;&#x27;&#x27;月&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mday)+<span class="string">&#x27;&#x27;&#x27;日,是今年的第&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_yday)+<span class="string">&#x27;&#x27;&#x27;天了哦&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;下面是现在实时的天气状况:&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;现在室外的空气状况为&#x27;&#x27;&#x27;</span>+category+<span class="string">&#x27;&#x27;&#x27;,质量指数为&#x27;&#x27;&#x27;</span>+aqi+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天早上天气&#x27;&#x27;&#x27;</span>+now_text+<span class="string">&#x27;&#x27;&#x27;,气温&#x27;&#x27;&#x27;</span>+now_temp+<span class="string">&#x27;&#x27;&#x27;度,体感温度&#x27;&#x27;&#x27;</span>+now_feelsLike+<span class="string">&#x27;&#x27;&#x27;度,&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;刮&#x27;&#x27;&#x27;</span>+now_windDir+<span class="string">&#x27;&#x27;&#x27;,风力&#x27;&#x27;&#x27;</span>+now_windScale+<span class="string">&#x27;&#x27;&#x27;级,速度约&#x27;&#x27;&#x27;</span>+now_windSpeed+<span class="string">&#x27;&#x27;&#x27;m/s&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;以上信息的测量时间为&#x27;&#x27;&#x27;</span>+now_obsTime+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;下面是今天全天的天气情况:&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天白天天气&#x27;&#x27;&#x27;</span>+textDay+<span class="string">&#x27;&#x27;&#x27;,最低气温是&#x27;&#x27;&#x27;</span>+tempMin+<span class="string">&#x27;&#x27;&#x27;度,最高&#x27;&#x27;&#x27;</span>+tempMax+<span class="string">&#x27;&#x27;&#x27;度,&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;刮&#x27;&#x27;&#x27;</span>+windDirDay+<span class="string">&#x27;&#x27;&#x27;,风力&#x27;&#x27;&#x27;</span>+windScaleDay+<span class="string">&#x27;&#x27;&#x27;级,速度约&#x27;&#x27;&#x27;</span>+windSpeedDay+<span class="string">&#x27;&#x27;&#x27;m/s&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;预计今天总降水量为&#x27;&#x27;&#x27;</span>+precip+<span class="string">&#x27;&#x27;&#x27;毫米,紫外线指数&#x27;&#x27;&#x27;</span>+uvIndex+<span class="string">&#x27;&#x27;&#x27;,相对湿度为&#x27;&#x27;&#x27;</span>+humidity+<span class="string">&#x27;&#x27;&#x27;.&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天的日出时间是:&#x27;&#x27;&#x27;</span>+sunrise+<span class="string">&#x27;&#x27;&#x27;,日落时间:&#x27;&#x27;&#x27;</span>+sunset+<span class="string">&#x27;&#x27;&#x27;,月亮在&#x27;&#x27;&#x27;</span>+moonrise+<span class="string">&#x27;&#x27;&#x27;升起,在&#x27;&#x27;&#x27;</span>+moonset+<span class="string">&#x27;&#x27;&#x27;落下,&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天夜晚天气&#x27;&#x27;&#x27;</span>+textNight+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Sincerely wish you all the best of luck today !!!&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Triority&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_year)+<span class="string">&#x27;&#x27;&#x27;.&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mon)+<span class="string">&#x27;&#x27;&#x27;.&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mday)+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    send(txt(key, i[<span class="number">1</span>], i[<span class="number">2</span>]), i[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h3 id="使用自建邮箱"><a href="#使用自建邮箱" class="headerlink" title="使用自建邮箱"></a>使用自建邮箱</h3><p>这一段是半年之后才想起来写的，已经不记得当初为什么要改代码了，但是既然改了在这也留一份吧<br>后来搭建了自己的邮箱系统，用<code>triority@triority.cc</code>这个地址发送，代码改成了这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">key = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"><span class="built_in">list</span> = [[<span class="string">&quot;xxx@qq.com&quot;</span>, <span class="string">&#x27;100000&#x27;</span>,<span class="string">&#x27;Triority&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_mail</span>(<span class="params">mail_from, password, mail_to, subject, content, subtype=<span class="literal">None</span></span>):</span><br><span class="line">    url = <span class="string">&#x27;http://triority.cc:8888/mail_sys/send_mail_http.json&#x27;</span></span><br><span class="line">    pdata = &#123;&#125;</span><br><span class="line">    pdata[<span class="string">&#x27;mail_from&#x27;</span>] = mail_from</span><br><span class="line">    pdata[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">    pdata[<span class="string">&#x27;mail_to&#x27;</span>] = mail_to</span><br><span class="line">    pdata[<span class="string">&#x27;subject&#x27;</span>] = subject</span><br><span class="line">    pdata[<span class="string">&#x27;content&#x27;</span>] = content</span><br><span class="line">    pdata[<span class="string">&#x27;subtype&#x27;</span>] = subtype</span><br><span class="line">    resp_data = requests.post(url, pdata).json()</span><br><span class="line">    <span class="built_in">print</span>(mail_to+<span class="built_in">str</span>(resp_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_time</span>():</span><br><span class="line">    tim=time.localtime(time.time())</span><br><span class="line">    tm_year = tim[<span class="number">0</span>]</span><br><span class="line">    tm_mon = tim[<span class="number">1</span>]</span><br><span class="line">    tm_mday = tim[<span class="number">2</span>]</span><br><span class="line">    tm_hour = tim[<span class="number">3</span>]</span><br><span class="line">    tm_min = tim[<span class="number">4</span>]</span><br><span class="line">    tm_yday = tim[<span class="number">7</span>]</span><br><span class="line">    <span class="keyword">return</span> tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_yday</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now_weather</span>(<span class="params">key, location</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://devapi.qweather.com/v7/weather/now?key=&#x27;</span>+key+<span class="string">&#x27;&amp;location=&#x27;</span>+location</span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    now_res=requests.get(url,headers=header)</span><br><span class="line">    now_res_json=now_res.json()</span><br><span class="line">    now_temp = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;temp&#x27;</span>]<span class="comment">#温度</span></span><br><span class="line">    now_feelsLike = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;feelsLike&#x27;</span>]<span class="comment">#体感温度</span></span><br><span class="line">    now_windScale = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;windScale&#x27;</span>]<span class="comment">#风力等级</span></span><br><span class="line">    now_windSpeed = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;windSpeed&#x27;</span>]<span class="comment">#风速</span></span><br><span class="line">    now_windDir = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;windDir&#x27;</span>]<span class="comment">#风向</span></span><br><span class="line">    now_text = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;text&#x27;</span>]<span class="comment">#描述</span></span><br><span class="line">    now_obsTime = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;obsTime&#x27;</span>]<span class="comment">#观测时间</span></span><br><span class="line">    <span class="keyword">return</span> now_temp,now_feelsLike,now_windScale,now_windSpeed,now_windDir,now_text,now_obsTime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">today_weather</span>(<span class="params">key,location</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://devapi.qweather.com/v7/weather/3d?key=&#x27;</span>+key+<span class="string">&#x27;&amp;location=&#x27;</span>+location</span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    now_res=requests.get(url,headers=header)</span><br><span class="line">    now_res_json=now_res.json()</span><br><span class="line">    sunrise = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;sunrise&#x27;</span>]<span class="comment">#日出时间</span></span><br><span class="line">    sunset = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;sunset&#x27;</span>]<span class="comment">#日落时间</span></span><br><span class="line">    moonrise = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;moonrise&#x27;</span>]<span class="comment">#月升时间</span></span><br><span class="line">    moonset = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;moonset&#x27;</span>]<span class="comment">#月落时间</span></span><br><span class="line">    tempMax = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;tempMax&#x27;</span>]<span class="comment">#当天最高温度</span></span><br><span class="line">    tempMin = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;tempMin&#x27;</span>]<span class="comment">#当天最低温度</span></span><br><span class="line">    textDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;textDay&#x27;</span>]<span class="comment">#白天天气状况</span></span><br><span class="line">    textNight = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;textNight&#x27;</span>]<span class="comment">#晚间天气状况</span></span><br><span class="line">    windDirDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;windDirDay&#x27;</span>]<span class="comment">#白天风向</span></span><br><span class="line">    windScaleDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;windScaleDay&#x27;</span>]<span class="comment">#白天风力等级</span></span><br><span class="line">    windSpeedDay = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;windSpeedDay&#x27;</span>]<span class="comment">#白天风速</span></span><br><span class="line">    precip = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;precip&#x27;</span>]<span class="comment">#当天总降水量</span></span><br><span class="line">    uvIndex = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;uvIndex&#x27;</span>]<span class="comment">#紫外线强度指数</span></span><br><span class="line">    humidity = now_res_json[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;humidity&#x27;</span>]<span class="comment">#相对湿度</span></span><br><span class="line">    <span class="keyword">return</span> sunrise, sunset, moonrise, moonset, tempMax, tempMin, textDay, textNight, windDirDay, windScaleDay, windSpeedDay, precip, uvIndex, humidity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now_air</span>(<span class="params">key,location</span>):</span><br><span class="line">    url=<span class="string">&#x27;https://devapi.qweather.com/v7/air/now?key=&#x27;</span>+key+<span class="string">&#x27;&amp;location=&#x27;</span>+location</span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    now_res=requests.get(url,headers=header)</span><br><span class="line">    now_res_json=now_res.json()</span><br><span class="line">    category = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;category&#x27;</span>]<span class="comment">#空气质量指数级别</span></span><br><span class="line">    aqi = now_res_json[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;aqi&#x27;</span>]<span class="comment">#空气质量指数</span></span><br><span class="line">    <span class="keyword">return</span> category, aqi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">txt</span>(<span class="params">key,location,name</span>):</span><br><span class="line">    tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_yday = get_time()</span><br><span class="line">    now_temp, now_feelsLike, now_windScale, now_windSpeed, now_windDir, now_text, now_obsTime = now_weather(key,location)</span><br><span class="line">    sunrise, sunset, moonrise, moonset, tempMax, tempMin, textDay, textNight, windDirDay,  windScaleDay, windSpeedDay, precip, uvIndex, humidity = today_weather(key,location)</span><br><span class="line">    category, aqi = now_air(key,location)</span><br><span class="line">    msg =<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;HTML Editor - LDDGO.NET&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Dear &#x27;&#x27;&#x27;</span>+name+<span class="string">&#x27;&#x27;&#x27;:&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;早安!&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天是&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_year)+<span class="string">&#x27;&#x27;&#x27;年&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mon)+<span class="string">&#x27;&#x27;&#x27;月&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mday)+<span class="string">&#x27;&#x27;&#x27;日,是今年的第&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_yday)+<span class="string">&#x27;&#x27;&#x27;天了哦&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;下面是现在实时的天气状况:&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;现在室外的空气状况为&#x27;&#x27;&#x27;</span>+category+<span class="string">&#x27;&#x27;&#x27;,质量指数为&#x27;&#x27;&#x27;</span>+aqi+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天早上天气&#x27;&#x27;&#x27;</span>+now_text+<span class="string">&#x27;&#x27;&#x27;,气温&#x27;&#x27;&#x27;</span>+now_temp+<span class="string">&#x27;&#x27;&#x27;度,体感温度&#x27;&#x27;&#x27;</span>+now_feelsLike+<span class="string">&#x27;&#x27;&#x27;度,&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;刮&#x27;&#x27;&#x27;</span>+now_windDir+<span class="string">&#x27;&#x27;&#x27;,风力&#x27;&#x27;&#x27;</span>+now_windScale+<span class="string">&#x27;&#x27;&#x27;级,速度约&#x27;&#x27;&#x27;</span>+now_windSpeed+<span class="string">&#x27;&#x27;&#x27;m/s&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;以上信息的测量时间为&#x27;&#x27;&#x27;</span>+now_obsTime+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;下面是今天全天的天气情况:&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天白天天气&#x27;&#x27;&#x27;</span>+textDay+<span class="string">&#x27;&#x27;&#x27;,最低气温是&#x27;&#x27;&#x27;</span>+tempMin+<span class="string">&#x27;&#x27;&#x27;度,最高&#x27;&#x27;&#x27;</span>+tempMax+<span class="string">&#x27;&#x27;&#x27;度,&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;刮&#x27;&#x27;&#x27;</span>+windDirDay+<span class="string">&#x27;&#x27;&#x27;,风力&#x27;&#x27;&#x27;</span>+windScaleDay+<span class="string">&#x27;&#x27;&#x27;级,速度约&#x27;&#x27;&#x27;</span>+windSpeedDay+<span class="string">&#x27;&#x27;&#x27;m/s&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;预计今天总降水量为&#x27;&#x27;&#x27;</span>+precip+<span class="string">&#x27;&#x27;&#x27;毫米,紫外线指数&#x27;&#x27;&#x27;</span>+uvIndex+<span class="string">&#x27;&#x27;&#x27;,相对湿度为&#x27;&#x27;&#x27;</span>+humidity+<span class="string">&#x27;&#x27;&#x27;.&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天的日出时间是:&#x27;&#x27;&#x27;</span>+sunrise+<span class="string">&#x27;&#x27;&#x27;,日落时间:&#x27;&#x27;&#x27;</span>+sunset+<span class="string">&#x27;&#x27;&#x27;,月亮在&#x27;&#x27;&#x27;</span>+moonrise+<span class="string">&#x27;&#x27;&#x27;升起,在&#x27;&#x27;&#x27;</span>+moonset+<span class="string">&#x27;&#x27;&#x27;落下,&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;今天夜晚天气&#x27;&#x27;&#x27;</span>+textNight+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Sincerely wish you all the best of luck today !!!&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Triority&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_year)+<span class="string">&#x27;&#x27;&#x27;.&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mon)+<span class="string">&#x27;&#x27;&#x27;.&#x27;&#x27;&#x27;</span>+<span class="built_in">str</span>(tm_mday)+<span class="string">&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        mail_from = <span class="string">&#x27;triority@triority.cc&#x27;</span></span><br><span class="line">        password = <span class="string">&#x27;xxxxxxxxxxxx&#x27;</span></span><br><span class="line">        mail_to = i[<span class="number">0</span>]</span><br><span class="line">        subject = <span class="string">&#x27;今日天气预报&#x27;</span></span><br><span class="line">        content = txt(key,i[<span class="number">1</span>],i[<span class="number">2</span>])</span><br><span class="line">        subtype = <span class="string">&#x27;html&#x27;</span></span><br><span class="line">        send_mail(mail_from, password, mail_to, subject, content, subtype)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>arduino寻线小车</title>
    <url>/2022/arduino-line-follower/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引脚定义</span></span><br><span class="line"><span class="type">int</span> Left_motor=<span class="number">8</span>;     <span class="comment">//左电机(IN3) 输出0  前进   输出1 后退</span></span><br><span class="line"><span class="type">int</span> Left_motor_pwm=<span class="number">9</span>;     <span class="comment">//左电机PWM调速</span></span><br><span class="line"><span class="type">int</span> Right_motor_pwm=<span class="number">10</span>;    <span class="comment">// 右电机PWM调速</span></span><br><span class="line"><span class="type">int</span> Right_motor=<span class="number">11</span>;    <span class="comment">// 右电机</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Middle = <span class="number">13</span>;    <span class="comment">//中传感器(P3.2 OUT1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Left1 = <span class="number">4</span>;      <span class="comment">//左1传感器(P3.3 OUT2)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Right1 = <span class="number">6</span>;     <span class="comment">//右1传感器(P3.2 OUT1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Left2 = <span class="number">12</span>;     <span class="comment">//左2传感器(P3.3 OUT2)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Right2 = <span class="number">2</span>;     <span class="comment">//右2传感器(P3.2 OUT1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Left3 = <span class="number">3</span>;      <span class="comment">//左中断传感器(P3.3 OUT2)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Right3 = <span class="number">5</span>;     <span class="comment">//右中断传感器(P3.2 OUT1)</span></span><br><span class="line"><span class="type">int</span> beep=A3;<span class="comment">//定义蜂鸣器</span></span><br><span class="line"><span class="comment">//传感器状态定义,计数,中断定义</span></span><br><span class="line"><span class="type">int</span> M,L1,R1,L2,R2,L3,R3;</span><br><span class="line"><span class="type">int</span> go=<span class="number">0</span>;   <span class="comment">//行进状态</span></span><br><span class="line"><span class="type">int</span> t = <span class="number">10</span>;<span class="comment">//超时判断</span></span><br><span class="line"><span class="type">int</span> t1 = <span class="number">0</span>;<span class="comment">//左转判断</span></span><br><span class="line"><span class="type">int</span> t2 = <span class="number">0</span>;<span class="comment">//右转判断</span></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  pinMode(Left_motor,OUTPUT); <span class="comment">// PIN 8 8脚无PWM功能</span></span><br><span class="line">  pinMode(Left_motor_pwm,OUTPUT); <span class="comment">// PIN 9 (PWM)</span></span><br><span class="line">  pinMode(Right_motor_pwm,OUTPUT);<span class="comment">// PIN 10 (PWM) </span></span><br><span class="line">  pinMode(Right_motor,OUTPUT);<span class="comment">// PIN 11 (PWM)</span></span><br><span class="line">  pinMode(Middle, INPUT);</span><br><span class="line">  pinMode(Left1, INPUT);</span><br><span class="line">  pinMode(Right1, INPUT);</span><br><span class="line">  pinMode(Left2, INPUT);</span><br><span class="line">  pinMode(Right2, INPUT);</span><br><span class="line">  pinMode(Left3, INPUT);</span><br><span class="line">  pinMode(Right3, INPUT);</span><br><span class="line">  pinMode(beep,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电机输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,LOW);  <span class="comment">// 左电机前进</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">110</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减 </span></span><br><span class="line">  digitalWrite(Right_motor,LOW);  <span class="comment">// 右电机前进</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机前进     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">110</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,HIGH);  <span class="comment">// 左电机前进</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">5</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减  </span></span><br><span class="line">  digitalWrite(Right_motor,LOW);  <span class="comment">// 右电机前进</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机前进     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">130</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left2</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,HIGH);  <span class="comment">// 左电机前进</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">20</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减  </span></span><br><span class="line">  digitalWrite(Right_motor,LOW);  <span class="comment">// 右电机前进</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机前进     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">160</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">turnleft</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,HIGH);  <span class="comment">// 左电机后退</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">150</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">  digitalWrite(Right_motor,LOW);  <span class="comment">// 右电机前进</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机前进     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">120</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">right</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,LOW);  <span class="comment">// 左电机前进</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">130</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减 </span></span><br><span class="line">  digitalWrite(Right_motor,HIGH);  <span class="comment">// 右电机不转</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机PWM输出0     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">5</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">right2</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,LOW);  <span class="comment">// 左电机前进</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">160</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减 </span></span><br><span class="line">  digitalWrite(Right_motor,HIGH);  <span class="comment">// 右电机不转</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机PWM输出0     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">20</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">turnright</span><span class="params">()</span>&#123;</span><br><span class="line">  digitalWrite(Left_motor,LOW);  <span class="comment">// 左电机前进</span></span><br><span class="line">  digitalWrite(Left_motor_pwm,HIGH);  <span class="comment">//左电机PWM     </span></span><br><span class="line">  analogWrite(Left_motor_pwm,<span class="number">120</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">  digitalWrite(Right_motor,HIGH);  <span class="comment">// 右电机后退</span></span><br><span class="line">  digitalWrite(Right_motor_pwm,HIGH);  <span class="comment">// 右电机PWM输出1     </span></span><br><span class="line">  analogWrite(Right_motor_pwm,<span class="number">150</span>);<span class="comment">//PWM比例0~255调速，左右轮差异略增减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Beep</span><span class="params">()</span>&#123;</span><br><span class="line">digitalWrite(beep,HIGH);</span><br><span class="line">delay(<span class="number">50</span>);</span><br><span class="line">digitalWrite(beep,LOW);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//黑线为HIGH</span></span><br><span class="line">  M = digitalRead(Middle);</span><br><span class="line">  L1 = digitalRead(Left1);</span><br><span class="line">  R1 = digitalRead(Right1);</span><br><span class="line">  L2 = digitalRead(Left2);</span><br><span class="line">  R2 = digitalRead(Right2);</span><br><span class="line">  L3 = digitalRead(Left3);</span><br><span class="line">  R3 = digitalRead(Right3);</span><br><span class="line"><span class="comment">//计时=======================================</span></span><br><span class="line"><span class="keyword">if</span>(M==HIGH||L1==HIGH||R1==HIGH)&#123;t=<span class="number">3</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(L2==HIGH||R2==HIGH)&#123;t=<span class="number">3</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(L3==HIGH)&#123;t1=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(R3==HIGH)&#123;t2=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="comment">//电机输出</span></span><br><span class="line"><span class="keyword">if</span> (M == HIGH || (L1 == HIGH &amp;&amp; R1 == HIGH))&#123;go=<span class="number">1</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (L1 == HIGH)&#123;go=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (R1 == HIGH)&#123;go=<span class="number">3</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (L2 == HIGH)&#123;go=<span class="number">4</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (R2 == HIGH)&#123;go=<span class="number">5</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(t1&gt;t2&amp;&amp;t2&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    go=<span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span>(t1&lt;t2&amp;&amp;t1&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    go=<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(go==<span class="number">1</span>)&#123;</span><br><span class="line">    a();&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (go==<span class="number">2</span>)&#123;</span><br><span class="line">    left();&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (go==<span class="number">3</span>)&#123;</span><br><span class="line">    right();&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (go==<span class="number">4</span>)&#123;</span><br><span class="line">    left2();&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (go==<span class="number">5</span>)&#123;</span><br><span class="line">    right2();&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (go==<span class="number">6</span>)&#123;</span><br><span class="line">    turnleft();&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (go==<span class="number">7</span>)&#123;</span><br><span class="line">    turnright();&#125;</span><br><span class="line"></span><br><span class="line">  t1=t1+<span class="number">1</span>;</span><br><span class="line">  t2=t2+<span class="number">1</span>;</span><br><span class="line">  t=t<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;  t  &quot;</span>);</span><br><span class="line">  Serial.print(t);</span><br><span class="line">  Serial.print(<span class="string">&quot;  t1  &quot;</span>);</span><br><span class="line">  Serial.print(t1);</span><br><span class="line">  Serial.print(<span class="string">&quot;  t2  &quot;</span>);</span><br><span class="line">  Serial.print(t2);</span><br><span class="line">  Serial.print(<span class="string">&quot;  go  &quot;</span>);</span><br><span class="line">  Serial.print(go);</span><br><span class="line">  Serial.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>arduino中解析串口字符串</title>
    <url>/2022/arduino-serial-rgb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="串口通信传输RGB数值"><a href="#串口通信传输RGB数值" class="headerlink" title="串口通信传输RGB数值"></a>串口通信传输RGB数值</h2><p>很久很久以前我想做arduino从蓝牙串口接受手机信息调节RGB灯颜色,但是由于字符串处理的困难被迫放弃,上次写了arduino串口函数的文章,有了新的思路…</p>
<p>数据格式:R100G200B255X, 其中X为终止标识</p>
<p><a href="base.apk" title="APP">下载手机APP连接蓝牙并发送RGB数值</a></p>
<p>RGB引脚为9,10,11,串口引脚5(蓝牙TXD),6(蓝牙RXD)</p>
<p>循环读取每一个字符存储在rec<br>如果读取’R’则将后面的字符存储进R字符串,GB同理<br>这里还有个奇怪的问题就是如果没有delay(5);得到的R字符串就会在首位多一个乱码符号，之所以奇怪，是因为G和B不影响，但出于代码的美观和稳定性我还是都加上了delay(5);语句<br>刚开始存储RGB的字符串直接使用atoi()函数转换成数字,但是出现了错误,因为需要先转换成const char*类型,所以改为atoi(R.c_str());</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SoftwareSerial.h&gt;</span></span></span><br><span class="line">String rec=<span class="string">&quot;&quot;</span>,R=<span class="string">&quot;&quot;</span>,G=<span class="string">&quot;&quot;</span>,B=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> r,g,b;</span><br><span class="line"><span class="type">int</span> rr,gg,bb;</span><br><span class="line">SoftwareSerial <span class="title function_">BT</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  BT.begin(<span class="number">9600</span>);</span><br><span class="line">  pinMode(<span class="number">9</span>,OUTPUT); <span class="comment">// PIN 9 (PWM)</span></span><br><span class="line">  pinMode(<span class="number">10</span>,OUTPUT);<span class="comment">// PIN 10 (PWM) </span></span><br><span class="line">  pinMode(<span class="number">11</span>,OUTPUT);<span class="comment">// PIN 11 (PWM)</span></span><br><span class="line">  digitalWrite(<span class="number">9</span>,LOW);</span><br><span class="line">  digitalWrite(<span class="number">10</span>,LOW);</span><br><span class="line">  digitalWrite(<span class="number">11</span>,LOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  rec = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (BT.available() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    rec = <span class="type">char</span>(BT.read());</span><br><span class="line">    Serial.println(rec);</span><br><span class="line">    <span class="keyword">if</span> (rec==<span class="string">&quot;R&quot;</span>)&#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;receved R&quot;</span>);</span><br><span class="line">      delay(<span class="number">5</span>);</span><br><span class="line">      rec = <span class="type">char</span>(BT.read());</span><br><span class="line">      r = <span class="literal">true</span>;</span><br><span class="line">      g = <span class="literal">false</span>;</span><br><span class="line">      b = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rec==<span class="string">&quot;G&quot;</span>)&#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;receved G&quot;</span>);</span><br><span class="line">      delay(<span class="number">5</span>);</span><br><span class="line">      rec = <span class="type">char</span>(BT.read());</span><br><span class="line">      r = <span class="literal">false</span>;</span><br><span class="line">      g = <span class="literal">true</span>;</span><br><span class="line">      b = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rec==<span class="string">&quot;B&quot;</span>)&#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;receved B&quot;</span>);</span><br><span class="line">      delay(<span class="number">5</span>);</span><br><span class="line">      rec = <span class="type">char</span>(BT.read());</span><br><span class="line">      r = <span class="literal">false</span>;</span><br><span class="line">      g = <span class="literal">false</span>;</span><br><span class="line">      b = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rec==<span class="string">&quot;X&quot;</span>)&#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">      r = <span class="literal">false</span>;</span><br><span class="line">      g = <span class="literal">false</span>;</span><br><span class="line">      b = <span class="literal">false</span>;</span><br><span class="line">      rr = atoi(R.c_str());</span><br><span class="line">      gg = atoi(G.c_str());</span><br><span class="line">      bb = atoi(B.c_str());</span><br><span class="line">      Serial.println(rr);</span><br><span class="line">      Serial.println(gg);</span><br><span class="line">      Serial.println(bb);</span><br><span class="line">      R = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      G = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      B = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      analogWrite(<span class="number">9</span>,rr);</span><br><span class="line">      analogWrite(<span class="number">10</span>,gg);</span><br><span class="line">      analogWrite(<span class="number">11</span>,bb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r==<span class="literal">true</span>)R+=rec;</span><br><span class="line">    <span class="keyword">if</span> (g==<span class="literal">true</span>)G+=rec;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="literal">true</span>)B+=rec;</span><br><span class="line">    delay(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派拍摄3D打印延时摄影[顺便写了个arduino电压表]</title>
    <url>/2022/arduino-voltmeter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="arduino电压表"><a href="#arduino电压表" class="headerlink" title="arduino电压表"></a>arduino电压表</h2><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>年初DIY的3D打印机使用12V电源电压,而拍摄延时摄影的树莓派使用5V电压,所以三月份买了一个12v转5v的降压模块[因为沈阳疫情我们小区封控两个多月…所以才到],但是为了保证安全,想用电压表测量一下降压模块的输出电压,于是使用arduino的模拟输入接口来测量0-5V电压,为了提高量程,在淘宝risym旗舰店买了一个电压传感器模块,可以将电压降低5倍,也就是量程提高到0-25V.<br>arduino使用除法时会自动删去小数位,所以用了求余的方法求小数位,并将计算的电压结果通过串口传输给电脑以及显示在OLED屏幕</p>
<h3 id="arduino程序"><a href="#arduino程序" class="headerlink" title="arduino程序"></a>arduino程序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;U8glib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">U8GLIB_SSD1306_128X64 <span class="title function_">u8g</span><span class="params">(U8G_I2C_OPT_NONE|U8G_I2C_OPT_DEV_0)</span>;	<span class="comment">// I2C / TWI </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> val0;</span><br><span class="line"><span class="type">int</span> val1;</span><br><span class="line"><span class="type">char</span> str1[<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> str2[<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> str3[<span class="number">2</span>]=<span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// graphic commands to redraw the complete screen should be placed here  </span></span><br><span class="line">  u8g.setFont(u8g_font_unifont);</span><br><span class="line">  <span class="comment">//u8g.setFont(u8g_font_osb21);</span></span><br><span class="line">  <span class="type">char</span> str[<span class="number">20</span>]=<span class="string">&quot;v=&quot;</span>;</span><br><span class="line">  val = analogRead(<span class="number">0</span>)*<span class="number">25</span>;</span><br><span class="line">  Serial.println(val); </span><br><span class="line">  val0 = val/<span class="number">1024</span>;</span><br><span class="line">  Serial.println(val0); </span><br><span class="line">  val1 = (val%<span class="number">1024</span>)*<span class="number">10</span>/<span class="number">1024</span>;</span><br><span class="line">  Serial.println(val1); </span><br><span class="line">  itoa(val0, str1, <span class="number">10</span>);</span><br><span class="line">  itoa(val1, str2, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(str,str1);</span><br><span class="line">  <span class="built_in">strcat</span>(str,str3);</span><br><span class="line">  <span class="built_in">strcat</span>(str,str2);</span><br><span class="line">  u8g.drawStr( <span class="number">10</span>, <span class="number">35</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  <span class="comment">// flip screen, if required</span></span><br><span class="line">  <span class="comment">// u8g.setRot180();</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// set SPI backup if required</span></span><br><span class="line">  <span class="comment">//u8g.setHardwareBackup(u8g_backup_avr_spi);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// assign default color value</span></span><br><span class="line">  <span class="keyword">if</span> ( u8g.getMode() == U8G_MODE_R3G3B2 ) &#123;</span><br><span class="line">    u8g.setColorIndex(<span class="number">255</span>);     <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( u8g.getMode() == U8G_MODE_GRAY2BIT ) &#123;</span><br><span class="line">    u8g.setColorIndex(<span class="number">3</span>);         <span class="comment">// max intensity</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( u8g.getMode() == U8G_MODE_BW ) &#123;</span><br><span class="line">    u8g.setColorIndex(<span class="number">1</span>);         <span class="comment">// pixel on</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( u8g.getMode() == U8G_MODE_HICOLOR ) &#123;</span><br><span class="line">    u8g.setHiColorByRGB(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// picture loop</span></span><br><span class="line">  u8g.firstPage();  </span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    draw();</span><br><span class="line">  &#125; <span class="keyword">while</span>( u8g.nextPage() );</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// rebuild the picture after some delay</span></span><br><span class="line">  delay(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测量结果"><a href="#测量结果" class="headerlink" title="测量结果"></a>测量结果</h3><p>测量得知电压在5.0-5.4之间浮动,多数时间稳定在5.1V,可以给树莓派供电.</p>
<img src="/2022/arduino-voltmeter/arduino-voltmeter.jpg" class="" title="测量照片">

<h2 id="树莓派拍摄3D打印延时摄影"><a href="#树莓派拍摄3D打印延时摄影" class="headerlink" title="树莓派拍摄3D打印延时摄影"></a>树莓派拍摄3D打印延时摄影</h2><h3 id="每层拍照"><a href="#每层拍照" class="headerlink" title="每层拍照"></a>每层拍照</h3><p>使用限位开关检测打印头是否回到原点.若回到原点则触发拍照,得到每一层时候的照片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> picamera <span class="keyword">import</span> PiCamera</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">GPIO.setmode(GPIO.BOARD) </span><br><span class="line">GPIO.setup(<span class="number">11</span>, GPIO.IN, pull_up_down=GPIO.PUD_UP)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;begin..&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">False</span> <span class="keyword">and</span> <span class="keyword">not</span> GPIO.<span class="built_in">input</span>(<span class="number">11</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;heating...&quot;</span>+<span class="built_in">str</span>(j))</span><br><span class="line">    j=j+<span class="number">1</span></span><br><span class="line">camera = PiCamera()</span><br><span class="line">camera.start_preview()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;start&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> GPIO.<span class="built_in">input</span>(<span class="number">11</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        camera.capture(<span class="string">&#x27;/home/pi/Desktop/cam_3D/cam_3D/image%s.jpg&#x27;</span> % i)</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="每层照片合成视频"><a href="#每层照片合成视频" class="headerlink" title="每层照片合成视频"></a>每层照片合成视频</h3><p>这一步建议电脑上完成否则可能要运行一段时间<br>记得把size改成实际照片的尺寸,另外如果照片个数多于1000也要增加for循环的次数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">size = (<span class="number">1024</span>,<span class="number">768</span>)</span><br><span class="line">videowrite = cv2.VideoWriter(<span class="string">r&#x27;test.mp4&#x27;</span>,-<span class="number">1</span>,<span class="number">30</span>,size)</span><br><span class="line">img_array=[]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> [<span class="string">r&#x27;cam_3D\image&#123;0&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>)]:</span><br><span class="line">    img = cv2.imread(filename)</span><br><span class="line">    <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(filename + <span class="string">&quot; is error!&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    img_array.append(img)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    videowrite.write(img_array[i])</span><br><span class="line">videowrite.release()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;finished&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>3D打印</tag>
        <tag>显示屏</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>使用esp32远程web控制</title>
    <url>/2022/auto-access/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要做一个远程控制的门禁，最好可以公网连接[所以下面的server.py在公网服务器运行]，还要有权限管理，和进入行为记录。所以。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><p>这个是在公网服务器上运行的程序，使用flask框架创建web网页服务，接收到提交的数据之后通过全局变量，使面向esp32连接的服务端发送指定数据实现远程开门。<br><code>server.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, render_template, session</span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">access = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;QWERTYUIOP&#x27;</span>  <span class="comment"># 对用户信息加密</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">socket_server</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> access</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;新线程已开启&#x27;</span>)</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, xxx))</span><br><span class="line">    s.listen()</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c, addr = s.accept()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;收到连接：&#x27;</span>+<span class="built_in">str</span>(addr))</span><br><span class="line">            <span class="keyword">if</span> access == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;门禁已开启&#x27;</span>)</span><br><span class="line">                c.send(<span class="string">&#x27;1&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                access = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c.send(<span class="string">&#x27;0&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            c.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">global</span> access</span><br><span class="line">    d = <span class="built_in">open</span>(<span class="string">&quot;dictionary.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    json_dictionary = d.read()</span><br><span class="line">    d.close()</span><br><span class="line">    dictionary = json.loads(json_dictionary)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    user = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    reason = request.form.get(<span class="string">&#x27;reason&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> reason==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, msg=<span class="string">&#x27;事由不能为空&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">in</span> dictionary <span class="keyword">and</span> pwd == dictionary[user]:</span><br><span class="line">        session[<span class="string">&#x27;user_info&#x27;</span>] = user</span><br><span class="line">        access = <span class="number">1</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;note.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;时间:&quot;</span>+<span class="built_in">str</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime()))+<span class="string">&quot;,姓名：&quot;</span>+user+<span class="string">&quot;,事由：&quot;</span>+reason+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户&#x27;</span>+user+<span class="string">&#x27;已登录&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, msg=<span class="string">&#x27;姓名或密码输入错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">global</span> access</span><br><span class="line">    user_info = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_info:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The door is opened now! Welcome!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout_</span>():</span><br><span class="line">    <span class="keyword">del</span> session[<span class="string">&#x27;user_info&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _thread.start_new_thread(socket_server, (<span class="number">0</span>,))</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><p>在<code>templates/</code>路径创建html文件：<br><code>login.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span>  <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>门禁权限申请<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>提交申请信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h3</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h3</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> &gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事由<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reason&quot;</span> &gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;登录&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时创建空白的<code>note.txt</code>文件，用于记录，记录不会被删除，每次新的记录都会被追加在末尾。</p>
<h3 id="esp32单片机"><a href="#esp32单片机" class="headerlink" title="esp32单片机"></a>esp32单片机</h3><h4 id="micro-python"><a href="#micro-python" class="headerlink" title="micro python"></a>micro python</h4><p>第一次实操micro python，感觉很棒hhh<br><code>boot.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> network <span class="keyword">as</span> n</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ssid=<span class="string">&quot;xxx&quot;</span> <span class="comment">#WiFi名</span></span><br><span class="line">passwd=<span class="string">&quot;xxx&quot;</span> <span class="comment">#WiFi密码</span></span><br><span class="line">host=<span class="string">&quot;xxx&quot;</span> <span class="comment">#服务器IP地址</span></span><br><span class="line">port=xxx <span class="comment">#服务器端口</span></span><br><span class="line">wlan=<span class="literal">None</span></span><br><span class="line">s=<span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    wlan=n.WLAN(n.STA_IF)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始连接WIFI&quot;</span>)</span><br><span class="line">    wlan.active(<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#关闭连接，确保没有任何连接，以免失败</span></span><br><span class="line">    wlan.disconnect()</span><br><span class="line">    wlan.connect(ssid,passwd)</span><br><span class="line">    <span class="comment">#确保WiFi连接成功</span></span><br><span class="line">    <span class="keyword">while</span>(wlan.ifconfig()[<span class="number">0</span>]==<span class="string">&#x27;0.0.0.0&#x27;</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;连接WIFI完成&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#建立socket连接</span></span><br><span class="line">        s = socket.socket()</span><br><span class="line">        <span class="comment">#Socket属性</span></span><br><span class="line">        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">#连接服务器</span></span><br><span class="line">        s.connect((host,port))</span><br><span class="line">        <span class="comment">#发送数据</span></span><br><span class="line">        <span class="comment">#print(&quot;TCP Connected to:&quot;, host, &quot;:&quot;, port)</span></span><br><span class="line">        data = s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        <span class="keyword">if</span> data==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;开门&#x27;</span>)</span><br><span class="line">        s.close()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
<h4 id="c"><a href="#c" class="headerlink" title="c"></a>c</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* id=<span class="string">&quot;xxx&quot;</span>;   <span class="comment">//定义两个字符串指针常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* psw=<span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">const</span> IPAddress <span class="title function_">serverIP</span><span class="params">(x,x,x,x)</span>;</span><br><span class="line"><span class="type">uint16_t</span> serverPort = xxx;</span><br><span class="line">WiFiClient client;</span><br><span class="line"><span class="type">int</span> freq = <span class="number">50</span>;      <span class="comment">// 频率(20ms周期)</span></span><br><span class="line"><span class="type">int</span> channel = <span class="number">8</span>;    <span class="comment">// 通道(高速通道（0 ~ 7）由80MHz时钟驱动，低速通道（8 ~ 15）由 1MHz 时钟驱动。)</span></span><br><span class="line"><span class="type">int</span> resolution = <span class="number">8</span>; <span class="comment">// 分辨率</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> led = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculatePWM</span><span class="params">(<span class="type">int</span> degree)</span>&#123;</span><br><span class="line">  <span class="comment">//20ms周期，高电平0.5-2.5ms，对应0-180度角度</span></span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> deadZone = <span class="number">6.4</span>;<span class="comment">//对应0.5ms（0.5ms/(20ms/256）)</span></span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> max = <span class="number">32</span>;<span class="comment">//对应2.5ms</span></span><br><span class="line">  <span class="keyword">if</span> (degree &lt; <span class="number">0</span>)</span><br><span class="line">    degree = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (degree &gt; <span class="number">180</span>)</span><br><span class="line">    degree = <span class="number">180</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)(((max - deadZone) / <span class="number">180</span>) * degree + deadZone);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  ledcSetup(channel, freq, resolution);</span><br><span class="line">  ledcAttachPin(led, channel);</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.setSleep(<span class="literal">false</span>);</span><br><span class="line">  WiFi.begin(id,psw);</span><br><span class="line">  <span class="keyword">while</span>(WiFi.status()!=WL_CONNECTED)&#123;</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Serial.println(<span class="string">&quot;正在连接...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;连接成功！&quot;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;IP Address:&quot;</span>);</span><br><span class="line">  Serial.println(WiFi.localIP());</span><br><span class="line">  ledcWrite(channel, calculatePWM(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;尝试访问服务器&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (client.connect(serverIP, serverPort))&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (client.connected() || client.available())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (client.available()) <span class="comment">//如果有数据可读取</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//String line = client.readStringUntil(&#x27;\n&#x27;); //读取数据到换行符</span></span><br><span class="line">                String line = client.readString();</span><br><span class="line">                Serial.print(<span class="string">&quot;读取到数据：&quot;</span>);</span><br><span class="line">                Serial.println(line);</span><br><span class="line">                <span class="keyword">if</span> (line.indexOf(<span class="string">&#x27;1&#x27;</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">                  Serial.println(<span class="string">&quot;开门&quot;</span>);</span><br><span class="line">                  ledcWrite(channel, calculatePWM(<span class="number">180</span>));</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ledcWrite(channel, calculatePWM(<span class="number">0</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Serial.println(&quot;关闭当前连接&quot;);</span></span><br><span class="line">        client.stop(); <span class="comment">//关闭客户端</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Serial.println(&quot;访问失败&quot;);</span></span><br><span class="line">        client.stop(); <span class="comment">//关闭客户端</span></span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>模型训练的数据集的人力节约[偷懒]方案</title>
    <url>/2022/auto-marking/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言-挖坑"><a href="#前言-挖坑" class="headerlink" title="前言[挖坑]"></a>前言[挖坑]</h1><p><del>这是我第二次打字写前言，因为前一次鼠标掉到地上，刚好按到</del><code>X</code><del>关掉了编辑器…….</del><br><del>[北理工破防音]现在是6月21号，晚上的23:10，星期二，<strong>艹</strong></del><br>今天一整个下午和晚上都在做模型训练的数据集的标注，就是在一张图片里框选出要识别的内容[类似手画人脸识别时候脸周围的框]，一共4000张。下午请一朋友吃饭<del>连哄带骗</del>替我弄了1500张，<del>临走时我问明天中午还请他吃饭怎么样他连忙拒绝</del>，总之就是这一过程极其痛苦emm<del>[突然想起欠lxy一顿饭，可以再连哄带骗让他给我打工一次]</del><br>自然我这种懒虫会想办法减少自己的工作量，于是。。。</p>
<h1 id="键盘监听与模拟-第一步工作"><a href="#键盘监听与模拟-第一步工作" class="headerlink" title="键盘监听与模拟[第一步工作]"></a>键盘监听与模拟[第一步工作]</h1><p>这个就是随手一写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyboard</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    keyboard.wait(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    pyautogui.keyDown(<span class="string">&quot;ctrl&quot;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&quot;s&quot;</span>)</span><br><span class="line">    pyautogui.keyUp(<span class="string">&quot;ctrl&quot;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&quot;right&quot;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&quot;r&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>当按下空格时，就会自动按下ctrl+s来保存标注内容，按下右键切换下一张，按下r进入矩形框选模式[空格本身是退出框选进行移动的快捷键，但是空格用起来舒服hhh所以加上了这个]</p>
<p>但是这样仍然需要手动鼠标拖动进行框选，虽然可以自动保存和翻页，但是还是很累，于是有了这个设想。<br>能不能这样，先拍几张背景图和识别目标的照片，然后对目标图做随机的仿射变换，RGB值随机变化模拟不同光照环境，再进行随机的鱼眼效果处理来更加逼近真实相机拍摄效果，最后叠加在随机的背景图[对背景图做随机RGB波动]的随机位置，根据这组随机数就可以自动计算出应该框选的坐标，于是可以自动同时完成训练数据集的生成和标注。<br>这样不仅不用人工标注数据集，甚至不需要拍摄大量照片作为数据集</p>
<p>挖坑完毕，开始肝！</p>
<h1 id="最终全自动方案"><a href="#最终全自动方案" class="headerlink" title="最终全自动方案"></a>最终全自动方案</h1><p>不着急，坑慢慢填，没看见前面还是ros笔记的文章还空着吗</p>
<p>现在的进度：导入opencv库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure>
<p>好了本文结束[doge]</p>
<h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>下面步入正题，首先是对识别目标的仿射变换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;auto-marking.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">rows, cols = img.shape</span><br><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">200</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>]])</span><br><span class="line">dst = cv2.warpAffine(img, M, (cols, rows))</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>, dst)</span><br><span class="line">k = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>这里仅仅进行了平移操作，主要区别在于M的定义：</p>
<h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">200</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>]])</span><br></pre></td></tr></table></figure>
<p>经过仿射变换后的点的坐标是（x+200,y+100），即将整个图像平移（200,100）</p>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = cv2.getRotationMatrix2D((cols / <span class="number">2</span>, rows / <span class="number">2</span>), <span class="number">90</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>cv2.getRotationMatrix2D</strong>函数可以生成图像旋转的所需要的矩阵<br>第一个参数是旋转中心，第二个是旋转角度[正数逆时针]，第三个是放大倍数</p>
<h3 id="三点定位"><a href="#三点定位" class="headerlink" title="三点定位"></a>三点定位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.getAffineTransform(src,dst)  <span class="comment">#返回2*3的转变矩阵</span></span><br><span class="line">    　 <span class="comment">#参数：</span></span><br><span class="line">       　　 <span class="comment">#src：原图像中的三组坐标，如np.float32([[50,50],[200,50],[50,200]])</span></span><br><span class="line">        　　<span class="comment">#dst: 转换后的对应三组坐标，如np.float32([[10,100],[200,50],[100,250]])</span></span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原图像中的三组坐标</span></span><br><span class="line">pts1 = np.float32([[<span class="number">0</span>, <span class="number">0</span>] , [<span class="number">534</span>, <span class="number">0</span>], [<span class="number">534</span>, <span class="number">300</span>]])</span><br><span class="line"><span class="comment"># 转换后的三组对应坐标</span></span><br><span class="line">pts2 = np.float32([[<span class="number">300</span>, <span class="number">0</span>], [<span class="number">300</span>, <span class="number">434</span>], [<span class="number">0</span>, <span class="number">534</span>]])</span><br><span class="line"><span class="comment"># 计算仿射变换矩阵</span></span><br><span class="line">M = cv2.getAffineTransform(pts1, pts2)</span><br><span class="line"><span class="comment"># 执行变换</span></span><br><span class="line">img = cv2.warpAffine(img, M ,(<span class="number">300</span>, <span class="number">534</span>))</span><br></pre></td></tr></table></figure>

<img src="/2022/auto-marking/%E4%B8%89%E7%82%B9.png" class="" title="三点变换">

<h2 id="透视变换-3维"><a href="#透视变换-3维" class="headerlink" title="透视变换[3维]"></a>透视变换[3维]</h2><p>与之前不同的是，我们需要使用另外两个方法getPerspectiveTransform()和warpPerspective()，仿射变换矩阵M变成了3*3矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.getPerspectiveTransform()   返回<span class="number">3</span>*<span class="number">3</span>的转变矩阵</span><br><span class="line">        参数：    </span><br><span class="line">            src：原图像中的四组坐标，如 np.float32([[<span class="number">56</span>,<span class="number">65</span>],[<span class="number">368</span>,<span class="number">52</span>],[<span class="number">28</span>,<span class="number">387</span>],[<span class="number">389</span>,<span class="number">390</span>]])</span><br><span class="line">            dst: 转换后的对应四组坐标，如np.float32([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">300</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">300</span>],[<span class="number">300</span>,<span class="number">300</span>]])</span><br><span class="line"></span><br><span class="line">cv2.warpPerspective()</span><br><span class="line">        参数：    </span><br><span class="line">            src: 图像对象</span><br><span class="line">            M：<span class="number">3</span>*<span class="number">3</span> transformation matrix (转变矩阵)</span><br><span class="line">            dsize：输出矩阵的大小，注意格式为（cols，rows）  即width对应cols，height对应rows</span><br><span class="line">            flags：可选，插值算法标识符，有默认值INTER_LINEAR</span><br><span class="line">            borderMode：可选， 边界像素模式，有默认值BORDER_CONSTANT </span><br><span class="line">            borderValue:可选，边界取值，有默认值Scalar()即<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原图的四组顶点坐标</span></span><br><span class="line">pts3D1 = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">534</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">300</span>], [<span class="number">534</span>, <span class="number">300</span>]])</span><br><span class="line"><span class="comment"># 转换后的四组坐标</span></span><br><span class="line">pts3D2 = np.float32([[<span class="number">100</span>, <span class="number">100</span>], [<span class="number">434</span>, <span class="number">100</span>], [<span class="number">0</span>, <span class="number">300</span>], [<span class="number">534</span>, <span class="number">300</span>]])</span><br><span class="line"><span class="comment"># 计算透视放射矩阵</span></span><br><span class="line">M = cv2.getPerspectiveTransform(pts3D1, pts3D2)</span><br><span class="line"><span class="comment"># 执行变换</span></span><br><span class="line">img = cv2.warpPerspective(img, M, (<span class="number">550</span>, <span class="number">400</span>))</span><br></pre></td></tr></table></figure>
<img src="/2022/auto-marking/3%E7%BB%B4.png" class="" title="透视变换">

<h2 id="图像叠加-mask掩模"><a href="#图像叠加-mask掩模" class="headerlink" title="图像叠加-mask掩模"></a>图像叠加-mask掩模</h2><p>由于经过变换后的图像周围有黑边，所以需要经过处理去黑边再叠加</p>
<p>如果直接叠加两个图像，图片将改变颜色<br>所以<code>cv2.add()</code>并不可行<br>如果融合两个图像，会得到透明的效果<br>所以<code>cv2.addWeighted()</code>也不可行<br>实现的方法是图像mask掩模</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">x=<span class="number">500</span></span><br><span class="line">y=<span class="number">500</span></span><br><span class="line"></span><br><span class="line">img1 = cv2.imread(<span class="string">&quot;332.png&quot;</span>)  <span class="comment"># 读取背景图</span></span><br><span class="line">img2 = cv2.imread(<span class="string">&quot;233.png&quot;</span>)  <span class="comment"># 读取要填充的图像</span></span><br><span class="line">rows, cols, channels = img2.shape</span><br><span class="line">roi = img1[x:rows+x, y:cols+y]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始图像转化为灰度值</span></span><br><span class="line">img2gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img2gray&#x27;</span>, img2gray)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二值化，得到ROI区域掩模</span></span><br><span class="line">ret, mask = cv2.threshold(img2gray, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;mask&#x27;</span>, mask)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ROI掩模区域反向掩模</span></span><br><span class="line">mask_inv = cv2.bitwise_not(mask)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;mask_inv&#x27;</span>, mask_inv)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 掩模显示背景</span></span><br><span class="line">img1_bg = cv2.bitwise_and(roi, roi, mask=mask)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img1_bg&#x27;</span>, img1_bg)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 掩模显示前景</span></span><br><span class="line">img2_fg = cv2.bitwise_and(img2, img2, mask=mask_inv)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img2_fg&#x27;</span>, img2_fg)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前背景图像叠加</span></span><br><span class="line">dst = cv2.add(img1_bg, img2_fg)</span><br><span class="line">img1[x:rows+x, y:cols+y] = dst</span><br><span class="line">cv2.imshow(<span class="string">&#x27;res&#x27;</span>, img1)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>实现效果:csdn截图叠加在物理课截屏上</p>
<img src="/2022/auto-marking/mask.png" class="" title="mask">

<p>在原作者文章基础上做了增加x,y参数的改进，原作者效果图：(图片即原文链接)<br>并且由于原文章背景白色而仿射变换出现的背景为黑色，所以后面代码做了相应调整</p>
<p><a href="https://blog.csdn.net/l641208111/article/details/106202138?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165587477616782388089921%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165587477616782388089921&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-106202138-null-null.142%5Ev20%5Ehuaweicloudv1,157%5Ev15%5Enew_3&utm_term=opencv%E5%9B%BE%E7%89%87%E5%8F%A0%E5%8A%A0python&spm=1018.2226.3001.4187" title="原文效果"><img src="https://img-blog.csdnimg.cn/20200518222637855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2w2NDEyMDgxMTE=,size_16,color_FFFFFF,t_70" alt="原文效果" title="原文效果"></a></p>
<h2 id="随机缩放"><a href="#随机缩放" class="headerlink" title="随机缩放"></a>随机缩放</h2><p><a href="http://triority.cc/2022/05/13/python-opencv%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E7%BC%A9%E6%94%BE" title="opencv笔记关于缩放的内容">opencv笔记关于缩放的内容</a></p>
<h2 id="RGB随机化"><a href="#RGB随机化" class="headerlink" title="RGB随机化"></a>RGB随机化</h2><p>实际拍摄中不可能光照等环境完全相同，颜色必然有一定偏差，所以这必须模拟出来</p>
<h3 id="亮度对比度"><a href="#亮度对比度" class="headerlink" title="亮度对比度"></a>亮度对比度</h3><p>实在没啥意思直接复制了一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">alpha = <span class="number">0.3</span></span><br><span class="line">beta = <span class="number">80</span></span><br><span class="line">img_path = <span class="string">&quot;food.jpg&quot;</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line">img2 = cv2.imread(img_path)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateAlpha</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> alpha, img, img2</span><br><span class="line">    alpha = cv2.getTrackbarPos(<span class="string">&#x27;Alpha&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    alpha = alpha * <span class="number">0.01</span></span><br><span class="line">    img = np.uint8(np.clip((alpha * img2 + beta), <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateBeta</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> beta, img, img2</span><br><span class="line">    beta = cv2.getTrackbarPos(<span class="string">&#x27;Beta&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    img = np.uint8(np.clip((alpha * img2 + beta), <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;Alpha&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">300</span>, updateAlpha)</span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;Beta&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">255</span>, updateBeta)</span><br><span class="line">cv2.setTrackbarPos(<span class="string">&#x27;Alpha&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">cv2.setTrackbarPos(<span class="string">&#x27;Beta&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<img src="/2022/auto-marking/%E4%BA%AE%E5%BA%A6.png" class="" title="亮度调试">

<h3 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h3><p>再随手copy一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">g_hls_h = []  <span class="comment"># 图片分量 hls</span></span><br><span class="line">g_hls_l = []</span><br><span class="line">g_hls_s = []</span><br><span class="line"><span class="comment"># 滑动设置值</span></span><br><span class="line">g_diff_h, g_diff_l, g_diff_s = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改图片各分量 组合成新图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_hls</span>():</span><br><span class="line">    <span class="keyword">global</span> g_hls_h, g_hls_l, g_hls_s, g_diff_h, g_diff_l, g_diff_s</span><br><span class="line"></span><br><span class="line">    <span class="comment"># h分量</span></span><br><span class="line">    hls_hf = g_hls_h.astype(np.<span class="built_in">float</span>)</span><br><span class="line">    hls_hf += g_diff_h</span><br><span class="line">    hls_hf[hls_hf &gt; <span class="number">180</span>] -= <span class="number">180</span>  <span class="comment"># 超过180</span></span><br><span class="line">    hls_hf[hls_hf &lt; <span class="number">0</span>] += <span class="number">180</span>  <span class="comment"># 小于0</span></span><br><span class="line">    new_hls_h = hls_hf.astype(<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># l分量</span></span><br><span class="line">    hls_lf = g_hls_l.astype(np.<span class="built_in">float</span>)</span><br><span class="line">    hls_lf += g_diff_l</span><br><span class="line">    hls_lf[hls_lf &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    hls_lf[hls_lf &gt; <span class="number">255</span>] = <span class="number">255</span></span><br><span class="line">    new_hls_l = hls_lf.astype(<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># s分量</span></span><br><span class="line">    hls_ls = g_hls_s.astype(np.<span class="built_in">float</span>)</span><br><span class="line">    hls_ls += g_diff_s</span><br><span class="line">    hls_ls[hls_ls &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    hls_ls[hls_ls &gt; <span class="number">255</span>] = <span class="number">255</span></span><br><span class="line">    new_hls_s = hls_ls.astype(<span class="string">&quot;uint8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重新组合新图片 并转换成BGR图片</span></span><br><span class="line">    new_bgr = cv.cvtColor(cv.merge([new_hls_h, new_hls_l, new_hls_s]), cv.COLOR_HLS2BGR)</span><br><span class="line">    cv.imshow(<span class="string">&quot;image&quot;</span>, new_bgr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># h分量 值修改</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_value_h</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> g_diff_h</span><br><span class="line">    value = cv.getTrackbarPos(<span class="string">&quot;value_h&quot;</span>, <span class="string">&quot;image&quot;</span>)</span><br><span class="line">    value = (value - <span class="number">180</span>)</span><br><span class="line">    g_diff_h = value</span><br><span class="line">    change_hls()</span><br><span class="line"></span><br><span class="line"><span class="comment"># l分量 值修改</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_value_l</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> g_diff_l</span><br><span class="line">    value = cv.getTrackbarPos(<span class="string">&quot;value_l&quot;</span>, <span class="string">&quot;image&quot;</span>) * <span class="number">2</span></span><br><span class="line">    value -= <span class="number">255</span></span><br><span class="line">    g_diff_l = value</span><br><span class="line">    change_hls()</span><br><span class="line"></span><br><span class="line"><span class="comment"># s分量 值修改</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_value_s</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> g_diff_s</span><br><span class="line">    value = cv.getTrackbarPos(<span class="string">&quot;value_s&quot;</span>, <span class="string">&quot;image&quot;</span>) * <span class="number">2</span></span><br><span class="line">    value -= <span class="number">255</span></span><br><span class="line">    g_diff_s = value</span><br><span class="line">    change_hls()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> g_hls_h, g_hls_l, g_hls_s</span><br><span class="line">    img_org = cv.imread(<span class="string">&quot;food.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hls分量拆分</span></span><br><span class="line">    hls = cv.cvtColor(img_org, cv.COLOR_BGR2HLS)</span><br><span class="line">    g_hls_h = hls[:, :, <span class="number">0</span>]</span><br><span class="line">    g_hls_l = hls[:, :, <span class="number">1</span>]</span><br><span class="line">    g_hls_s = hls[:, :, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(img_org.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 滑动条创建、设置初始值</span></span><br><span class="line">    cv.namedWindow(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">    cv.createTrackbar(<span class="string">&quot;value_h&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="number">0</span>, <span class="number">360</span>, on_value_h)</span><br><span class="line">    cv.createTrackbar(<span class="string">&quot;value_l&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="number">0</span>, <span class="number">255</span>, on_value_l)</span><br><span class="line">    cv.createTrackbar(<span class="string">&quot;value_s&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="number">0</span>, <span class="number">255</span>, on_value_s)</span><br><span class="line">    cv.setTrackbarPos(<span class="string">&quot;value_h&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="number">180</span>)</span><br><span class="line">    cv.setTrackbarPos(<span class="string">&quot;value_l&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="number">127</span>)</span><br><span class="line">    cv.setTrackbarPos(<span class="string">&quot;value_s&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="number">127</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        key = cv.waitKey(<span class="number">50</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">27</span>:  <span class="comment"># 退出</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<img src="/2022/auto-marking/%E5%AF%92%E5%86%B0%E5%A0%A1.png" class="" title="《寒冰堡》">

<h2 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h2><p>有的时候相机拍摄会有模糊现象，so：<br>以下内容引自我博客的文章<a href="http://triority.cc/2022/05/13/python-opencv%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" title="opencv学习笔记">opencv学习笔记</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中值滤波</span></span><br><span class="line"><span class="comment">#其中5表示在中心点5*5范围内计算,可改为大于1的奇数</span></span><br><span class="line">result = cv2.medianBlur(image,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#高斯滤波</span></span><br><span class="line">cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">1.5</span>)</span><br><span class="line"><span class="comment">#均值滤波</span></span><br><span class="line">cv2.blur(img,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 双边滤波</span></span><br><span class="line">cv2.bilateralFilter(img,<span class="number">9</span>,<span class="number">75</span>,<span class="number">75</span>)</span><br></pre></td></tr></table></figure>
<p>后面代码采用的方式是随机大小的均值滤波。</p>
<h2 id="整合以上"><a href="#整合以上" class="headerlink" title="整合以上"></a>整合以上</h2><p>对图像的处理已经十分逼近实际拍摄情况，下一步就是综合全部编写程序了</p>
<h3 id="仿射变换参数合理性判断算法"><a href="#仿射变换参数合理性判断算法" class="headerlink" title="仿射变换参数合理性判断算法"></a>仿射变换参数合理性判断算法</h3><p>首先，使用随机数进行仿射变换时，有可能随机得到的四边形的凹四边形，仿射变换将会出现意外效果，为了判断四边形是否为凸四边形，我的方法是连接对角线，如果其余两点在线段两边则为凸。判断点是否在线段两边，采用向量叉积的方式，如果两组两个向量叉积异号则为在线段两侧，具体计算方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((x2-x1)*(y4-y1)-(y2-y1)*(x4-x1))*((x3-x1)*(y4-y1)-(y3-y1)*(x4-x1))&lt;<span class="number">0</span> <span class="keyword">and</span> ((x1-x2)*(y3-y2)-(y1-y2)*(x3-x2))*((x4-x2)*(y3-y2)-(y4-y2)*(x3-x2))&lt;<span class="number">0</span> :</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="框选坐标计算算法"><a href="#框选坐标计算算法" class="headerlink" title="框选坐标计算算法"></a>框选坐标计算算法</h3><p>虽然经过仿射变换，但是图形比例不变，中点依然在对边中点连线的交点，此点即为矩形边框中点。矩形长宽可根据随机数生成四边形的最小外包矩形的一定比例计算，同样由于仿射变换图形比例不变，该比例具体数值即为原图里汉堡占整个图片的大小比例。</p>
<p>求框选长宽：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xx = <span class="built_in">max</span>(x2, x4) - <span class="built_in">min</span>(x1, x3)</span><br><span class="line">yy = <span class="built_in">max</span>(y3, y4) - <span class="built_in">min</span>(x1, x2)</span><br></pre></td></tr></table></figure>

<p>求两直线交点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_abc_from_line_2d</span>(<span class="params">x0, y0, x1, y1</span>):</span><br><span class="line">    a = y0 - y1</span><br><span class="line">    b = x1 - x0</span><br><span class="line">    c = x0*y1 - x1*y0</span><br><span class="line">    <span class="keyword">return</span> a, b, c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_line_cross_point</span>(<span class="params">line1, line2</span>):</span><br><span class="line">    <span class="comment"># x1y1x2y2</span></span><br><span class="line">    a0, b0, c0 = calc_abc_from_line_2d(*line1)</span><br><span class="line">    a1, b1, c1 = calc_abc_from_line_2d(*line2)</span><br><span class="line">    D = a0 * b1 - a1 * b0</span><br><span class="line">    <span class="keyword">if</span> D == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    x = (b0 * c1 - b1 * c0) / D</span><br><span class="line">    y = (a1 * c0 - a0 * c1) / D</span><br><span class="line">    <span class="comment"># print(x, y)</span></span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># x1y1x2y2</span></span><br><span class="line">    line1 = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">10</span>]</span><br><span class="line">    line2 = [<span class="number">5</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>]</span><br><span class="line">    cross_pt = get_line_cross_point(line1, line2)</span><br><span class="line">    <span class="built_in">print</span>(cross_pt)</span><br></pre></td></tr></table></figure>

<p>按照合适的比例绘制矩形框：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.rectangle(img, (<span class="built_in">round</span>(x0-xx/<span class="number">4</span>), <span class="built_in">round</span>(y0-yy/<span class="number">2.5</span>)), (<span class="built_in">round</span>(x0+xx/<span class="number">4</span>), <span class="built_in">round</span>(y0+yy/<span class="number">2.5</span>)), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<img src="/2022/auto-marking/%E9%BB%91%E8%89%B2%E8%83%8C%E6%99%AF%E6%A0%87%E6%B3%A8.png" class="" title="黑色背景标注">

<p>这是已经完成的代码：</p>
<h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> funcs <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">times = <span class="number">1</span></span><br><span class="line">photos = os.listdir(<span class="string">r&#x27;photo&#x27;</span>)</span><br><span class="line">backs = os.listdir(<span class="string">r&#x27;back&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_maker</span>(<span class="params">img, back, img_copy</span>):</span><br><span class="line">    <span class="comment"># 亮度</span></span><br><span class="line">    img = random_brightness(img)</span><br><span class="line">    back = random_brightness(back)</span><br><span class="line">    <span class="comment"># 模糊</span></span><br><span class="line">    img = random_blur(img)</span><br><span class="line">    <span class="comment"># 缩放</span></span><br><span class="line">    r = random.randint(<span class="number">5</span>, <span class="number">20</span>) / <span class="number">10</span></span><br><span class="line">    img = cv2.resize(img, (<span class="number">0</span>, <span class="number">0</span>), fx=r, fy=r, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    img_copy = cv2.resize(img_copy, (<span class="number">0</span>, <span class="number">0</span>), fx=r, fy=r, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    <span class="comment"># 仿射变换</span></span><br><span class="line">    img, points = random_horizontally_affine(img)</span><br><span class="line">    xc, yc, wc, hc = points_affine(img_copy, points)</span><br><span class="line">    <span class="comment"># 叠加</span></span><br><span class="line">    back, x, y = overlay(img, back)</span><br><span class="line">    xmin, ymin = (x + xc, y + yc)</span><br><span class="line">    xmax, ymax = (x + xc + wc, y + yc + hc)</span><br><span class="line">    <span class="keyword">return</span> back, xmin, ymin, xmax, ymax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> photos:</span><br><span class="line">    datas = os.listdir(<span class="string">&#x27;photo\\&#x27;</span> + i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> backs:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, times):</span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">                img = cv2.imread(<span class="string">&#x27;photo\\&#x27;</span> + i + <span class="string">&#x27;\\&#x27;</span> + j)</span><br><span class="line">                back = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + k)</span><br><span class="line">                rbn = backs[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(backs) - <span class="number">1</span>)]</span><br><span class="line">                back[<span class="number">0</span>:<span class="number">539</span>, <span class="number">960</span>:<span class="number">1919</span>] = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + rbn)[<span class="number">0</span>:<span class="number">539</span>, <span class="number">960</span>:<span class="number">1919</span>]</span><br><span class="line">                rbn = backs[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(backs) - <span class="number">1</span>)]</span><br><span class="line">                back[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">0</span>:<span class="number">969</span>] = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + rbn)[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">0</span>:<span class="number">969</span>]</span><br><span class="line">                rbn = backs[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(backs) - <span class="number">1</span>)]</span><br><span class="line">                back[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">960</span>:<span class="number">1919</span>] = cv2.imread(<span class="string">&#x27;back\\&#x27;</span> + rbn)[<span class="number">540</span>:<span class="number">1079</span>, <span class="number">960</span>:<span class="number">1919</span>]</span><br><span class="line">                img_copy = cv2.imread(<span class="string">&#x27;photo_copy\\&#x27;</span> + i + <span class="string">&#x27;\\&#x27;</span> + j)</span><br><span class="line">                save, xmin, ymin, xmax, ymax = data_maker(img, back, img_copy)</span><br><span class="line">                cv2.imwrite(<span class="string">&quot;F:\\out\\photo_output\\&quot;</span> + i + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;.jpg&#x27;</span>, save)</span><br><span class="line">                cv2.rectangle(save, (xmin, ymin), (xmax, ymax), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                cv2.imwrite(<span class="string">&quot;F:\\out\\photo_marked\\&quot;</span> + i + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;.jpg&#x27;</span>, save)</span><br><span class="line">                <span class="built_in">print</span>((m, xmin, ymin, xmax, ymax))</span><br><span class="line">                txt = xml_save(<span class="built_in">str</span>(m) + <span class="string">&#x27;.jpg&#x27;</span>, <span class="built_in">str</span>(xmin), <span class="built_in">str</span>(ymin), <span class="built_in">str</span>(xmax), <span class="built_in">str</span>(ymax))</span><br><span class="line">                path = <span class="string">&#x27;F:\\out\\outputs\\&#x27;</span> + i + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>(m) + <span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">                fw = <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                fw.write(txt)</span><br><span class="line">                fw.close()</span><br><span class="line">                xx = xmax - xmin</span><br><span class="line">                yy = ymax - ymin</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0.2</span> &lt; xx / yy &lt; <span class="number">2</span>:</span><br><span class="line">                    m -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;进度：&#x27;</span>+<span class="built_in">str</span>(n)+<span class="string">&#x27;/&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(photos)*<span class="built_in">len</span>(datas)*<span class="built_in">len</span>(backs)*times))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="funcs-py"><a href="#funcs-py" class="headerlink" title="funcs.py"></a>funcs.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_abc_from_line_2d</span>(<span class="params">x0, y0, x1, y1</span>):</span><br><span class="line">    a = y0 - y1</span><br><span class="line">    b = x1 - x0</span><br><span class="line">    c = x0 * y1 - x1 * y0</span><br><span class="line">    <span class="keyword">return</span> a, b, c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_line_cross_point</span>(<span class="params">line1, line2</span>):</span><br><span class="line">    <span class="comment"># x1y1x2y2</span></span><br><span class="line">    a0, b0, c0 = calc_abc_from_line_2d(*line1)</span><br><span class="line">    a1, b1, c1 = calc_abc_from_line_2d(*line2)</span><br><span class="line">    D = a0 * b1 - a1 * b0</span><br><span class="line">    <span class="keyword">if</span> D == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    x = (b0 * c1 - b1 * c0) / D</span><br><span class="line">    y = (a1 * c0 - a0 * c1) / D</span><br><span class="line">    <span class="comment"># print(x, y)</span></span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_brightness</span>(<span class="params">img</span>):</span><br><span class="line">    alpha = <span class="number">0.01</span> * random.randint(-<span class="number">30</span>, <span class="number">30</span>) + <span class="number">1</span></span><br><span class="line">    beta = random.randint(-<span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">return</span> np.uint8(np.clip((alpha * img + beta), <span class="number">2</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_blur</span>(<span class="params">img</span>):</span><br><span class="line">    n = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> cv2.blur(img, (<span class="number">2</span> * n + <span class="number">1</span>, <span class="number">2</span> * n + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_completely_affine</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        h, w, p = img.shape</span><br><span class="line">        w5 = <span class="built_in">round</span>(w / <span class="number">4</span>)</span><br><span class="line">        w2 = <span class="built_in">int</span>(w / <span class="number">2</span>)</span><br><span class="line">        h5 = <span class="built_in">round</span>(h / <span class="number">4</span>)</span><br><span class="line">        h2 = <span class="built_in">int</span>(h / <span class="number">2</span>)</span><br><span class="line">        x1 = random.randint(w5, w2)</span><br><span class="line">        x2 = x1 + random.randint(w5, w2)</span><br><span class="line">        x3 = random.randint(w5, w2)</span><br><span class="line">        x4 = x3 + random.randint(w5, w2)</span><br><span class="line">        y1 = random.randint(h5, h2)</span><br><span class="line">        y2 = random.randint(h5, h2)</span><br><span class="line">        y3 = y1 + random.randint(h5, h2)</span><br><span class="line">        y4 = y2 + random.randint(h5, h2)</span><br><span class="line">        points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">        <span class="keyword">if</span> ((x2 - x1) * (y4 - y1) - (y2 - y1) * (x4 - x1)) * ((x3 - x1) * (y4 - y1) - (y3 - y1) * (x4 - x1)) &lt; <span class="number">0</span> <span class="keyword">and</span> (</span><br><span class="line">                (x1 - x2) * (y3 - y2) - (y1 - y2) * (x3 - x2)) * ((x4 - x2) * (y3 - y2) - (y4 - y2) * (x3 - x2)) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;warning&quot;</span> + <span class="built_in">str</span>(points))</span><br><span class="line">    pts3D1 = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [w, <span class="number">0</span>], [<span class="number">0</span>, h], [w, h]])</span><br><span class="line">    pts3D2 = np.float32(points)</span><br><span class="line">    M = cv2.getPerspectiveTransform(pts3D1, pts3D2)</span><br><span class="line">    <span class="keyword">return</span> cv2.warpPerspective(img, M, (w, h)), points</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_horizontally_affine</span>(<span class="params">img</span>):</span><br><span class="line">    h, w, p = img.shape</span><br><span class="line">    w2 = <span class="built_in">int</span>(w / <span class="number">2</span>)</span><br><span class="line">    h2 = <span class="built_in">int</span>(h / <span class="number">2</span>)</span><br><span class="line">    rx = random.randint(<span class="built_in">int</span>(w2 / <span class="number">6</span>), w2)</span><br><span class="line">    ry1 = random.randint(<span class="built_in">int</span>(h2 / <span class="number">4</span>), h2)</span><br><span class="line">    ry2 = random.randint(<span class="built_in">int</span>(h2 / <span class="number">4</span>), h2)</span><br><span class="line">    x1, y1 = (w2 - rx + random.randint(-<span class="number">30</span>, <span class="number">30</span>), h2 - ry1 + random.randint(-<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    x2, y2 = (w2 + rx + random.randint(-<span class="number">30</span>, <span class="number">30</span>), h2 - ry2 + random.randint(-<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    x3, y3 = (w2 - rx + random.randint(-<span class="number">30</span>, <span class="number">30</span>), h2 + ry1 + random.randint(-<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    x4, y4 = (w2 + rx + random.randint(-<span class="number">30</span>, <span class="number">30</span>), h2 + ry2 + random.randint(-<span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">    pts3D1 = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [w, <span class="number">0</span>], [<span class="number">0</span>, h], [w, h]])</span><br><span class="line">    pts3D2 = np.float32(points)</span><br><span class="line">    M = cv2.getPerspectiveTransform(pts3D1, pts3D2)</span><br><span class="line">    <span class="keyword">return</span> cv2.warpPerspective(img, M, (w, h)), points</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_center</span>(<span class="params">points</span>):</span><br><span class="line">    xx = <span class="built_in">max</span>(points[<span class="number">1</span>][<span class="number">0</span>], points[<span class="number">3</span>][<span class="number">1</span>]) - <span class="built_in">min</span>(points[<span class="number">0</span>][<span class="number">0</span>], points[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">    yy = <span class="built_in">max</span>(points[<span class="number">2</span>][<span class="number">1</span>], points[<span class="number">3</span>][<span class="number">1</span>]) - <span class="built_in">min</span>(points[<span class="number">0</span>][<span class="number">1</span>], points[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">    x1 = (points[<span class="number">0</span>][<span class="number">0</span>] + points[<span class="number">1</span>][<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line">    x2 = (points[<span class="number">1</span>][<span class="number">0</span>] + points[<span class="number">3</span>][<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line">    x3 = (points[<span class="number">2</span>][<span class="number">0</span>] + points[<span class="number">3</span>][<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line">    x4 = (points[<span class="number">0</span>][<span class="number">0</span>] + points[<span class="number">2</span>][<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line">    y1 = (points[<span class="number">0</span>][<span class="number">1</span>] + points[<span class="number">1</span>][<span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">    y2 = (points[<span class="number">1</span>][<span class="number">1</span>] + points[<span class="number">3</span>][<span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">    y3 = (points[<span class="number">2</span>][<span class="number">1</span>] + points[<span class="number">3</span>][<span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">    y4 = (points[<span class="number">0</span>][<span class="number">1</span>] + points[<span class="number">2</span>][<span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">    points0 = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">    line1 = [x1, y1, x3, y3]</span><br><span class="line">    line2 = [x2, y2, x4, y4]</span><br><span class="line">    x0, y0 = get_line_cross_point(line1, line2)</span><br><span class="line">    <span class="keyword">return</span> x0, y0, xx, yy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">points_affine</span>(<span class="params">img_copy, points</span>):</span><br><span class="line">    h, w, p = img_copy.shape</span><br><span class="line">    img_copy = cv2.warpPerspective(img_copy, cv2.getPerspectiveTransform(np.float32([[<span class="number">0</span>, <span class="number">0</span>], [w, <span class="number">0</span>], [<span class="number">0</span>, h], [w, h]]),</span><br><span class="line">                                                                         np.float32(points)), (w, h))</span><br><span class="line">    cv2.cvtColor(img_copy, cv2.COLOR_BGR2HSV)</span><br><span class="line">    img_copy = cv2.inRange(img_copy, np.array([<span class="number">0</span>, <span class="number">254</span>, <span class="number">0</span>]), np.array([<span class="number">3</span>, <span class="number">255</span>, <span class="number">255</span>]))</span><br><span class="line">    xc, yc, wc, hc = cv2.boundingRect(img_copy)</span><br><span class="line">    <span class="comment"># cv2.rectangle(img_copy, (xc, yc), (xc + wc, yc + hc), 255, 2)</span></span><br><span class="line">    <span class="keyword">return</span> xc, yc, wc, hc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overlay</span>(<span class="params">img, back</span>):</span><br><span class="line">    h, w, p = back.shape</span><br><span class="line">    rows, cols, channels = img.shape</span><br><span class="line">    x = random.randint(<span class="number">0</span>, <span class="built_in">round</span>(w - cols))</span><br><span class="line">    y = random.randint(<span class="number">0</span>, <span class="built_in">round</span>(h - rows))</span><br><span class="line">    roi = back[y:rows + y, x:cols + x]</span><br><span class="line">    img2gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    ret, mask = cv2.threshold(img2gray, <span class="number">1</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    mask_inv = cv2.bitwise_not(mask)</span><br><span class="line">    img1_bg = cv2.bitwise_and(roi, roi, mask=mask_inv)</span><br><span class="line">    img2_fg = cv2.bitwise_and(img, img, mask=mask)</span><br><span class="line">    dst = cv2.add(img1_bg, img2_fg)</span><br><span class="line">    back[y:rows + y, x:cols + x] = dst</span><br><span class="line">    <span class="keyword">return</span> back, x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xml_save</span>(<span class="params">file_name, xmin, ymin, xmax, ymax</span>):</span><br><span class="line">    txt = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="string">&lt;annotation&gt;</span></span><br><span class="line"><span class="string">&lt;folder&gt;pet&lt;/folder&gt;</span></span><br><span class="line"><span class="string">&lt;filename&gt;&#x27;&#x27;&#x27;</span> + file_name + <span class="string">&#x27;&#x27;&#x27;&lt;/filename&gt;</span></span><br><span class="line"><span class="string">&lt;path&gt;F:\\air2\\pet\\&#x27;&#x27;&#x27;</span> + file_name + <span class="string">&#x27;&#x27;&#x27;&lt;/path&gt;</span></span><br><span class="line"><span class="string">&lt;source&gt;</span></span><br><span class="line"><span class="string">    &lt;database&gt;Unknown&lt;/database&gt;</span></span><br><span class="line"><span class="string">&lt;/source&gt;</span></span><br><span class="line"><span class="string">&lt;size&gt;</span></span><br><span class="line"><span class="string">    &lt;width&gt;1920&lt;/width&gt;</span></span><br><span class="line"><span class="string">    &lt;height&gt;1080&lt;/height&gt;</span></span><br><span class="line"><span class="string">    &lt;depth&gt;3&lt;/depth&gt;</span></span><br><span class="line"><span class="string">&lt;/size&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;segmented&gt;0&lt;/segmented&gt;</span></span><br><span class="line"><span class="string">    &lt;object&gt;</span></span><br><span class="line"><span class="string">    &lt;name&gt;pet&lt;/name&gt;</span></span><br><span class="line"><span class="string">    &lt;pose&gt;Unspecified&lt;/pose&gt;</span></span><br><span class="line"><span class="string">    &lt;truncated&gt;0&lt;/truncated&gt;</span></span><br><span class="line"><span class="string">    &lt;difficult&gt;0&lt;/difficult&gt;</span></span><br><span class="line"><span class="string">    &lt;bndbox&gt;</span></span><br><span class="line"><span class="string">        &lt;xmin&gt;&#x27;&#x27;&#x27;</span> + xmin + <span class="string">&#x27;&#x27;&#x27;&lt;/xmin&gt;</span></span><br><span class="line"><span class="string">        &lt;ymin&gt;&#x27;&#x27;&#x27;</span> + ymin + <span class="string">&#x27;&#x27;&#x27;&lt;/ymin&gt;</span></span><br><span class="line"><span class="string">        &lt;xmax&gt;&#x27;&#x27;&#x27;</span> + xmax + <span class="string">&#x27;&#x27;&#x27;&lt;/xmax&gt;</span></span><br><span class="line"><span class="string">        &lt;ymax&gt;&#x27;&#x27;&#x27;</span> + ymax + <span class="string">&#x27;&#x27;&#x27;&lt;/ymax&gt;</span></span><br><span class="line"><span class="string">    &lt;/bndbox&gt;</span></span><br><span class="line"><span class="string">&lt;/object&gt;</span></span><br><span class="line"><span class="string">&lt;/annotation&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频逐帧保存图片程序"><a href="#视频逐帧保存图片程序" class="headerlink" title="视频逐帧保存图片程序"></a>视频逐帧保存图片程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">images = <span class="string">&#x27;image_video\\&#x27;</span></span><br><span class="line">videos = os.listdir(<span class="string">r&#x27;video2img&#x27;</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> videos:</span><br><span class="line">    path = <span class="string">&#x27;video2img\\&#x27;</span> + i</span><br><span class="line">    cap = cv2.VideoCapture(path)</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            success, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            img = cv2.imwrite(images + <span class="built_in">str</span>(c) + <span class="string">&#x27;.jpg&#x27;</span>, frame)</span><br><span class="line">            c = c + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(c)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>CUMTB论坛</title>
    <url>/2022/bbs-CUMTB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某位帅气学弟 <del>@ztn</del> 建立了一个论坛，欢迎各位校友来聊天啊！</p>
<h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p><a href="http://cumtbbs.icu/" title="论坛地址">论坛地址</a><br><code>http://cumtbbs.icu/</code></p>
<h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><p>为了便于大家访问随手做了个APP：</p>
<p><a href="%E5%8C%97%E7%9F%BF%E8%AE%BA%E5%9D%9B.apk">下载链接</a></p>
<p><del>图标别问，问就是帅气学弟！</del></p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
        <category>过时&amp;弃用&amp;无意义&amp;失败品</category>
      </categories>
      <tags>
        <tag>CUMTB</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记</title>
    <url>/2022/c-note/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="3-第三章-数据类型运算符与表达式"><a href="#3-第三章-数据类型运算符与表达式" class="headerlink" title="3.第三章:数据类型运算符与表达式"></a>3.第三章:数据类型运算符与表达式</h1><h2 id="3-1常量和变量"><a href="#3-1常量和变量" class="headerlink" title="3.1常量和变量"></a>3.1常量和变量</h2><h3 id="3-1-1常量"><a href="#3-1-1常量" class="headerlink" title="3.1.1常量"></a>3.1.1常量</h3><p>常量有以下几类：整型常量，实型常量，字符常量，字符串常量，符号常量。<br>其中符号常量的定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 标识符 常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-2变量"><a href="#3-1-2变量" class="headerlink" title="3.1.2变量"></a>3.1.2变量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量的定义:</span></span><br><span class="line"><span class="type">int</span> c1, c2, c3;</span><br><span class="line"><span class="comment">//变量的赋值</span></span><br><span class="line">c1 = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2数据类型"><a href="#3-2数据类型" class="headerlink" title="3.2数据类型"></a>3.2数据类型</h2><p>基本数据类型:</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">空间 (字节)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">字符型</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">整型</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">short&#x2F;long</td>
<td align="center">短整形 &#x2F; 长整形</td>
<td align="center">2&#x2F;4</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">单精度实型</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">双精度实型</td>
<td align="center">8</td>
</tr>
</tbody></table>
<p>修饰符:[添加在char或int前面]</p>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">signed</td>
<td align="center">有符号</td>
</tr>
<tr>
<td align="center">unsigned</td>
<td align="center">无符号</td>
</tr>
</tbody></table>
<h2 id="3-3整型"><a href="#3-3整型" class="headerlink" title="3.3整型"></a>3.3整型</h2><h3 id="3-3-1整型常量"><a href="#3-3-1整型常量" class="headerlink" title="3.3.1整型常量"></a>3.3.1整型常量</h3><p>1.十进制:由0-9组成:100 , -200<br>2.八进制:由0开头,数字0-7组成,如0111 (&#x3D;73), 010007 (&#x3D;4103)<br>3.十六进制:由0X或0x开头,由0-9, a-f (或A-F)组成,如0x16 (&#x3D;22), 0xA3 (&#x3D;163)</p>
<h3 id="3-3-2整型变量"><a href="#3-3-2整型变量" class="headerlink" title="3.3.2整型变量"></a>3.3.2整型变量</h3><p>见3.1.2</p>
<h2 id="3-4实型数据"><a href="#3-4实型数据" class="headerlink" title="3.4实型数据"></a>3.4实型数据</h2><h3 id="3-4-1实型常量"><a href="#3-4-1实型常量" class="headerlink" title="3.4.1实型常量"></a>3.4.1实型常量</h3><p>1.小数形式: 数字0-9和小数点组成,小数点必须有: 0.3   .23   23.  都合法<br>2.指数形式:  3.14E-2 (&#x3D;0.0314)</p>
<h2 id="3-5字符常量"><a href="#3-5字符常量" class="headerlink" title="3.5字符常量"></a>3.5字符常量</h2><h3 id="3-5-1字符常量"><a href="#3-5-1字符常量" class="headerlink" title="3.5.1字符常量"></a>3.5.1字符常量</h3><p>由单引号括起作为定界符<br>1.普通字符常量:值由ASCII码确定<br>2.转义字符常量:<br>转义字符表:</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">功能</th>
<th align="center">ASCII码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\0</td>
<td align="center">表示字符串结束</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行到下一行行首</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">横向跳格到下一个输出区</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">竖向跳格</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">退格</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
<td align="center">13</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页到下页开头</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">&#39;</td>
<td align="center">单引号字符</td>
<td align="center">39</td>
</tr>
<tr>
<td align="center">&quot;</td>
<td align="center">双引号字符</td>
<td align="center">34</td>
</tr>
<tr>
<td align="center">\\</td>
<td align="center">反斜杠字符</td>
<td align="center">92</td>
</tr>
<tr>
<td align="center">\ddd</td>
<td align="center">1~3位8进制数表示的字符</td>
<td align="center">0-255</td>
</tr>
<tr>
<td align="center">\xhh</td>
<td align="center">1~2位16进制数表示的字符</td>
<td align="center">0-255</td>
</tr>
</tbody></table>
<p>例子:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This\tisn\b\ta\t\&#x27;book\&#x27;\n&quot;</span>)</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">This_ _ _ _is_ _ _ _ _ _a_ _ _ _ _ _ _<span class="number">&#x27;b</span>ook<span class="number">&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-2字符变量"><a href="#3-5-2字符变量" class="headerlink" title="3.5.2字符变量"></a>3.5.2字符变量</h3><table>
<thead>
<tr>
<th align="left">字符变量</th>
<th align="left">ASCII码</th>
</tr>
</thead>
<tbody><tr>
<td align="left">‘A’</td>
<td align="left">65</td>
</tr>
<tr>
<td align="left">‘a’</td>
<td align="left">97</td>
</tr>
<tr>
<td align="left">‘1’</td>
<td align="left">49</td>
</tr>
<tr>
<td align="left">‘ ‘</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">‘%’</td>
<td align="left">37</td>
</tr>
<tr>
<td align="left">‘\n’</td>
<td align="left">10</td>
</tr>
</tbody></table>
<h3 id="3-5-3字符串常量"><a href="#3-5-3字符串常量" class="headerlink" title="3.5.3字符串常量"></a>3.5.3字符串常量</h3><p>由双引号括起的字符序列,自动以\0作为结束标志<br>china:</p>
<table>
<thead>
<tr>
<th align="center">存储格式</th>
<th align="center">C</th>
<th align="center">h</th>
<th align="center">i</th>
<th align="center">n</th>
<th align="center">a</th>
<th align="center">\0</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实际以ASCII存储</td>
<td align="center">67</td>
<td align="center">104</td>
<td align="center">105</td>
<td align="center">110</td>
<td align="center">97</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h2 id="3-6运算符"><a href="#3-6运算符" class="headerlink" title="3.6运算符"></a>3.6运算符</h2><h3 id="3-6-1运算符"><a href="#3-6-1运算符" class="headerlink" title="3.6.1运算符"></a>3.6.1运算符</h3><h4 id="1-1算术运算符"><a href="#1-1算术运算符" class="headerlink" title="1.1算术运算符:"></a>1.1算术运算符:</h4><p>+ - * / %</p>
<h4 id="1-2自增减运算符"><a href="#1-2自增减运算符" class="headerlink" title="1.2自增减运算符"></a>1.2自增减运算符</h4><p>结合方向由右到左<br>注:在只需对变量本身进行加减的情况下前后缀运算效果相同，但表达式的结果可能不同</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后缀运算：先把I的值赋给X然后I的值加1</span></span><br><span class="line">x=i++</span><br><span class="line"><span class="comment">//前置运算：先把I的值加1再将I的值赋给Y</span></span><br><span class="line">y=++i</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>,c,d;</span><br><span class="line">c=(++a)*b;</span><br><span class="line"><span class="comment">//结果为a=4,c=20</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>,c,d;</span><br><span class="line">c=(a++)*b;</span><br><span class="line"><span class="comment">//结果为a=4,c=15</span></span><br></pre></td></tr></table></figure>

<h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h4><p>如:<br>a+&#x3D;b 等价于 a&#x3D;a+b<br>a%&#x3D;b 等价于 a&#x3D;a%b<br>…</p>
<h4 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h4><table>
<thead>
<tr>
<th align="center">!</th>
<th align="center">非</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td align="center">与</td>
</tr>
<tr>
<td align="center">ll</td>
<td align="center">或</td>
</tr>
</tbody></table>
<p>(1) !的结合方向由右到左且优先级高于算术运算符, &amp;&amp;,|| 的结合方向由左到右,优先级低于算术运算符和关系运算符但高于赋值运算符<br>(2) 优先级:! &gt; &amp;&amp; &gt; ||<br>(3) !15 &#x3D; 0 , !1 &#x3D; 0, !0 &#x3D; 1<br>(4)&amp;&amp;前表达式不为0才会执行后侧, ||前表达式为0才会执行后侧</p>
<h4 id="4-条件运算符"><a href="#4-条件运算符" class="headerlink" title="4.条件运算符"></a>4.条件运算符</h4><p>由?和:组成,连接三个对象,唯一的三目运算符<br>优先级高于赋值运算符和逗号运算符但低于其他运算符结合性方向为自R至L<br>表达式1 ? 表达式2  : 表达式 3<br>先计算表达式1,若为非零值则整个表达式的值为表达式2,若为0则整个表达式的值表达式三</p>
<p>注:false的值为0,true的值为1</p>
<h4 id="5-逗号运算符"><a href="#5-逗号运算符" class="headerlink" title="5.逗号运算符"></a>5.逗号运算符</h4><p>用于连接若干个表达式<br>依次计算被逗号分隔的表达式,并将最后一个表达式的值作为整个逗号表达式的值</p>
<h4 id="6-圆括号运算符"><a href="#6-圆括号运算符" class="headerlink" title="6.圆括号运算符"></a>6.圆括号运算符</h4><p>优先级最高. 将某些运算符和运算对象括起来后,他们应被优先运算</p>
<h3 id="3-6-3表达式数据类型转换"><a href="#3-6-3表达式数据类型转换" class="headerlink" title="3.6.3表达式数据类型转换"></a>3.6.3表达式数据类型转换</h3><h4 id="1-自动转换"><a href="#1-自动转换" class="headerlink" title="1.自动转换"></a>1.自动转换</h4><p>char,short→int→unsighed→long→double←float</p>
<h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="2.强制转换"></a>2.强制转换</h4><p>(类型标识符)表达式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(<span class="type">float</span>)<span class="number">10</span>/<span class="number">4</span></span><br><span class="line"><span class="comment">//10转换后计算除法</span></span><br><span class="line">(<span class="type">float</span>)(<span class="number">10</span>/<span class="number">4</span>)</span><br><span class="line"><span class="comment">//先计算除法,将结果转换</span></span><br><span class="line"><span class="comment">//无小数的除法运算直接删除小数点后数位</span></span><br><span class="line"><span class="type">int</span> <span class="number">10</span>/ <span class="type">int</span> <span class="number">4</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>强制转换时,得到一个转换后的中间变量,原变量类型未改变</p>
<h1 id="4-第四章-基本输入输出"><a href="#4-第四章-基本输入输出" class="headerlink" title="4.第四章:基本输入输出"></a>4.第四章:基本输入输出</h1><h2 id="4-2数据输出"><a href="#4-2数据输出" class="headerlink" title="4.2数据输出"></a>4.2数据输出</h2><h3 id="4-2-1字符输出函数putchar-c"><a href="#4-2-1字符输出函数putchar-c" class="headerlink" title="4.2.1字符输出函数putchar(c)"></a>4.2.1字符输出函数putchar(c)</h3><p>在屏幕上输出一个字符<br>使光标移至下一行:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2格式输出函数printf-格式控制-参数2-参数3-…-参数n"><a href="#4-2-2格式输出函数printf-格式控制-参数2-参数3-…-参数n" class="headerlink" title="4.2.2格式输出函数printf(格式控制,参数2,参数3,…,参数n)"></a>4.2.2格式输出函数printf(格式控制,参数2,参数3,…,参数n)</h3><p>格式说明符:<br>整型数据:</p>
<table>
<thead>
<tr>
<th align="center">格式说明符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d 或 %i</td>
<td align="center">有符号10进制输出整数</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="center">无符号八进制输出整型数(无0)</td>
</tr>
<tr>
<td align="center">%x 或 %X</td>
<td align="center">无符号16进制输出整型数(无0x)</td>
</tr>
<tr>
<td align="center">%u</td>
<td align="center">无符号十进制输出整型数</td>
</tr>
</tbody></table>
<p>实型数据:</p>
<table>
<thead>
<tr>
<th align="center">格式说明符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%f</td>
<td align="center">以小数形式输出的实型数</td>
</tr>
<tr>
<td align="center">%e 或 %E</td>
<td align="center">以指数形式输出的实型数</td>
</tr>
<tr>
<td align="center">%g 或 %G</td>
<td align="center">以数值宽度最小的形式输出的实型数</td>
</tr>
</tbody></table>
<p>字符型数据:</p>
<table>
<thead>
<tr>
<th align="center">格式说明符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%c</td>
<td align="center">输出一个字符</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="center">输出一个字符串(不包含结尾标识 \0 )</td>
</tr>
</tbody></table>
<p>其他:</p>
<table>
<thead>
<tr>
<th align="center">格式说明符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%%</td>
<td align="center">输出%本身</td>
</tr>
</tbody></table>
<p>附加格式说明符:</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">l</td>
<td align="center">输出长整型数(只可与d,o,x,u结合使用)</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center">指定数据输出的宽度m,不足则空格补齐,超出则按实际宽度输出</td>
</tr>
<tr>
<td align="center">.n</td>
<td align="center">对于%f或%e输出的实型数据,输出n位小数,若小数位超出则四舍五入.对于%s输出的字符串则表示从字符串左端截取n个字符</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">使输出的数值数据无论正负都带符号输出</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">使数据按左对齐方式输出(没有则右对齐)</td>
</tr>
</tbody></table>
<h2 id="4-3数据输入"><a href="#4-3数据输入" class="headerlink" title="4.3数据输入"></a>4.3数据输入</h2><h3 id="4-3-1字符输入函数getchar"><a href="#4-3-1字符输入函数getchar" class="headerlink" title="4.3.1字符输入函数getchar()"></a>4.3.1字符输入函数getchar()</h3><p>只能接收一个字符</p>
<h3 id="4-3-2格式输入函数scanf-格式控制-地址参数1-地址参数2-…-地址参数n"><a href="#4-3-2格式输入函数scanf-格式控制-地址参数1-地址参数2-…-地址参数n" class="headerlink" title="4.3.2格式输入函数scanf(格式控制,地址参数1,地址参数2,…,地址参数n)"></a>4.3.2格式输入函数scanf(格式控制,地址参数1,地址参数2,…,地址参数n)</h3><p>格式控制的以下数据与上文4.0.2的printf()相同:整型,实型,字符型,<br>此外,还有附加格式说明符:</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">m</td>
<td align="center">用于指定输入数据的域宽</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">忽略读入的数据</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如:</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%2d%*2d%3d&quot;</span>,&amp;a,&amp;b)</span><br><span class="line"><span class="comment">//若输入的内容为 1234567 时,结果为:</span></span><br><span class="line">a=<span class="number">12</span>,b=<span class="number">567</span></span><br></pre></td></tr></table></figure>

<p>注:使用该函数输入字符串时,字符串中不能含有空格,否则将以空格作为字符串的结束符.</p>
<h1 id="5-第五章-选择结构程序设计"><a href="#5-第五章-选择结构程序设计" class="headerlink" title="5.第五章:选择结构程序设计"></a>5.第五章:选择结构程序设计</h1><h2 id="5-2逻辑运算符和逻辑表达式"><a href="#5-2逻辑运算符和逻辑表达式" class="headerlink" title="5.2逻辑运算符和逻辑表达式"></a>5.2逻辑运算符和逻辑表达式</h2><p>到目前为止的运算符优先级:<br>!(逻辑非) &gt; 算术运算符 &gt; 关系运算符 &gt;  &amp;&amp; 与 ||   &gt;  |  &gt;  赋值运算符</p>
<h2 id="5-3-C99的布尔值"><a href="#5-3-C99的布尔值" class="headerlink" title="5.3:C99的布尔值"></a>5.3:C99的布尔值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个布尔型变量</span></span><br><span class="line">_boll b;</span><br><span class="line"><span class="comment">//b的值只能为0/1,若大于1则赋值为1,如下执行后b=1</span></span><br><span class="line">b=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//如果使用以下头文件可以使用true和false代表1和0,如下使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">bool</span> b;</span><br><span class="line">b=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-if结构"><a href="#5-4-if结构" class="headerlink" title="5.4:if结构"></a>5.4:if结构</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (&lt;表达式&gt;)&lt;语句&gt;</span><br><span class="line"><span class="comment">//当&lt;语句&gt;有多行时,需要整个用&#123;&#125;括起</span></span><br><span class="line"><span class="keyword">if</span> (&lt;表达式&gt;)&lt;语句<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (&lt;表达式&gt;) &lt;语句<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span> &lt;语句<span class="number">3</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-5条件运算符与条件表达式"><a href="#5-5条件运算符与条件表达式" class="headerlink" title="5.5条件运算符与条件表达式"></a>5.5条件运算符与条件表达式</h2><p>上文3.6.1.4已经叙述.</p>
<h2 id="5-6-switch语句结构"><a href="#5-6-switch语句结构" class="headerlink" title="5.6:switch语句结构"></a>5.6:switch语句结构</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (&lt;表达式&gt;)&#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;常量表达式<span class="number">1</span>&gt;: </span><br><span class="line">        &lt;语句<span class="number">1</span>&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">case</span> &lt;常量表达式n&gt;:</span><br><span class="line">        &lt;语句n&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> : &lt;语句n+<span class="number">1</span>&gt;</span><br><span class="line"><span class="comment">//如果每个case都不满足,则执行default的内容</span></span><br></pre></td></tr></table></figure>

<p>注:<br>1.&lt;常量表达式n&gt;不能包含变量和函数调用<br>2.&lt;表达式&gt;不能用浮点数和字符串<br>3.每个分支后面的语句不需要{}括起<br>4.如果没有break,则不会退出switch,即无论如何都会执行default</p>
<h1 id="6-第六章-循环结构程序设计"><a href="#6-第六章-循环结构程序设计" class="headerlink" title="6.第六章:循环结构程序设计"></a>6.第六章:循环结构程序设计</h1><h2 id="6-1-循环结构控制语句"><a href="#6-1-循环结构控制语句" class="headerlink" title="6.1:循环结构控制语句"></a>6.1:循环结构控制语句</h2><h3 id="6-1-1-while循环"><a href="#6-1-1-while循环" class="headerlink" title="6.1.1:while循环"></a>6.1.1:while循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (表达式) 循环体</span><br></pre></td></tr></table></figure>
<p>注:循环体如果有多行语句则需要{}括起</p>
<h3 id="6-1-2-do-while循环"><a href="#6-1-2-do-while循环" class="headerlink" title="6.1.2:do-while循环"></a>6.1.2:do-while循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> 循环体</span><br><span class="line"><span class="keyword">while</span> (表达式);</span><br></pre></td></tr></table></figure>

<p>与while区别是先执行循环体再判断,若满足则再次执行循环体</p>
<h3 id="6-1-3-for循环"><a href="#6-1-3-for循环" class="headerlink" title="6.1.3:for循环"></a>6.1.3:for循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件;循环条件判断;循环调整) 循环体</span><br></pre></td></tr></table></figure>

<p>注:<br>1.可以将初始条件省略,在for循环之前给循环变量赋值<br>2.可以将循环条件判断省略,将会成为死循环<br>3.可以将循环调整省略,如果后续不能保证循环结束,将成为死循环<br>4.C99允许for语句在初始条件中定义变量并赋值</p>
<h3 id="6-1-4-三种循环语句的比较"><a href="#6-1-4-三种循环语句的比较" class="headerlink" title="6.1.4:三种循环语句的比较"></a>6.1.4:三种循环语句的比较</h3><p>三个循环都可以用break;语句跳出循环,用continue;语句结束本次循环<br>其中break的作用是结束并跳出整个循环, continue的作用是结束本次循环并进行下一次循环</p>
<h2 id="6-2-循环中的转移语句-6-1-4已说明不再赘述"><a href="#6-2-循环中的转移语句-6-1-4已说明不再赘述" class="headerlink" title="6.2:循环中的转移语句:6.1.4已说明不再赘述"></a>6.2:循环中的转移语句:6.1.4已说明不再赘述</h2><h2 id="6-3-6-4两节不再赘述"><a href="#6-3-6-4两节不再赘述" class="headerlink" title="6.3,6.4两节不再赘述"></a>6.3,6.4两节不再赘述</h2><h1 id="7-第七章-数组"><a href="#7-第七章-数组" class="headerlink" title="7.第七章:数组"></a>7.第七章:数组</h1><h2 id="7-1一维数组"><a href="#7-1一维数组" class="headerlink" title="7.1一维数组"></a>7.1一维数组</h2><h3 id="7-1-1一维数组的定义与引用"><a href="#7-1-1一维数组的定义与引用" class="headerlink" title="7.1.1一维数组的定义与引用"></a>7.1.1一维数组的定义与引用</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义:"></a>1.定义:</h4><p>类型说明符 数组名 [元素个数]</p>
<p>类型说明符是任意一种基本数据类型或构造数据类型,定义了全体数组元素的数据类型<br>定义数组时需要指定数组元素的个数,也就是数组的长度.<br>数组是一个整体,是由连续的内存位置组成的.</p>
<h4 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用:"></a>2.引用:</h4><p>数组名[下标]</p>
<p>注:数组的长度可以是常量或变量等任意有效的整型表达式,大于0就好</p>
<h3 id="7-1-2一维数组的初始化"><a href="#7-1-2一维数组的初始化" class="headerlink" title="7.1.2一维数组的初始化"></a>7.1.2一维数组的初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将数组的所有元素初始化为0,例如:</span></span><br><span class="line"><span class="type">int</span> nums[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">//只有全部赋值为0的时候可以这样写,如果要全部为1必须要写10次1</span></span><br></pre></td></tr></table></figure>
<p>注:如果在定义时就给全部元素赋值,可以不给出数组长度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2字符数组"><a href="#7-2字符数组" class="headerlink" title="7.2字符数组"></a>7.2字符数组</h2><p>用来存放字符的数组称为字符数组,实际上是一系列字符的集合,也就是字符串.<br>因为在C语言中没有专门的字符串变量,没有string类型,通常就用一个字符数组来存放一个字符串<br>如:        char c[10];</p>
<h3 id="7-2-1-字符数组的初始化"><a href="#7-2-1-字符数组的初始化" class="headerlink" title="7.2.1:字符数组的初始化"></a>7.2.1:字符数组的初始化</h3><p>初始化:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[]=&#123;<span class="string">&quot;C program&quot;</span>&#125;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;C program&quot;</span></span><br></pre></td></tr></table></figure>
<p>由于字符串会将 \0 作为结束标志,因此上面的”C program”实际长度为10</p>
<h3 id="7-2-2字符数组的输入与输出"><a href="#7-2-2字符数组的输入与输出" class="headerlink" title="7.2.2字符数组的输入与输出"></a>7.2.2字符数组的输入与输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">char</span> c[]=<span class="string">&quot;lab&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,c);</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="type">char</span> st[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,st);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,st);</span><br></pre></td></tr></table></figure>
<h3 id="7-2-3字符串处理函数-使用时应包含头文件-”string-h”"><a href="#7-2-3字符串处理函数-使用时应包含头文件-”string-h”" class="headerlink" title="7.2.3字符串处理函数:使用时应包含头文件:”string.h”"></a>7.2.3字符串处理函数:使用时应包含头文件:”string.h”</h3><p>1.字符串输出函数puts(字符数组名);</p>
<p>2.字符串输入函数gets(字符数组名);<br>该函数不以空格作为字符串输入结束的标志,而只以回车作为输入结束.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> st[<span class="number">15</span>];</span><br><span class="line">gets(st);</span><br><span class="line"><span class="built_in">puts</span>(st);</span><br></pre></td></tr></table></figure>
<p>3.连接函数strcat(字符串1,字符串2):将字符串2连接在字符串1后面[字符串1发生改变]<br>返回值为字符串1的首地址</p>
<p>4.复制函数:strcpy(字符串1,字符串2):将字符串2复制到字符串1中.</p>
<p>5.比较函数:strcmp(字符串1,字符串2);</p>
<p>按照顺序比较两个数组中的字符串.从第1个字符开始如果ASCII相同则继续比较,如果所有字符都相同,则返回值为0.如果有两个字符不相等且第1个比第2个大,则返回一个正数,否则返回一个负数.如果字符串1的长度大于字符串2,且前面的字符相同,则也按字符串1大于字符串2处理.</p>
<p>6.获取长度:strlen(字符串名):不包括表示结束的 ‘\0’</p>
<h2 id="7-3二维数组"><a href="#7-3二维数组" class="headerlink" title="7.3二维数组"></a>7.3二维数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多维数组声明:</span></span><br><span class="line">类型 说明符 数组名[第<span class="number">1</span>维长度] [第<span class="number">2</span>维长度] ... [第n维长度];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>注:<br>1.如果有没被赋值的元素则自动赋值为0<br>2.如果对全部元素赋值,那么第1维的长度可以不给出.但无论如何不能省略第2维的长度</p>
<h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h1><h2 id="8-1-函数的定义"><a href="#8-1-函数的定义" class="headerlink" title="8.1:函数的定义"></a>8.1:函数的定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">类型标识符 函数名(参数)&#123;</span><br><span class="line">语句;</span><br><span class="line"><span class="keyword">return</span> 表达式;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">return</span> (表达式);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类型标识符为函数返回值的类型</p>
<h2 id="8-5-数组作为函数参数"><a href="#8-5-数组作为函数参数" class="headerlink" title="8.5:数组作为函数参数"></a>8.5:数组作为函数参数</h2><p>数组可以作为函数实参,但不能作为形参.例如:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">average</span><span class="params">(<span class="type">float</span> <span class="built_in">array</span>[<span class="number">10</span>])</span>&#123;</span><br><span class="line">    xxxxxxxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-6-变量的作用域和存储"><a href="#8-6-变量的作用域和存储" class="headerlink" title="8.6:变量的作用域和存储"></a>8.6:变量的作用域和存储</h2><p>在函数内部定义的变量只在函数内有效</p>
<h3 id="8-6-3变量的存储方式"><a href="#8-6-3变量的存储方式" class="headerlink" title="8.6.3变量的存储方式"></a>8.6.3变量的存储方式</h3><p>四种:自动auto,静态static,寄存器register,外部extern</p>
<p>函数中的局部变量,自动分配auto类别,函数调用后内存释放,如果要函数执行后局部变量内存不被释放,则应声明为static类型:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> a;</span><br></pre></td></tr></table></figure>
<p>寄存器变量存储于CPU寄存器,存取速度最快<br>使用外部变量需要一个文件直接对其定义,另一个将其作为外部变量引用</p>
<h2 id="8-7内外部函数"><a href="#8-7内外部函数" class="headerlink" title="8.7内外部函数"></a>8.7内外部函数</h2><p>函数声明时前面加 static 可以使其他文件无法引用此函数,避免名称冲突.<br>如果需要多个文件使用该函数,可以在前面加 extern 从而使其他文件可以引用此函数<br>默认情况下为 extern,无论是声明还是定义</p>
<h1 id="9-指针"><a href="#9-指针" class="headerlink" title="9.指针"></a>9.指针</h1><h2 id="9-2指针的定义和初始化"><a href="#9-2指针的定义和初始化" class="headerlink" title="9.2指针的定义和初始化"></a>9.2指针的定义和初始化</h2><h3 id="9-2-1定义"><a href="#9-2-1定义" class="headerlink" title="9.2.1定义"></a>9.2.1定义</h3><p>T为某个数据类型,如int,double,char等, p是指向T类型变量的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">T * p;</span><br><span class="line"><span class="comment">//如:</span></span><br><span class="line"><span class="type">int</span> i, *ip;</span><br><span class="line"><span class="comment">//i是int型变量,ip是指向int型对象的指针</span></span><br></pre></td></tr></table></figure>
<h3 id="9-2-2初始化和赋值"><a href="#9-2-2初始化和赋值" class="headerlink" title="9.2.2初始化和赋值"></a>9.2.2初始化和赋值</h3><h4 id="1-取地址运算符—-amp"><a href="#1-取地址运算符—-amp" class="headerlink" title="1.取地址运算符—&amp;"></a>1.取地址运算符—&amp;</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">23</span>;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> *p=&amp;i;<span class="comment">//指针初始化指向i</span></span><br><span class="line">p=&amp;j;<span class="comment">//指针改变赋值,p指向j</span></span><br></pre></td></tr></table></figure>
<p>指针类型必须与其指向的对象类型严格匹配</p>
<h4 id="2-格式符-p输出指针的值"><a href="#2-格式符-p输出指针的值" class="headerlink" title="2.格式符%p输出指针的值"></a>2.格式符%p输出指针的值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a);</span><br><span class="line"><span class="comment">//sizeif()运算指针变量内存占用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of int*:%d,value:%p\n&quot;</span>,<span class="keyword">sizeof</span>(p),p);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">输出:</span><br><span class="line"><span class="number">000000000062F</span>E14</span><br><span class="line"><span class="number">000000000062F</span>E14</span><br><span class="line">size of <span class="type">int</span>*:<span class="number">8</span>,value:<span class="number">000000000062F</span>E14</span><br></pre></td></tr></table></figure>
<h4 id="3-间接运算符"><a href="#3-间接运算符" class="headerlink" title="3.间接运算符 *"></a>3.间接运算符 *</h4><p>如果指针指向了一个对象,可以使用间接运算符 * 访问对象.如果给其赋值,则就是给指针的对象赋值<br>可视为是&amp;的逆操作,即&amp;*p&#x3D;&#x3D;p</p>
<h4 id="4-指针值"><a href="#4-指针值" class="headerlink" title="4.指针值"></a>4.指针值</h4><p>有四种状态:指向对象,指向对象前后的位置,空指针,无效指针<br>由此想到一句吵架可用的话:<del>你就是一个没有对象的野指针!</del></p>
<p>访问无效指针将引发错误,指向对象前后的位置和空指针尽管有效但是值可能无效,因此不允许访问其对象</p>
<h4 id="5-void-指针"><a href="#5-void-指针" class="headerlink" title="5.void*指针"></a>5.void*指针</h4><p>可以存放任意对象的地址,即可以指向任意类型数据.<br>因为其只是表明相关的值是一个地址值,没有类型信息,所以<em>不能对其对象进行操作</em>[一本正经]</p>
<p>其主要作用是做函数参数和函数返回值</p>
<h4 id="6-空指针"><a href="#6-空指针" class="headerlink" title="6.空指针"></a>6.空指针</h4><p>值为0的表达式都称为空指针常量,能够转换为任意类型的指针.<br>但是不能直接把int变量赋值给指针.</p>
<p>获得空指针方法:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p2=(<span class="type">void</span>*)<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="comment">//或其他头文件定义NULL</span></span><br><span class="line"><span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这是错误的:不能直接int赋值,即使其值为0</span></span><br><span class="line"><span class="type">int</span> zero=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p=zero</span><br></pre></td></tr></table></figure>
<p>判断空指针可用<code>p==NULL</code>或<code>p==0</code>或<code>!p</code>等方法.</p>
<h3 id="9-2-3指针与const"><a href="#9-2-3指针与const" class="headerlink" title="9.2.3指针与const"></a>9.2.3指针与const</h3><h4 id="1-指针定义前加const-使之指向对象的值不能修改-其对象为常量"><a href="#1-指针定义前加const-使之指向对象的值不能修改-其对象为常量" class="headerlink" title="1.指针定义前加const,使之指向对象的值不能修改(其对象为常量)"></a>1.指针定义前加const,使之指向对象的值不能修改(其对象为常量)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> T* p;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">T <span class="type">const</span> *p;</span><br></pre></td></tr></table></figure>
<p>可以使用一个指向常量的指针指向变量对象</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> b=<span class="number">32</span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> *cpb=&amp;b;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//如果使用*cpb=30;则会报错</span></span><br><span class="line">	b=<span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是指针指向为变量,指向一个常量,将会引发错误或警告</p>
<h4 id="2-指针常量"><a href="#2-指针常量" class="headerlink" title="2.指针常量"></a>2.指针常量</h4><p>指针常量本身的值不能修改,所以必须定义时初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">T* <span class="type">const</span> cp=&amp;obj;</span><br></pre></td></tr></table></figure>
<p> 指针常量的所指向的对象不能为常量</p>
<h4 id="3-指向常量的指针常量"><a href="#3-指向常量的指针常量" class="headerlink" title="3.指向常量的指针常量"></a>3.指向常量的指针常量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> T * <span class="type">const</span> cp=&amp;obj;</span><br></pre></td></tr></table></figure>
<h3 id="9-2-4指针与restrict"><a href="#9-2-4指针与restrict" class="headerlink" title="9.2.4指针与restrict"></a>9.2.4指针与restrict</h3><p>关键字restrict在C99中引入,表示对象已经被指针引用且不能通过指针以外的任何方式修改对象内容</p>
<h2 id="9-3指针与数组"><a href="#9-3指针与数组" class="headerlink" title="9.3指针与数组"></a>9.3指针与数组</h2><h3 id="9-3-1指针与一维数组"><a href="#9-3-1指针与一维数组" class="headerlink" title="9.3.1指针与一维数组"></a>9.3.1指针与一维数组</h3><h4 id="指向数组元素"><a href="#指向数组元素" class="headerlink" title="指向数组元素"></a>指向数组元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p=&amp;a[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h4 id="数组名与指针-sizeof函数"><a href="#数组名与指针-sizeof函数" class="headerlink" title="数组名与指针,sizeof函数"></a>数组名与指针,sizeof函数</h4><p>数组的指针就是数组首元素的指针<br>即<code>int* p=a;</code>等价于<code>int* p=&amp;a[0];</code></p>
<p>sizeof(数组名);可以得到指针变量的字节数<br>即<code>int a[10];</code>时,<code>sizeof[a0]</code>与<code>sizeof[int];</code>相等,且为<code>sizeof(a);</code>的10倍</p>
<h4 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>* p=a;</span><br><span class="line">p+=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//此时p从指向a[0]改为指向a[2]</span></span><br><span class="line"><span class="comment">//p向后移动4个字节,因为int类型占用字节数为2</span></span><br></pre></td></tr></table></figure>
<p>指针的自增和自减同理<br>指针也可以相互加减<br>类型不同的指针不能相互赋值,相同的可以</p>
<p>当两个指针指向同一个数组时,才可以进行数组的关系运算<br>可以比较两个指针的地址值大小</p>
<p>可以将指针作为表达式,当其为空指针时表达式为假,反之为真</p>
<h4 id="通过指针引用数组"><a href="#通过指针引用数组" class="headerlink" title="通过指针引用数组"></a>通过指针引用数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p=a;</span><br><span class="line"><span class="comment">//或int *p=a[0];</span></span><br></pre></td></tr></table></figure>
<p>此后,使用a或p引用数组方法相同<br><code>a[i]</code>可以这样访问:<code>*(a+i)</code>或<code>*(p+i)</code>或<code>p[i]</code></p>
<h4 id="通过指针访问未命名数组"><a href="#通过指针访问未命名数组" class="headerlink" title="通过指针访问未命名数组"></a>通过指针访问未命名数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p=(<span class="type">int</span> [])&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>这里的<code>(int [])&#123;2,4,8&#125;</code>就是一个未命名数组,可以使用p来访问数组</p>
<p>如果语句在函数外部，则具有静态生存期，花括号列表中的值必须为常量<br>若在函数内，则可以为变量</p>
<h3 id="9-3-2指针与多维数组"><a href="#9-3-2指针与多维数组" class="headerlink" title="9.3.2指针与多维数组"></a>9.3.2指针与多维数组</h3><h4 id="二维数组元素的存储与地址"><a href="#二维数组元素的存储与地址" class="headerlink" title="二维数组元素的存储与地址"></a>二维数组元素的存储与地址</h4><p>二位数组其实就是一维数组的数组。<br>所以，如果定义一个<code>int a[3][4]</code>，那么<code>a</code>这个指针指向数组首个元素，也就是第一个由4个int组成的一维数组。上一节讲到可以用指针运算来指向数组元素，同样的方法，所以<code>a[0]+1</code>表示<code>a[0][1]</code>元素地址，<code>a[2]+3</code>表示<code>a[2][3]</code>元素地址。</p>
<table>
<thead>
<tr>
<th>表示形式</th>
<th>含义</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td><code>a</code>，<code>&amp;a[0]</code>，<code>a+0</code></td>
<td>指向一维数组a[0]的地址</td>
<td>行地址</td>
</tr>
<tr>
<td><code>*a</code>，<code>*(a+0)</code>，<code>*a[0]</code>，<code>&amp;a[0][0]</code>，<code>a[0]+0</code>，<code>*(a+0)+0</code></td>
<td>指向元素a[0][0]的地址</td>
<td>列地址</td>
</tr>
<tr>
<td><code>*(a[1]+2)</code>，<code>a[1][2]</code></td>
<td>元素的值</td>
<td>元素的值</td>
</tr>
</tbody></table>
<h3 id="9-3-3指针与字符串"><a href="#9-3-3指针与字符串" class="headerlink" title="9.3.3指针与字符串"></a>9.3.3指针与字符串</h3><p>字符串实际上就是一个带有结束标识<code>\0</code>的字符数组。</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>conda常用命令</title>
    <url>/2022/conda-command/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class="line">bash Anaconda3-2021.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>此时输入<code>conda</code>找不到命令，需要修改环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建名为py37的python3.7虚拟环境</span><br><span class="line">conda create -n py37 python=3.7</span><br><span class="line">#进入py37环境</span><br><span class="line">conda activate py37</span><br><span class="line">#安装python的ipython模块</span><br><span class="line">conda install ipython</span><br><span class="line">#退出当前环境</span><br><span class="line">conda deactivate</span><br><span class="line">#查看已安装的包</span><br><span class="line">conda list</span><br><span class="line">#删除虚拟环境</span><br><span class="line">conda remove -n py37 --all</span><br><span class="line">#查看当前存在哪些虚拟环境</span><br><span class="line">conda env list </span><br></pre></td></tr></table></figure>
<h2 id="更新环境"><a href="#更新环境" class="headerlink" title="更新环境"></a>更新环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#检查更新当前conda</span><br><span class="line">conda update conda</span><br><span class="line">#更新anaconda</span><br><span class="line">conda update anaconda</span><br><span class="line">#更新所有库</span><br><span class="line">conda update --all</span><br><span class="line">#更新python</span><br><span class="line">conda update python</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>corexy结构方向调整</title>
    <url>/2022/corexy-debugging/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><p>XY轴需要互换 -&gt;  反向随便哪个电机<br>X轴需要反向 -&gt; 两个电机一起反<br>Y轴需要反向 -&gt; 两个电机交换线，不要动固件<br>依次做完</p>
<h2 id="啰嗦"><a href="#啰嗦" class="headerlink" title="啰嗦"></a>啰嗦</h2><p>第1步。XY轴交换。<br>操作：输入命令 G28 X（Marlin: 屏幕上让X轴移动）。观察打印头运动方向。<br>注意这个步骤不需要理会X方向和Y方向正反，只需要关心是不是X变成了Y、Y变成了X。<br>如果是Y方向在走，那么赶紧停机，防止撞墙。然后修改配置文件让A电机反向。<br>如果是X方向在走，那么此步不做任何调整。<br>第2步。X轴方向。<br>操作：输入G28 X（Marlin: 屏幕上让X轴移动）。观察打印头运动方向。<br>如果方向不符合预期，那么赶紧停机，防止撞墙。然后修改配置文件让A和B电机全部反向。<br>如果符合预期，那么此步不做任何调整。<br>第3步。Y轴方向。<br>操作：输入G28 Y（Marlin: 屏幕上让Y轴移动）。观察打印头运动方向。<br>如果方向不符合预期，那么赶紧停机，防止撞墙。关闭电源，拔下A B电机插头，互相交换，插上，开机。（插插头的时候保持方向，不要翻转）。<br>如果符合预期，那么此步不做任何调整。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://wiki.3dphell.com/zh/basic/calibration">https://wiki.3dphell.com/zh/basic/calibration</a><br>标题图：VoronDesign</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>3D打印</tag>
      </tags>
  </entry>
  <entry>
    <title>直接使用python做后端连接go-cqhttp的qqbot</title>
    <url>/2022/cqhttp-qqbot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>不懂就问，这篇文章的那张图片是go-cqhttp的logo吗</p>
</blockquote>
<p>看了go-cqhttp的文档之后，深感我要框架做何用，直接python写个后端和cqhttp用http通讯多简单啊hhh干脆不用nonebot2了</p>
<h2 id="go-cqhttp配置"><a href="#go-cqhttp配置" class="headerlink" title="go-cqhttp配置"></a>go-cqhttp配置</h2><p>首先是go-cqhttp的配置文件修改，需要配置反向http连接的路径和端口<br><code>config.yml</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- http: # HTTP 通信设置</span><br><span class="line">    address: 0.0.0.0:5700 # HTTP监听地址</span><br><span class="line">    timeout: 5      # 反向 HTTP 超时时间, 单位秒，&lt;5 时将被忽略</span><br><span class="line">    long-polling:   # 长轮询拓展</span><br><span class="line">      enabled: false       # 是否开启</span><br><span class="line">      max-queue-size: 2000 # 消息队列大小，0 表示不限制队列大小，谨慎使用</span><br><span class="line">    middlewares:</span><br><span class="line">      &lt;&lt;: *default # 引用默认中间件</span><br><span class="line">    post:           # 反向HTTP POST地址列表</span><br><span class="line">    #- url: &#x27;&#x27;                # 地址</span><br><span class="line">    #  secret: &#x27;&#x27;             # 密钥</span><br><span class="line">    #  max-retries: 3         # 最大重试，0 时禁用</span><br><span class="line">    #  retries-interval: 1500 # 重试时间，单位毫秒，0 时立即</span><br><span class="line">    - url: http://127.0.0.1:8000/ # 地址</span><br><span class="line">    #  secret: &#x27;&#x27;                  # 密钥</span><br><span class="line">    #  max-retries: 0             # 最大重试，0 时禁用</span><br><span class="line">    #  retries-interval: 1000      # 重试时间，单位毫秒，0 时立即</span><br></pre></td></tr></table></figure>

<p>这样接收go-cqhttp的消息只要监听<code>8000</code>端口，同时发送请求只需向<code>5700</code>端口发送<code>get</code>或<code>post</code>数据。</p>
<h2 id="qqbot的python代码实现"><a href="#qqbot的python代码实现" class="headerlink" title="qqbot的python代码实现"></a>qqbot的python代码实现</h2><p>不使用nonebot2这样的框架，至少在不算复杂的应用都情况下感觉十分简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from flask import Flask, request</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">commands = [&#x27;记分&#x27;, &#x27;清零&#x27;, &#x27;查询&#x27;, &#x27;复读&#x27;, &#x27;add&#x27;, &#x27;del&#x27;, &#x27;inquire&#x27;, &#x27;12&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_score(target, score):</span><br><span class="line">    db = pymysql.connect(host=&#x27;triority.cc&#x27;,</span><br><span class="line">                         user=&#x27;triority&#x27;,</span><br><span class="line">                         password=&#x27;xxx&#x27;,</span><br><span class="line">                         database=&#x27;qqbot&#x27;)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = &quot;select score from scores \</span><br><span class="line">            where qq_id = %s&quot; % (target)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    if len(results) &gt; 0:</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;update scores set score = score + &quot; + score + &quot; where qq_id = %s&quot; % (target)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">        except:</span><br><span class="line">            db.rollback()</span><br><span class="line">            print(&quot;rollback&quot;)</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;insert into scores(qq_id, op, score)\</span><br><span class="line">                    values (&quot; + target + &quot;, 0, &quot; + score + &quot;)&quot;</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">        except:</span><br><span class="line">            db.rollback()</span><br><span class="line">            print(&quot;rollback&quot;)</span><br><span class="line">    sql = &quot;select score from scores where qq_id = %s&quot; % (target)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    now_score = results[0][0]</span><br><span class="line">    db.close()</span><br><span class="line">    return now_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def inquire(target):</span><br><span class="line">    try:</span><br><span class="line">        db = pymysql.connect(host=&#x27;triority.cc&#x27;,</span><br><span class="line">                             user=&#x27;triority&#x27;,</span><br><span class="line">                             password=&#x27;xxx&#x27;,</span><br><span class="line">                             database=&#x27;qqbot&#x27;)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        sql = &quot;select score from scores where qq_id = %s&quot; % (target)</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line">        now_score = results[0][0]</span><br><span class="line">        db.close()</span><br><span class="line">    except:</span><br><span class="line">        now_score = &#x27;不存在&#x27;</span><br><span class="line">    return now_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def delete(target):</span><br><span class="line">    try:</span><br><span class="line">        db = pymysql.connect(host=&#x27;triority.cc&#x27;,</span><br><span class="line">                             user=&#x27;triority&#x27;,</span><br><span class="line">                             password=&#x27;xxx&#x27;,</span><br><span class="line">                             database=&#x27;qqbot&#x27;)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        sql = &quot;select score from scores where qq_id = %s&quot; % (target)</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line">        now_score = results[0][0]</span><br><span class="line">        sql = &quot;delete from scores where qq_id = %s&quot; % (target)</span><br><span class="line">        try:</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">        except:</span><br><span class="line">            db.rollback()</span><br><span class="line">            print(&quot;rollback&quot;)</span><br><span class="line">        del_message = &#x27;分数已清零&#x27;</span><br><span class="line">        db.close()</span><br><span class="line">    except:</span><br><span class="line">        del_message = &#x27;不存在记录&#x27;</span><br><span class="line">    return del_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def private(uid, message):</span><br><span class="line">    if message[0] == &#x27;复读&#x27;:</span><br><span class="line">        requests.get(&#x27;http://127.0.0.1:5700/send_private_msg?user_id=&#x27; + str(uid) +</span><br><span class="line">                     &#x27;&amp;message=&#x27; + str(message[1]) + &#x27;字符串长度&#x27; + str(len(message[1])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def group(gid, uid, message):</span><br><span class="line">    if message[0] == &#x27;记分&#x27; or message[0] == &#x27;add&#x27;:</span><br><span class="line">        score = message[1]</span><br><span class="line">        if message[2][0] == &#x27;[&#x27;:</span><br><span class="line">            target = message[2][10:-1]</span><br><span class="line">        else:</span><br><span class="line">            target = message[2]</span><br><span class="line">        new_score = add_score(target, score)</span><br><span class="line">        requests.get(</span><br><span class="line">            &#x27;http://127.0.0.1:5700/send_group_msg?group_id=&#x27; + str(gid) +</span><br><span class="line">            &#x27;&amp;message=&#x27; + str(message[2]) + &#x27;已增加&#x27; + score + &#x27;分，当前分数为&#x27; + str(new_score))</span><br><span class="line">    elif message[0] == &#x27;复读&#x27;:</span><br><span class="line">        requests.get(&#x27;http://127.0.0.1:5700/send_group_msg?group_id=&#x27; + str(gid) +</span><br><span class="line">                     &#x27;&amp;message=&#x27; + str(message[1]) + &#x27;字符串长度&#x27; + str(len(message[1])))</span><br><span class="line">    elif message[0] == &#x27;查询&#x27; or message[0] == &#x27;inquire&#x27;:</span><br><span class="line">        if message[1][0] == &#x27;[&#x27;:</span><br><span class="line">            target = message[1][10:-1]</span><br><span class="line">        else:</span><br><span class="line">            target = message[1]</span><br><span class="line">        score = inquire(target)</span><br><span class="line">        requests.get(&#x27;http://127.0.0.1:5700/send_group_msg?group_id=&#x27; + str(gid) +</span><br><span class="line">                     &#x27;&amp;message=&#x27; + str(message[1]) + &#x27;当前分数为&#x27; + str(score))</span><br><span class="line">    elif message[0] == &#x27;清零&#x27; or message[0] == &#x27;del&#x27;:</span><br><span class="line">        if message[1][0] == &#x27;[&#x27;:</span><br><span class="line">            target = message[1][10:-1]</span><br><span class="line">        else:</span><br><span class="line">            target = message[1]</span><br><span class="line">        del_message = delete(target)</span><br><span class="line">        requests.get(&#x27;http://127.0.0.1:5700/send_group_msg?group_id=&#x27; + str(gid) +</span><br><span class="line">                     &#x27;&amp;message=&#x27; + str(message[1]) + del_message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&quot;POST&quot;])</span><br><span class="line">def post_data():</span><br><span class="line">    print(request.get_json())  # 将原始信息传到后台</span><br><span class="line">    if request.get_json().get(&#x27;message_type&#x27;) == &#x27;private&#x27;:  # 如果是私聊信息</span><br><span class="line">        uid = request.get_json().get(&#x27;sender&#x27;).get(&#x27;user_id&#x27;)  # 获取信息发送者的 QQ号码</span><br><span class="line">        message = request.get_json().get(&#x27;raw_message&#x27;)  # 获取原始信息</span><br><span class="line">        if message[0] == &#x27;/&#x27;:</span><br><span class="line">            message = message[1:].rstrip().split(&#x27; &#x27;)</span><br><span class="line">            if message[0] in commands:</span><br><span class="line">                private(uid, message)</span><br><span class="line">    elif request.get_json().get(&#x27;message_type&#x27;) == &#x27;group&#x27;:  # 如果是群聊信息</span><br><span class="line">        gid = request.get_json().get(&#x27;group_id&#x27;)  # 获取群号</span><br><span class="line">        uid = request.get_json().get(&#x27;sender&#x27;).get(&#x27;user_id&#x27;)  # 获取信息发送者的 QQ号码</span><br><span class="line">        message = request.get_json().get(&#x27;raw_message&#x27;)  # 获取原始信息</span><br><span class="line">        if message[0] == &#x27;/&#x27;:</span><br><span class="line">            message = message[1:].rstrip().split(&#x27; &#x27;)</span><br><span class="line">            if message[0] in commands:</span><br><span class="line">                group(gid, uid, message)</span><br><span class="line">    return &#x27;OK&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True, host=&#x27;127.0.0.1&#x27;, port=8000)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
        <tag>QQ机器人</tag>
        <tag>mySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>滴水洞游览</title>
    <url>/2022/dishuidong/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多图预警"><a href="#多图预警" class="headerlink" title="多图预警!"></a>多图预警!</h1><img src="/2022/dishuidong/01.jpg" class="">
<img src="/2022/dishuidong/02.jpg" class="">
<img src="/2022/dishuidong/06.jpg" class="">
<img src="/2022/dishuidong/07.jpg" class="">
<img src="/2022/dishuidong/08.jpg" class="">
<img src="/2022/dishuidong/09.jpg" class="">
<img src="/2022/dishuidong/010.jpg" class="">
<img src="/2022/dishuidong/011.jpg" class="">
<img src="/2022/dishuidong/012.jpg" class="">
<img src="/2022/dishuidong/013.jpg" class="">
<img src="/2022/dishuidong/014.jpg" class="">
<img src="/2022/dishuidong/015.jpg" class="">
<img src="/2022/dishuidong/016.jpg" class="">
<img src="/2022/dishuidong/017.jpg" class="">
<img src="/2022/dishuidong/018.jpg" class="">
<img src="/2022/dishuidong/019.jpg" class="">
<img src="/2022/dishuidong/020.jpg" class="">
<img src="/2022/dishuidong/021.jpg" class="">
<img src="/2022/dishuidong/022.jpg" class="">
<img src="/2022/dishuidong/023.jpg" class="">]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>旅游</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>1.54寸双色墨水屏arduino及树莓派驱动</title>
    <url>/2022/e-paper-1in54/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几日逛淘宝发现一个1.54寸双色墨水屏，屏幕+驱动只要16，果断下单拿来玩玩<br>[第二天就涨价到了26了hhhhhhhhhhhc]<br>如果还有人感兴趣的话在这：<a href="https://m.tb.cn/h.fA3mNRx?tk=MW9n2sLzRZj" title="某宝链接">某宝链接</a></p>
<h1 id="arduino"><a href="#arduino" class="headerlink" title="arduino"></a>arduino</h1><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>在<a href="https://www.waveshare.net/wiki/1.54inch_e-Paper_Module_Manual" title="微雪官网资料">微雪官网资料</a>找到接线图：<br><img src="/2022/e-paper-1in54/%E6%8E%A5%E7%BA%BF%E5%9B%BE.png" alt="接线图"><br>虽然和我的引脚名称不太一样，但是不影响理解和使用。</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>当然也是在微雪官网下载的资料，注释都是英文而且一些有点问题，这里整理一下<br><a href="https://www.waveshare.net/w/upload/3/39/E-Paper_code.7z" title="微雪资料下载链接">微雪资料下载链接</a><br>由于我的屏幕是1.54寸，所以在<code>arduino</code>的<code>epd1in54</code>文件夹内<br>主要需要改动的是<code>epd1in54.ino</code>和<code>imagedata.cpp</code></p>
<h4 id="imagedata-cpp"><a href="#imagedata-cpp" class="headerlink" title="imagedata.cpp"></a>imagedata.cpp</h4><p>这个文件要修改的是那个保存图片的数组。图片转换数组可以用微雪提供的工具：<a href="https://www.waveshare.net/w/upload/3/36/Image2Lcd.7z" title="图片取模软件">图片取模软件</a><br>打开后是这样：<br><img src="/2022/e-paper-1in54/image2lcd.png" alt="取模软件"><br>首先修改图片尺寸，我的屏幕是200x200.<br>然后左上角打开，选择一张图片，修改参数后保存为c语言数组。<br>打开保存的数组文件可以看见：<br><img src="/2022/e-paper-1in54/%E6%95%B0%E7%BB%84%E6%96%87%E4%BB%B6.png" alt="数组文件"><br>用数组数据替换掉原来文件里的数据<br>需要注意的是复制的时候跳过数组第一行，从第二行开始复制，否则最后显示的图片会发生偏移</p>
<h4 id="epd1in54-ino"><a href="#epd1in54-ino" class="headerlink" title="epd1in54.ino"></a>epd1in54.ino</h4><p>废话不多说直接上代码和注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;epd1in54.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;epdpaint.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;imagedata.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COLORED     0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNCOLORED   1</span></span><br><span class="line"><span class="comment">//初始化图片缓存，由于一个字节8个像素点，所以这里必须是8的倍数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> image[<span class="number">1024</span>];</span><br><span class="line"><span class="function">Paint <span class="title">paint</span><span class="params">(image, <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="comment">//墨水屏实例化</span></span><br><span class="line">Epd epd;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;e-Paper init &quot;</span>);</span><br><span class="line">  <span class="comment">//全刷初始化</span></span><br><span class="line">  <span class="keyword">if</span> (epd.<span class="built_in">Init</span>(lut_full_update) != <span class="number">0</span>) &#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;e-Paper init failed&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//清屏两次</span></span><br><span class="line">  <span class="comment">//电子纸显示屏中嵌入了2个存储区域，一旦刷新显示，内存区域将自动切换，即 SetFrameMemory 的下一个操作将设置其他内存区域，因此，您必须清除帧内存两次。</span></span><br><span class="line">  epd.<span class="built_in">ClearFrameMemory</span>(<span class="number">0xFF</span>);</span><br><span class="line">  epd.<span class="built_in">DisplayFrame</span>();</span><br><span class="line">  epd.<span class="built_in">ClearFrameMemory</span>(<span class="number">0xFF</span>); </span><br><span class="line">  epd.<span class="built_in">DisplayFrame</span>();</span><br><span class="line">  <span class="comment">//设置paint翻转角度，宽，高</span></span><br><span class="line">  paint.<span class="built_in">SetRotate</span>(ROTATE_0);</span><br><span class="line">  paint.<span class="built_in">SetWidth</span>(<span class="number">200</span>);</span><br><span class="line">  paint.<span class="built_in">SetHeight</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="comment">//将paint设置为黑色，在paint的（30,4）这一点为左顶点写字符串，字体大小为16，颜色为白色,并将paint写入到图片中</span></span><br><span class="line">  paint.<span class="built_in">Clear</span>(COLORED);</span><br><span class="line">  paint.<span class="built_in">DrawStringAt</span>(<span class="number">30</span>, <span class="number">4</span>, <span class="string">&quot;Hello world!&quot;</span>, &amp;Font16, UNCOLORED);</span><br><span class="line">  epd.<span class="built_in">SetFrameMemory</span>(paint.<span class="built_in">GetImage</span>(), <span class="number">0</span>, <span class="number">10</span>, paint.<span class="built_in">GetWidth</span>(), paint.<span class="built_in">GetHeight</span>());</span><br><span class="line">  <span class="comment">//将paint设置为黑色，在paint的（0,2）这一点为左顶点写字符串，字体大小为24，颜色为黑色,并将paint写入到图片中</span></span><br><span class="line">  paint.<span class="built_in">Clear</span>(UNCOLORED);</span><br><span class="line">  paint.<span class="built_in">DrawStringAt</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&quot;e-Paper Demo&quot;</span>, &amp;Font24, COLORED);</span><br><span class="line">  epd.<span class="built_in">SetFrameMemory</span>(paint.<span class="built_in">GetImage</span>(), <span class="number">0</span>, <span class="number">30</span>, paint.<span class="built_in">GetWidth</span>(), paint.<span class="built_in">GetHeight</span>());</span><br><span class="line">  <span class="comment">//重新设置paint的宽高</span></span><br><span class="line">  paint.<span class="built_in">SetWidth</span>(<span class="number">64</span>);</span><br><span class="line">  paint.<span class="built_in">SetHeight</span>(<span class="number">64</span>);</span><br><span class="line">  <span class="comment">//画3条线并写入图片</span></span><br><span class="line">  paint.<span class="built_in">Clear</span>(UNCOLORED);</span><br><span class="line">  paint.<span class="built_in">DrawRectangle</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">50</span>, COLORED);</span><br><span class="line">  paint.<span class="built_in">DrawLine</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">50</span>, COLORED);</span><br><span class="line">  paint.<span class="built_in">DrawLine</span>(<span class="number">40</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, COLORED);</span><br><span class="line">  epd.<span class="built_in">SetFrameMemory</span>(paint.<span class="built_in">GetImage</span>(), <span class="number">16</span>, <span class="number">60</span>, paint.<span class="built_in">GetWidth</span>(), paint.<span class="built_in">GetHeight</span>());</span><br><span class="line">  <span class="comment">//打开显示</span></span><br><span class="line">  epd.<span class="built_in">DisplayFrame</span>();</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">8000</span>);</span><br><span class="line">  <span class="comment">//刷新显示两次原图。</span></span><br><span class="line">  epd.<span class="built_in">SetFrameMemory</span>(IMAGE_DATA);</span><br><span class="line">  epd.<span class="built_in">DisplayFrame</span>();</span><br><span class="line">  epd.<span class="built_in">SetFrameMemory</span>(IMAGE_DATA);</span><br><span class="line">  epd.<span class="built_in">DisplayFrame</span>();</span><br><span class="line">  <span class="comment">//睡眠</span></span><br><span class="line">  epd.<span class="built_in">Sleep</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我删掉了原来资料的画图部分，只保留了字符串显示，画图直接看<a href="https://www.waveshare.net/wiki/1.54inch_e-Paper_Module_Manual#.E4.B8.8A.E5.B1.82.E5.BA.94.E7.94.A8_4" title="微雪文档">微雪文档</a>就好<br>但是还有一个问题，资料中没有关于局部刷新的demo，只在文档里提到了局部刷新的初始化方式。这里暂时留坑。</p>
<h1 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h1>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>arduino</tag>
        <tag>显示屏</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个PCB：1-4的usb2.0拓展坞</title>
    <url>/2022/first-pcb-sl21a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>其实文章是2023.11.6写的，晚上收拾照片偶然发现了2022.7.21拍的照片，这个是我画的第一个板子，主要是记录一下<br><img src="/2022/first-pcb-sl21a/IMG_20220721_185451.jpg"></p>
<h1 id="设计图"><a href="#设计图" class="headerlink" title="设计图"></a>设计图</h1><table>
<thead>
<tr>
<th align="center"><img src="/2022/first-pcb-sl21a/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231106191817.png"></th>
<th align="center"><img src="/2022/first-pcb-sl21a/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231106191835.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
      </tags>
  </entry>
  <entry>
    <title>frpc-systemctl</title>
    <url>/2022/frpc-systemctl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>frp总是要去配置systemctl服务，所以复制粘贴什么的最棒了<br>首先编辑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>
<p>然后写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frpc service </span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">#frp路径</span><br><span class="line">ExecStart=/usr/local/frpc/frpc -c /usr/local/frpc/frpc.ini</span><br><span class="line">#自动重启</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客文章特殊md代码记录</title>
    <url>/2022/hexo-post-code/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 值得一提的文章</span><br><span class="line">- 做点好玩的</span><br><span class="line">- [计算机, CV工程师]</span><br><span class="line">- [计算机, 源码分享]</span><br><span class="line">- [计算机, 知识整理]</span><br><span class="line">- [计算机, 折腾记录]</span><br><span class="line">- [计算机, 文档教程]</span><br><span class="line">- [生活, 游览记录]</span><br><span class="line">- [生活, 天文摄影]</span><br><span class="line">- [生活, 摄影合辑]</span><br><span class="line">- 整活</span><br><span class="line">- minecraft</span><br></pre></td></tr></table></figure>
<h3 id="插入图片："><a href="#插入图片：" class="headerlink" title="插入图片："></a>插入图片：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//插件：</span><br><span class="line">&#123;% asset_img xxx.png 描述 %&#125;</span><br><span class="line">//Markdown：</span><br><span class="line">![描述](xxx.png)</span><br></pre></td></tr></table></figure>

<h3 id="插入视频："><a href="#插入视频：" class="headerlink" title="插入视频："></a>插入视频：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=wwww.xxx.cn/xxx.mp4&quot; %&#125;</span><br><span class="line">&#123;% dplayer &quot;url=/video/xxx.mp4&quot; %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件下载链接："><a href="#文件下载链接：" class="headerlink" title="文件下载链接："></a>文件下载链接：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[文字](xxx.zip &quot;描述&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="哔哩哔哩视频："><a href="#哔哩哔哩视频：" class="headerlink" title="哔哩哔哩视频："></a>哔哩哔哩视频：</h3><p>需要替换的内容：<code>src</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=727587109&amp;bvid=BV1LS4y1v7Nj&amp;cid=748560556&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; height: 100%; Left: 0; top: 0;&quot; &gt;&lt;/iframe&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;点击时的区域标题&lt;/summary&gt;</span><br><span class="line">  xxx</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>

<h3 id="小黑块："><a href="#小黑块：" class="headerlink" title="小黑块："></a>小黑块：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% spoiler 被遮挡文字 %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>3D打印入坑指南</title>
    <url>/2022/how-to-3d-printing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="WELCOME"><a href="#WELCOME" class="headerlink" title="WELCOME"></a>WELCOME</h2><p>首先欢迎你入坑3D打印，这篇文章是为初学者写的3D打印基础知识，希望对各位读者入门有所帮助。<br>下面各个章节分别简要讲述3D打印的各个环节，从建立3D模型，到对模型进行切片，到最终打印的每个步骤。<br>模型是你想要打印的三维物体，切片则是将这个物体转换成打印机认识的移动路径等信息，最后就可以将切片文件上传到打印机打印啦！<br>玩得开心！<br><img src="/2022/how-to-3d-printing/3D%E6%89%93%E5%8D%B0%E8%89%BA%E6%9C%AF%E5%93%81.png" alt="一个3D打印的艺术品"></p>
<h2 id="STL模型"><a href="#STL模型" class="headerlink" title="STL模型"></a>STL模型</h2><p>进行打印需要一个3D模型，这是一个<code>.stl</code>格式的文件。这个模型可以去网上下载也可以自己制作。</p>
<h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3><p>这里介绍一个网站，一般称其为<a href="https://www.thingiverse.com/" title="T站">T站</a>(当然还有很多其他优秀的平台比如<a href="https://cults3d.com/" title="cults3d">cults3d</a>)，这里有世界各地爱好者上传的模型文件，你可以下载一个<code>.stl</code>格式的文件来进行切片并打印。</p>
<h3 id="自己设计模型"><a href="#自己设计模型" class="headerlink" title="自己设计模型"></a>自己设计模型</h3><p>如果需要自己设计一个模型，这里推荐使用<code>Solidworks</code>软件进行设计，这里提供一个下载安装方式：<a href="https://mp.weixin.qq.com/s/-xcww_HDaxx9MxwU9QDGeA">下载安装solidworks</a>。根据文章教程即可。当然你也可以使用其他软件进行设计，比如3DMax等，这里不再叙述。<br>使用solidworks设计的零件文件格式为<code>.SLDPRT</code>，可以在软件中进行另存为为文件并选择<code>stl</code>格式即可导出为<code>.stl</code>格式。<br><img src="/2022/how-to-3d-printing/%E5%8F%A6%E5%AD%98%E4%B8%BAstl.png" alt="另存为stl"></p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h3 id="使用自己的打印机进行打印"><a href="#使用自己的打印机进行打印" class="headerlink" title="使用自己的打印机进行打印"></a>使用自己的打印机进行打印</h3><p>切片的软件也有很多，我是用的是<code>cura</code>，这里有这个软件的<a href="https://ultimaker.cn/Ultimaker-cura-software/Download">官网下载页</a>。<br><img src="/2022/how-to-3d-printing/cura.png" alt="使用cura切片一个冰墩墩模型"><br>切片之后的文件格式为<code>.gcode</code>，里面包含的信息告诉了打印机如何移动来打印。</p>
<h3 id="使用学校实验室的打印机进行打印"><a href="#使用学校实验室的打印机进行打印" class="headerlink" title="使用学校实验室的打印机进行打印"></a>使用学校实验室的打印机进行打印</h3><p>学校实验室的打印机有自己专用的切片软件<code>SHINING 3D</code>，这个软件不能从网上下载只能在打印机的u盘里获取，所以我将把这个软件的安装包复制出来，可以在这里<a href="https://cr.triority.cc/f/LRHZ/SHINING_Setup_5.2.6.exe">下载</a>，提前尝试一下切片。<br><img src="/2022/how-to-3d-printing/Shining_3D.png" alt="使用shining 3D切片一个霍格沃茨城堡模型"></p>
<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>当你做好了以上步骤，就可以把切片文件通过各种方式交给打印机，就可以开始打印啦~<br>如果你使用实验室提供的打印机，把文件复制到u盘里，然后把u盘插到打印机上即可。<br>如果你使用自制打印机，那么可以用sd卡或在线上传。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上内容只是对整个过程的简要概括，也就是<code>模型,切片,打印</code>这个整体步骤，之中的细节，欢迎来到实验室亲自操作体验！有任何问题随时问我！给大家看看打印机的样子吧：<br>实验室的打印机：<br><img src="/2022/how-to-3d-printing/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8F%90%E4%BE%9B%E7%9A%84%E6%89%93%E5%8D%B0%E6%9C%BA.jpg" alt="实验室的打印机"><br>这是我手搓的：<br><img src="/2022/how-to-3d-printing/%E8%87%AA%E5%88%B6%E6%89%93%E5%8D%B0%E6%9C%BA.jpg" alt="这是我手搓的"><br>3D打印技术是一个让我们实现创意的工具，希望各位maker能在这里充分发挥创造力！<br><img src="/2022/how-to-3d-printing/%E5%88%9B%E9%80%A0%E5%8A%9B%EF%BC%81.jpg" alt="一些无人机"></p>
<h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>给大家看看实验室展示区的几个作品，都是这里的学长们制作的，欢迎你的作品加入！<br><img src="/2022/how-to-3d-printing/%E5%B1%95%E7%A4%BA.jpg" alt="展台的冰山一角"></p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
        <category>外部引用</category>
      </categories>
      <tags>
        <tag>3D打印</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>丁仪QQ机器人使用说明</title>
    <url>/2022/how-to-use-qqbot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先-欢迎您成为MPG的一员"><a href="#首先-欢迎您成为MPG的一员" class="headerlink" title="首先,欢迎您成为MPG的一员"></a>首先,欢迎您成为MPG的一员</h2><p>丁仪机器人旨在帮助管理员进行群管理,所以请认真按照群规使用,切勿滥用权力,成员记分达到12将被踢出</p>
<p><strong>注:所有的<code>&lt;QQ号&gt;</code>都与<code>&lt;艾特某群员代替&gt;</code>完全等价!!随时可以替换!</strong></p>
<p><strong>新成员加入时会报告新成员记分数，如果大于等于12请直接踢出</strong></p>
<h3 id="机器人命令语法-MPG专用命令"><a href="#机器人命令语法-MPG专用命令" class="headerlink" title="机器人命令语法[MPG专用命令]"></a>机器人命令语法[MPG专用命令]</h3><h4 id="1-记分"><a href="#1-记分" class="headerlink" title="1.记分"></a>1.记分</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记分 &lt;记分分数&gt; &lt;QQ号&gt; &lt;记分理由&gt;</span><br></pre></td></tr></table></figure>
<p>不要忘记空格!!!	不要写反分数和QQ号!!!	不要不写理由!!!</p>
<h4 id="2-清零"><a href="#2-清零" class="headerlink" title="2.清零"></a>2.清零</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">清零 &lt;QQ号&gt;</span><br></pre></td></tr></table></figure>
<p>清零不仅删除现有分数,还会删除全部历史记录!!!</p>
<h4 id="3-记分明细查询"><a href="#3-记分明细查询" class="headerlink" title="3.记分明细查询"></a>3.记分明细查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明细 &lt;QQ号&gt;</span><br></pre></td></tr></table></figure>
<p>可查询此群员全部记录,包括分数,时间,原因,记分操作者</p>
<h4 id="4-查看全部数据"><a href="#4-查看全部数据" class="headerlink" title="4.查看全部数据"></a>4.查看全部数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">穷举</span><br></pre></td></tr></table></figure>
<h5 id="这里的穷举将会输出保存的全部数据-直接使用将会造成刷屏-仅限调试程序时使用"><a href="#这里的穷举将会输出保存的全部数据-直接使用将会造成刷屏-仅限调试程序时使用" class="headerlink" title="这里的穷举将会输出保存的全部数据,直接使用将会造成刷屏,仅限调试程序时使用"></a><strong>这里的穷举将会输出保存的全部数据,直接使用将会造成刷屏,仅限调试程序时使用</strong></h5><h3 id="机器人命令语法-公共命令"><a href="#机器人命令语法-公共命令" class="headerlink" title="机器人命令语法[公共命令]"></a>机器人命令语法[公共命令]</h3><h4 id="1-分数查询"><a href="#1-分数查询" class="headerlink" title="1.分数查询"></a>1.分数查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查分 &lt;QQ号&gt;</span><br></pre></td></tr></table></figure>
<p>查询任何人现有总分数.</p>
<p>有任何问题或建议,欢迎随时联系丁仪,包括MPG成员变动导致的使用权限变化<br>机器人应且只应用于群管,请勿用于其他用途</p>
<h3 id="其实还有个隐藏公共命令，欢迎大家探索"><a href="#其实还有个隐藏公共命令，欢迎大家探索" class="headerlink" title="其实还有个隐藏公共命令，欢迎大家探索"></a>其实还有个隐藏公共命令，欢迎大家探索</h3><!-- spoiler-1ffd9:black -->
  <span class="spoiler" onclick="this.classList.toggle('spoiler')">
    <span class="spoiler-box spoiler-1ffd9">QQ号&lt;艾特xxx&gt;–获取被艾特的人的QQ号</span>
  </span>

<h3 id="机器人命令语法-最高级命令"><a href="#机器人命令语法-最高级命令" class="headerlink" title="机器人命令语法[最高级命令]"></a>机器人命令语法[最高级命令]</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">op &lt;QQ号&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deop &lt;QQ号&gt;</span><br></pre></td></tr></table></figure>
<p>将某人添加入或清除出MPG成员列表</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>QQ机器人</tag>
        <tag>linux</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>图片数据集自动生成与标注算法</title>
    <url>/2022/img-data-marker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写过一篇文章，讲的是自动标注，今天对这个程序做了一些改进，使其适应更多情况，并且重写了注释和部分函数，增加一些自定义功能<br>这个程序可以根据一张图片进行各种随机处理生成无数个图片的数据集，并且使用voc格式自动进行标注，节省大量人力和时间<br>2023.2.9更新：增加了yolo和voc输出的选择，增加了数据集数量控制，优化已有代码，加入了简介。</p>
<p>github仓库：<a href="https://github.com/Triority/photo_data_maker">photo_data_maker</a>，点个star谢谢你qwq</p>
<p>一部分细节内容位于<a href="https://triority.cc/2022/auto-marking/">博客的另一篇文章</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>程序用于自动生成用于神经网络视觉识别的训练数据集，也可以生成两次分别作为数据集和验证集。</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>首先裁剪出几张需要识别的物体的图片，然后使用绿色圆圈对其进行标注，再选择一堆背景图片作为生成数据的背景，越多样越好。</p>
<p>遍历文件夹读取图片，模仿现实环境对图片进行随机变换，如亮度加减，对比度加减，模糊，以及视角变化的透视变换，得到一个扭曲的图像，将其叠加在背景图片上，即可得到数据集图片。再用一样的变换参数对标注好的图片进行变换，但是这次图片有绿色(255,0,0)标注，直接选取标注区域的最小外接矩形即可得到目标位置。</p>
<p>图像输入及输出示例：</p>
<table>
<thead>
<tr>
<th align="center">原图</th>
<th align="center">标注图</th>
<th align="center">输出图片</th>
<th align="center">标注可视化</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/img-data-marker/WIN_20221214_20_55_01_Pro.jpg"></td>
<td align="center"><img src="/2022/img-data-marker/WIN_20221214_21_28_02_Pro.jpg"></td>
<td align="center"><img src="/2022/img-data-marker/45_out.jpg"></td>
<td align="center"><img src="/2022/img-data-marker/45_marked.jpg"></td>
</tr>
</tbody></table>
<p>经过实际测试，在数据生成参数合适的情况下，对于输入物体检测的成功率大于99%，受极限角度，特殊光照环境等干扰影响极小。</p>
<h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">- auto_marking</span><br><span class="line">--- images</span><br><span class="line">----- object_1</span><br><span class="line">--- images_marked</span><br><span class="line">----- object_1</span><br><span class="line">--- backs</span><br><span class="line">--- output</span><br><span class="line">----- images</span><br><span class="line">------- object_1</span><br><span class="line">----- images_marked</span><br><span class="line">------- object_1</span><br><span class="line">----- labels</span><br><span class="line">------- object_1</span><br><span class="line">- auto_marking.py</span><br><span class="line">- funcs.py</span><br><span class="line">- txt_output.py</span><br></pre></td></tr></table></figure>
<ul>
<li><code>images</code>内存放各个种类图片的文件夹，这些图片的种类即为文件夹名称。</li>
<li><code>images_marked</code>存放标注文件的文件夹，标注文件种类名称即为文件夹名称。</li>
<li><code>backs</code>文件夹存放所有的背景图片</li>
<li><code>output</code>输出，<code>images</code>是数据图片，<code>images_marked</code>是提供参考的标注的图片，<code>labels</code>是标注文件。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="auto-marking-py"><a href="#auto-marking-py" class="headerlink" title="auto_marking.py"></a>auto_marking.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> funcs <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> txt_output <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">total = <span class="number">100000</span></span><br><span class="line">processes = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_marker</span>(<span class="params">img, img_marked, back</span>):</span><br><span class="line">    <span class="comment"># 亮度，可自定义参数</span></span><br><span class="line">    img = random_brightness(img)</span><br><span class="line">    back = random_brightness(back)</span><br><span class="line">    <span class="comment"># 缩放，可自定义参数</span></span><br><span class="line">    r = random.randint(<span class="number">5</span>, <span class="number">40</span>) / <span class="number">10</span></span><br><span class="line">    img = cv2.resize(img, (<span class="number">0</span>, <span class="number">0</span>), fx=r, fy=r, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    img_marked = cv2.resize(img_marked, (<span class="number">0</span>, <span class="number">0</span>), fx=r, fy=r, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    <span class="comment"># 透视变换，可自定义参数</span></span><br><span class="line">    img, points = random_perspective(img, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 模糊</span></span><br><span class="line">    <span class="comment"># img = random_blur(img)</span></span><br><span class="line">    <span class="comment"># copy透视处理</span></span><br><span class="line">    xc, yc, wc, hc = points_perspective(img_marked, points)</span><br><span class="line">    <span class="comment"># 叠加</span></span><br><span class="line">    back, x, y = overlay(img, back)</span><br><span class="line">    xmin, ymin = (x + xc, y + yc)</span><br><span class="line">    xmax, ymax = (x + xc + wc, y + yc + hc)</span><br><span class="line">    <span class="comment"># cv2.rectangle(back, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)</span></span><br><span class="line">    <span class="keyword">return</span> back, xmin, ymin, xmax, ymax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_maker</span>(<span class="params">a, pro</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        objs = os.listdir(<span class="string">&#x27;auto_marking/images&#x27;</span>)</span><br><span class="line">        backs = os.listdir(<span class="string">&#x27;auto_marking/backs&#x27;</span>)</span><br><span class="line">        data_format = <span class="string">&#x27;yolo&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> m &lt; pro:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> objs:</span><br><span class="line">                imgs = os.listdir(<span class="string">&#x27;auto_marking/images/&#x27;</span>+k)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> imgs:</span><br><span class="line">                    img = cv2.imread(<span class="string">&#x27;auto_marking/images/&#x27;</span> + k + <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line">                    img_marked = cv2.imread(<span class="string">&#x27;auto_marking/images_marked/&#x27;</span> + k + <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> backs:</span><br><span class="line">                        <span class="keyword">if</span> m &gt; pro:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        m += <span class="number">1</span></span><br><span class="line">                        <span class="built_in">print</span>(m)</span><br><span class="line">                        s = <span class="built_in">str</span>(m) + <span class="built_in">str</span>(a)</span><br><span class="line">                        back = cv2.imread(<span class="string">&#x27;auto_marking/backs/&#x27;</span> + j)</span><br><span class="line">                        data_output, xmin, ymin, xmax, ymax = data_marker(img, img_marked, back)</span><br><span class="line">                        cv2.imwrite(<span class="string">&quot;auto_marking/output/images/&quot;</span> + k + <span class="string">&#x27;/&#x27;</span> + s + <span class="string">&#x27;.jpg&#x27;</span>, data_output)</span><br><span class="line">                        cv2.rectangle(data_output, (xmin, ymin), (xmax, ymax), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                        cv2.imwrite(<span class="string">&quot;auto_marking/output/images_marked/&quot;</span> + k + <span class="string">&#x27;/&#x27;</span> + s + <span class="string">&#x27;.jpg&#x27;</span>, data_output)</span><br><span class="line">                        <span class="keyword">if</span> data_format == <span class="string">&#x27;voc&#x27;</span>:</span><br><span class="line">                            picture_width = back.shape[<span class="number">1</span>]</span><br><span class="line">                            picture_height = back.shape[<span class="number">0</span>]</span><br><span class="line">                            txt = voc_xml_maker(s + <span class="string">&#x27;.jpg&#x27;</span>, xmin, ymin, xmax, ymax, k, picture_width, picture_height)</span><br><span class="line">                            label_name = s + <span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">                        <span class="keyword">elif</span> data_format == <span class="string">&#x27;yolo&#x27;</span>:</span><br><span class="line">                            y, x, n = data_output.shape</span><br><span class="line">                            txt = yolo_txt_maker(objs.index(k), xmin, ymin, xmax, ymax, x, y)</span><br><span class="line">                            label_name = s + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">raise</span> Exception(<span class="string">&#x27;wrong label_name&#x27;</span>)</span><br><span class="line">                        path = <span class="string">&#x27;auto_marking/output/labels/&#x27;</span> + k + <span class="string">&#x27;/&#x27;</span> + label_name</span><br><span class="line">                        fw = <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                        fw.write(txt)</span><br><span class="line">                        fw.close()</span><br><span class="line">                        <span class="comment">#print(s)</span></span><br><span class="line">    <span class="keyword">except</span> (Exception, BaseException) <span class="keyword">as</span> e:</span><br><span class="line">        exstr = traceback.format_exc()</span><br><span class="line">        <span class="built_in">print</span>(exstr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pl = multiprocessing.Manager().Lock()</span><br><span class="line">    pool = multiprocessing.Pool(processes)</span><br><span class="line">    per = <span class="built_in">int</span>(total/processes)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(processes):</span><br><span class="line">        pool.apply_async(data_maker, args=(<span class="built_in">str</span>(i), per))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sub-process(es) done.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="func-py"><a href="#func-py" class="headerlink" title="func.py"></a>func.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_brightness</span>(<span class="params">img, a=<span class="number">30</span>, b=<span class="number">30</span>, bright_min=<span class="number">2</span>, bright_max=<span class="number">254</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    亮度随机变化</span></span><br><span class="line"><span class="string">    :param img: 传入图像</span></span><br><span class="line"><span class="string">    :param a: 亮度变化倍率最大范围（0-100），默认30</span></span><br><span class="line"><span class="string">    :param b: 亮度变化大小最大范围（0-255），默认30</span></span><br><span class="line"><span class="string">    :param bright_min: 返回图像最小亮度，默认2</span></span><br><span class="line"><span class="string">    :param bright_max: 返回图像最大亮度，默认254</span></span><br><span class="line"><span class="string">    :return: 返回图像</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    alpha = <span class="number">0.01</span> * random.randint(-a, a) + <span class="number">1</span></span><br><span class="line">    beta = random.randint(-b, b)</span><br><span class="line">    <span class="keyword">return</span> np.uint8(np.clip((alpha * img + beta), bright_min, bright_max))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_blur</span>(<span class="params">img, r=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    随机大小高斯滤波</span></span><br><span class="line"><span class="string">    :param img: 传入图像</span></span><br><span class="line"><span class="string">    :param r: 高斯滤波范围，模糊处理边长为2r+1，默认3</span></span><br><span class="line"><span class="string">    :return: 返回图像</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = random.randint(<span class="number">0</span>, r)</span><br><span class="line">    <span class="keyword">return</span> cv2.blur(img, (<span class="number">2</span> * n + <span class="number">1</span>, <span class="number">2</span> * n + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_perspective</span>(<span class="params">img, random_range=<span class="number">0.3</span>, symmetry_mode=<span class="number">0</span>, symmetry_direction=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    随机透视变换</span></span><br><span class="line"><span class="string">    :param img:传入图像</span></span><br><span class="line"><span class="string">    :param random_range:随机范围，默认为0.3，指每个角位置变化距离占边长百分比，应介于0-0.5</span></span><br><span class="line"><span class="string">    :param symmetry_mode:对称模式，默认为0，即不对称，1为左右对称，2为上下对称。</span></span><br><span class="line"><span class="string">    以正方形为例，对称将只会把正方形透视变换为等腰梯形，左右对称则左右两边长度相等上下两边平行，上下对称则上下两边长度相等左右两边跑平行。</span></span><br><span class="line"><span class="string">    :param symmetry_direction:对称方向指定，仅当开启对称情况下有效，默认为0，即不指定。</span></span><br><span class="line"><span class="string">    若前一参数对称模式为1即左右对称，此参数为1表示等腰梯形上窄下宽，此参数为2反之.</span></span><br><span class="line"><span class="string">    若前一参数对称模式为2即上下对称，此参数为1表示等腰梯形左宽右窄，此参数为2反之.</span></span><br><span class="line"><span class="string">    :return:透视后的图像，随机生成透视变换四个点的xy坐标的二维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        h, w, p = img.shape</span><br><span class="line">        w2 = <span class="built_in">int</span>(w / <span class="number">2</span>)</span><br><span class="line">        h2 = <span class="built_in">int</span>(h / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> symmetry_mode == <span class="number">0</span>:</span><br><span class="line">            x1 = random.randint(<span class="built_in">int</span>(random_range * w), w2)</span><br><span class="line">            x2 = random.randint(<span class="built_in">int</span>((<span class="number">1</span> - random_range) * w), w)</span><br><span class="line">            x3 = random.randint(<span class="built_in">int</span>(random_range * w), w2)</span><br><span class="line">            x4 = random.randint(<span class="built_in">int</span>((<span class="number">1</span> - random_range) * w), w)</span><br><span class="line">            y1 = random.randint(<span class="built_in">int</span>(random_range * h), h2)</span><br><span class="line">            y2 = random.randint(<span class="built_in">int</span>(random_range * h), h2)</span><br><span class="line">            y3 = random.randint(<span class="built_in">int</span>((<span class="number">1</span> - random_range) * h), h)</span><br><span class="line">            y4 = random.randint(<span class="built_in">int</span>((<span class="number">1</span> - random_range) * h), h)</span><br><span class="line">            points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">        <span class="keyword">elif</span> symmetry_mode == <span class="number">1</span>:</span><br><span class="line">            x1 = random.randint(<span class="built_in">int</span>(random_range * w), w2)</span><br><span class="line">            x2 = w - <span class="number">1</span> - x1</span><br><span class="line">            x3 = <span class="number">0</span></span><br><span class="line">            x4 = w - <span class="number">1</span></span><br><span class="line">            y1 = random.randint(<span class="built_in">int</span>(random_range * h), h2)</span><br><span class="line">            y2 = y1</span><br><span class="line">            y3 = h - <span class="number">1</span></span><br><span class="line">            y4 = y3</span><br><span class="line">            <span class="keyword">if</span> symmetry_direction == <span class="number">1</span>:</span><br><span class="line">                points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">            <span class="keyword">elif</span> symmetry_direction == <span class="number">2</span>:</span><br><span class="line">                points = [[x3, y1], [x4, y2], [x1, y3], [x2, y4]]</span><br><span class="line">            <span class="keyword">elif</span> symmetry_direction == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> random.choice([<span class="number">1</span>, <span class="number">2</span>]) == <span class="number">1</span>:</span><br><span class="line">                    points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    points = [[x3, y1], [x4, y2], [x1, y3], [x2, y4]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&#x27;symmetry_direction只应该是0/1/2&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> symmetry_mode == <span class="number">2</span>:</span><br><span class="line">            x1 = <span class="number">0</span></span><br><span class="line">            x2 = random.randint(<span class="built_in">int</span>((<span class="number">1</span> - random_range) * w), w)</span><br><span class="line">            x3 = <span class="number">0</span></span><br><span class="line">            x4 = x2</span><br><span class="line">            y1 = <span class="number">0</span></span><br><span class="line">            y2 = random.randint(<span class="built_in">int</span>(random_range * h), h2)</span><br><span class="line">            y3 = h - <span class="number">1</span></span><br><span class="line">            y4 = h - <span class="number">1</span> - y2</span><br><span class="line">            <span class="keyword">if</span> symmetry_direction == <span class="number">1</span>:</span><br><span class="line">                points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">            <span class="keyword">elif</span> symmetry_direction == <span class="number">2</span>:</span><br><span class="line">                points = [[x1, y2], [x2, y1], [x3, y4], [x4, y3]]</span><br><span class="line">            <span class="keyword">elif</span> symmetry_direction == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> random.choice([<span class="number">1</span>, <span class="number">2</span>]) == <span class="number">1</span>:</span><br><span class="line">                    points = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    points = [[x1, y2], [x2, y1], [x3, y4], [x4, y3]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&#x27;symmetry_direction只应该是0/1/2&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;symmetry_mode只应该是0/1/2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 凸四边形验证，不确定修改后是否依然需要，反正留着不会出错</span></span><br><span class="line">        <span class="keyword">if</span> ((x2 - x1) * (y4 - y1) - (y2 - y1) * (x4 - x1)) * ((x3 - x1) * (y4 - y1) - (y3 - y1) * (x4 - x1)) &lt; <span class="number">0</span> <span class="keyword">and</span> (</span><br><span class="line">                (x1 - x2) * (y3 - y2) - (y1 - y2) * (x3 - x2)) * ((x4 - x2) * (y3 - y2) - (y4 - y2) * (x3 - x2)) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;warning&quot;</span> + <span class="built_in">str</span>(points))</span><br><span class="line">    pts3_d1 = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [w, <span class="number">0</span>], [<span class="number">0</span>, h], [w, h]])  <span class="comment"># 原图点</span></span><br><span class="line">    pts3_d2 = np.float32(points)  <span class="comment"># 随机得到的四个点</span></span><br><span class="line">    m = cv2.getPerspectiveTransform(pts3_d1, pts3_d2)  <span class="comment"># 矩阵计算</span></span><br><span class="line">    <span class="keyword">return</span> cv2.warpPerspective(img, m, (w, h)), points</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">points_perspective</span>(<span class="params">img_copy, points</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行指定参数的透视变换求纯绿色的最小外接矩形</span></span><br><span class="line"><span class="string">    :param img_copy: 带绿色标注的图像</span></span><br><span class="line"><span class="string">    :param points: 透视变换参数点</span></span><br><span class="line"><span class="string">    :return: 所得矩形的[xc, yc, wc, hc]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, w, p = img_copy.shape</span><br><span class="line">    img_copy = cv2.warpPerspective(img_copy, cv2.getPerspectiveTransform(np.float32([[<span class="number">0</span>, <span class="number">0</span>], [w, <span class="number">0</span>], [<span class="number">0</span>, h], [w, h]]),</span><br><span class="line">                                                                         np.float32(points)), (w, h))</span><br><span class="line">    cv2.cvtColor(img_copy, cv2.COLOR_BGR2HSV)</span><br><span class="line">    img_copy = cv2.inRange(img_copy, np.array([<span class="number">0</span>, <span class="number">254</span>, <span class="number">0</span>]), np.array([<span class="number">3</span>, <span class="number">255</span>, <span class="number">255</span>]))</span><br><span class="line">    xc, yc, wc, hc = cv2.boundingRect(img_copy)</span><br><span class="line">    <span class="comment"># cv2.rectangle(img_copy, (xc, yc), (xc + wc, yc + hc), 255, 2)</span></span><br><span class="line">    <span class="keyword">return</span> xc, yc, wc, hc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overlay</span>(<span class="params">img, back</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    透视变换后的图像叠加到背景图</span></span><br><span class="line"><span class="string">    :param img: 透视变换后的图像</span></span><br><span class="line"><span class="string">    :param back: 背景图</span></span><br><span class="line"><span class="string">    :return: 输出图像，输入图像被放置的位置（左上xy坐标）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, w, p = back.shape</span><br><span class="line">    rows, cols, channels = img.shape</span><br><span class="line">    x = random.randint(<span class="number">0</span>, <span class="built_in">round</span>(w - cols))</span><br><span class="line">    y = random.randint(<span class="number">0</span>, <span class="built_in">round</span>(h - rows))</span><br><span class="line">    roi = back[y:rows + y, x:cols + x]</span><br><span class="line">    img2gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    ret, mask = cv2.threshold(img2gray, <span class="number">1</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    mask_inv = cv2.bitwise_not(mask)</span><br><span class="line">    img1_bg = cv2.bitwise_and(roi, roi, mask=mask_inv)</span><br><span class="line">    img2_fg = cv2.bitwise_and(img, img, mask=mask)</span><br><span class="line">    dst = cv2.add(img1_bg, img2_fg)</span><br><span class="line">    back[y:rows + y, x:cols + x] = dst</span><br><span class="line">    <span class="keyword">return</span> back, x, y</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="txt-output-py"><a href="#txt-output-py" class="headerlink" title="txt_output.py"></a>txt_output.py</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def yolo_txt_maker(index, xmin, ymin, xmax, ymax, x, y):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成yolo格式的txt文件</span><br><span class="line">    :param index: 类别序号</span><br><span class="line">    :param x: 图片宽度</span><br><span class="line">    :param y: 图片长度</span><br><span class="line">    :return: txt文件内容</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    yolo_data = &quot;&#123;index&#125; &#123;position_x&#125; &#123;position_y&#125; &#123;width&#125; &#123;height&#125;&quot;.format(</span><br><span class="line">        index=str(index), position_x=str((xmin + xmax) / 2 / x), position_y=str((ymin + ymax) / 2 / y)</span><br><span class="line">        , width=str((xmax - xmin) / x), height=str((ymax - ymin) / x))</span><br><span class="line">    return yolo_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def voc_xml_maker(file_name, xmin, ymin, xmax, ymax, kind, picture_width, picture_height):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成voc格式的xml文件</span><br><span class="line">    :param file_name: 图片文件名</span><br><span class="line">    :param kind: 物品种类</span><br><span class="line">    :return: xml文本字符串</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    voc_data = &#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">    &lt;annotation&gt;</span><br><span class="line">    &lt;folder&gt;something&lt;/folder&gt;</span><br><span class="line">    &lt;filename&gt;&#123;file_name&#125;&lt;/filename&gt;</span><br><span class="line">    &lt;path&gt;&#123;file_name&#125;&lt;/path&gt;</span><br><span class="line">    &lt;source&gt;</span><br><span class="line">        &lt;database&gt;Unknown&lt;/database&gt;</span><br><span class="line">    &lt;/source&gt;</span><br><span class="line">    &lt;size&gt;</span><br><span class="line">        &lt;width&gt;&#123;picture_width&#125;&lt;/width&gt;</span><br><span class="line">        &lt;height&gt;&#123;picture_height&#125;&lt;/height&gt;</span><br><span class="line">        &lt;depth&gt;3&lt;/depth&gt;</span><br><span class="line">    &lt;/size&gt;</span><br><span class="line"></span><br><span class="line">    &lt;segmented&gt;0&lt;/segmented&gt;</span><br><span class="line">        &lt;object&gt;</span><br><span class="line">        &lt;name&gt;&#123;kind&#125;&lt;/name&gt;</span><br><span class="line">        &lt;pose&gt;Unspecified&lt;/pose&gt;</span><br><span class="line">        &lt;truncated&gt;0&lt;/truncated&gt;</span><br><span class="line">        &lt;difficult&gt;0&lt;/difficult&gt;</span><br><span class="line">        &lt;bndbox&gt;</span><br><span class="line">            &lt;xmin&gt;&#123;xmin&#125;&lt;/xmin&gt;</span><br><span class="line">            &lt;ymin&gt;&#123;ymin&#125;&lt;/ymin&gt;</span><br><span class="line">            &lt;xmax&gt;&#123;xmax&#125;&lt;/xmax&gt;</span><br><span class="line">            &lt;ymax&gt;&#123;ymax&#125;&lt;/ymax&gt;</span><br><span class="line">        &lt;/bndbox&gt;</span><br><span class="line">    &lt;/object&gt;</span><br><span class="line">    &lt;/annotation&gt;</span><br><span class="line">    &#x27;&#x27;&#x27;.format(file_name=file_name, xmin=str(xmin), ymin=str(ymin), xmax=str(xmax), ymax=str(ymax), kind=kind</span><br><span class="line">               , picture_width=str(picture_width), picture_height=str(picture_height))</span><br><span class="line">    return voc_data</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>作品&amp;项目总结</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>MC关于Java等配置的详细说明</title>
    <url>/2022/java-for-mc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何启动MC"><a href="#如何启动MC" class="headerlink" title="如何启动MC"></a>如何启动MC</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>首先,你需要安装Java.可以先安装<a href="https://cr.triority.cc/f/opua/java8.exe">Java8</a><br>当然你也可以安装java16或17,但是java8更常用,除非你喜欢用MC的最新版本,显然最好的办法就是三个版本全都安装,具体使用哪个在启动器里设置.<br>注: 本文所述内容要求硬件为64位,如果你是使用32位处理器,请使用32位java8并使用1.16以下MC版本.</p>
<h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><p>一个启动器,在这里推荐hmcl启动器,在此<a href="hmcl.exe">下载</a></p>
<p>hmcl启动器基于Java,所以必须安装完Java,也就是完成第一步之后才能进行这一步</p>
<p>有人想用官方启动器,我只能说我不反对,但如果你是Cospied服务器的用户,我们会拒绝技术支持</p>
<img src="/2022/java-for-mc/hmcl.png" class="" title="hmcl启动器">

<h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><p>打开启动器左侧最上面就是账号,上图是作者已经登陆了自己正版账号之后显示的内容.<br>显然你必须有一个账号才能进入MC,打开账号一栏,你有多种选择,离线登陆,外置登陆,Mojang登陆和微软登陆( 旧版本hmcl将后两者合称正版登陆 )</p>
<p>离线模式最为简单,只要随便写一个名字就好,但是这也意味着没有身份认证,任何人都可以使用这个名字以你的身份进入服务器.绝大多数服务器都禁止这种做法.<br>但是Cospied服务器允许用户以离线模式进入,但是你将无法成为操作员,由此产生任何损失管理组概不负责.</p>
<p>正版登陆显然是最希望客户们使用的方式,这种方式是符合mojang的用户协议的唯一方式,当然这意味着你需要购买正版账号,购买教程将会独立成一期</p>
<p>外置登陆: 如果你想要保证安全又不想花钱,外置登陆就是你的最佳方案.<br>在账户列表中左下,选择添加认证服务器,这里建议使用<code>Skin.vlssu.com</code>,然后点击下一步,完成,这个外置服务器就会出现在左侧的列表中.<br>接下来请先在<a href="Skin.vlssu.com" title="Skin.vlssu.com">Skin.vlssu.com</a>注册一个账号,完成以后,就可以在你的启动器中填写你刚刚在网站上注册时填写的的账号和密码,完成你的登陆.</p>
<p>注:在<a href="Skin.vlssu.com" title="Skin.vlssu.com">Skin.vlssu.com</a>网站还可以修改你的皮肤哦</p>
<img src="/2022/java-for-mc/%E8%B4%A6%E5%8F%B7.png" class="" title="外置登陆页面">

<h3 id="适合MC的Java"><a href="#适合MC的Java" class="headerlink" title="适合MC的Java"></a>适合MC的Java</h3><p>是时候下载MC了,你要选择合适的版本,比较经典的比如1.7.10&#x2F;1.12.2&#x2F;1.16.5&#x2F;1.17.2&#x2F;1.18.1<br>如果你选择的版本低于或等于1.16,那么你不再需要变更你的Java,因为需要的Java8已经在第一步安装好了<br>如果你选择了1.17.x,那么你需要安装<a href="https://cr.triority.cc/f/pKCk/java16.exe">java16</a><br>如果你选择了1.18.x及以上,那么你需要安装<a href="https://cr.triority.cc/f/JPfK/java17.exe">java17</a></p>
<h3 id="下载MC"><a href="#下载MC" class="headerlink" title="下载MC"></a>下载MC</h3><p>在左侧选择下载,下载你选择的版本.</p>
<p>下载源建议改为选用我的世界中文论坛(MCBBS),速度最快,新版本已经将这一选项移动至设置一栏,而且默认为自动选择最快,如果你感觉下载较慢可以尝试修改</p>
<p>选择一个版本后,会出现如下图的页面(以1.18.2为例),这一列首先显示了你刚选择的版本,下面还有forge,liteloader,optifine,farbic以及farbic api,这需要你根据实际情况选择:<br>如果你想要使用纯净原版,什么都不要改,直接点击右下安装<br>如果你加入forge模组,请安装最新版forge,下面的farbic还有liteloader和forge一样也是加载mod的工具,如果你是要加入某个模组服务器,请咨询腐竹来确定. 对于Cospied,我们有两个服务器,一个是原版,也就是如上一行所说都不加,另一个是模组服,请安装最新版forge<br>optifine是高清修复,如果你想要使用材质光影,请安装.</p>
<p>上面的选择完成之后&#x3D;,点击右下角的下载</p>
<img src="/2022/java-for-mc/%E4%B8%8B%E8%BD%BD.png" class="" title="下载页面">

<h3 id="启动器参数配置"><a href="#启动器参数配置" class="headerlink" title="启动器参数配置"></a>启动器参数配置</h3><p>在左侧设置中,首先需要注意的是Java路径,上面讲过MC版本对应的Java版本,如图选择对应的Java,如果你安装了多个相同版本,随便选一个合适的就好.新版本有自动选择,旧版本务必按照上文讲过的对应关系选择.</p>
<p>强烈建议!!!打开版本隔离!!!</p>
<p>然后需要配置的是内存.最新版本已经可以自动配置内存,如果你用的是旧版本,那就需要手动配置.建议分配2G以上,4G或8G为佳,具体取决于你的电脑内存配置.</p>
<p>其他内容非必要不要动.</p>
<img src="/2022/java-for-mc/%E8%AE%BE%E7%BD%AE.png" class="" title="设置">

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>完成以上内容之后就可以启动MC了</p>
<h2 id="模组安装"><a href="#模组安装" class="headerlink" title="模组安装"></a>模组安装</h2><p><strong>以下仅当打开了版本隔离时生效</strong><br>主页面左侧选择版本列表,在右侧点击你要添加模组的版本选项,就会进入模组管理页面,如下图( 下图是坐着已经安装了很多模组之后,没有安装模组的右侧应该是空的 )<br>点击上面的MOD文件夹,此时演出的窗口就是你的模组文件夹,把你需要的模组文件直接丢进去就好了.</p>
<img src="/2022/java-for-mc/%E6%A8%A1%E7%BB%84.png" class="" title="模组">

<p>打开MC体验你的模组吧!<br>如果你要加入服务器,请找你的腐竹索要模组文件,如果是个压缩包请解压.<br>此外,如果你安装了模组,请多给点内存,如果你用的不是自动分配的话,建议最少2G或者4G</p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>klipper做上位机diy的3D打印机</title>
    <url>/2022/klipper-host-printer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里主要讲上位机klipper的配置，硬件使用大鱼的设计，主板mks genl2.1，klipper安装于上位机。<br>mks的说明书已经详细说明了klipper的搭建配置过程：<a href="https://blog.csdn.net/gjy_skyblue/article/details/121103193" title="MKS GEN_L V2.1 Klipper固件使用说明书">MKS GEN_L V2.1 Klipper固件使用说明书</a><br><img src="/2022/klipper-host-printer/MKSGENLSIZE.png" alt="MKS GEN_L V2.1"></p>
<h2 id="对mks配置文件的修改"><a href="#对mks配置文件的修改" class="headerlink" title="对mks配置文件的修改"></a>对mks配置文件的修改</h2><h3 id="lcd"><a href="#lcd" class="headerlink" title="lcd"></a>lcd</h3><p>我没有使用lcd屏，但是mks提供的配置文件<code>printer.cfg</code>对lcd进行了配置，需要删除，这一点说明书没有提及，lcd配置include了其他文件，文件在mks的github仓库可以找到。</p>
<h3 id="pin"><a href="#pin" class="headerlink" title="pin"></a>pin</h3><p>我为打印机加装了LED灯带，但是不希望灯一直打开，需要开关功能。由于我没有lcd屏幕，所以可以使用lcd的引脚控制L298N驱动LED灯带。<br>klipper使用芯片的引脚名称，与marlin不同，mks的github仓库虽然给出来对应关系但是并不完整，具体引脚编号可以查看主板原理图上mega2560芯片的内容。<br>原理图：<br><img src="/2022/klipper-host-printer/SCH.png" alt="SCH"><br>引脚图：<br><img src="/2022/klipper-host-printer/PIN.png" alt="PIN"></p>
<h3 id="我的配置文件"><a href="#我的配置文件" class="headerlink" title="我的配置文件"></a>我的配置文件</h3><p><code>printer.cfg</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MKS Gen l V2.1</span><br><span class="line"></span><br><span class="line">[stepper_x]</span><br><span class="line">step_pin: PF0</span><br><span class="line">dir_pin: PF1</span><br><span class="line">enable_pin: !PD7</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 40   ##rotation_distance = ((360°/1.8°) * microsteps) / 80 # # 旋转距离 = （圆周360°/步距角）*细分/每MM脉冲值</span><br><span class="line">endstop_pin:^!PE5 #X-Min, PE4:X-Max</span><br><span class="line">position_endstop: 0</span><br><span class="line">position_max: 290</span><br><span class="line">homing_speed: 60</span><br><span class="line"></span><br><span class="line">[stepper_y]</span><br><span class="line">step_pin: PF6</span><br><span class="line">dir_pin: PF7</span><br><span class="line">enable_pin: !PF2</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 40</span><br><span class="line">endstop_pin:^!PJ1  #Y-Min, PJ0:Y-Max</span><br><span class="line">position_endstop: 0</span><br><span class="line">position_max: 190</span><br><span class="line">homing_speed: 60</span><br><span class="line"></span><br><span class="line">[stepper_z]</span><br><span class="line">step_pin: PL3</span><br><span class="line">dir_pin: !PL1</span><br><span class="line">enable_pin: !PK0</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 8</span><br><span class="line">endstop_pin: probe:z_virtual_endstop  #Z-Min, PD2:Z-Max</span><br><span class="line">position_max: 285</span><br><span class="line">position_min: -3</span><br><span class="line">homing_speed: 20</span><br><span class="line"></span><br><span class="line">[extruder]</span><br><span class="line">step_pin: PA4</span><br><span class="line">dir_pin: PA6</span><br><span class="line">enable_pin: !PA2</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 7.85</span><br><span class="line">nozzle_diameter: 0.4</span><br><span class="line">filament_diameter: 1.750</span><br><span class="line">heater_pin: PB4</span><br><span class="line">sensor_type: ATC Semitec 104GT-2</span><br><span class="line">sensor_pin: PK5</span><br><span class="line">min_temp: 0</span><br><span class="line">max_temp: 270</span><br><span class="line">#control: pid</span><br><span class="line">#pid_Kp: 21.438</span><br><span class="line">#pid_Ki: 0.888</span><br><span class="line">#pid_Kd: 129.435</span><br><span class="line">max_extrude_only_distance: 50000.0</span><br><span class="line">max_extrude_only_velocity: 20</span><br><span class="line">max_extrude_only_accel: 100</span><br><span class="line">pressure_advance = 0.2</span><br><span class="line"></span><br><span class="line">[verify_heater extruder]</span><br><span class="line">max_error: 120</span><br><span class="line">hysteresis: 20</span><br><span class="line">check_gain_time: 20</span><br><span class="line">heating_gain: 1</span><br><span class="line"></span><br><span class="line">[led LED]</span><br><span class="line">white_pin: PH4</span><br><span class="line">hardware_pwm: True</span><br><span class="line"></span><br><span class="line">#[extruder_stepper extra_stepper]</span><br><span class="line">#step_pin: PC1</span><br><span class="line">#dir_pin: !PC3</span><br><span class="line">#enable_pin: !PC7</span><br><span class="line">#microsteps: 16</span><br><span class="line">#rotation_distance: 8</span><br><span class="line">#endstop_pin: ^!PE4</span><br><span class="line">#position_endstop: 0</span><br><span class="line">#position_max: 250</span><br><span class="line">#position_min: -3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[heater_bed]</span><br><span class="line">heater_pin: PH5</span><br><span class="line">sensor_type: ATC Semitec 104GT-2</span><br><span class="line">sensor_pin: PK6</span><br><span class="line">min_temp: -100</span><br><span class="line">max_temp: 180</span><br><span class="line">#control: pid</span><br><span class="line">#pid_kp = 74.551</span><br><span class="line">#pid_ki = 1.053</span><br><span class="line">#pid_kd = 1319.559</span><br><span class="line"></span><br><span class="line">[verify_heater heater_bed]</span><br><span class="line">max_error: 1200</span><br><span class="line">hysteresis: 10</span><br><span class="line">check_gain_time: 60</span><br><span class="line">heating_gain: 1</span><br><span class="line"></span><br><span class="line">[fan]</span><br><span class="line">pin: PH6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mcu]</span><br><span class="line">serial:/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[printer]</span><br><span class="line">kinematics: corexy</span><br><span class="line">max_velocity: 180</span><br><span class="line">max_accel: 2000</span><br><span class="line">max_z_velocity: 20</span><br><span class="line">max_z_accel: 300</span><br><span class="line">square_corner_velocity: 20.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[virtual_sdcard]</span><br><span class="line">path: ~/gcode_files</span><br><span class="line"></span><br><span class="line">[pause_resume]</span><br><span class="line"></span><br><span class="line">[gcode_macro CANCEL_PRINT]</span><br><span class="line">description: Cancel the actual running print</span><br><span class="line">rename_existing: CANCEL_PRINT_BASE</span><br><span class="line">gcode:</span><br><span class="line">  TURN_OFF_HEATERS</span><br><span class="line">  CANCEL_PRINT_BASE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[display_status]</span><br><span class="line"></span><br><span class="line">[bltouch]</span><br><span class="line">sensor_pin: ^PD2</span><br><span class="line">control_pin: PB5</span><br><span class="line">x_offset: -9</span><br><span class="line">y_offset: -51</span><br><span class="line">#z_offset: 1.6</span><br><span class="line">speed: 5.0</span><br><span class="line">samples: 2</span><br><span class="line">samples_result: median</span><br><span class="line">sample_retract_dist: 3.0</span><br><span class="line">samples_tolerance: 0.1</span><br><span class="line">samples_tolerance_retries: 1</span><br><span class="line"></span><br><span class="line">[safe_z_home]</span><br><span class="line">home_xy_position: 150,100 # Change coordinates to the center of your print bed</span><br><span class="line">speed: 60</span><br><span class="line">z_hop: 20                 # Move up 10mm</span><br><span class="line">z_hop_speed: 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gcode_macro G29]</span><br><span class="line">gcode:</span><br><span class="line">    BED_MESH_CLEAR</span><br><span class="line">    G28</span><br><span class="line">    BED_MESH_CALIBRATE</span><br><span class="line">    BED_MESH_PROFILE SAVE=name</span><br><span class="line">    SAVE_CONFIG</span><br><span class="line">    BED_MESH_PROFILE LOAD=name</span><br><span class="line"></span><br><span class="line">[bed_mesh]</span><br><span class="line">speed: 120</span><br><span class="line">horizontal_move_z: 10</span><br><span class="line">mesh_min:60,30</span><br><span class="line">mesh_max:240,130</span><br><span class="line">probe_count: 4,3</span><br><span class="line"></span><br><span class="line">[include timelapse.cfg]</span><br><span class="line"></span><br><span class="line">#*# &lt;---------------------- SAVE_CONFIG ----------------------&gt;</span><br><span class="line">#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.</span><br><span class="line">#*#</span><br><span class="line">#*# [bed_mesh default]</span><br><span class="line">#*# version = 1</span><br><span class="line">#*# points =</span><br><span class="line">#*# 	  -0.286250, -0.097500, 0.118750, 0.276250</span><br><span class="line">#*# 	  -0.172500, 0.022500, 0.218750, 0.391250</span><br><span class="line">#*# 	  -0.058750, 0.117500, 0.320000, 0.515000</span><br><span class="line">#*# tension = 0.2</span><br><span class="line">#*# min_x = 60.0</span><br><span class="line">#*# algo = lagrange</span><br><span class="line">#*# y_count = 3</span><br><span class="line">#*# mesh_y_pps = 2</span><br><span class="line">#*# min_y = 30.0</span><br><span class="line">#*# x_count = 4</span><br><span class="line">#*# max_y = 130.0</span><br><span class="line">#*# mesh_x_pps = 2</span><br><span class="line">#*# max_x = 240.0</span><br><span class="line">#*#</span><br><span class="line">#*# [extruder]</span><br><span class="line">#*# control = pid</span><br><span class="line">#*# pid_kp = 18.922</span><br><span class="line">#*# pid_ki = 1.078</span><br><span class="line">#*# pid_kd = 83.021</span><br><span class="line">#*#</span><br><span class="line">#*# [heater_bed]</span><br><span class="line">#*# control = pid</span><br><span class="line">#*# pid_kp = 80.0</span><br><span class="line">#*# pid_ki = 100.0</span><br><span class="line">#*# pid_kd = 1000.0</span><br><span class="line">#*#</span><br><span class="line">#*# [bltouch]</span><br><span class="line">#*# z_offset = 1.800</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>moonraker.conf</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">host: 0.0.0.0</span><br><span class="line">port: 7125</span><br><span class="line">enable_debug_logging: False</span><br><span class="line">klippy_uds_address: /tmp/klippy_uds</span><br><span class="line"></span><br><span class="line">[authorization]</span><br><span class="line">trusted_clients:</span><br><span class="line">    10.0.0.0/8</span><br><span class="line">    127.0.0.0/8</span><br><span class="line">    169.254.0.0/16</span><br><span class="line">    172.16.0.0/12</span><br><span class="line">    192.168.0.0/16</span><br><span class="line">    FE80::/10</span><br><span class="line">    ::1/128</span><br><span class="line">cors_domains:</span><br><span class="line">    http://*.lan</span><br><span class="line">    http://*.local</span><br><span class="line">    https://my.mainsail.xyz</span><br><span class="line">    http://my.mainsail.xyz</span><br><span class="line">    https://app.fluidd.xyz</span><br><span class="line">    http://app.fluidd.xyz</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">database_path: /home/orangepi/.moonraker_database</span><br><span class="line"></span><br><span class="line">[file_manager]</span><br><span class="line">config_path: /home/orangepi/klipper_config</span><br><span class="line">log_path: /home/orangepi/klipper_logs</span><br><span class="line"></span><br><span class="line">[octoprint_compat]</span><br><span class="line"></span><br><span class="line">[history]</span><br><span class="line"></span><br><span class="line">[update_manager]</span><br><span class="line">channel: dev</span><br><span class="line">refresh_interval: 168</span><br><span class="line"></span><br><span class="line">[update_manager fluidd]</span><br><span class="line">type: web</span><br><span class="line">channel: stable</span><br><span class="line">repo: fluidd-core/fluidd</span><br><span class="line">path: ~/fluidd</span><br><span class="line"></span><br><span class="line">[timelapse]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[notifier print_start]</span><br><span class="line">url: mailto://triority:key@qq.com/?to=triority@qq.com</span><br><span class="line">title: 打印任务已开始</span><br><span class="line">events: started</span><br><span class="line">body: 模型“&#x27;&#123;event_args[1].filename&#125;&#x27;”开始打印……</span><br><span class="line"></span><br><span class="line">[notifier print_complete]</span><br><span class="line"></span><br><span class="line">url: mailto://triority:key@qq.com/?to=triority@qq.com</span><br><span class="line">title: 打印任务已完成</span><br><span class="line">events: complete</span><br><span class="line">body: 模型“&#x27;&#123;event_args[1].filename&#125;&#x27;”打印完成。</span><br><span class="line"></span><br><span class="line">[notifier print_error]</span><br><span class="line">url: mailto://triority:key@qq.com/?to=triority@qq.com</span><br><span class="line">title: 打印任务发生错误</span><br><span class="line">events: error</span><br><span class="line">body: 错误：&#123;event_args[1].message&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>3D打印</tag>
      </tags>
  </entry>
  <entry>
    <title>2022中秋节快乐!</title>
    <url>/2022/mid-autumn-festival-2022/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网友拍的月亮:</p>
<img src="/2022/mid-autumn-festival-2022/mmexport1662824565221.jpg" class="" title="网友拍的月亮">
<p>然后…这是本菜鸡用200mm的相机拍的:</p>
<img src="/2022/mid-autumn-festival-2022/41492bd0ad1a7dcb54233b239b65e3c.jpg" class="" title="emm..">

<p>还有一张</p>
<img src="/2022/mid-autumn-festival-2022/5ceb5c6306f181ea7007c989273377d.jpg" class="" title="emm...">]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>庆祝Minecraft的13周年纪念日!</title>
    <url>/2022/minecraft-13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="根据Minecraft中文Wiki的资料-今天是Minecraft的Java版（Classic）发布13周年"><a href="#根据Minecraft中文Wiki的资料-今天是Minecraft的Java版（Classic）发布13周年" class="headerlink" title="根据Minecraft中文Wiki的资料,今天是Minecraft的Java版（Classic）发布13周年!"></a>根据Minecraft中文Wiki的资料,今天是Minecraft的Java版（Classic）发布13周年!</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接:"></a>链接:</h2><p><a href="http://www.minecraft.net/" title="Minecraft官网">Minecraft官网</a><br><a href="http://www.minecraftforum.net/" title="Minecraft论坛">Minecraft论坛</a><br><a href="https://minecraft.fandom.com/wiki/Minecraft_Wiki" title="Minecraft  Wiki">Minecraft  Wiki</a><br><a href="https://minecraft.fandom.com/zh/wiki/Minecraft_Wiki" title="Minecraf中文WIki">Minecraf中文WIki</a></p>
<h2 id="Also-try-Terraria"><a href="#Also-try-Terraria" class="headerlink" title="Also try Terraria!"></a>Also try Terraria!</h2><p>同时,昨天也是terraria的11周年纪念日 ! Also try Terraria !<br><a href="https://terraria.fandom.com/zh/wiki/Terraria_Wiki" title="Terraria_Wiki">Terraria_Wiki</a></p>
<h2 id="Java各个版本发布时间"><a href="#Java各个版本发布时间" class="headerlink" title="Java各个版本发布时间:"></a>Java各个版本发布时间:</h2><p>2009年5月17日（Classic）<br>2009年12月23日（Indev）<br>2010年2月27日（Infdev）<br>2010年6月30日（Alpha）<br>2010年12月20日（Beta）<br>2011年11月18日（正式版）</p>
<p>Java版如今已经更新到	 1.18.2 (22w19a) !</p>
<h2 id="基岩版各个版本发布时间"><a href="#基岩版各个版本发布时间" class="headerlink" title="基岩版各个版本发布时间:"></a>基岩版各个版本发布时间:</h2><p>Android：2011年8月16日<br>iOS：2011年11月16日<br>FireOS：2014年4月2日<br>Galaxy Store：未知[需要验证]<br>Windows Phone 8.1：2014年12月10日<br>Fire Phone：2014年7月25日<br>Windows：2015年7月29日<br>Gear VR：2016年4月27日<br>Oculus Rift：2016年8月15日<br>Chrome OS：2016年9月<br>Apple TV和Fire TV：2016年12月19日<br>Windows 10 Mobile：2017年2月22日<br>Xbox One：2017年9月20日<br>Windows MR：2017年11月21日<br>Nintendo Switch：2018年6月21日<br>iPadOS：2019年9月24日<br>PS 4：2019年12月10日<br>PS VR：2020年9月22日</p>
<h2 id="原主机版各个版本发布时间"><a href="#原主机版各个版本发布时间" class="headerlink" title="原主机版各个版本发布时间:"></a>原主机版各个版本发布时间:</h2><p>Xbox 360：2012年5月9日<br>Xbox One：2014年9月5日<br>PS3：2013年12月17日<br>PS4：2014年9月4日<br>PSVita：2014年10月14日<br>Wii U：2015年12月17日[2]<br>Nintendo Switch：2017年5月11日</p>
<h2 id="教育版"><a href="#教育版" class="headerlink" title="教育版"></a>教育版</h2><p>2016年11月1日[3]</p>
<h2 id="New-Nintendo-3DS版"><a href="#New-Nintendo-3DS版" class="headerlink" title="New Nintendo 3DS版"></a>New Nintendo 3DS版</h2><p>2017年9月13日[4]</p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL数据库的基本操作以及使用python连接数据库</title>
    <url>/2022/mySQL-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前曾经写过一个QQ机器人的插件，能够对成员进行记分操作，如果记分达到一定数量将会提醒管理，把这个多次违规的成员t掉。那时候使用的方法是json记录数据，然后转换成npy的格式保存。但是随着数据越来越多，json已经无法满足需要，而且也打算借此机会学习一下数据库的使用。这篇文章将会以QQ机器人记分系统为主要任务，记录我的学习过程。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>因为是共用的记分记录，因此把数据库部署在了服务器上，这部分就有宝塔面板来完成了。安装了mySQL，然后新建了一个名称为<code>qqbot</code>的数据库，管理员账号为<code>triority</code>，允许公网访问。</p>
<h2 id="使用python连接数据库并进行基本操作"><a href="#使用python连接数据库并进行基本操作" class="headerlink" title="使用python连接数据库并进行基本操作"></a>使用python连接数据库并进行基本操作</h2><h3 id="pymysql库的安装"><a href="#pymysql库的安装" class="headerlink" title="pymysql库的安装"></a>pymysql库的安装</h3><p>首先安装<code>pymysql</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install pymysql</span><br></pre></td></tr></table></figure>
<h3 id="建立连接访问数据库和断开连接"><a href="#建立连接访问数据库和断开连接" class="headerlink" title="建立连接访问数据库和断开连接"></a>建立连接访问数据库和断开连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=&#x27;triority.cc&#x27;,</span><br><span class="line">                     user=&#x27;triority&#x27;,</span><br><span class="line">                     password=&#x27;xxx&#x27;,</span><br><span class="line">                     database=&#x27;qqbot&#x27;)</span><br></pre></td></tr></table></figure>
<p>于是我们与数据库建立了连接，可以访问其中的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 cursor() 方法创建一个游标对象 cursor</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"># 使用 execute()  方法执行 SQL 查询</span><br><span class="line">cursor.execute(&quot;SELECT VERSION()&quot;)</span><br><span class="line"># 使用 fetchone() 方法获取单条数据.</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(&quot;Database version : %s &quot; % data)</span><br></pre></td></tr></table></figure>
<p>输出为<code>Database version : 5.5.62-log</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>如果数据库连接存在我们可以使用<code>execute()</code>方法来为数据库创建表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># 使用 execute() 方法执行 SQL，如果表存在则删除</span><br><span class="line">cursor.execute(&quot;drop table if exists scores&quot;)</span><br><span class="line"></span><br><span class="line"># 使用预处理语句创建表，包括同时作为主键的QQ号，当前分数，上一次记分的管理员，上一次记分时间以及理由</span><br><span class="line">sql = &quot;&quot;&quot;create table scores (</span><br><span class="line">         qq_id  int primary key,</span><br><span class="line">         score int,</span><br><span class="line">         last_op int,</span><br><span class="line">         last_time char(64),</span><br><span class="line">         last_reason char(64) not null default &#x27;&#x27; )&quot;&quot;&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># SQL 插入语句</span><br><span class="line">sql = &quot;&quot;&quot;insert into scores(qq_id,</span><br><span class="line">         score, last_op, last_time, last_reason)</span><br><span class="line">         values (2605925210, 5, 2605925210, &#x27;2022.12.30&#x27;, &#x27;test&#x27;)&quot;&quot;&quot;</span><br><span class="line">try:</span><br><span class="line">    # 执行sql语句</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    # 提交到数据库执行</span><br><span class="line">    db.commit()</span><br><span class="line">except:</span><br><span class="line">    # 如果发生错误则回滚</span><br><span class="line">    db.rollback()</span><br><span class="line"></span><br><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>这里我们查询所有分数大于3的成员，刚才已经提交了信息，<code>2605925210</code>的分数为5，因此应该能被搜索到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># SQL 查询语句</span><br><span class="line">sql = &quot;select * from scores \</span><br><span class="line">       where score &gt; %s&quot; % (3)</span><br><span class="line">try:</span><br><span class="line">    # 执行SQL语句</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    # 获取所有记录列表</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    for row in results:</span><br><span class="line">        qq_id = row[0]</span><br><span class="line">        score = row[1]</span><br><span class="line">        last_op = row[2]</span><br><span class="line">        last_time = row[3]</span><br><span class="line">        last_reason = row[4]</span><br><span class="line">        # 打印结果</span><br><span class="line">        print(&quot;qq_id=%s,score=%s,last_op=%s,last_time=%s,last_reason=%s&quot; % \</span><br><span class="line">              (qq_id, score, last_op, last_time, last_reason))</span><br><span class="line">except:</span><br><span class="line">    print(&quot;Error: unable to fetch data&quot;)</span><br><span class="line"></span><br><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p>输出内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qq_id=2147483647,score=5,last_op=2147483647,last_time=2022.12.30,last_reason=test</span><br></pre></td></tr></table></figure>
<p>显然QQ号是错误的，但是其他信息正确，原因在于建表时使用了<code>int</code>型数据，最大值为<code>2147483647</code>，而我的QQ号超过了这一数值，因此被设置为最大值。也幸好，如果我的QQ号首位是1，我就不会发现这个致命bug。</p>
<p>我的解决方法当然就是重新建表，不知道学到后面会不会有直接改表数据类型的方法hhh</p>
<p>这里就重新建表，把<code>qq_id</code>的类型改为<code>bigint</code>这肯定够长了hhh</p>
<p>这次建表<code>sql</code>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql = &quot;&quot;&quot;create table scores (</span><br><span class="line">         qq_id  bigint primary key,</span><br><span class="line">         score int,</span><br><span class="line">         last_op bigint,</span><br><span class="line">         last_time varchar(64),</span><br><span class="line">         last_reason varchar(64) not null default &#x27;&#x27; )&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>输出正确：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qq_id=2605925210,score=5,last_op=2605925210,last_time=2022.12.30,last_reason=test</span><br></pre></td></tr></table></figure>

<h3 id="mySQL数据类型"><a href="#mySQL数据类型" class="headerlink" title="mySQL数据类型"></a>mySQL数据类型</h3><p>这里顺便补充一下各种类型的长度：</p>
<table>
<thead>
<tr>
<th align="left">MySQL数据类型</th>
<th align="center">长度</th>
<th align="right">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tinyint</td>
<td align="center">1个字节</td>
<td align="right">-128~127</td>
</tr>
<tr>
<td align="left">smallint</td>
<td align="center">2个字节</td>
<td align="right">-32768~32767</td>
</tr>
<tr>
<td align="left">mediumint</td>
<td align="center">3个字节</td>
<td align="right">-8388608~8388607</td>
</tr>
<tr>
<td align="left">int</td>
<td align="center">4个字节</td>
<td align="right">-2147483648~2147483647</td>
</tr>
<tr>
<td align="left">bigint</td>
<td align="center">8个字节</td>
<td align="right">+-9.22*10的18次方</td>
</tr>
<tr>
<td align="left">float(m,d)</td>
<td align="center">8位精度(4字节)</td>
<td align="right">m总个数，d小数位</td>
</tr>
<tr>
<td align="left">double(m,d)</td>
<td align="center">16位精度(8字节)</td>
<td align="right">m总个数，d小数位</td>
</tr>
</tbody></table>
<p>对于浮点数，在数据库中存放的是近似值：</p>
<p><code>float(5,3)</code> 如果插入一个数<code>123.45678</code>,实际数据库里存的是<code>123.457</code>，但总个数还以实际为准，即6位。</p>
<p>定点类型在数据库中存放的是精确值：</p>
<p><code>decimal(m,d)</code> 参数m&lt;65 是总个数，d&lt;30且 d&lt;m 是小数位</p>
<p>对于字符串：</p>
<p><code>char(n)</code>	固定长度，最多255个字符</p>
<p><code>varchar(n)</code>	可变长度，最多65535个字节</p>
<p><code>tinytext</code>	可变长度，最多255个字符</p>
<p><code>text</code>	可变长度，最多65535个字符</p>
<p><code>mediumtext</code>	可变长度，最多2的24次方-1个字符</p>
<p><code>longtext</code>	可变长度，最多2的32次方-1个字符</p>
<h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><p>更新操作用于更新数据表的数据，以下将表中<code>score</code>大于 <code>3</code> 的 <code>last_op</code> 字段递增 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># SQL 更新语句</span><br><span class="line">sql = &quot;update scores set last_op = last_op + 1 where score &gt; &#x27;%c&#x27;&quot; % (3)</span><br><span class="line">try:</span><br><span class="line">    # 执行SQL语句</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    # 提交到数据库执行</span><br><span class="line">    db.commit()</span><br><span class="line">except:</span><br><span class="line">    # 发生错误时回滚</span><br><span class="line">    db.rollback()</span><br><span class="line"></span><br><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>
<p>再查询一次，<code>last_op</code>已经增加到了<code>2605925211</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qq_id=2605925210,score=5,last_op=2605925211,last_time=2022.12.30,last_reason=test</span><br></pre></td></tr></table></figure>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除数据表 <code>scores</code> 中 <code>score</code> 大于 <code>12</code> 的所有数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SQL 删除语句</span><br><span class="line">sql = &quot;delete from scores where score &gt; %s&quot; % (12)</span><br><span class="line">try:</span><br><span class="line">   # 执行SQL语句</span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   # 提交修改</span><br><span class="line">   db.commit()</span><br><span class="line">except:</span><br><span class="line">   # 发生错误时回滚</span><br><span class="line">   db.rollback()</span><br></pre></td></tr></table></figure>
<h3 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h3><p>Python DB API 2.0 的事务提供了两个方法 <code>commit</code> 或 <code>rollback</code>。<br>事务机制可以确保数据一致性。</p>
<p>事务应该具有4个属性：原子性、一致性、隔离性、持久性。</p>
<ul>
<li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>
<li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>
<li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>
<li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">   # 执行SQL语句</span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   # 向数据库提交</span><br><span class="line">   db.commit()</span><br><span class="line">except:</span><br><span class="line">   # 发生错误时回滚</span><br><span class="line">   db.rollback()</span><br></pre></td></tr></table></figure>
<h2 id="mySQL基础操作"><a href="#mySQL基础操作" class="headerlink" title="mySQL基础操作"></a>mySQL基础操作</h2>其实上面的东西已经足够去写这个机器人了，这里就当留一个坑，如果更深入地学了mySQL就来继续写。不过话说回来为什么网上的教程都是大写的SQL命令，单词全都不认识了hhh查过了命令大小写是等价的，而且在windows系统下甚至不分大小写。反正我是用小写了，为了<code>翻译</code>网上的教程甚至写了这个，乐<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string = &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">print(string.lower())</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>笔记</tag>
        <tag>QQ机器人</tag>
        <tag>mySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch环境配置及使用nanodet进行模型训练和识别</title>
    <url>/2022/nanodet-train/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><strong>这部分内容需要用nvidia显卡，如果只使用CPU识别，那么不需要在识别的电脑上配置，但是训练的电脑建议安装如下内容</strong></p>
<h2 id="CUDA安装"><a href="#CUDA安装" class="headerlink" title="CUDA安装"></a>CUDA安装</h2><h3 id="查看显卡驱动支持的最高CUDA版本"><a href="#查看显卡驱动支持的最高CUDA版本" class="headerlink" title="查看显卡驱动支持的最高CUDA版本"></a>查看显卡驱动支持的最高CUDA版本</h3><p>在命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<p>即可显示支持的最高CUDA版本，例如我的为11.7<br><img src="/2022/nanodet-train/20221114150744.png" alt="CUDA Version: 11.7"></p>
<h3 id="安装对应版本CUDA"><a href="#安装对应版本CUDA" class="headerlink" title="安装对应版本CUDA"></a>安装对应版本CUDA</h3><p><a href="https://pytorch.org/get-started/locally/" title="官网链接">官网链接</a><br><img src="/2022/nanodet-train/20221114150417.png" alt="官网链接"><br>由于我不打算使用conda，因此选择pip的安装命令<br>选好之后复制官网下方提供的命令安装<br>我选择安装到python路径下，因此命令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu117</span><br></pre></td></tr></table></figure>
<p>其中，务必注意torch和torchvision版本对应，对应关系在这里：<a href="https://github.com/pytorch/vision#installation" title="链接">链接</a><br><img src="/2022/nanodet-train/20221114151335.png" alt="版本对应关系"></p>
<h3 id="检查版本是否正确"><a href="#检查版本是否正确" class="headerlink" title="检查版本是否正确"></a>检查版本是否正确</h3><p>在python中输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line"></span><br><span class="line">torch.__version__</span><br><span class="line">torchvision.__version__</span><br></pre></td></tr></table></figure>
<p>如果都不报错，说明安装成功了，且torch和torchvision的版本也已经是对应的，如下:<br><img src="/2022/nanodet-train/20221114151619.png" alt="注意如果显示+CPU要卸载已安装库再重新安装"><br>注意如果显示+CPU要卸载已安装库再重新安装<br>至此环境配置结束</p>
<h1 id="使用nanodet提供的模型进行识别"><a href="#使用nanodet提供的模型进行识别" class="headerlink" title="使用nanodet提供的模型进行识别"></a>使用nanodet提供的模型进行识别</h1><p>由于我们用于识别的设备没有使用Nvidia的GPU，需要使用CPU进行识别，所以在这里使用nanodet一个使用CPU的裁剪版本<br><a href="https://github.com/guo-pu/NanoDet-PyTorch-CPU" title="github链接">github链接</a><br>下载直接能使用，如果想使用原版nanodet：<a href="https://github.com/RangiLyu/nanodet" title="github链接">github链接</a><br>使用以下命令识别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 图片文件</span><br><span class="line">python detect_main.py image --config ./config/nanodet-m.yml --model model/nanodet_m.pth --path  street.png</span><br><span class="line"></span><br><span class="line"># 视频文件</span><br><span class="line">python detect_main.py video --config ./config/nanodet-m.yml --model model/nanodet_m.pth --path  test.mp4</span><br><span class="line"></span><br><span class="line"># 摄像头</span><br><span class="line">python detect_main.py webcam --config ./config/nanodet-m.yml --model model/nanodet_m.pth --path  0</span><br></pre></td></tr></table></figure>

<h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h2><p>首先使用识别用的摄像头拍摄数据集，一共需要几千张左右，可以使用我的自动标注工具生成数据集，那么需要几张识别目标的照片。</p>
<h2 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h2><p>使用精灵标注助手进行标注，并导出为voc格式，然后使用如下工具，将voc格式数据集转换为coco格式，即可开始训练。</p>
<h2 id="使用自己的电脑训练"><a href="#使用自己的电脑训练" class="headerlink" title="使用自己的电脑训练"></a>使用自己的电脑训练</h2><p>首先修改配置文件，位于config&#x2F;xxx.yml。</p>
<h1 id="使用自己的模型识别"><a href="#使用自己的模型识别" class="headerlink" title="使用自己的模型识别"></a>使用自己的模型识别</h1><h2 id="查看识别结果"><a href="#查看识别结果" class="headerlink" title="查看识别结果"></a>查看识别结果</h2><h2 id="外部调用识别结果"><a href="#外部调用识别结果" class="headerlink" title="外部调用识别结果"></a>外部调用识别结果</h2>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>神经网络</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>nonebot2+cqhttp方案实现自定义Python插件的QQ机器人</title>
    <url>/2022/nonebot2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前机器人框架有很多,框架内也有很多插件实现各种各样的功能.但是当我们想要的功能没有理想的插件可以实现时,也就需要自己编写一个插件.很多框架只支持易语言编写的插件,但是我个人认为易语言的编程体验十分不好,于是最终采用可以用python编写插件的nonebot框架+go-cqhttp方案</p>
<h2 id="目标功能"><a href="#目标功能" class="headerlink" title="目标功能"></a>目标功能</h2><p>为了管理一个千人QQ群,需要一个可靠且便利的方式来记录群员的违规行为,经过讨论,管理员们决定采用类似机动车驾驶证的记分制度.本文章即为实现记分并踢出记分达到指定分数的群员.</p>
<h2 id="nonebot2"><a href="#nonebot2" class="headerlink" title="nonebot2"></a>nonebot2</h2><p>nonebot的官方文档已经给出安装方法,在这里只大概记录一下.<br><strong><a href="https://v2.nonebot.dev/" title="nonebot2官方文档">nonebot2官方文档</a></strong></p>
<p>首先安装需要的库[需要Python3.7以上]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install nb-cli==<span class="number">0.5</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>
<p>最新版本为0.6.4,但是这个版本安装nonebot时会有一些本人不会解决的麻烦,所以尝试了旧版本,可以正常运行</p>
<p>在机器人目录内安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nb</span><br></pre></td></tr></table></figure>
<p>选择Create a New Project–输入项目名–选择第一项新建文件夹–载入 nonebot 内置插件–选择 cqhttp插件</p>
<p>此时就会生成机器人需要的文件,启动机器人只需要启动bot.py程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 bot.py</span><br></pre></td></tr></table></figure>
<h2 id="Go-cqhttp"><a href="#Go-cqhttp" class="headerlink" title="Go-cqhttp"></a>Go-cqhttp</h2><p>这就是一个QQ客户端,首先在github下载合适的文件<br><strong><a href="https://github.com/Mrs4s/go-cqhttp/releases" title="go-cqhttp下载">go-cqhttp下载</a></strong><br>下载后启动:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./go-cqhttp</span><br></pre></td></tr></table></figure>
<p>会生成其配置文件,需要修改的是config.yml文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xxxxxxxxxxxxxxxxx</span><br><span class="line">    uin:      <span class="comment"># 机器人QQ账号[密码不写,登陆时扫码登陆]</span></span><br><span class="line">xxxxxxxxxxxxxxxxx</span><br><span class="line">    universal: ws://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/cqhttp/ws</span><br><span class="line">xxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>
<p>再次启动go-cqhttp </p>
<h2 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h2><p>在机器人目录的plugins目录内,新建lab.py作为插件,并修改bot.py以加载插件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nonebot.init()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># load your plugin here</span></span><br><span class="line"> </span><br><span class="line">nonebot.run()</span><br></pre></td></tr></table></figure>
<p>将# load your plugin here替换为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nonebot.load_plugins(<span class="string">&quot;triority/plugins/lab.py&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h2><p>插件的编辑方法在官方文档中已经有所说明,在下面直接给出文章写到这时已经写完的代码</p>
<h2 id="用于在QQ群记分的插件"><a href="#用于在QQ群记分的插件" class="headerlink" title="用于在QQ群记分的插件"></a>用于在QQ群记分的插件</h2><p>这个程序仍然需要改进,比如不能使用at来选中成员而只能QQ号–这个已经于2022&#x2F;5&#x2F;14晚修复<br>经过测试如果记分没有写理由会导致分数增加但是没有计入明细–这个已经于2022&#x2F;7&#x2F;1晚修复，同时还加入了语法错误的回复<br>加入了ops随时修改的功能，但是必须由op列表内的人员进行修改–2022&#x2F;7&#x2F;3的更新<br>删除了对QQ群号的限制–2022&#x2F;7&#x2F;4的更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nonebot.adapters.cqhttp <span class="keyword">import</span> Bot, Event</span><br><span class="line"><span class="keyword">from</span> nonebot.plugin <span class="keyword">import</span> on_message</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">op = [<span class="string">&quot;123&quot;</span>]</span><br><span class="line"><span class="comment">#白名单ops</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data = f.readline()</span><br><span class="line">f.close()</span><br><span class="line">ops = <span class="built_in">eval</span>(data)</span><br><span class="line"><span class="comment">#记分</span></span><br><span class="line">scores = np.load(<span class="string">&#x27;scores.npy&#x27;</span>,allow_pickle=<span class="literal">True</span>).item()</span><br><span class="line">keys = [<span class="string">&#x27;QQ号&#x27;</span>,<span class="string">&#x27;查分&#x27;</span>,<span class="string">&#x27;记分&#x27;</span>,<span class="string">&#x27;明细&#x27;</span>,<span class="string">&#x27;穷举&#x27;</span>,<span class="string">&#x27;清零&#x27;</span>,<span class="string">&#x27;计分&#x27;</span>,<span class="string">&#x27;op&#x27;</span>,<span class="string">&#x27;deop&#x27;</span>]</span><br><span class="line"><span class="comment">#回复部分</span></span><br><span class="line">reply = on_message(priority=<span class="number">100</span>)</span><br><span class="line"><span class="meta">@reply.handle()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">reply_handle</span>(<span class="params">bot: Bot, event: Event</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#获取聊天内容user_msg</span></span><br><span class="line">        user_msg = <span class="built_in">str</span>(event.get_message()).strip()</span><br><span class="line">        <span class="comment">#获取发消息的人user,群号qun</span></span><br><span class="line">        msg = <span class="built_in">str</span>(event.get_session_id())</span><br><span class="line">        user = msg.split(<span class="string">&quot;_&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">        qun = msg.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        now = datetime.datetime.now()</span><br><span class="line">        <span class="comment">#消息空格分割列表words</span></span><br><span class="line">        user_msg.rstrip()</span><br><span class="line">        words = user_msg.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">global</span> <span class="built_in">len</span></span><br><span class="line">        length = <span class="built_in">len</span>(words)</span><br><span class="line">        <span class="keyword">if</span> words[<span class="number">0</span>]==<span class="string">&#x27;QQ号&#x27;</span> <span class="keyword">and</span> words[<span class="number">1</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span> <span class="keyword">and</span> length==<span class="number">2</span> :</span><br><span class="line">            <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>][<span class="number">10</span>:-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> user_msg[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">&#x27;查分&#x27;</span> <span class="keyword">and</span> length==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span>:</span><br><span class="line">                words[<span class="number">1</span>]=words[<span class="number">1</span>][<span class="number">10</span>:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>] <span class="keyword">in</span> scores:</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27; 的记分为 &#x27;</span>+<span class="built_in">str</span>(scores[words[<span class="number">1</span>]][<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27; 无记分记录&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">in</span> ops :</span><br><span class="line">            <span class="keyword">if</span> user_msg[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">&#x27;记分&#x27;</span> <span class="keyword">and</span> length==<span class="number">4</span> :</span><br><span class="line">                <span class="keyword">if</span> words[<span class="number">2</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span>:</span><br><span class="line">                    words[<span class="number">2</span>]=words[<span class="number">2</span>][<span class="number">10</span>:-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> words[<span class="number">2</span>] <span class="keyword">in</span> scores:</span><br><span class="line">                    scores[words[<span class="number">2</span>]][<span class="number">0</span>]=scores[words[<span class="number">2</span>]][<span class="number">0</span>]+<span class="built_in">int</span>(words[<span class="number">1</span>])</span><br><span class="line">                    scores[words[<span class="number">2</span>]].append([now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),words[<span class="number">1</span>],words[<span class="number">3</span>]])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    scores[words[<span class="number">2</span>]]=[<span class="built_in">int</span>(words[<span class="number">1</span>]),[now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),words[<span class="number">1</span>],words[<span class="number">3</span>]]]</span><br><span class="line">                np.save(<span class="string">&#x27;scores.npy&#x27;</span>, scores)</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">2</span>]+<span class="string">&#x27; 当前记分为 &#x27;</span>+<span class="built_in">str</span>(scores[words[<span class="number">2</span>]][<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> user_msg[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">&#x27;清零&#x27;</span> <span class="keyword">and</span> length==<span class="number">2</span> :</span><br><span class="line">                <span class="keyword">if</span> words[<span class="number">1</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span>:</span><br><span class="line">                    words[<span class="number">1</span>]=words[<span class="number">1</span>][<span class="number">10</span>:-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> words[<span class="number">1</span>] <span class="keyword">in</span> scores:</span><br><span class="line">                    <span class="keyword">del</span> scores[words[<span class="number">1</span>]]</span><br><span class="line">                    np.save(<span class="string">&#x27;scores.npy&#x27;</span>, scores)</span><br><span class="line">                    <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27; 记分已清空&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27; 无记分记录&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> user_msg[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">&#x27;明细&#x27;</span> <span class="keyword">and</span> length==<span class="number">2</span> :</span><br><span class="line">                <span class="keyword">if</span> words[<span class="number">1</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span>:</span><br><span class="line">                    words[<span class="number">1</span>]=words[<span class="number">1</span>][<span class="number">10</span>:-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> words[<span class="number">1</span>] <span class="keyword">in</span> scores:</span><br><span class="line">                    reason=<span class="string">&#x27;总记分&#x27;</span>+<span class="built_in">str</span>(scores[words[<span class="number">1</span>]][<span class="number">0</span>])+<span class="string">&#x27;:\n&#x27;</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(scores[words[<span class="number">1</span>]])):</span><br><span class="line">                        reason=reason+<span class="built_in">str</span>(i)+<span class="string">&#x27;.&#x27;</span>+scores[words[<span class="number">1</span>]][i][<span class="number">0</span>]+<span class="string">&#x27;\n  记分数:&#x27;</span>+scores[words[<span class="number">1</span>]][i][<span class="number">1</span>]+<span class="string">&#x27;\n  理由:&#x27;</span>+scores[words[<span class="number">1</span>]][i][<span class="number">2</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                    <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27; 记分明细如下:\n&#x27;</span>+reason)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27; 无记分记录&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> user_msg[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">&#x27;穷举&#x27;</span>:</span><br><span class="line">                <span class="keyword">await</span> reply.finish(<span class="string">&#x27;全部记录如下:&#x27;</span>+<span class="built_in">str</span>(scores))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> words[<span class="number">0</span>]==<span class="string">&#x27;op&#x27;</span> <span class="keyword">and</span> user <span class="keyword">in</span> op <span class="keyword">and</span> length==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span>:</span><br><span class="line">                words[<span class="number">1</span>]=words[<span class="number">1</span>][<span class="number">10</span>:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>] <span class="keyword">in</span> ops:</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27;已有权限&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                ops.append(words[<span class="number">1</span>])</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                f.write(<span class="built_in">str</span>(ops))</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27;成功获得权限&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> words[<span class="number">0</span>]==<span class="string">&#x27;deop&#x27;</span> <span class="keyword">and</span> user <span class="keyword">in</span> op <span class="keyword">and</span> length==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>][<span class="number">1</span>:<span class="number">6</span>]==<span class="string">&#x27;CQ:at&#x27;</span>:</span><br><span class="line">                words[<span class="number">1</span>]=words[<span class="number">1</span>][<span class="number">10</span>:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>] <span class="keyword">in</span> ops:</span><br><span class="line">                ops.remove(words[<span class="number">1</span>])</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                f.write(<span class="built_in">str</span>(ops))</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27;已被删除权限&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                <span class="keyword">await</span> reply.finish(words[<span class="number">1</span>]+<span class="string">&#x27;并没有权限&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> words[<span class="number">0</span>] <span class="keyword">in</span> keys <span class="keyword">and</span> user <span class="keyword">in</span> ops:</span><br><span class="line">            <span class="keyword">await</span> reply.finish(<span class="string">&#x27;您输入的语法有误，如有问题请查看机器人说明书：http://triority.cc/2022/06/16/how-to-use-qqbot/&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">await</span> reply.finish()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用于在QQ群中发送MC服务器rcon命令的插件"><a href="#用于在QQ群中发送MC服务器rcon命令的插件" class="headerlink" title="用于在QQ群中发送MC服务器rcon命令的插件"></a>用于在QQ群中发送MC服务器rcon命令的插件</h2><p>这个插件同样有带完善,如果无法连接至rcon服务端,可能导致进程一直卡在建立连接,同上,有待完善<br>作为一个好腐竹只需在QQ群中发送<code>rcon name kill @e</code>即可提高你的威望<br>import的rcon库在插件的代码下面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rcon <span class="keyword">import</span> MCRcon</span><br><span class="line"><span class="keyword">from</span> nonebot.adapters.cqhttp <span class="keyword">import</span> Bot, Event</span><br><span class="line"><span class="keyword">from</span> nonebot.plugin <span class="keyword">import</span> on_message</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rcon_send</span>(<span class="params">ip,port,key,command</span>):</span><br><span class="line">    <span class="keyword">with</span> MCRcon(ip, key, port ) <span class="keyword">as</span> mcr:</span><br><span class="line">        resp = mcr.command(command)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"> </span><br><span class="line">servers=&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&quot;ip&quot;</span>,port,<span class="string">&#x27;key&#x27;</span>,[<span class="string">&#x27;op&#x27;</span>]]</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">reply = on_message(priority=<span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@reply.handle()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">reply_handle</span>(<span class="params">bot: Bot, event: Event</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#获取聊天内容user_msg</span></span><br><span class="line">        user_msg = <span class="built_in">str</span>(event.get_message()).strip()</span><br><span class="line">        <span class="comment">#获取发消息的人user,群号qun</span></span><br><span class="line">        msg = <span class="built_in">str</span>(event.get_session_id())</span><br><span class="line">        user = msg.split(<span class="string">&quot;_&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">        qun = msg.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 消息空格分割列表words</span></span><br><span class="line">        words = user_msg.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> words[<span class="number">0</span>] == <span class="string">&#x27;rcon&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> words[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> servers:</span><br><span class="line">                <span class="keyword">await</span> reply.finish(<span class="string">&#x27;服务器未被记录&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> user <span class="keyword">in</span> servers[words[<span class="number">1</span>]][<span class="number">3</span>]:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ret = rcon_send(servers[words[<span class="number">1</span>]][<span class="number">0</span>], servers[words[<span class="number">1</span>]][<span class="number">1</span>], servers[words[<span class="number">1</span>]][<span class="number">2</span>], words[<span class="number">2</span>])</span><br><span class="line">                    <span class="keyword">await</span> reply.finish(ret)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">await</span> reply.finish(<span class="string">&#x27;无法连接至服务器rcon&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">await</span> reply.finish(<span class="string">&#x27;您没有连接服务器的权限&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">await</span> reply.finish()</span><br></pre></td></tr></table></figure>
<h3 id="rcon库–由老咩友编写"><a href="#rcon库–由老咩友编写" class="headerlink" title="rcon库–由老咩友编写"></a>rcon库–由老咩友编写</h3><p>他的github<a href="https://github.com/Redroadsl/Minecraft-Rcon" title="链接">链接</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MCRconException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MCRcon</span>(<span class="title class_ inherited__">object</span>):	</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Minecraft服务端远程命令（RCON）模板</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	老咩友情提醒您：</span></span><br><span class="line"><span class="string">		道路千万条，</span></span><br><span class="line"><span class="string">		规范第一条。</span></span><br><span class="line"><span class="string">		写码不规范，</span></span><br><span class="line"><span class="string">		维护两行泪。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    推荐你使用python的&#x27;with&#x27;语句！</span></span><br><span class="line"><span class="string">    这样可以确保及时的关闭连接，而不是被遗漏。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;with&#x27;语句例子:</span></span><br><span class="line"><span class="string">    In [1]: from mcrcon import MCRcon</span></span><br><span class="line"><span class="string">    In [2]: with MCRcon(&quot;这是一个ip&quot;, &quot;这是rcon的密码&quot;,&quot;这是Rcon的端口&quot; ) as mcr:</span></span><br><span class="line"><span class="string">       ...:     resp = mcr.command(&quot;/发送给服务端的指令&quot;)</span></span><br><span class="line"><span class="string">       ...:     print(resp) #输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	两行泪方式:</span></span><br><span class="line"><span class="string">	你当然也可以不用python的&#x27;with&#x27;语句，但是一定要在建立连接后，及时的断开连接。</span></span><br><span class="line"><span class="string">    In [3]: mcr = MCRcon(&quot;这是一个ip&quot;, &quot;这是rcon的密码&quot;,&quot;这是Rcon的端口&quot; )</span></span><br><span class="line"><span class="string">    In [4]: mcr.connect() #连接建立</span></span><br><span class="line"><span class="string">    In [5]: resp = mcr.command(&quot;/发送给服务端的指令&quot;)</span></span><br><span class="line"><span class="string">    In [6]: print(resp) #输出</span></span><br><span class="line"><span class="string">    In [7]: mcr.disconnect() #断开连接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    socket = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#重写init方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, password, port, tlsmode=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.host = host</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line">        <span class="variable language_">self</span>.port = port</span><br><span class="line">        <span class="variable language_">self</span>.tlsmode = tlsmode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, tb</span>):</span><br><span class="line">        <span class="variable language_">self</span>.disconnect()</span><br><span class="line">		</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.connect()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开 TLS</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.tlsmode &gt; <span class="number">0</span>:</span><br><span class="line">            ctx = ssl.create_default_context()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 禁用主机名和证书验证</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.tlsmode &gt; <span class="number">1</span>:</span><br><span class="line">                ctx.check_hostname = <span class="literal">False</span></span><br><span class="line">                ctx.verify_mode = ssl.CERT_NONE</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.socket = ctx.wrap_socket(<span class="variable language_">self</span>.socket, server_hostname=<span class="variable language_">self</span>.host)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.socket.connect((<span class="variable language_">self</span>.host, <span class="variable language_">self</span>.port))</span><br><span class="line">        <span class="variable language_">self</span>._send(<span class="number">3</span>, <span class="variable language_">self</span>.password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read</span>(<span class="params">self, length</span>):</span><br><span class="line">        data = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(data) &lt; length:</span><br><span class="line">            data += <span class="variable language_">self</span>.socket.recv(length - <span class="built_in">len</span>(data))</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">		</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.socket <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.socket.close()</span><br><span class="line">            <span class="variable language_">self</span>.socket = <span class="literal">None</span></span><br><span class="line">			</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_send</span>(<span class="params">self, out_type, out_data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.socket <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> MCRconException(<span class="string">&quot;发送前必须连接！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送请求包</span></span><br><span class="line">        out_payload = struct.pack(<span class="string">&#x27;&lt;ii&#x27;</span>, <span class="number">0</span>, out_type) + out_data.encode(<span class="string">&#x27;utf8&#x27;</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span></span><br><span class="line">        out_length = struct.pack(<span class="string">&#x27;&lt;i&#x27;</span>, <span class="built_in">len</span>(out_payload))</span><br><span class="line">        <span class="variable language_">self</span>.socket.send(out_length + out_payload)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取响应包</span></span><br><span class="line">        in_data = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 读取数据包</span></span><br><span class="line">            in_length, = struct.unpack(<span class="string">&#x27;&lt;i&#x27;</span>, <span class="variable language_">self</span>._read(<span class="number">4</span>))</span><br><span class="line">            in_payload = <span class="variable language_">self</span>._read(in_length)</span><br><span class="line">            in_id, in_type = struct.unpack(<span class="string">&#x27;&lt;ii&#x27;</span>, in_payload[:<span class="number">8</span>])</span><br><span class="line">            in_data_partial, in_padding = in_payload[<span class="number">8</span>:-<span class="number">2</span>], in_payload[-<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 异常处理</span></span><br><span class="line">            <span class="keyword">if</span> in_padding != <span class="string">b&#x27;\x00\x00&#x27;</span>:</span><br><span class="line">                <span class="keyword">raise</span> MCRconException(<span class="string">&quot;Incorrect padding&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> in_id == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">raise</span> MCRconException(<span class="string">&quot;登录rcon协议失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            in_data += in_data_partial.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(select.select([<span class="variable language_">self</span>.socket], [], [], <span class="number">0</span>)[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> in_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">command</span>(<span class="params">self, command</span>):</span><br><span class="line">        result = <span class="variable language_">self</span>._send(<span class="number">2</span>, command)</span><br><span class="line">        time.sleep(<span class="number">0.003</span>) <span class="comment"># MC-72390 （非线程安全的解决办法）</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>QQ机器人</tag>
        <tag>linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>在智能车航天组中的视觉识别赛道并拟合数据</title>
    <url>/2022/opencv-for-Aerospace/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在智能车航天组中的视觉识别赛道"><a href="#在智能车航天组中的视觉识别赛道" class="headerlink" title="在智能车航天组中的视觉识别赛道"></a>在智能车航天组中的视觉识别赛道</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">#定义HSV颜色选取范围</span></span><br><span class="line">color_dist = &#123;<span class="string">&#x27;Lower&#x27;</span>: np.array([<span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span>]), <span class="string">&#x27;Upper&#x27;</span>: np.array([<span class="number">130</span>, <span class="number">150</span>, <span class="number">150</span>])&#125;</span><br><span class="line"><span class="comment">#读取视频文件</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">r&#x27;E:\car\航天智慧物流-线上赛规则\五个关键技术任务\03. 计算机视觉\视觉任务\测试数据\1-主场景\camtest.mp4&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    frame = cv2.resize(frame, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_NEAREST)</span><br><span class="line">    frame2=frame.copy()</span><br><span class="line">    frame = frame[-<span class="number">150</span>:-<span class="number">1</span>, <span class="number">1</span>:<span class="number">910</span>]</span><br><span class="line">    <span class="comment">#高斯滤波降噪</span></span><br><span class="line">    gs_frame = cv2.GaussianBlur(frame, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">    <span class="comment">#RGB转HSV并进行处理</span></span><br><span class="line">    hsv = cv2.cvtColor(gs_frame, cv2.COLOR_BGR2HSV)</span><br><span class="line">    erode_hsv = cv2.erode(hsv, <span class="literal">None</span>, iterations=<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#将HSV图像二值化处理</span></span><br><span class="line">    inRange_hsv = cv2.inRange(erode_hsv, color_dist[<span class="string">&#x27;Lower&#x27;</span>], color_dist[<span class="string">&#x27;Upper&#x27;</span>])</span><br><span class="line">    <span class="comment">#获取二值化图像轮廓</span></span><br><span class="line">    cnts = cv2.findContours(inRange_hsv.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-<span class="number">2</span>]</span><br><span class="line">    <span class="comment">#存储轮廓</span></span><br><span class="line">    target_list = []</span><br><span class="line">    x=[]</span><br><span class="line">    y=[]</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cnts:</span><br><span class="line">        <span class="keyword">if</span> cv2.contourArea(c) &lt; <span class="number">100</span> <span class="keyword">or</span> cv2.contourArea(c) &gt; <span class="number">1500</span>:  <span class="comment"># 过滤小面积</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            target_list.append(c)</span><br><span class="line">    <span class="comment">#获取轮廓中心点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> target_list:</span><br><span class="line">        M = cv2.moments(i)  <span class="comment"># 计算中心点的x、y坐标</span></span><br><span class="line">        center_x = <span class="built_in">int</span>(M[<span class="string">&#x27;m10&#x27;</span>] / M[<span class="string">&#x27;m00&#x27;</span>])</span><br><span class="line">        center_y = <span class="built_in">int</span>(M[<span class="string">&#x27;m01&#x27;</span>] / M[<span class="string">&#x27;m00&#x27;</span>])</span><br><span class="line">        x.append(center_x)</span><br><span class="line">        y.append(center_y)</span><br><span class="line"></span><br><span class="line">        rect = cv2.minAreaRect(i)</span><br><span class="line">        box = cv2.boxPoints(rect)</span><br><span class="line">        cv2.drawContours(frame2, [np.int0(box)], -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#拟合散点</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(target_list) &gt; <span class="number">2</span> :</span><br><span class="line">        x=np.array(x)</span><br><span class="line">        z1 = np.polyfit(y, x, <span class="number">2</span>)  <span class="comment"># 用2次多项式拟合</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(target_list) == <span class="number">2</span> :</span><br><span class="line">        x=np.array(x)</span><br><span class="line">        z1 = np.polyfit(y, x, <span class="number">1</span>)  <span class="comment"># 用1次多项式拟合</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        z1 = <span class="number">0</span></span><br><span class="line">    p1 = np.poly1d(z1)</span><br><span class="line">    <span class="comment">#显示拟合曲线</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(target_list) &gt;= <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,frame.shape[<span class="number">0</span>]-<span class="number">1</span>):</span><br><span class="line">            cv2.line(frame2, (<span class="built_in">round</span>(p1(i)), i+<span class="number">390</span>), (<span class="built_in">round</span>(p1(i+<span class="number">1</span>)),i+<span class="number">391</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">        fx=<span class="built_in">str</span>(p1)</span><br><span class="line">        cv2.putText(frame2, fx, (<span class="number">10</span>, <span class="number">500</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#创建窗口播放视频</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;2&#x27;</span>,frame2)</span><br><span class="line">    <span class="comment">#cv2.imshow(&#x27;1&#x27;, frame)</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv-hsv辅助调参工具</title>
    <url>/2022/opencv-hsv-adjust/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>opencv经常使用颜色识别某一物体，而找到这一参数范围极其麻烦，因此写了这个程序来帮助确认最佳参数<br>效果如下：<br><img src="/img/opencv-hsv-adjust.png" alt="识别蓝色锥桶效果"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>2023年末的比赛中，学弟为这个程序添加了一些小功能，比如按键保存参数，<a href="https://qwqpap.xyz/2023/12/%e6%99%ba%e8%83%bd%e8%bd%a618%e5%b1%8aros%e7%bb%84%e8%a7%86%e8%a7%89%e6%96%b9%e6%a1%88/">博客链接</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;camera&#x27; or &#x27;picture&#x27;</span></span><br><span class="line">mode = <span class="string">&#x27;camera&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mode == <span class="string">&#x27;camera&#x27;</span>:</span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> gs, erode, Hmin, Smin, Vmin, Hmax, Smax, Vmax, img, Hmin2, Hmax2, img0, size_min</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;camera&#x27;</span>:</span><br><span class="line">        ret, img0 = cap.read()</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;picture&#x27;</span>:</span><br><span class="line">        img0 = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    img = img0.copy()</span><br><span class="line"></span><br><span class="line">    gs = cv2.getTrackbarPos(<span class="string">&#x27;gs&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    erode = cv2.getTrackbarPos(<span class="string">&#x27;erode&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Hmin = cv2.getTrackbarPos(<span class="string">&#x27;Hmin1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Smin = cv2.getTrackbarPos(<span class="string">&#x27;Smin&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Vmin = cv2.getTrackbarPos(<span class="string">&#x27;Vmin&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Hmax = cv2.getTrackbarPos(<span class="string">&#x27;Hmax1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Smax = cv2.getTrackbarPos(<span class="string">&#x27;Smax&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Vmax = cv2.getTrackbarPos(<span class="string">&#x27;Vmax&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Hmin2 = cv2.getTrackbarPos(<span class="string">&#x27;Hmin2&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    Hmax2 = cv2.getTrackbarPos(<span class="string">&#x27;Hmax2&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    size_min = cv2.getTrackbarPos(<span class="string">&#x27;size_min&#x27;</span>, <span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    <span class="comment"># 滤波二值化</span></span><br><span class="line">    gs_frame = cv2.GaussianBlur(img, (gs, gs), <span class="number">1</span>)</span><br><span class="line">    hsv = cv2.cvtColor(gs_frame, cv2.COLOR_BGR2HSV)</span><br><span class="line">    erode_hsv = cv2.erode(hsv, <span class="literal">None</span>, iterations=erode)</span><br><span class="line">    inRange_hsv = cv2.inRange(erode_hsv, np.array([Hmin, Smin, Vmin]), np.array([Hmax, Smax, Vmax]))</span><br><span class="line">    inRange_hsv2 = cv2.inRange(erode_hsv, np.array([Hmin2, Smin, Vmin]), np.array([Hmax2, Smax, Vmax]))</span><br><span class="line">    img = inRange_hsv + inRange_hsv2</span><br><span class="line">    <span class="comment"># 外接计算</span></span><br><span class="line">    cnts = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-<span class="number">2</span>]</span><br><span class="line">    target_list = []</span><br><span class="line">    pos = []</span><br><span class="line">    <span class="keyword">if</span> size_min &lt; <span class="number">1</span>:</span><br><span class="line">        size_min = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cnts:</span><br><span class="line">        <span class="keyword">if</span> cv2.contourArea(c) &lt; size_min:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            target_list.append(c)</span><br><span class="line">    <span class="keyword">for</span> cnt <span class="keyword">in</span> target_list:</span><br><span class="line">        x, y, w, h = cv2.boundingRect(cnt)</span><br><span class="line">        cv2.rectangle(img0, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        pos.append([<span class="built_in">int</span>(x + w / <span class="number">2</span>), y + h / <span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(pos)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">img_test</span>():</span><br><span class="line">    sleep = <span class="number">0.1</span></span><br><span class="line">    gs = <span class="number">0</span></span><br><span class="line">    erode = <span class="number">0</span></span><br><span class="line">    Hmin1 = <span class="number">100</span></span><br><span class="line">    Hmax1 = <span class="number">125</span></span><br><span class="line">    Hmin2 = <span class="number">179</span></span><br><span class="line">    Hmax2 = <span class="number">0</span></span><br><span class="line">    Smin = <span class="number">130</span></span><br><span class="line">    Smax = <span class="number">255</span></span><br><span class="line">    Vmin = <span class="number">50</span></span><br><span class="line">    Vmax = <span class="number">240</span></span><br><span class="line">    size_min = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;gs&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">8</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;erode&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">8</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Hmin1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">179</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Hmax1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">179</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Hmin2&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">179</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Hmax2&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">179</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Smin&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">255</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Smax&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">255</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Vmin&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">255</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;Vmax&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">255</span>, update)</span><br><span class="line">    cv2.createTrackbar(<span class="string">&#x27;size_min&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">1</span>, <span class="number">100000</span>, update)</span><br><span class="line">    <span class="comment"># 默认值</span></span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;gs&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, gs)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;erode&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, erode)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Hmin1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Hmin1)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Hmax1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Hmax1)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Hmin2&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Hmin2)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Hmax2&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Hmax2)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Smin&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Smin)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Smax&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Smax)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Vmin&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Vmin)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;Vmax&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, Vmax)</span><br><span class="line">    cv2.setTrackbarPos(<span class="string">&#x27;size_min&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, size_min)</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            update(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image1&#x27;</span>, img)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;image0&#x27;</span>, img0)</span><br><span class="line">        time.sleep(sleep)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img_test()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>orangepi-gpio</title>
    <url>/2022/orangepi-gpio/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="编译安装wiringOP"><a href="#编译安装wiringOP" class="headerlink" title="编译安装wiringOP"></a>编译安装wiringOP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/orangepi-xunlong/wiringOP</span><br><span class="line">cd wiringOP</span><br><span class="line">./build clean</span><br><span class="line">./build</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>读取全部引脚：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpio readall</span><br></pre></td></tr></table></figure>
<h2 id="在python中使用"><a href="#在python中使用" class="headerlink" title="在python中使用"></a>在python中使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; os.system(&quot;gpio read 2&quot;)</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; os.system(&quot;gpio read 2&quot;)</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="一些其他语法"><a href="#一些其他语法" class="headerlink" title="一些其他语法"></a>一些其他语法</h2><p>设置模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpio mode 2 in</span><br></pre></td></tr></table></figure>
<p>控制输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpio write 2 0</span><br></pre></td></tr></table></figure>
<h2 id="废话结束"><a href="#废话结束" class="headerlink" title="废话结束"></a>废话结束</h2><p>当然了做这个的目的是当GPIO引脚为低电平时下载保存esp32-cam拍摄的照片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import urllib.request</span><br><span class="line">i=1</span><br><span class="line">os.system(&quot;gpio mode 2 in&quot;)</span><br><span class="line">while True and os.popen(&quot;gpio read 2&quot;).read().splitlines()[0]==&#x27;0&#x27;:</span><br><span class="line">    print (&quot;starting&quot;)</span><br><span class="line">    time.sleep(0.3)</span><br><span class="line">while True:</span><br><span class="line">    if os.popen(&quot;gpio read 2&quot;).read().splitlines()[0]==&#x27;0&#x27;:</span><br><span class="line">        print(time.strftime(&quot;%Y-%m-%d-%H_%M_%S&quot;, time.localtime()))</span><br><span class="line">        print(i)</span><br><span class="line">        urllib.request.urlretrieve(&quot;http://192.168.1.109/capture?_cb=1664116597682&quot;,&quot;cam/%s.jpg&quot; % i)</span><br><span class="line">        #camera.capture(&#x27;/home/pi/Desktop/cam_3D/cam_3D/image%s.jpg&#x27; % i)</span><br><span class="line">        urllib.request.urlretrieve(&quot;http://192.168.1.109/control?var=framesize&amp;val=10&quot;,&quot;Resolution&quot;)</span><br><span class="line">        i=i+1</span><br><span class="line">        time.sleep(3)</span><br><span class="line">    time.sleep(0.3)</span><br><span class="line">    print(&quot;waiting&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>linux</tag>
        <tag>香橙派</tag>
      </tags>
  </entry>
  <entry>
    <title>数据集pascal-xml格式转xml格式</title>
    <url>/2022/pascal-xml/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的数据集标注中，导出的格式是pascal，完成以后我就删掉了记录，后来由于一些错误，需要对原来的数据集进行修改，但是pascal格式不支持导入，因此有了转换成xml格式的需求。</p>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>首先观察xml格式的输出文件，拿出一个作为模板，只需修改其中的path以及x,y的max,min即可。<br>下一步就是读取pascal格式的xml文件。<br>这里使用了<code>from xml.etree import ElementTree as ET</code>的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取xml文件</span></span><br><span class="line">tree = ET.parse(path)</span><br><span class="line"><span class="comment">#获取根节点(root)</span></span><br><span class="line">root = tree.getroot()</span><br><span class="line"><span class="comment">#在根节点(root)寻找object节点</span></span><br><span class="line"><span class="built_in">object</span> = root.find(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"><span class="comment">#在object节点中读取xmin的值</span></span><br><span class="line">xmin = bndbox.find(<span class="string">&#x27;xmin&#x27;</span>).text</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这里的代码还加入了寻找漏标项目的功能，输出其文件名和位置<br>此外此方法还可以自动去除多标的情况<br>另外在列表中查询指定值的索引的代码在这次编程中才学会<br><code>filenames.index(i)</code>返回filenames列表中i的出现位置索引<br>下面是全部代码：<br>默认是从<code>outputs(pet)</code>读取pascal格式，然后输出xml格式到<code>outputs</code>文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> keyboard</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree <span class="keyword">as</span> ET</span><br><span class="line">er=[]</span><br><span class="line">th=[]</span><br><span class="line">filenames = os.listdir(<span class="string">r&#x27;outputs(pet)&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filenames:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        path = <span class="string">&#x27;outputs(pet)\\&#x27;</span>+i</span><br><span class="line">        tree = ET.parse(path)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line">        <span class="built_in">object</span> = root.find(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        bndbox = <span class="built_in">object</span>.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        xmin = bndbox.find(<span class="string">&#x27;xmin&#x27;</span>).text</span><br><span class="line">        ymin = bndbox.find(<span class="string">&#x27;ymin&#x27;</span>).text</span><br><span class="line">        xmax = bndbox.find(<span class="string">&#x27;xmax&#x27;</span>).text</span><br><span class="line">        ymax = bndbox.find(<span class="string">&#x27;ymax&#x27;</span>).text</span><br><span class="line">        <span class="built_in">print</span>(xmin, ymin, xmax, ymax)</span><br><span class="line">        path = i[<span class="number">0</span>:-<span class="number">4</span>]</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="string">&lt;doc&gt;</span></span><br><span class="line"><span class="string">	&lt;path&gt;F:\\air2\\pet\\&quot;&quot;&quot;</span>+path+<span class="string">&quot;&quot;&quot;.jpg&lt;/path&gt;</span></span><br><span class="line"><span class="string">	&lt;outputs&gt;</span></span><br><span class="line"><span class="string">		&lt;object&gt;</span></span><br><span class="line"><span class="string">			&lt;item&gt;</span></span><br><span class="line"><span class="string">				&lt;name&gt;pet&lt;/name&gt;</span></span><br><span class="line"><span class="string">				&lt;bndbox&gt;</span></span><br><span class="line"><span class="string">					&lt;xmin&gt;&quot;&quot;&quot;</span>+xmin+<span class="string">&quot;&quot;&quot;&lt;/xmin&gt;</span></span><br><span class="line"><span class="string">					&lt;ymin&gt;&quot;&quot;&quot;</span>+ymin+<span class="string">&quot;&quot;&quot;&lt;/ymin&gt;</span></span><br><span class="line"><span class="string">					&lt;xmax&gt;&quot;&quot;&quot;</span>+xmax+<span class="string">&quot;&quot;&quot;&lt;/xmax&gt;</span></span><br><span class="line"><span class="string">					&lt;ymax&gt;&quot;&quot;&quot;</span>+ymax+<span class="string">&quot;&quot;&quot;&lt;/ymax&gt;</span></span><br><span class="line"><span class="string">				&lt;/bndbox&gt;</span></span><br><span class="line"><span class="string">			&lt;/item&gt;</span></span><br><span class="line"><span class="string">		&lt;/object&gt;</span></span><br><span class="line"><span class="string">	&lt;/outputs&gt;</span></span><br><span class="line"><span class="string">	&lt;time_labeled&gt;1656409300728&lt;/time_labeled&gt;</span></span><br><span class="line"><span class="string">	&lt;labeled&gt;true&lt;/labeled&gt;</span></span><br><span class="line"><span class="string">	&lt;size&gt;</span></span><br><span class="line"><span class="string">		&lt;width&gt;1920&lt;/width&gt;</span></span><br><span class="line"><span class="string">		&lt;height&gt;1080&lt;/height&gt;</span></span><br><span class="line"><span class="string">		&lt;depth&gt;3&lt;/depth&gt;</span></span><br><span class="line"><span class="string">	&lt;/size&gt;</span></span><br><span class="line"><span class="string">&lt;/doc&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        path = <span class="string">&#x27;outputs\\&#x27;</span>+i</span><br><span class="line">        fw = <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        fw.write(<span class="built_in">str</span>)</span><br><span class="line">        fw.close()</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        er.append(i)</span><br><span class="line">        th.append(filenames.index(i)+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(er)</span><br><span class="line"><span class="built_in">print</span>(th)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>一个PCB格尺</title>
    <url>/2022/pcb-ruler/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于PCB"><a href="#关于PCB" class="headerlink" title="关于PCB"></a>关于PCB</h2><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><p>背面的电路是真的!!!接上电容晶振电阻和ATMEGA芯片就可以当单片机用哦!<br>形状为圆角矩形,长宽160x35cm,半径3cm,厚度1.6cm<br>如果想要可以来找我哦哈哈<strong>目前定价10r一个!目前定价10r一个!目前定价10r一个!</strong>[doge]不包邮<br>联系方式在右上角 关于 页面</p>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>纯粹是闲的</p>
<h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><img src="/2022/pcb-ruler/pcb-ruler.png" class="" title="正反面">

<h2 id="PCB制板文件"><a href="#PCB制板文件" class="headerlink" title="PCB制板文件"></a>PCB制板文件</h2><p><a href="Gerber_PCB_ruler.zip" title="Gerber文件下载">下载Gerber文件</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>延时摄影图片合成视频</title>
    <url>/2022/photos2video/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="http://triority.cc/2022/05/17/arduino-voltmeter/#%E6%AF%8F%E5%B1%82%E7%85%A7%E7%89%87%E5%90%88%E6%88%90%E8%A7%86%E9%A2%91" title="之前的文章">之前的文章</a>里，我找了用一个python程序把延时摄影的很多张照片合成视频，那个时候用来合成树莓派摄像头拍的几百张照片问题不大，但是今天尝试合成手机拍的照片，瞬间内存爆满，一看代码，气死个人，把所有照片存进一个数组再从数组里一个个取出来写入视频，搁这搁这呢属于是，所以自己重写一个，顺便去掉文件名限制，直接默认排序</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>直接读取图片写入视频，内存占用就下来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">photos = os.listdir(<span class="string">r&#x27;cam_3D&#x27;</span>)</span><br><span class="line">photo = cv2.imread(<span class="string">&#x27;cam_3D\\&#x27;</span> + photos[<span class="number">0</span>])</span><br><span class="line">size = (photo.shape[<span class="number">1</span>], photo.shape[<span class="number">0</span>])</span><br><span class="line">videowrite = cv2.VideoWriter(<span class="string">r&#x27;test.mp4&#x27;</span>, -<span class="number">1</span>, <span class="number">30</span>, size)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> photos:</span><br><span class="line">    path = <span class="string">&#x27;cam_3D\\&#x27;</span> + filename</span><br><span class="line">    img = cv2.imread(path)</span><br><span class="line">    <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(filename + <span class="string">&quot; is error!&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    videowrite.write(img)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">videowrite.release()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;finished&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>3D打印</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派从usb设备启动</title>
    <url>/2022/pi-boot-from-usb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="修改-Ubuntu-以进行-USB-引导"><a href="#修改-Ubuntu-以进行-USB-引导" class="headerlink" title="修改 Ubuntu 以进行 USB 引导"></a>修改 Ubuntu 以进行 USB 引导</h2><h3 id="查找和装载存储设备"><a href="#查找和装载存储设备" class="headerlink" title="查找和装载存储设备"></a>查找和装载存储设备</h3><p>首先，使用<code>lsblk</code>命令找到您的存储设备，这将显示连接到系统的所有存储设备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pi@triority:~ $ lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0    0 149.1G  0 disk</span><br><span class="line">├─sda1        8:1    0   256M  0 part</span><br><span class="line">└─sda2        8:2    0     3G  0 part</span><br><span class="line">mmcblk0     179:0    0  28.8G  0 disk</span><br><span class="line">├─mmcblk0p1 179:1    0   256M  0 part /boot</span><br><span class="line">└─mmcblk0p2 179:2    0  28.6G  0 part /</span><br></pre></td></tr></table></figure>
<p>SD卡将始终以mmcblk开头，因此可以排除该卡。这使得usb设备成为系统上唯一的其他磁盘设备。<br>在<code>MOUNTPOINT</code>列下的输出中，可以看到它是空白的。这意味着驱动器未安装在系统上。<br>现在，创建两个挂载点并挂载 Ubuntu 驱动器。使用这些命令替换自己的驱动器，它不一定是 <code>/dev/sda</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /mnt/boot</span><br><span class="line">sudo mkdir /mnt/writable</span><br><span class="line">sudo mount /dev/sda1 /mnt/boot</span><br><span class="line">sudo mount /dev/sda2 /mnt/writable</span><br></pre></td></tr></table></figure>
<p>正确挂载所有内容后，<code>lsblk</code>命令的输出应如下所示，现在填充了挂载点字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pi@triority:~ $ lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0    0 149.1G  0 disk</span><br><span class="line">├─sda1        8:1    0   256M  0 part /mnt/boot</span><br><span class="line">└─sda2        8:2    0     3G  0 part /mnt/writable</span><br><span class="line">mmcblk0     179:0    0  28.8G  0 disk</span><br><span class="line">├─mmcblk0p1 179:1    0   256M  0 part /boot</span><br><span class="line">└─mmcblk0p2 179:2    0  28.6G  0 part /</span><br></pre></td></tr></table></figure>
<h3 id="使用脚本修改已挂载的分区"><a href="#使用脚本修改已挂载的分区" class="headerlink" title="使用脚本修改已挂载的分区"></a>使用脚本修改已挂载的分区</h3><p>如果你只是想让你的Ubuntu分区可启动，一个自动化脚本可以做到这一点。只要您已将分区挂载为 <code>/mnt/boot</code> 和<code> /mnt/writeable</code>，脚本就会对 Ubuntu 20.04 &#x2F; 20.10 进行必要的更改！该脚本的<a href="https://github.com/TheRemote/Ubuntu-Server-raspi4-unofficial/blob/master/BootFix.sh" title="源代码">源代码</a><br>由于脚本在github访问困难，可以直接复制下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Script that fixes an Ubuntu 20.04 / 20.10 partition created by the official Raspberry Pi Imager to boot with a Raspberry Pi 4</span><br><span class="line"># by James A. Chambers - https://jamesachambers.com/raspberry-pi-4-ubuntu-20-04-usb-mass-storage-boot-guide</span><br><span class="line"></span><br><span class="line"># First image your drive with Ubuntu 20.04 or 20.10 using the official Pi Imager tool</span><br><span class="line"># Next connect your drive to the Raspberry Pi</span><br><span class="line"># Find drive using lsblk (normally it&#x27;s /dev/sda but check first) -- unmount if it was automatically mounted with sudo umount mountpoint (ex: sudo umount /media/pi/system-boot)</span><br><span class="line"># Mount boot partition with sudo mount /dev/sda1 /mnt/boot</span><br><span class="line"># Mount writable partition with sudo mount /dev/sda2 /mnt/writable</span><br><span class="line"># Now you are ready to run this script to update the partition for Raspberry Pi booting</span><br><span class="line"></span><br><span class="line"># Safety check, check for /boot directory and /usr/bin/raspinfo - NO LONGER USED - See Issue #140</span><br><span class="line"># if ! command -v git &gt;/dev/null ; then</span><br><span class="line">#    echo &quot;Safety check:  git was not found.  Please install using sudo apt install git.  Exiting...&quot;</span><br><span class="line">#    exit 1</span><br><span class="line"># fi</span><br><span class="line"></span><br><span class="line"># Safety check, run as sudo</span><br><span class="line">if [ $(id -u) != 0 ]; then</span><br><span class="line">   echo &quot;Safety check:  This script is meant to be ran as root or sudo.  Please run using sudo ./BootFix.sh.  Exiting...&quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Safety check -- check for system-boot automount</span><br><span class="line">if [ -d /media/*/system-boot ]; then</span><br><span class="line">   echo &quot;Safety check:  automount detected at /media/*/system-boot.  Please unmount the automount in File Explorer or with sudo umount /media/$LOGNAME/system-boot.&quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Safety check -- check for writable automount</span><br><span class="line">if [ -d /media/*/writable ]; then</span><br><span class="line">   echo &quot;Safety check:  automount detected at /media/*/writable.  Please unmount the automount in File Explorer or with sudo umount /media/$LOGNAME/system-boot.&quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Find the &quot;writable&quot; root filesystem mount</span><br><span class="line">if [ -d /mnt/writable ] &amp;&amp; [ -d /mnt/writable/usr/lib/u-boot ] ; then</span><br><span class="line">    mntWritable=&#x27;/mnt/writable&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &quot;The partition &#x27;writable&#x27; was not found in /mnt/writable.  Make sure you have mounted your USB mass storage device (ex: sudo mount /dev/sda2 /mnt/writable).&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">echo &quot;Found writable partition at $mntWritable&quot;</span><br><span class="line"></span><br><span class="line"># Find the &quot;system-boot&quot; boot filesystem mount</span><br><span class="line">if [ -d /mnt/boot ] &amp;&amp; [ -e /mnt/boot/vmlinuz ]; then</span><br><span class="line">    mntBoot=&#x27;/mnt/boot&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &quot;The &#x27;boot&#x27; partition was not found in /mnt/boot.  Make sure you have mounted your USB mass storage device (ex: sudo mount /dev/sda1 /mnt/boot).&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">echo &quot;Found boot partition at $mntBoot&quot;</span><br><span class="line"></span><br><span class="line"># Commented out -- not necessary after 20.04.2 and causes issues</span><br><span class="line"># Clone firmware repository</span><br><span class="line">#if [ ! -d rpi-firmware ]; then</span><br><span class="line">#   git clone https://github.com/Hexxeh/rpi-firmware.git --depth 1</span><br><span class="line">#else</span><br><span class="line">#   cd rpi-firmware</span><br><span class="line">#   git pull</span><br><span class="line">#   cd ..</span><br><span class="line">#fi</span><br><span class="line"></span><br><span class="line"># Update firmware</span><br><span class="line">#echo &quot;Updating firmware...&quot;</span><br><span class="line">#if [ -d rpi-firmware ]; then</span><br><span class="line">#   sudo cp rpi-firmware/*.dat &quot;$mntBoot&quot;</span><br><span class="line">#   sudo cp rpi-firmware/*.elf &quot;$mntBoot&quot;</span><br><span class="line">#   sudo cp rpi-firmware/*.bin &quot;$mntBoot&quot;</span><br><span class="line">#   # Update DTBs if not Ubuntu Server 20.04</span><br><span class="line">#   if cat &quot;$mntWritable/etc/os-release&quot; | grep -q &quot;Ubuntu 20.04.1&quot;; then</span><br><span class="line">#      if [ ! -d &quot;$mntWritable/lib/X11&quot; ]; then</span><br><span class="line">#         if cat &quot;$mntBoot/config.txt&quot; | grep -q &quot;arm_64bit=1&quot;; then</span><br><span class="line">#            # Ubuntu server 20.04.1 64 bit- skip copying DTBs</span><br><span class="line">#            echo &quot;Skipping copying DTBs for Ubuntu Server 20.04.1 64 bit&quot;</span><br><span class="line">#         else</span><br><span class="line">#            sudo cp rpi-firmware/*.dtb &quot;$mntBoot&quot;</span><br><span class="line">#         fi</span><br><span class="line">#      else</span><br><span class="line">#         sudo cp rpi-firmware/*.dtb &quot;$mntBoot&quot;</span><br><span class="line">#      fi</span><br><span class="line">#   else</span><br><span class="line">#      sudo cp rpi-firmware/*.dtb &quot;$mntBoot&quot;</span><br><span class="line">#   fi</span><br><span class="line">#   rm -rf rpi-firmware</span><br><span class="line">#else</span><br><span class="line">#    echo &quot;Failed to clone rpi-firmware repository with git.  Are you connected to the internet?  Exiting...&quot;</span><br><span class="line">#    rm -rf rpi-firmware</span><br><span class="line">#    exit 1</span><br><span class="line">#fi</span><br><span class="line"></span><br><span class="line"># Decompress the kernel</span><br><span class="line">echo &quot;Decompressing kernel from vmlinuz to vmlinux...&quot;</span><br><span class="line">zcat -qf &quot;$mntBoot/vmlinuz&quot; &gt; &quot;$mntBoot/vmlinux&quot;</span><br><span class="line">echo &quot;Kernel decompressed&quot;</span><br><span class="line"></span><br><span class="line"># Check if 32 bit or 64 bit and modify config.txt</span><br><span class="line">if cat &quot;$mntBoot/config.txt&quot; | grep -q &quot;arm_64bit=1&quot;; then</span><br><span class="line"></span><br><span class="line"># Update config.txt with correct parameters</span><br><span class="line">echo &quot;Updating config.txt with correct parameters...&quot;</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee &quot;$mntBoot/config.txt&quot;&gt;/dev/null</span><br><span class="line"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class="line"># usercfg.txt file is the place to include user changes. Please refer to</span><br><span class="line"># the README file for a description of the various configuration files on</span><br><span class="line"># the boot partition.</span><br><span class="line"></span><br><span class="line"># The unusual ordering below is deliberate; older firmwares (in particular the</span><br><span class="line"># version initially shipped with bionic) don&#x27;t understand the conditional</span><br><span class="line"># [sections] below and simply ignore them. The Pi4 doesn&#x27;t boot at all with</span><br><span class="line"># firmwares this old so it&#x27;s safe to place at the top. Of the Pi2 and Pi3, the</span><br><span class="line"># Pi3 uboot happens to work happily on the Pi2, so it needs to go at the bottom</span><br><span class="line"># to support old firmwares.</span><br><span class="line"></span><br><span class="line">[pi4]</span><br><span class="line">max_framebuffers=2</span><br><span class="line">dtoverlay=vc4-fkms-v3d</span><br><span class="line">boot_delay</span><br><span class="line">kernel=vmlinux</span><br><span class="line">initramfs initrd.img followkernel</span><br><span class="line"></span><br><span class="line">[pi2]</span><br><span class="line">boot_delay</span><br><span class="line">kernel=vmlinux</span><br><span class="line">initramfs initrd.img followkernel</span><br><span class="line"></span><br><span class="line">[pi3]</span><br><span class="line">boot_delay</span><br><span class="line">kernel=vmlinux</span><br><span class="line">initramfs initrd.img followkernel</span><br><span class="line"></span><br><span class="line">[all]</span><br><span class="line">arm_64bit=1</span><br><span class="line">device_tree_address=0x03000000</span><br><span class="line"></span><br><span class="line"># The following settings are defaults expected to be overridden by the</span><br><span class="line"># included configuration. The only reason they are included is, again, to</span><br><span class="line"># support old firmwares which don&#x27;t understand the include command.</span><br><span class="line"></span><br><span class="line">enable_uart=1</span><br><span class="line">cmdline=cmdline.txt</span><br><span class="line"></span><br><span class="line">include syscfg.txt</span><br><span class="line">include usercfg.txt</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># End 64 bit</span><br><span class="line">else</span><br><span class="line"></span><br><span class="line"># Update config.txt with correct parameters</span><br><span class="line">echo &quot;Updating config.txt with correct parameters...&quot;</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee &quot;$mntBoot/config.txt&quot;&gt;/dev/null</span><br><span class="line"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class="line"># usercfg.txt file is the place to include user changes. Please refer to</span><br><span class="line"># the README file for a description of the various configuration files on</span><br><span class="line"># the boot partition.</span><br><span class="line"></span><br><span class="line"># The unusual ordering below is deliberate; older firmwares (in particular the</span><br><span class="line"># version initially shipped with bionic) don&#x27;t understand the conditional</span><br><span class="line"># [sections] below and simply ignore them. The Pi4 doesn&#x27;t boot at all with</span><br><span class="line"># firmwares this old so it&#x27;s safe to place at the top. Of the Pi2 and Pi3, the</span><br><span class="line"># Pi3 uboot happens to work happily on the Pi2, so it needs to go at the bottom</span><br><span class="line"># to support old firmwares.</span><br><span class="line"></span><br><span class="line">[pi4]</span><br><span class="line">max_framebuffers=2</span><br><span class="line">dtoverlay=vc4-fkms-v3d</span><br><span class="line">boot_delay</span><br><span class="line">kernel=vmlinux</span><br><span class="line">initramfs initrd.img followkernel</span><br><span class="line"></span><br><span class="line">[pi2]</span><br><span class="line">boot_delay</span><br><span class="line">kernel=vmlinux</span><br><span class="line">initramfs initrd.img followkernel</span><br><span class="line"></span><br><span class="line">[pi3]</span><br><span class="line">boot_delay</span><br><span class="line">kernel=vmlinux</span><br><span class="line">initramfs initrd.img followkernel</span><br><span class="line"></span><br><span class="line">[all]</span><br><span class="line">device_tree_address=0x03000000</span><br><span class="line"></span><br><span class="line"># The following settings are defaults expected to be overridden by the</span><br><span class="line"># included configuration. The only reason they are included is, again, to</span><br><span class="line"># support old firmwares which don&#x27;t understand the include command.</span><br><span class="line"></span><br><span class="line">enable_uart=1</span><br><span class="line">cmdline=cmdline.txt</span><br><span class="line"></span><br><span class="line">include syscfg.txt</span><br><span class="line">include usercfg.txt</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># End 32 bit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create script to automatically decompress kernel (source: https://www.raspberrypi.org/forums/viewtopic.php?t=278791)</span><br><span class="line">echo &quot;Creating script to automatically decompress kernel...&quot;</span><br><span class="line">cat &lt;&lt; \EOF | sudo tee &quot;$mntBoot/auto_decompress_kernel&quot;&gt;/dev/null</span><br><span class="line">#!/bin/bash -e</span><br><span class="line"># auto_decompress_kernel script</span><br><span class="line">BTPATH=/boot/firmware</span><br><span class="line">CKPATH=$BTPATH/vmlinuz</span><br><span class="line">DKPATH=$BTPATH/vmlinux</span><br><span class="line"># Check if compression needs to be done.</span><br><span class="line">if [ -e $BTPATH/check.md5 ]; then</span><br><span class="line">   if md5sum --status --ignore-missing -c $BTPATH/check.md5; then</span><br><span class="line">      echo -e &quot;\e[32mFiles have not changed, Decompression not needed\e[0m&quot;</span><br><span class="line">      exit 0</span><br><span class="line">   else</span><br><span class="line">      echo -e &quot;\e[31mHash failed, kernel will be compressed\e[0m&quot;</span><br><span class="line">   fi</span><br><span class="line">fi</span><br><span class="line"># Backup the old decompressed kernel</span><br><span class="line">mv $DKPATH $DKPATH.bak</span><br><span class="line">if [ ! $? == 0 ]; then</span><br><span class="line">   echo -e &quot;\e[31mDECOMPRESSED KERNEL BACKUP FAILED!\e[0m&quot;</span><br><span class="line">   exit 1</span><br><span class="line">else</span><br><span class="line">   echo -e &quot;\e[32mDecompressed kernel backup was successful\e[0m&quot;</span><br><span class="line">fi</span><br><span class="line"># Decompress the new kernel</span><br><span class="line">echo &quot;Decompressing kernel: &quot;$CKPATH&quot;..............&quot;</span><br><span class="line">zcat -qf $CKPATH &gt; $DKPATH</span><br><span class="line">if [ ! $? == 0 ]; then</span><br><span class="line">   echo -e &quot;\e[31mKERNEL FAILED TO DECOMPRESS!\e[0m&quot;</span><br><span class="line">   exit 1</span><br><span class="line">else</span><br><span class="line">   echo -e &quot;\e[32mKernel Decompressed Succesfully\e[0m&quot;</span><br><span class="line">fi</span><br><span class="line"># Hash the new kernel for checking</span><br><span class="line">md5sum $CKPATH $DKPATH &gt; $BTPATH/check.md5</span><br><span class="line">if [ ! $? == 0 ]; then</span><br><span class="line">   echo -e &quot;\e[31mMD5 GENERATION FAILED!\e[0m&quot;</span><br><span class="line">else</span><br><span class="line">   echo -e &quot;\e[32mMD5 generated Succesfully\e[0m&quot;</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br><span class="line">EOF</span><br><span class="line">sudo chmod +x &quot;$mntBoot/auto_decompress_kernel&quot;</span><br><span class="line"></span><br><span class="line"># Create apt script to automatically decompress the kernel</span><br><span class="line">echo &quot;Creating apt script to automatically decompress kernel...&quot;</span><br><span class="line">echo &#x27;DPkg::Post-Invoke &#123;&quot;/bin/bash /boot/firmware/auto_decompress_kernel&quot;; &#125;;&#x27; | sudo tee &quot;$mntWritable/etc/apt/apt.conf.d/999_decompress_rpi_kernel&quot; &gt;/dev/null</span><br><span class="line">sudo chmod +x &quot;$mntWritable/etc/apt/apt.conf.d/999_decompress_rpi_kernel&quot;</span><br><span class="line"></span><br><span class="line"># Successful</span><br><span class="line">echo &quot;Updating Ubuntu partition was successful!  Shut down your Pi, remove the SD card then reconnect the power.&quot;</span><br></pre></td></tr></table></figure>
<p>然后新建一个脚本文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano BootFix.sh</span><br></pre></td></tr></table></figure>
<p>粘贴后<code>ctrl+o</code>保存，<code>ctrl+x</code>退出<br>然后执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x BootFix.sh</span><br><span class="line">sudo ./BootFix.sh</span><br></pre></td></tr></table></figure>
<p>只要您正确挂载了分区，它就会修改分区并告诉您它已成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pi@triority:~ $ sudo ./BootFix.sh</span><br><span class="line">Found writable partition at /mnt/writable</span><br><span class="line">Found boot partition at /mnt/boot</span><br><span class="line">Decompressing kernel from vmlinuz to vmlinux...</span><br><span class="line">Kernel decompressed</span><br><span class="line">Updating config.txt with correct parameters...</span><br><span class="line">Creating script to automatically decompress kernel...</span><br><span class="line">Creating apt script to automatically decompress kernel...</span><br><span class="line">Updating Ubuntu partition was successful!  Shut down your Pi, remove the SD card then reconnect the power.</span><br></pre></td></tr></table></figure>
<p>使用以下命令卸载分区：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt/boot</span><br><span class="line">sudo umount /mnt/writable</span><br></pre></td></tr></table></figure>
<p>现在可以关闭并从中取出SD卡，只插入USB设备。重新连接电源启动！</p>
]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>树莓派</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python-opencv学习笔记</title>
    <url>/2022/python-opencv-note/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imread(path_of_image)</span><br><span class="line">cv2.imread(path_of_image, intflag)</span><br></pre></td></tr></table></figure>
<p>path_of_image:图片路径</p>
<p>intflag:<br>CV_LOAD_IMAGE_COLOR    &#x2F;   1     ——加载彩色图像,忽略透明度.默认<br>CV_LOAD_IMAGE_GRAYSCALE   &#x2F;   0     ——灰度模式</p>
<h4 id="窗口显示"><a href="#窗口显示" class="headerlink" title="窗口显示"></a>窗口显示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imshow(windows_name, image)</span><br></pre></td></tr></table></figure>
<p>windows_name:窗口名称</p>
<p>image:图像对象，类型是numpy中的ndarray类型</p>
<h4 id="窗口关闭"><a href="#窗口关闭" class="headerlink" title="窗口关闭"></a>窗口关闭</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.destroyWindow(windows_name) <span class="comment">#关闭单个名为windows_name的窗口</span></span><br><span class="line">cv2.destroyAllWindows() <span class="comment">#关闭全部窗口</span></span><br></pre></td></tr></table></figure>
<p>如果需要一定条件自动关闭窗口:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.waitKey(time_of_milliseconds)</span><br></pre></td></tr></table></figure>
<p>当time_of_milliseconds&gt;0时:过time_of_milliseconds毫秒后关闭窗口</p>
<p>当time_of_milliseconds&lt;&#x3D;0时:等待键盘敲击后关闭.例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当当敲击 Esc 时关闭窗口</span></span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="comment">#当敲击 A 时，关闭名称为&#x27;image&#x27;的窗口</span></span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(-<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>):</span><br><span class="line">    cv2.destroyWindow(<span class="string">&#x27;image&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="摄像头使用"><a href="#摄像头使用" class="headerlink" title="摄像头使用"></a>摄像头使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)<span class="comment">#创建摄像头对象,0表示第一个摄像头</span></span><br></pre></td></tr></table></figure>
<p>循环获取并显示:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    cv2.imshow(<span class="string">&quot;capture&quot;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>释放摄像头对象:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cap.release()</span><br></pre></td></tr></table></figure>
<h4 id="图片保存"><a href="#图片保存" class="headerlink" title="图片保存"></a>图片保存</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imwrite(image_filename, image)</span><br></pre></td></tr></table></figure>
<p>image_filename:文件名称<br>image:图像对象，类型是numpy中的ndarray类型</p>
<h2 id="获取图像信息"><a href="#获取图像信息" class="headerlink" title="获取图像信息"></a>获取图像信息</h2><h4 id="获取图片大小及某一点信息"><a href="#获取图片大小及某一点信息" class="headerlink" title="获取图片大小及某一点信息"></a>获取图片大小及某一点信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(rgb_img.shape)     <span class="comment">#输出:(1200, 1600, 3):高度height = 1200， 宽度w=1600且通道数为3</span></span><br><span class="line"><span class="built_in">print</span>(rgb_img[<span class="number">0</span>, <span class="number">0</span>])     <span class="comment">#输出:[137 124 38]:像素(0,0)的值是(137,124,38),即R=137,G=124,B=38</span></span><br><span class="line"><span class="built_in">print</span>(rgb_img[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])  <span class="comment">#输出:137:像素(0,0)的R值是137</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(gray_img.shape)    <span class="comment">#输出:(1200, 1600)</span></span><br><span class="line"><span class="built_in">print</span>(gray_img[<span class="number">0</span>, <span class="number">0</span>])    <span class="comment">#输出:100</span></span><br></pre></td></tr></table></figure>
<h4 id="获取一整行"><a href="#获取一整行" class="headerlink" title="获取一整行"></a>获取一整行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单看第400行的像素</span></span><br><span class="line">color = img[<span class="number">400</span>]</span><br></pre></td></tr></table></figure>
<p> 以白色为例:    获取一行内白色个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">white_count = np.<span class="built_in">sum</span>(color == <span class="number">255</span>)</span><br></pre></td></tr></table></figure>
<p>获取白色像素点索引:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">white_index = np.where(color == <span class="number">255</span>)</span><br></pre></td></tr></table></figure>
<p> 应用举例:  求第一个白色点和最后一个白色点横坐标平均值<br> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">white_count = np.<span class="built_in">sum</span>(color == <span class="number">255</span>)</span><br><span class="line">white_index = np.where(color == <span class="number">255</span>)</span><br><span class="line"><span class="comment"># 防止white_count=0的报错</span></span><br><span class="line"><span class="keyword">if</span> white_count == <span class="number">0</span>:</span><br><span class="line">    white_count = <span class="number">1</span></span><br><span class="line">center = (white_index[<span class="number">0</span>][white_count - <span class="number">1</span>] + white_index[<span class="number">0</span>][<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> (center)</span><br></pre></td></tr></table></figure></p>
<h2 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h2><h4 id="创建空白图像"><a href="#创建空白图像" class="headerlink" title="创建空白图像"></a>创建空白图像</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">white_img = np.ones((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)   <span class="comment">#(512,512,3)代表(宽度,长度,通道)</span></span><br><span class="line">white_img = <span class="number">255</span>*white_img</span><br><span class="line">cv2.imshow(<span class="string">&#x27;white_img&#x27;</span>, white_img)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>一些共有参数:</p>
<p>img:需要进行绘制的图像对象ndarray<br>color:颜色，采用BGR即上述说的(B、G、R)<br>thickness:图形中线的粗细，默认为1，对于圆、椭圆等封闭图像取-1时是填充图形内部<br>lineType:图形线的类型，默认8-connected线是光滑的，当取cv2.LINE_AA时线呈现锯齿状</p>
<h4 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.line(image, starting, ending, color, thickness, lineType)</span><br></pre></td></tr></table></figure>
<h4 id="长方形"><a href="#长方形" class="headerlink" title="长方形"></a>长方形</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.rectangle(image, top-left, bottom-right, color, thickness, lineType)</span><br></pre></td></tr></table></figure>
<p>top-left、bottom-right长方形的左上角像素坐标、右下角像素坐标</p>
<h4 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.circle(image, center, radius, color, thickness, lineType)</span><br></pre></td></tr></table></figure>
<p>center、radius分别表示圆的圆心像素坐标、圆的半径长度</p>
<h4 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.polylines(image, [point-<span class="built_in">set</span>], flag, color, thickness, lineType)</span><br></pre></td></tr></table></figure>
<p>[point-set]： 表示多边形点的集合，如果多边形有m个点，则便是一个m12的数组，表示共m个点 flag： 当flag &#x3D; True 时，则多边形是封闭的，当flag &#x3D; False 时，则多边形只是从第一个到最后一个点连线组成的图像，没有封闭..示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = np.ones((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">img = <span class="number">255</span>*img</span><br><span class="line">pts = np.array([[<span class="number">10</span>,<span class="number">5</span>],[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">70</span>,<span class="number">20</span>],[<span class="number">50</span>,<span class="number">10</span>]], np.int32)</span><br><span class="line">img = cv2.polylines(img,[pts],<span class="literal">True</span>,(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h4 id="文字绘制"><a href="#文字绘制" class="headerlink" title="文字绘制"></a>文字绘制</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv.putText(img,<span class="string">&quot;OpenCV&quot;</span>,(<span class="number">10</span>,<span class="number">500</span>),cv.FONT_HERSHEY_SIMPLEX,<span class="number">4</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">2</span>,cv_LINE_AA)</span><br><span class="line">cv2.putText(图片img,“文本内容”,(左下角坐标),字体,字体大小,(颜色)，线条粗细，线条类型) </span><br></pre></td></tr></table></figure>

<h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><h4 id="图像色彩空间变换"><a href="#图像色彩空间变换" class="headerlink" title="图像色彩空间变换"></a>图像色彩空间变换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.cvtColor(input_image, flag)</span><br></pre></td></tr></table></figure>
<p>input_image:要变换色彩的图像ndarray对象<br>flag:图像色彩空间变换的类型,共有274种空间转换类型,最常用的:<br>         cv2.COLOR_BGR2GRAY:将图像从BGR空间转化成灰度图<br>        cv2.COLOR_BGR2HSV:将图像从BGR空间转化成HSV空间</p>
<h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#缩放为200*200图像</span></span><br><span class="line">img1=cv2.resize(img,(<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line"><span class="comment">#缩放至0.5倍</span></span><br><span class="line">img2=cv2.resize(img,(<span class="number">0</span>,<span class="number">0</span>),fx=<span class="number">0.5</span>,fy=<span class="number">0.5</span>,interpolation=cv2.INTER_NEAREST)</span><br></pre></td></tr></table></figure>
<h4 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#裁剪出竖直方向20-150，水平方向-180到-50这一部分的图像</span></span><br><span class="line"><span class="comment">#原点的为左上角，向右为x轴,向下为y轴</span></span><br><span class="line">patch_img=img[<span class="number">20</span>:<span class="number">150</span>,-<span class="number">180</span>:-<span class="number">50</span>]</span><br><span class="line"><span class="comment">#上一句中负值代表从x轴右侧向左侧选取</span></span><br></pre></td></tr></table></figure>
<h4 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h4><h5 id="有阈值的二值化处理"><a href="#有阈值的二值化处理" class="headerlink" title="有阈值的二值化处理"></a>有阈值的二值化处理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.threshold(src, thresh, maxval, <span class="built_in">type</span>)</span><br><span class="line"><span class="comment">#src：原图片</span></span><br><span class="line"><span class="comment">#thresh：阈值(分割值)</span></span><br><span class="line"><span class="comment">#maxval：最大值</span></span><br><span class="line"><span class="comment">#划分算法:cv2.THRESH_BINARY等</span></span><br><span class="line"><span class="comment">####  大津算法(自动计算阈值)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">retval, dst = cv2.threshold(gray, <span class="number">0</span>, <span class="number">255</span>,  cv2.THRESH_BINARY | cv2.THRESH_OTSU)</span><br></pre></td></tr></table></figure>
<h5 id="局部阈值二值化"><a href="#局部阈值二值化" class="headerlink" title="局部阈值二值化"></a>局部阈值二值化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C, dst=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#src：进行二值化的图像</span></span><br><span class="line"><span class="comment">#maxValue：将要设置的灰度值</span></span><br><span class="line"><span class="comment">#adaptiveMethod：自适应阈值算法。可选ADAPTIVE_THRESH_MEAN_C 或 ADAPTIVE_THRESH_GAUSSIAN_C</span></span><br><span class="line"><span class="comment">#thresholdType：opencv提供的二值化方法，只能THRESH_BINARY或者THRESH_BINARY_INV</span></span><br><span class="line"><span class="comment">#blockSize：要分成的区域大小，上面的N值，取奇数</span></span><br><span class="line"><span class="comment">#C：常数，每个区域计算出的阈值的基础上在减去这个常数作为这个区域的最终阈值，可以为负数</span></span><br><span class="line"><span class="comment">#dst：输出图像，可忽略</span></span><br><span class="line"><span class="comment">#例子:</span></span><br><span class="line">img2=cv2.adaptiveThreshold(img, <span class="number">255</span>, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, <span class="number">5</span>, <span class="number">10</span>, dst=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<h4 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中值滤波</span></span><br><span class="line"><span class="comment">#其中5表示在中心点5*5范围内计算,可改为大于1的奇数</span></span><br><span class="line">result = cv2.medianBlur(image,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#高斯滤波</span></span><br><span class="line">cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">1.5</span>)</span><br><span class="line"><span class="comment">#均值滤波</span></span><br><span class="line">cv2.blur(img,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 双边滤波</span></span><br><span class="line">cv2.bilateralFilter(img,<span class="number">9</span>,<span class="number">75</span>,<span class="number">75</span>)</span><br></pre></td></tr></table></figure>

<h4 id="膨胀与腐蚀"><a href="#膨胀与腐蚀" class="headerlink" title="膨胀与腐蚀"></a>膨胀与腐蚀</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#腐蚀</span></span><br><span class="line">cv2.erode(img,kernel,iterations)</span><br><span class="line"><span class="comment">#膨胀</span></span><br><span class="line">cv2.dilate(img,kernel,iterations)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#kernel:内核,如以下两种:</span></span><br><span class="line"><span class="comment">#OpenCV定义的结构矩形元素</span></span><br><span class="line">kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">#NumPy定义的结构元素</span></span><br><span class="line">NpKernel = np.uint8(np.ones((<span class="number">3</span>,<span class="number">3</span>)))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#iterations:进行次数,默认为1次,可以忽略</span></span><br></pre></td></tr></table></figure>
<p>先腐蚀后膨胀，用于移除由图像噪音形成的斑点;（开运算）<br>先膨胀后腐蚀，用来连接被误分为许多小块的对象.（闭运算）</p>
<h4 id="开运算：用来去除噪声"><a href="#开运算：用来去除噪声" class="headerlink" title="开运算：用来去除噪声"></a>开运算：用来去除噪声</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opening = cv.morphologyEx(noi_src, cv.MORPH_OPEN, kernel)</span><br></pre></td></tr></table></figure>
<h4 id="闭运算：用来填充前景物体中的小洞，或前景物体上的小黑点"><a href="#闭运算：用来填充前景物体中的小洞，或前景物体上的小黑点" class="headerlink" title="闭运算：用来填充前景物体中的小洞，或前景物体上的小黑点"></a>闭运算：用来填充前景物体中的小洞，或前景物体上的小黑点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">closing = cv.morphologyEx(noi_src, cv.MORPH_CLOSE, kernel)</span><br></pre></td></tr></table></figure>
<h4 id="梯度：膨胀与腐蚀的差别，前景物体的轮廓"><a href="#梯度：膨胀与腐蚀的差别，前景物体的轮廓" class="headerlink" title="梯度：膨胀与腐蚀的差别，前景物体的轮廓"></a>梯度：膨胀与腐蚀的差别，前景物体的轮廓</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gradient = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel)</span><br></pre></td></tr></table></figure>
<h4 id="图片相减（差异对比）"><a href="#图片相减（差异对比）" class="headerlink" title="图片相减（差异对比）"></a>图片相减（差异对比）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.absdiff(img1,img2)</span><br></pre></td></tr></table></figure>
<p>通过cv2.absdiff(膨胀图像，腐蚀图像)可以获取图像边缘</p>
<h4 id="取反色"><a href="#取反色" class="headerlink" title="取反色"></a>取反色</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.bitwise_not(img)</span><br></pre></td></tr></table></figure>
<h4 id="颜色范围选取"><a href="#颜色范围选取" class="headerlink" title="颜色范围选取"></a>颜色范围选取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lower = np.array([<span class="number">130</span>, <span class="number">62</span>, <span class="number">72</span>])</span><br><span class="line">upper = np.array([<span class="number">170</span>, <span class="number">255</span>, <span class="number">148</span>])</span><br><span class="line">img = cv2.inRange(frame_hsv, lower, upper)</span><br></pre></td></tr></table></figure>
<p>其中lower,upper为HSV空间数组，其中数组中：<br>        H是色彩<br>        S是深浅， S &#x3D; 0时，只有灰度<br>        V是明暗，表示色彩的明亮程度<br>        低于或高于数组范围内都将变为0，只有其中间变为255</p>
<h4 id="边缘提取-返回二值图像"><a href="#边缘提取-返回二值图像" class="headerlink" title="边缘提取:返回二值图像"></a>边缘提取:返回二值图像</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img2 = cv.Canny(img,s1,s2)</span><br></pre></td></tr></table></figure>
<p>img为输入的灰度图像<br>s1,s2为低阈值,高阈值.</p>
<h4 id="轮廓检测"><a href="#轮廓检测" class="headerlink" title="轮廓检测"></a>轮廓检测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.findContours(image, mode, method)</span><br></pre></td></tr></table></figure>
<p>image:寻找轮廓的二值图像<br>mode:轮廓的检索模式<br>method:轮廓的近似办法<br>检索模式:<br>cv2.RETR_EXTERNAL    只检测外轮廓<br>cv2.RETR_LIST    提取所有轮廓，并放置在list中，检测的轮廓不建立等级关<br>cv2.RETR_CCOMP    建立两个等级的轮廓，上面的一层为外边界，里面的一层为内孔的边界信息。如果内孔内还有一个连通物体，这个物体的边界也在顶层。<br>cv2.RETR_TREE    检测所有轮廓，建立完整的层次结构，建立网状轮廓结构<br>近似方法:<br>cv2.CHAIN_APPROX_NONE    获取每个轮廓的每个像素，相邻的两个点的像素位置差不超过1<br>cv2.CHAIN_APPROX_SIMPLE    压缩水平方向，垂直方向，对角线方向的元素，值保留该方向的重点坐标，如果一个矩形轮廓只需4个点来保存轮廓信息<br>cv2.CHAIN_APPROX_TC89_L1    使用Teh-Chini chain近似算法<br>cv2.CHAIN_APPROX_TC89_KCOS    使用Teh-Chini chain近似算法</p>
<p>注:        如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">returns = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(returns))</span><br></pre></td></tr></table></figure>
<p>在cv2中将返回2个值,cv3中将返回3个值<br>cv2:轮廓本身contours，每条轮廓对应的属性hierarchy<br>cv3:所处理的图像img, 要找的轮廓的点集countours, 各层轮廓的索引hierarchy</p>
<h4 id="绘制轮廓"><a href="#绘制轮廓" class="headerlink" title="绘制轮廓"></a>绘制轮廓</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.drawContours(image, contours, contourIdx, color)</span><br></pre></td></tr></table></figure>
<p>image:需要绘制轮廓的目标图像，会改变原图<br>contours:轮廓点，上述函数cv2.findContours()的第一个返回值<br>contourIdx:轮廓的索引，表示绘制第几个轮廓，-1表示绘制所有的轮廓<br>color:绘制轮廓的颜色</p>
<h4 id="获取外接矩形边框"><a href="#获取外接矩形边框" class="headerlink" title="获取外接矩形边框"></a>获取外接矩形边框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x,y,w,h = cv2.boundingRect(img)</span><br></pre></td></tr></table></figure>
<p>img:一个二值图像<br>x,y:矩形左上角坐标<br>w,h:矩形宽高</p>
<h4 id="获取最小旋转外接矩形边框"><a href="#获取最小旋转外接矩形边框" class="headerlink" title="获取最小旋转外接矩形边框"></a>获取最小旋转外接矩形边框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.minAreaRect(Points)</span><br></pre></td></tr></table></figure>
<p>rect[0]返回矩形的中心点，（x,y），y行x列的像素点<br>    cv2.boxPoints(rect)可以返回四个点的值,返回形式[ [x0,y0], [x1,y1], [x2,y2], [x3,y3] ]<br>    box &#x3D; np.int0(box)取得整数<br>rect[1]返回矩形的长和宽<br>rect[2]返回矩形的旋转角度</p>
<p>举例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv.imread(<span class="string">&quot;test.jpg&quot;</span>,<span class="number">0</span>)</span><br><span class="line">_,contours,_ = cv.findContours(img,cv.RETR_LIST,cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line">rect = cv.minAreaRect(cnt)    <span class="comment">#这里得到的是旋转矩形</span></span><br><span class="line">box = cv.boxPoints(rect)    <span class="comment">#得到端点</span></span><br><span class="line">box = np.int0(box)    <span class="comment">#向下取整</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档&amp;笔记</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>基于nonebot2+cqhttp的QQ机器人以及使用mySQL的记分系统</title>
    <url>/2022/qqbot-mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章主要讲nonebot的使用，如果内容不多的话整个机器人的制作都写在这吧。</p>
<h2 id="记分系统数据库结构"><a href="#记分系统数据库结构" class="headerlink" title="记分系统数据库结构"></a>记分系统数据库结构</h2><p>先从简单的讲起。</p>
<p>结构不算复杂，需要一个数据表<code>scores</code>，主键为<code>bigint</code>类型的QQ号<code>qq_id</code>。</p>
<p>表中记录的数据有<code>int</code>型的权限级别<code>op</code>，<code>int</code>型的当前分数<code>total_score</code>，<code>bigint</code>类型的上一次记分的管理员<code>last_op</code>，<code>int</code>的上一次的记分<code>last_score</code>，<code>varchar</code>型都上一次记分的理由<code>last_reason</code>，<code>varchar</code>型都上一次记分的时间<code>last_time</code>。</p>
<h2 id="使用nonebot2-cqhttp的插件编写"><a href="#使用nonebot2-cqhttp的插件编写" class="headerlink" title="使用nonebot2+cqhttp的插件编写"></a>使用nonebot2+cqhttp的插件编写</h2><p><a href="https://github.com/Well2333/NoneBot2_NoobGuide">有一篇不错的但是不完整的文档</a>，文档的作者写一半被nonebot开发者叫去写官方文档了，不过已经写完的这些也有很大帮助。这里我把会用到的整理出来。<br><a href="https://github.com/nonebot/awesome-nonebot">这里还有一些不错的资源汇总</a></p>
<h3 id="插件的位置"><a href="#插件的位置" class="headerlink" title="插件的位置"></a>插件的位置</h3><p><code>src/plugins</code>可以在<code>bot.py</code>使用 <code>nonebot.load_plugins(&quot;src/plugins&quot;)</code> 来加载该文件夹中的插件。</p>
<blockquote>
<p>注意！ 如果插件的名字首个字符是 _ 的话，那么这个插件将不会被 “自动加载” ，但仍可以使用单独加载的方式进行载入。</p>
</blockquote>
<h3 id="插件的结构"><a href="#插件的结构" class="headerlink" title="插件的结构"></a>插件的结构</h3><h5 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h5><p>也就是单文件形式的python脚本，例如下方展示的名为 my_plugin 的插件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NoneBot</span><br><span class="line">├── src</span><br><span class="line">│   └── plugins</span><br><span class="line">|      └── my_plugin.py</span><br><span class="line">|......</span><br></pre></td></tr></table></figure>
<p>相对于包形式的插件，模块形式的插件更简单，但相对的只能在一个文件中塞下全部代码</p>
<h5 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h5><p>以一个文件夹形式存在的包，例如下方展示的名为 my_plugin 的插件。</p>
<p>值得注意的是，在python中，一个合法的包中必须含有一个 <strong>init</strong>.py ，即便其中一个字都没有也不能省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AweSome-Bot</span><br><span class="line">├── src</span><br><span class="line">│   └── plugins</span><br><span class="line">|      └── my_plugin</span><br><span class="line">|         └── __init__.py</span><br><span class="line">|         └── function.py</span><br><span class="line">|......</span><br></pre></td></tr></table></figure>
<h3 id="事件响应器与事件处理"><a href="#事件响应器与事件处理" class="headerlink" title="事件响应器与事件处理"></a>事件响应器与事件处理</h3><p>一个小例子：<br>检测用户发送的“jrrp”或“今日人品”，然后随机生成一个1-100的数字作为人品值发回给用户，并@用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">from datetime import date</span><br><span class="line">from nonebot.plugin import on_keyword</span><br><span class="line">from nonebot.adapters.onebot.v11 import Bot, Event</span><br><span class="line">from nonebot.adapters.onebot.v11.message import Message</span><br><span class="line"></span><br><span class="line">def luck_simple(num):</span><br><span class="line">    if num &lt; 18:</span><br><span class="line">        return &#x27;吉&#x27;</span><br><span class="line">    else:</span><br><span class="line">        return &#x27;凶&#x27;</span><br><span class="line"></span><br><span class="line"># 注册事件响应器</span><br><span class="line">jrrp = on_keyword([&#x27;jrrp&#x27;,&#x27;今日人品&#x27;],priority=50)</span><br><span class="line"># 事件处理</span><br><span class="line">@jrrp.handle()</span><br><span class="line">async def jrrp_handle(bot: Bot, event: Event):</span><br><span class="line">    rnd = random.Random()</span><br><span class="line">    rnd.seed(int(date.today().strftime(&quot;%y%m%d&quot;)) + int(event.get_user_id()))</span><br><span class="line">    lucknum = rnd.randint(1,100)</span><br><span class="line">    await jrrp.finish(Message(f&#x27;[CQ:at,qq=&#123;event.get_user_id()&#125;]您今日的幸运指数为&quot;&#123;luck_simple(lucknum)&#125;&quot;&#x27;))</span><br></pre></td></tr></table></figure>
<p>因为这个插件需要检测多个关键词，因此我们可以选择 <code>on_keyword()</code> 这个事件响应器， <code>jrrp = on_keyword([&#39;jrrp&#39;,&#39;今日人品&#39;],priority=50)</code> 我们就注册好了对这两个关键词进行响应的事件响应器，不过要注意的的是，这个响应器在用户发送的消息中，只要找到了这个关键词就会触发.</p>
<p>其中<code>priority=50</code>是指这个事件响应器的优先度为50，优先度的数字越低，则优先度越高，在nonebot中，这个字段的默认值是优先度能设置的最小值<code>1</code>。<br>nonebot的事件处理中有事件阻断机制，在事件向优先度较低的响应器传递的过程中，一旦被匹配到并且被阻断了，那么后续的事件响应器将不会再接收到这个事件。</p>
<p>我们使用了 <code>event.get_user_id()</code> 来获取用户的qq号，和 <code>jrrp.finish()</code> 来发送消息并结束这个事件。 事件处理的方法有很多，无法一一展示，仅能列出一些常用的方法</p>
<h5 id="event"><a href="#event" class="headerlink" title="event"></a>event</h5><p><code>event.get_message()</code><br>获取用户发送的消息，包含文字和图片的cq码，返回值是Message类（做解析之前别忘了转义）</p>
<p><code>event.get_plaintext()</code><br>获取用户发送的消息，但仅包含文字部分，返回值是str类</p>
<p><code>event.get_user_id()</code><br>获取用户qq号，返回值是str类</p>
<p><code>event.get_session_id()</code><br>私聊：获取用户qq号，返回值是str类 群聊：获取群号和用户qq号的组合，例如 group_群号_qq号 ，返回值是str类</p>
<p><code>event.is_tome()</code><br>私聊：返回True，返回值bool类 群聊：如果用户@机器人，或者使用了预设的昵称，则返回True，否则False，返回值bool类</p>
<h5 id="matcher"><a href="#matcher" class="headerlink" title="matcher"></a>matcher</h5><p><code>matcher.send()</code><br>用于发送一条消息，发送的对象是触发事件响应器的私聊或群，用法为:<br><code>await matcher.send(&#39;123&#39;)</code><br>其中matcher就是这个事件处理函数对应的事件响应器，例如 <code>await jrrp.send(&#39;123&#39;)</code> </p>
<p><code>matcher.finish()</code><br>方法同上，只不过这个方法会结束这个事件，类似于一个函数里的 return （但不完全相同）。</p>
<h3 id="Message-CQ码的基本用法"><a href="#Message-CQ码的基本用法" class="headerlink" title="Message CQ码的基本用法"></a>Message CQ码的基本用法</h3><h4 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h4><p>Message不光可以对上述内容进行转义或表达，也可以对其进行拼接，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nonebot.adapters.onebot.v11 import Message, MessageSegment</span><br><span class="line">msg1 = Message(&#x27;快来看涩图&#x27;)</span><br><span class="line">msg2 = MessageSegment.image(&#x27;http://xxx.com/&#x27;)</span><br><span class="line">msg3 = Message(&#x27;[CQ:at,qq=114514]&#x27;)</span><br><span class="line">msg  = msg3 + msg1 + msg2</span><br><span class="line"></span><br><span class="line"># msg的内容发到QQ里就是：@114514 快来看涩图【假装这是个涩图】</span><br></pre></td></tr></table></figure>
<h4 id="CQ码"><a href="#CQ码" class="headerlink" title="CQ码"></a>CQ码</h4><p>cq码的构造方法一般情况下是 [CQ:type,key&#x3D;value] 这种构造形式，具体的某个CQ码我们可以在gocqhttp的官方文档的 CQ code 板块进行查询。</p>
<p>同时，由于cq码中存在例如 []、:、&#x3D; 等符号，因此需要对其进行转义才能够正常使用，方法也很简单，只需要用 Message() 即可转义，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nonebot.adapters.onebot.v11 import Message</span><br><span class="line">raw_cqcode = &#x27;[CQ:at,qq=114514]&#x27;</span><br><span class="line">cqcode = Message(raw_cqcode)</span><br></pre></td></tr></table></figure>
<p>这样就可以是这个CQ码正常的被解析成一个@，而不是直接把CQ码原文发出去了。</p>
<h3 id="API使用方法"><a href="#API使用方法" class="headerlink" title="API使用方法"></a>API使用方法</h3><p>我们使用的<a href="https://docs.go-cqhttp.org/api">gocqhttp的官方文档</a>中对API有详细的介绍。</p>
<p>call_api的写法目前有两种，<code>bot.call_api(&#39;xxx&#39;, **&#123;key:value&#125;)</code>和<code>bot.xxx(key=value)</code>两种仅写法不同，实质并无影响。</p>
<p>以“获取群信息”为例进行写法一的演示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nonebot.adapters.onebot.v11 import Bot</span><br><span class="line">from nonebot import on_message</span><br><span class="line"></span><br><span class="line">test = on_command(&#x27;test&#x27;)</span><br><span class="line">@test.handle()</span><br><span class="line">async def _(bot: Bot):</span><br><span class="line">    # call_api的写法一</span><br><span class="line">    data = await bot.call_api(&#x27;get_group_info&#x27;,**&#123;</span><br><span class="line">        &#x27;group_id&#x27; : 123456</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>这样我们就获得了data这个json格式的返回值，然后进行简单的转义就可以读取了。 这里我们再演示一下和“发送消息”，并使用第二种方法进行演示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nonebot.adapters.onebot.v11 import Bot, Event</span><br><span class="line">from nonebot import on_message</span><br><span class="line">import ast</span><br><span class="line"></span><br><span class="line">test = on_command(&#x27;test&#x27;)</span><br><span class="line">@test.handle()</span><br><span class="line">async def _(bot: Bot, event: Event):</span><br><span class="line">    # call_api的写法一</span><br><span class="line">    data = await bot.call_api(&#x27;get_group_info&#x27;,**&#123;</span><br><span class="line">        &#x27;group_id&#x27; : 123456</span><br><span class="line">    &#125;)</span><br><span class="line">    # 对json进行转义</span><br><span class="line">    data = ast.literal_eval(str(data))</span><br><span class="line">    msg = f&quot;群号  ：&#123;data[&#x27;group_id&#x27;]&#125;\</span><br><span class="line">          \n群名称：&#123;data[&#x27;group_name&#x27;]&#125;\</span><br><span class="line">          \n成员数：&#123;data[&#x27;member_count&#x27;]&#125;&quot;</span><br><span class="line">    # call_api的写法二</span><br><span class="line">    await bot.send(</span><br><span class="line">        event   = event,</span><br><span class="line">        message = msg</span><br><span class="line">    )</span><br><span class="line">    # 不过，这里更推荐直接用响应器的send方法</span><br><span class="line">    # await test.send(msg)</span><br></pre></td></tr></table></figure>
<h3 id="事件阻断"><a href="#事件阻断" class="headerlink" title="事件阻断"></a>事件阻断</h3><p>我们可以通过在事件响应器中添加 <code>block</code> 参数来指定该事件响应器是否会在执行完成后进行阻断，也可以在事件处理函数中使用 <code>matcher.stop_propagation()</code> 来直接阻断该事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nonebot import on_message</span><br><span class="line">from nonebot.matcher import Matcher</span><br><span class="line"></span><br><span class="line">foo = on_message(priority=1, block=False)</span><br><span class="line">@foo.handle()</span><br><span class="line">async def handle(matcher: Matcher):</span><br><span class="line">    matcher.stop_propagation()</span><br></pre></td></tr></table></figure>
<h3 id="permission"><a href="#permission" class="headerlink" title="permission"></a>permission</h3><p><code>Permission</code> 的作用就是对用户身份进行辨认和过滤，仅允许通过判断的用户触发其所属的事件响应器。</p>
<table>
<thead>
<tr>
<th>权限类型</th>
<th>匹配范围</th>
</tr>
</thead>
<tbody><tr>
<td>PRIVATE</td>
<td>全部私聊</td>
</tr>
<tr>
<td>PRIVATE_FRIEND</td>
<td>私聊好友</td>
</tr>
<tr>
<td>PRIVATE_GROUP</td>
<td>群临时私聊</td>
</tr>
<tr>
<td>PRIVATE_OTHER</td>
<td>其他临时私聊</td>
</tr>
<tr>
<td>GROUP</td>
<td>全部群聊</td>
</tr>
<tr>
<td>GROUP_MEMBER</td>
<td>任意群员</td>
</tr>
<tr>
<td>GROUP_ADMIN</td>
<td>群管理</td>
</tr>
<tr>
<td>GROUP_OWNER</td>
<td>群主</td>
</tr>
</tbody></table>
<p>只需其中一个返回 <code>True</code> 时就会匹配成功</p>
<p>例如，我们想要匹配私聊或群管理时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from nonebot.adapters.onebot.v11.permission import GROUP_ADMIN,PRIVATE</span><br><span class="line">from nonebot import on_command</span><br><span class="line"></span><br><span class="line">matcher = on_command(&quot;setu&quot;, permission=PRIVATE|GROUP_ADMIN)</span><br></pre></td></tr></table></figure>
<p>这个响应器将会对任意私聊或群聊中的管理员进行响应。</p>
<h3 id="事件响应与处理"><a href="#事件响应与处理" class="headerlink" title="事件响应与处理"></a>事件响应与处理</h3><h4 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h4><h5 id="元事件-metaevent"><a href="#元事件-metaevent" class="headerlink" title="元事件-metaevent"></a>元事件-metaevent</h5><p>对应的事件响应器为 <code>on_metaevent()</code></p>
<p>一类特殊的事件，与nonebot2的运行相关，例如心跳事件、ws连接等。 由于该类事件我们一般来说不会做响应，因此我不做过多解释</p>
<h5 id="通知事件-notice"><a href="#通知事件-notice" class="headerlink" title="通知事件-notice"></a>通知事件-notice</h5><p>对应的事件响应器为 <code>on_notice()</code></p>
<p>一些较为特殊的事件，且无需管理员的批准即可主动完成的操作，例如上传文件、被禁言、戳一戳这种消息会被归为通知事件。</p>
<p>在nonebot2的运行日志中，通知事件会按照 <code>[notice.xxx.xxx]: &#123;xxx&#125;</code> 的形式显现。</p>
<p>其中，<code>&#123;xxx&#125;</code>是一个json格式的数据，具体内容可以详见<a href="https://docs.go-cqhttp.org/cqcode/">go-cqhttp的文档</a>。</p>
<h5 id="请求事件-request"><a href="#请求事件-request" class="headerlink" title="请求事件-request"></a>请求事件-request</h5><p>对应的事件响应器为<code>on_request()</code></p>
<p>一些较为特殊的事件，且需要管理员（或你）的批才能完成的操作，例如好友申请、加群申请等。 在nonebot2的运行日志中，请求事件会按照 <code>[request.xxx]: &#123;xxx&#125;</code> 的形式显现。</p>
<p>其中，{xxx}是一个json格式的数据，具体内容可以详见<a href="https://docs.go-cqhttp.org/cqcode/">go-cqhttp的文档</a>。</p>
<h5 id="消息事件-message"><a href="#消息事件-message" class="headerlink" title="消息事件-message"></a>消息事件-message</h5><p>对应的事件响应器为 <code>on_message()</code></p>
<p>是最基本的事件，仅通过聊天框和历史记录进行显示的的绝大多数都是消息类型，例如我们日常聊天的内容、发的图片等。 在nonebot2的运行日志中，消息事件会按照<code>[message.xxx.xxx]: Message xxx from xxx &quot;xxx&quot;</code>的形式显现。</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>QQ机器人</tag>
        <tag>mySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派4B的超频</title>
    <url>/2022/raspberry-overclocking/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>树莓派的性能真是一言难尽，特别是经历了安装ros花了3个小时之后…一方面CPU性能就那么多，sd卡读取速度也是十分感人[实测读18mb&#x2F;s,写8mb&#x2F;s]</p>
<h2 id="超频"><a href="#超频" class="headerlink" title="超频"></a>超频</h2><p>早就有了这个想法只是一直没想起来折腾这个，正好今天想起来还有空hhh<br>首先拿出我的树莓派4B，需要修改的是boot分区内的config.txt文件：<br>在结尾加上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">over_voltage=6</span><br><span class="line">arm_freq=2000</span><br></pre></td></tr></table></figure>
<p>解释一下：<br>over_voltage用于调节cpu和gpu的核心电压，可以在-16至8调整，每一档对应0.025V电压，超频加压不推荐设置超过6（0.15V）<br>arm_freq是超频cpu，最好不要超过2000，据说1800比较稳定，但是不管了直接2000<br>gpu_freq是超频gpu，树莓派4B默认是500，gpu最好不要超过750，我这里没有对gpu超频</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用宝塔面板的跑分做的测试，理论上1.5G到2G应该有30%的性能提升，但是实际只有15%左右<br>但是还有个意外收获，超频后树莓派的sd卡写入速度得到提高，具体原因不太清楚</p>
<p><img src="/2022/raspberry-overclocking/before.jpg" alt="超频前"></p>
<p><img src="/2022/raspberry-overclocking/after.jpg" alt="超频后"></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>ros学习笔记</title>
    <url>/2022/ros/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工作空间和功能包"><a href="#工作空间和功能包" class="headerlink" title="工作空间和功能包"></a>工作空间和功能包</h2><h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><h4 id="主要结构"><a href="#主要结构" class="headerlink" title="主要结构"></a>主要结构</h4><p>1.代码空间src<br>2.编译空间build<br>3.开发空间devel<br>4.安装空间install</p>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建代码空间</span><br><span class="line">mkdir src</span><br><span class="line">#进入代码空间</span><br><span class="line">cd src</span><br><span class="line">#创建工作空间</span><br><span class="line">catkin_init_workspace</span><br><span class="line">#回到上一级</span><br><span class="line">cd ..</span><br><span class="line">#编译</span><br><span class="line">catkin_make</span><br><span class="line">#生成install空间</span><br><span class="line">catkin_make install</span><br></pre></td></tr></table></figure>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置环境变量</span><br><span class="line">source devel/setup.bash</span><br><span class="line">#检查环境变量</span><br><span class="line">echo $ROS_PACKAGE_PATH</span><br></pre></td></tr></table></figure>
<p>如果不想每次设置也可以修改<code>/home/triority</code>内的文件<code>.bashrc</code>，<br>在<code>source /opt/ros/melodic/setup.bash</code>下一行加入:<br><code>source /home/triority/桌面/ROS_learning/devel/setup.bash</code></p>
<h3 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h3><p>在<code>src</code>文件夹内：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg &lt;包名&gt; &lt;依赖&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建依赖roscpp[用于编写c++程序],rospy[用于编写python程序],std_msgs[ros标准消息结构]等依赖的的一个名为learning的功能包[应创建在src文件夹内]</span><br><span class="line">catkin_create_pkg learning roscpp rospy std_msgs geometry_msgs turtlesim message_generation</span><br></pre></td></tr></table></figure>
<h2 id="话题：发布与订阅"><a href="#话题：发布与订阅" class="headerlink" title="话题：发布与订阅"></a>话题：发布与订阅</h2><h3 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h3><h5 id="功能包代码"><a href="#功能包代码" class="headerlink" title="功能包代码"></a>功能包代码</h5><p>在learning功能包内新建<code>scripts</code>文件夹，创建python文件：<br>代码来自古月居<br>velocity_publisher.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将发布turtle1/cmd_vel话题，消息类型geometry_msgs::Twist</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">velocity_publisher</span>():</span><br><span class="line">	<span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;velocity_publisher&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建一个Publisher，发布名为/turtle1/cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10</span></span><br><span class="line">    turtle_vel_pub = rospy.Publisher(<span class="string">&#x27;/turtle1/cmd_vel&#x27;</span>, Twist, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#设置循环的频率</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">		<span class="comment"># 初始化geometry_msgs::Twist类型的消息</span></span><br><span class="line">        vel_msg = Twist()</span><br><span class="line">        vel_msg.linear.x = <span class="number">0.5</span></span><br><span class="line">        vel_msg.angular.z = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 发布消息</span></span><br><span class="line">        turtle_vel_pub.publish(vel_msg)</span><br><span class="line">    	rospy.loginfo(<span class="string">&quot;Publsh turtle velocity command[%0.2f m/s, %0.2f rad/s]&quot;</span>, </span><br><span class="line">				vel_msg.linear.x, vel_msg.angular.z)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 按照循环频率延时</span></span><br><span class="line">        rate.sleep()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        velocity_publisher()</span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><p>启动ROS Master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>打开海龟仿真器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>
<p>启动publisher</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning velocity_publisher.py</span><br></pre></td></tr></table></figure>
<p>然后就能看见海龟开始做圆周运动。</p>
<h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h3><h5 id="功能包代码-1"><a href="#功能包代码-1" class="headerlink" title="功能包代码"></a>功能包代码</h5><p>在<code>scripts</code>文件夹内，创建python文件：<br>代码来自古月居<br>pose_subscriber.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将订阅/turtle1/pose话题，消息类型turtlesim::Pose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> turtlesim.msg <span class="keyword">import</span> Pose</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poseCallback</span>(<span class="params">msg</span>):</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Turtle pose: x:%0.6f, y:%0.6f&quot;</span>, msg.x, msg.y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pose_subscriber</span>():</span><br><span class="line">	<span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;pose_subscriber&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建一个Subscriber，订阅名为/turtle1/pose的topic，注册回调函数poseCallback</span></span><br><span class="line">    rospy.Subscriber(<span class="string">&quot;/turtle1/pose&quot;</span>, Pose, poseCallback)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 循环等待回调函数</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pose_subscriber()</span><br></pre></td></tr></table></figure>
<h5 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h5><p>启动ROS Master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>打开海龟仿真器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>
<p>启动publisher</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning velocity_publisher.py</span><br></pre></td></tr></table></figure>
<p>启动Subscriber</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning pose_subscriber.py</span><br></pre></td></tr></table></figure>
<p>即可看到海龟的实时坐标</p>
<h3 id="自定义话题消息"><a href="#自定义话题消息" class="headerlink" title="自定义话题消息"></a>自定义话题消息</h3><h5 id="消息定义"><a href="#消息定义" class="headerlink" title="消息定义"></a>消息定义</h5><p>在功能包文件夹内创建msg文件夹，并新建Person.msg文件，在里面写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string name</span><br><span class="line">uint8  age</span><br><span class="line">uint8  sex</span><br><span class="line"></span><br><span class="line">uint8 unknown = 0</span><br><span class="line">uint8 male    = 1</span><br><span class="line">uint8 female  = 2</span><br></pre></td></tr></table></figure>
<h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><p>在<code>package.xml</code>文件内添加依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>CMakeLists.txt</code>内加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Person.msg</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>并把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime</span><br></pre></td></tr></table></figure>
<h5 id="实验程序"><a href="#实验程序" class="headerlink" title="实验程序"></a>实验程序</h5><p>在功能包<code>scripts</code>文件夹内创建：<br>person_publisher.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">########################################################################</span><br><span class="line">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><br><span class="line">########################################################################</span><br><span class="line"></span><br><span class="line"># 该例程将发布/person_info话题，自定义消息类型learning_topic::Person</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from learning.msg import Person</span><br><span class="line"></span><br><span class="line">def velocity_publisher():</span><br><span class="line">	# ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;person_publisher&#x27;, anonymous=True)</span><br><span class="line"></span><br><span class="line">	# 创建一个Publisher，发布名为/person_info的topic，消息类型为learning_topic::Person，队列长度10</span><br><span class="line">    person_info_pub = rospy.Publisher(&#x27;/person_info&#x27;, Person, queue_size=10)</span><br><span class="line"></span><br><span class="line">	#设置循环的频率</span><br><span class="line">    rate = rospy.Rate(10) </span><br><span class="line"></span><br><span class="line">    while not rospy.is_shutdown():</span><br><span class="line">		# 初始化learning_topic::Person类型的消息</span><br><span class="line">    	person_msg = Person()</span><br><span class="line">    	person_msg.name = &quot;Tom&quot;;</span><br><span class="line">    	person_msg.age  = 18;</span><br><span class="line">    	person_msg.sex  = Person.male;</span><br><span class="line"></span><br><span class="line">		# 发布消息</span><br><span class="line">        person_info_pub.publish(person_msg)</span><br><span class="line">    	rospy.loginfo(&quot;Publsh person message[%s, %d, %d]&quot;, </span><br><span class="line">				person_msg.name, person_msg.age, person_msg.sex)</span><br><span class="line"></span><br><span class="line">		# 按照循环频率延时</span><br><span class="line">        rate.sleep()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    try:</span><br><span class="line">        velocity_publisher()</span><br><span class="line">    except rospy.ROSInterruptException:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>
<p>person_subscriber.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">########################################################################</span><br><span class="line">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><br><span class="line">########################################################################</span><br><span class="line"></span><br><span class="line"># 该例程将订阅/person_info话题，自定义消息类型learning_topic::Person</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from learning.msg import Person</span><br><span class="line"></span><br><span class="line">def personInfoCallback(msg):</span><br><span class="line">    rospy.loginfo(&quot;Subcribe Person Info: name:%s  age:%d  sex:%d&quot;, </span><br><span class="line">			 msg.name, msg.age, msg.sex)</span><br><span class="line"></span><br><span class="line">def person_subscriber():</span><br><span class="line">	# ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;person_subscriber&#x27;, anonymous=True)</span><br><span class="line"></span><br><span class="line">	# 创建一个Subscriber，订阅名为/person_info的topic，注册回调函数personInfoCallback</span><br><span class="line">    rospy.Subscriber(&quot;/person_info&quot;, Person, personInfoCallback)</span><br><span class="line"></span><br><span class="line">	# 循环等待回调函数</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    person_subscriber()</span><br></pre></td></tr></table></figure>
<p>分别启动后即可看见收发的文件</p>
<h2 id="服务：服务端与客户端"><a href="#服务：服务端与客户端" class="headerlink" title="服务：服务端与客户端"></a>服务：服务端与客户端</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><h5 id="功能包代码-2"><a href="#功能包代码-2" class="headerlink" title="功能包代码"></a>功能包代码</h5><p>person_client.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将请求/show_person服务，服务数据类型learning_service::Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> learning_service.srv <span class="keyword">import</span> Person, PersonRequest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_client</span>():</span><br><span class="line">	<span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;person_client&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 发现/spawn服务后，创建一个服务客户端，连接名为/spawn的service</span></span><br><span class="line">    rospy.wait_for_service(<span class="string">&#x27;/show_person&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        person_client = rospy.ServiceProxy(<span class="string">&#x27;/show_person&#x27;</span>, Person)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 请求服务调用，输入请求数据</span></span><br><span class="line">        response = person_client(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>, PersonRequest.male)</span><br><span class="line">        <span class="keyword">return</span> response.result</span><br><span class="line">    <span class="keyword">except</span> rospy.ServiceException, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Service call failed: %s&quot;</span>%e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="comment">#服务调用并显示调用结果</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Show person result : %s&quot;</span> %(person_client())</span><br></pre></td></tr></table></figure>
<h5 id="执行-2"><a href="#执行-2" class="headerlink" title="执行"></a>执行</h5><p>1.打开ros master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>2.启动海龟仿真器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>
<p>3.启动程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning turtle_spawn.py</span><br></pre></td></tr></table></figure>
<p>即可看到产生了一个新的海龟</p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><h5 id="功能包代码-3"><a href="#功能包代码-3" class="headerlink" title="功能包代码"></a>功能包代码</h5><p>person_server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程将执行/show_person服务，服务数据类型learning_service::Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> learning_service.srv <span class="keyword">import</span> Person, PersonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">personCallback</span>(<span class="params">req</span>):</span><br><span class="line">	<span class="comment"># 显示请求数据</span></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Person: name:%s  age:%d  sex:%d&quot;</span>, req.name, req.age, req.sex)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 反馈数据</span></span><br><span class="line">    <span class="keyword">return</span> PersonResponse(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_server</span>():</span><br><span class="line">	<span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;person_server&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建一个名为/show_person的server，注册回调函数personCallback</span></span><br><span class="line">    s = rospy.Service(<span class="string">&#x27;/show_person&#x27;</span>, Person, personCallback)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 循环等待回调函数</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Ready to show person informtion.&quot;</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    person_server()</span><br></pre></td></tr></table></figure>
<h5 id="执行-3"><a href="#执行-3" class="headerlink" title="执行"></a>执行</h5><p>1.打开ros master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>2.启动海龟仿真器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>
<p>3.启动程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning turtle_command_server.py</span><br></pre></td></tr></table></figure>
<p>4.发布信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosservice call /turtle_command &quot;&#123;&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>发送即可看到海龟开始运动，再次发布即停止</p>
<h5 id="查看服务数据定义"><a href="#查看服务数据定义" class="headerlink" title="查看服务数据定义"></a>查看服务数据定义</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rossrv show &lt;服务&gt;</span><br></pre></td></tr></table></figure>
<p>返回内容<code>---</code>之上为request，之下为responce</p>
<h3 id="自定义服务数据"><a href="#自定义服务数据" class="headerlink" title="自定义服务数据"></a>自定义服务数据</h3><h5 id="服务数据定义"><a href="#服务数据定义" class="headerlink" title="服务数据定义"></a>服务数据定义</h5><p>新建srv文件夹并写入Person.srv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string name</span><br><span class="line">uint8  age</span><br><span class="line">uint8  sex</span><br><span class="line"></span><br><span class="line">uint8 unknown = 0</span><br><span class="line">uint8 male    = 1</span><br><span class="line">uint8 female  = 2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">string result</span><br></pre></td></tr></table></figure>
<h5 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h5><p>在<code>package.xml</code>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>CMakeList.txt</code>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  Person.srv</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h5 id="实验程序-1"><a href="#实验程序-1" class="headerlink" title="实验程序"></a>实验程序</h5><p>person_server.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">########################################################################</span><br><span class="line">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><br><span class="line">########################################################################</span><br><span class="line"></span><br><span class="line"># 该例程将执行/show_person服务，服务数据类型learning_service::Person</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from learning.srv import Person, PersonResponse</span><br><span class="line"></span><br><span class="line">def personCallback(req):</span><br><span class="line">	# 显示请求数据</span><br><span class="line">    rospy.loginfo(&quot;Person: name:%s  age:%d  sex:%d&quot;, req.name, req.age, req.sex)</span><br><span class="line"></span><br><span class="line">	# 反馈数据</span><br><span class="line">    return PersonResponse(&quot;OK&quot;)</span><br><span class="line"></span><br><span class="line">def person_server():</span><br><span class="line">	# ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;person_server&#x27;)</span><br><span class="line"></span><br><span class="line">	# 创建一个名为/show_person的server，注册回调函数personCallback</span><br><span class="line">    s = rospy.Service(&#x27;/show_person&#x27;, Person, personCallback)</span><br><span class="line"></span><br><span class="line">	# 循环等待回调函数</span><br><span class="line">    print &quot;Ready to show person informtion.&quot;</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    person_server()</span><br></pre></td></tr></table></figure>
<p>person_client.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">########################################################################</span><br><span class="line">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span><br><span class="line">########################################################################</span><br><span class="line"></span><br><span class="line"># 该例程将请求/show_person服务，服务数据类型learning_service::Person</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import rospy</span><br><span class="line">from learning.srv import Person, PersonRequest</span><br><span class="line"></span><br><span class="line">def person_client():</span><br><span class="line">	# ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;person_client&#x27;)</span><br><span class="line"></span><br><span class="line">	# 发现/spawn服务后，创建一个服务客户端，连接名为/spawn的service</span><br><span class="line">    rospy.wait_for_service(&#x27;/show_person&#x27;)</span><br><span class="line">    try:</span><br><span class="line">        person_client = rospy.ServiceProxy(&#x27;/show_person&#x27;, Person)</span><br><span class="line"></span><br><span class="line">		# 请求服务调用，输入请求数据</span><br><span class="line">        response = person_client(&quot;Tom&quot;, 20, PersonRequest.male)</span><br><span class="line">        return response.result</span><br><span class="line">    except rospy.ServiceException, e:</span><br><span class="line">        print &quot;Service call failed: %s&quot;%e</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	#服务调用并显示调用结果</span><br><span class="line">    print &quot;Show person result : %s&quot; %(person_client())</span><br></pre></td></tr></table></figure>
<h5 id="执行-4"><a href="#执行-4" class="headerlink" title="执行"></a>执行</h5><p>1.ros master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>2.服务端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning person_server.py</span><br></pre></td></tr></table></figure>
<p>3.客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun learning person_client.py</span><br></pre></td></tr></table></figure>
<p>即可看到客户端与服务端相互通信</p>
<h2 id="参数：全局字典"><a href="#参数：全局字典" class="headerlink" title="参数：全局字典"></a>参数：全局字典</h2><h3 id="命令行的使用"><a href="#命令行的使用" class="headerlink" title="命令行的使用"></a>命令行的使用</h3><p>1.列出参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam list</span><br></pre></td></tr></table></figure>
<p>2.获取参数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam get &lt;参数&gt;</span><br></pre></td></tr></table></figure>
<p>3.修改参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam set &lt;参数&gt;</span><br></pre></td></tr></table></figure>
<p>4.保存参数为文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam dump xxx.yaml</span><br></pre></td></tr></table></figure>
<p>5.从文件加载参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam load xxx.yaml</span><br></pre></td></tr></table></figure>
<p>6.删除参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam delete xxx.yaml</span><br></pre></td></tr></table></figure>
<h3 id="用python程序对参数操作"><a href="#用python程序对参数操作" class="headerlink" title="用python程序对参数操作"></a>用python程序对参数操作</h3><p>parameter_config.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment">####          Copyright 2020 GuYueHome (www.guyuehome.com).          ###</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该例程设置/读取海龟例程中的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_srvs.srv <span class="keyword">import</span> Empty</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parameter_config</span>():</span><br><span class="line">	<span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;parameter_config&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 读取背景颜色参数</span></span><br><span class="line">    red   = rospy.get_param(<span class="string">&#x27;/turtlesim/background_r&#x27;</span>)</span><br><span class="line">    green = rospy.get_param(<span class="string">&#x27;/turtlesim/background_g&#x27;</span>)</span><br><span class="line">    blue  = rospy.get_param(<span class="string">&#x27;/turtlesim/background_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Get Backgroud Color[%d, %d, %d]&quot;</span>, red, green, blue)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 设置背景颜色参数</span></span><br><span class="line">    rospy.set_param(<span class="string">&quot;/turtlesim/background_r&quot;</span>, <span class="number">255</span>);</span><br><span class="line">    rospy.set_param(<span class="string">&quot;/turtlesim/background_g&quot;</span>, <span class="number">255</span>);</span><br><span class="line">    rospy.set_param(<span class="string">&quot;/turtlesim/background_b&quot;</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Set Backgroud Color[255, 255, 255]&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 读取背景颜色参数</span></span><br><span class="line">    red   = rospy.get_param(<span class="string">&#x27;/turtlesim/background_r&#x27;</span>)</span><br><span class="line">    green = rospy.get_param(<span class="string">&#x27;/turtlesim/background_g&#x27;</span>)</span><br><span class="line">    blue  = rospy.get_param(<span class="string">&#x27;/turtlesim/background_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Get Backgroud Color[%d, %d, %d]&quot;</span>, red, green, blue)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 发现/spawn服务后，创建一个服务客户端，连接名为/spawn的service</span></span><br><span class="line">    rospy.wait_for_service(<span class="string">&#x27;/clear&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        clear_background = rospy.ServiceProxy(<span class="string">&#x27;/clear&#x27;</span>, Empty)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 请求服务调用，输入请求数据</span></span><br><span class="line">        response = clear_background()</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> rospy.ServiceException, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Service call failed: %s&quot;</span>%e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parameter_config()</span><br></pre></td></tr></table></figure>
<h2 id="launch"><a href="#launch" class="headerlink" title="launch"></a>launch</h2><h3 id="文件语法"><a href="#文件语法" class="headerlink" title="文件语法"></a>文件语法</h3><h5 id="根元素"><a href="#根元素" class="headerlink" title="根元素"></a>根元素</h5><p>用<code>&lt;launch&gt;</code>标签定义<br>以<code>&lt;/launch&gt;</code>结尾</p>
<h5 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h5><p><code>&lt;node pkg=&quot;package_name&quot; name=&quot;executable_name&quot; name=&quot;node_name&quot; /&gt;</code><br>pkg:节点所在功能包名称<br>type:可执行文件名称<br>name:节点运行时名称<br>output,respawn,……参数</p>
<h5 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h5><p><code>&lt;param name=&quot;output_frame value=&quot;pdom&quot; /&gt;</code><br>name:参数名<br>value:参数值<br>还有<code>&lt;ary&gt;</code>添加参数，仅供launch内部使用</p>
<h5 id="重映射（重命名）"><a href="#重映射（重命名）" class="headerlink" title="重映射（重命名）"></a>重映射（重命名）</h5><p><code>&lt;remap from=&quot;/a/b&quot; to=&quot;/c&quot; /&gt;</code><br>from:原名称<br>to:映射后的命名</p>
<h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><p>包含其他launch文件<br><code>&lt;include file=&quot;path&quot;&gt;</code><br>file:其他launch文件路径</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ol>
<li></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_topic&quot;</span> <span class="attr">type</span>=<span class="string">&quot;person_subscriber&quot;</span> <span class="attr">name</span>=<span class="string">&quot;talker&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_topic&quot;</span> <span class="attr">type</span>=<span class="string">&quot;person_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Turtlesim Node--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sim&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;teleop&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle1_tf_broadcaster&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_tf_broadcaster.py&quot;</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;turtle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;turtle1&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle2_tf_broadcaster&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_tf_broadcaster.py&quot;</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;turtle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">value</span>=<span class="string">&quot;turtle2&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_tf_listener.py&quot;</span> <span class="attr">name</span>=<span class="string">&quot;listener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;/turtle_number&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtlesim_node&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;turtle_name1&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;Tom&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;turtle_name2&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;Jerry&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find learning_launch)/config/param.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find learning_launch)/launch/simple.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtlesim_node&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/turtle1/cmd_vel&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/cmd_vel&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ROS命令行工具"><a href="#ROS命令行工具" class="headerlink" title="ROS命令行工具"></a>ROS命令行工具</h2><h3 id="ROS-Master"><a href="#ROS-Master" class="headerlink" title="ROS Master"></a>ROS Master</h3><h5 id="1-启动ROS-Master"><a href="#1-启动ROS-Master" class="headerlink" title="1.启动ROS Master"></a>1.启动ROS Master</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<h3 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h3><h5 id="2-可视化查看节点关系"><a href="#2-可视化查看节点关系" class="headerlink" title="2.可视化查看节点关系"></a>2.可视化查看节点关系</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></table></figure>
<h5 id="3-查看节点信息rosnode"><a href="#3-查看节点信息rosnode" class="headerlink" title="3.查看节点信息rosnode"></a>3.查看节点信息<code>rosnode</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看全部节点</span><br><span class="line">rosnode list</span><br><span class="line"></span><br><span class="line">#查看节点详细信息</span><br><span class="line">rosnode info &lt;节点名&gt;</span><br><span class="line"></span><br><span class="line">#......</span><br></pre></td></tr></table></figure>
<h5 id="4-查看话题rostopic"><a href="#4-查看话题rostopic" class="headerlink" title="4.查看话题rostopic"></a>4.查看话题<code>rostopic</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#打印话题列表</span><br><span class="line">rostopic list</span><br><span class="line"></span><br><span class="line">#给话题发布数据</span><br><span class="line">rostopic pub &lt;话题名&gt; &lt;数据内容&gt;</span><br><span class="line">##数据内容可用两次tab补全默认格式</span><br><span class="line">##可加参数 -r &lt;频率(Hz)&gt; 来连续发布</span><br><span class="line"></span><br><span class="line">#......</span><br></pre></td></tr></table></figure>
<h5 id="5-查看消息rosmsg"><a href="#5-查看消息rosmsg" class="headerlink" title="5.查看消息rosmsg"></a>5.查看消息<code>rosmsg</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看消息数据结构</span><br><span class="line">rosmsg show &lt;话题名&gt;</span><br><span class="line"></span><br><span class="line">#......</span><br></pre></td></tr></table></figure>
<h5 id="6-查看服务rosservice"><a href="#6-查看服务rosservice" class="headerlink" title="6.查看服务rosservice"></a>6.查看服务<code>rosservice</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看所有服务</span><br><span class="line">rosservice list</span><br><span class="line"></span><br><span class="line">#发布服务请求</span><br><span class="line">rosservice call &lt;服务名&gt;</span><br><span class="line"></span><br><span class="line">#......</span><br></pre></td></tr></table></figure>
<h3 id="信息记录"><a href="#信息记录" class="headerlink" title="信息记录"></a>信息记录</h3><h5 id="7-记录工具"><a href="#7-记录工具" class="headerlink" title="7.记录工具"></a>7.记录工具</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#记录话题数据</span><br><span class="line">rosbag record -a -O &lt;压缩数据包名&gt;</span><br><span class="line">##其中-a表示all保存全部数据，-O表示保存成压缩包</span><br><span class="line"></span><br><span class="line">#复现话题数据</span><br><span class="line">rosbag paly &lt;复现文件名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="rqt"><a href="#rqt" class="headerlink" title="rqt"></a>rqt</h3><p>日志输出工具<code>rqt_console</code><br>计算图可视化工具<code>rqt_graph</code><br>数据绘图工具<code>rqt_plot</code><br>图像渲染工具<code>rqt_image_view</code></p>
<h3 id="rviz-gazebo"><a href="#rviz-gazebo" class="headerlink" title="rviz,gazebo"></a>rviz,gazebo</h3><p>emmm可能以后再讲吧</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ROS</tag>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>部署hexo于远程服务器</title>
    <url>/2022/remote-server-hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前一直在用腾讯云的学生服务器，终于还有两个月到期了。换了阿里云24r&#x2F;月的香港轻量应用服务器，虽然价格便宜，但是内存只有1G，如果继续在服务器本地执行<code>hexo g</code>会爆内存，所以改成在本地<code>hexo g</code>然后直接git push到服务器上，而且本地编写文件比在宝塔面板上舒服多了<br>另外git push时候每次都需要输入服务器密码来ssh连接，让我十分不爽，所以直接让ssh用密钥登陆，再也不用输入密码了，这才叫优雅！</p>
<h2 id="远程服务器部署"><a href="#远程服务器部署" class="headerlink" title="远程服务器部署"></a>远程服务器部署</h2><h4 id="安装服务器依赖–Git"><a href="#安装服务器依赖–Git" class="headerlink" title="安装服务器依赖–Git"></a>安装服务器依赖–Git</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install git-core -y</span><br></pre></td></tr></table></figure>
<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir hexo.git &amp;&amp; cd hexo.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /root/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">GIT_REPO=/root/hexo.git  #git仓库</span><br><span class="line">TMP_GIT_CLONE=/tmp/hexo</span><br><span class="line">PUBLIC_WWW=/hexo #网站目录</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>
<p>赋予post-receive脚本的执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/hexo.git/hooks</span><br><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>
<h4 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h4><p>直接上宝塔面板了<br>新建站点-填写域名和网站根目录-完成</p>
<h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><h4 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>编辑<code>_config.yml</code>并修改<code>deploy</code>选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update</span><br><span class="line">  repo: root@IP:/root/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="优雅的hexo-d"><a href="#优雅的hexo-d" class="headerlink" title="优雅的hexo d"></a>优雅的hexo d</h2><h3 id="关闭Warn"><a href="#关闭Warn" class="headerlink" title="关闭Warn"></a>关闭Warn</h3><p>使用hexo d时会出现大量警告，原因是在windows下换行符的问题，但是在编写amrkdown文件时无关紧要，可以直接关闭提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>
<h3 id="密钥登陆"><a href="#密钥登陆" class="headerlink" title="密钥登陆"></a>密钥登陆</h3><p>使用hexo d时会要求输入服务器密码，可以使用密钥登陆免除密码这一步骤。<br>以我现在的windows系统为例，ssh配置文件位于<code>C:\Users\Triority\.ssh</code>目录内<br>打开<code>config</code>文件，在其中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host www.triority.cc</span><br><span class="line">    HostName www.triority.cc</span><br><span class="line">    User triority</span><br><span class="line">    IdentityFile C:\Users\Triority\www.triority.cc_id_123456</span><br><span class="line">    IdentitiesOnly true</span><br></pre></td></tr></table></figure>
<p>修改为你自己的域名，用户名，密钥文件路径。<br>如果你复制了密钥文件，可能出现权限过大拒绝使用这一密钥的情况，报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS F:\&gt; ssh -i .\www.triority.cc_id_ed25519 root@www.triority.cc</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions for &#x27;.\\www.triority.cc_id_ed25519&#x27; are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br></pre></td></tr></table></figure>
<p>解决方法：<br>文件属性-安全-高级-禁用继承-删除所有已继承权限-添加-选择主体-输入用户名-确定-完全控制-确定-确定<br>即可使用密钥登陆：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i .\www.triority.cc_id_123456 root@www.triority.cc</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用selenium操作edge浏览器</title>
    <url>/2022/selenium-edge/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装所需文件"><a href="#安装所需文件" class="headerlink" title="安装所需文件"></a>安装所需文件</h2><h3 id="python库"><a href="#python库" class="headerlink" title="python库"></a>python库</h3><p><code>pip install selenium </code></p>
<h3 id="edge浏览器驱动"><a href="#edge浏览器驱动" class="headerlink" title="edge浏览器驱动"></a>edge浏览器驱动</h3><p>查看浏览器版本链接<code>edge://settings/help</code><br><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" title="下载网址">驱动下载网址</a><br>选择跟自己浏览器版本一致的下载</p>
<h3 id="将驱动程序放入指定目录"><a href="#将驱动程序放入指定目录" class="headerlink" title="将驱动程序放入指定目录"></a>将驱动程序放入指定目录</h3><p>将下载好的驱动解压复制到Python安装目录下Scripts中，并将驱动<code>msedgedriver.exe</code>重命名为<code>MicrosoftWebDriver.exe</code>，文件名不对会导致调用不到。</p>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 引入模块</span></span><br><span class="line">driver = webdriver.Edge()  <span class="comment"># 引入edge驱动</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)  <span class="comment"># 打开百度</span></span><br></pre></td></tr></table></figure>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h3><p><code>driver.get(url)</code><br>比如刚才的测试例子。</p>
<h3 id="元素定位方法"><a href="#元素定位方法" class="headerlink" title="元素定位方法"></a>元素定位方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_element_by_id()</span><br><span class="line"><span class="comment"># html规定，id在html中必须是唯一的，有点类似于身份证号</span></span><br><span class="line">find_element_by_name()</span><br><span class="line"><span class="comment"># html规定，name用来指定元素的名称，有点类似于人名</span></span><br><span class="line">find_element_by_tag_name()</span><br><span class="line"><span class="comment"># 通过元素的签名来定位</span></span><br><span class="line">find_element_by_class_name()</span><br><span class="line"><span class="comment"># html规定，class指定元素的类名</span></span><br><span class="line">find_element_by_link_text()</span><br><span class="line"><span class="comment"># 专门用来定位文本链接</span></span><br><span class="line">find_element_by_partial_link_text()</span><br><span class="line"><span class="comment"># 是对link_text的一种补充，有些文字链接比较长，可以取一部分链接文字进行定位，只要这部分文字是唯一标志这个链接的</span></span><br><span class="line">find_element_by_css_selector()</span><br><span class="line">find_element_by_xpath()</span><br></pre></td></tr></table></figure>
<p>在<code>element</code>变成<code>elements</code>就是找所有满足的条件，返回数组。</p>
<h3 id="控制浏览器操作"><a href="#控制浏览器操作" class="headerlink" title="控制浏览器操作"></a>控制浏览器操作</h3><h4 id="控制浏览器窗口大小"><a href="#控制浏览器窗口大小" class="headerlink" title="控制浏览器窗口大小"></a>控制浏览器窗口大小</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.set_window_size(<span class="number">480</span>, <span class="number">800</span>)</span><br></pre></td></tr></table></figure>
<h4 id="浏览器后退，前进，刷新"><a href="#浏览器后退，前进，刷新" class="headerlink" title="浏览器后退，前进，刷新"></a>浏览器后退，前进，刷新</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.back()</span><br><span class="line">driver.forward()</span><br><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="点击和输入"><a href="#点击和输入" class="headerlink" title="点击和输入"></a>点击和输入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).clear() <span class="comment"># 清除文本</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>) <span class="comment"># 模拟按键输入</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click() <span class="comment"># 单击元素</span></span><br></pre></td></tr></table></figure>
<h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>可以在搜索框模拟回车操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search_text = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">search_text.send_keys(<span class="string">&#x27;selenium&#x27;</span>) </span><br><span class="line">search_text.submit()</span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>size： 返回元素的尺寸。<br>text： 获取元素的文本。<br>get_attribute(name)： 获得属性值。<br>is_displayed()： 设置该元素是否用户可见。</p>
<h4 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h4><p>在 WebDriver 中， 将这些关于鼠标操作的方法封装在 ActionChains 类提供。<br>ActionChains 类提供了鼠标操作的常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">perform()<span class="comment"># 执行所有 ActionChains 中存储的行为；</span></span><br><span class="line">context_click()<span class="comment"># 右击；</span></span><br><span class="line">double_click(<span class="comment"># 双击；</span></span><br><span class="line">drag_and_drop()<span class="comment"># 拖动；</span></span><br><span class="line">move_to_element()<span class="comment"># 鼠标悬停。</span></span><br></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 引入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.cn&quot;</span>)</span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line">above = driver.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(above).perform()</span><br></pre></td></tr></table></figure>
<h4 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">send_keys(Keys.BACK_SPACE) 删除键（BackSpace）</span><br><span class="line">send_keys(Keys.SPACE) 空格键(Space)</span><br><span class="line">send_keys(Keys.TAB) 制表键(Tab)</span><br><span class="line">send_keys(Keys.ESCAPE) 回退键（Esc）</span><br><span class="line">send_keys(Keys.ENTER) 回车键（Enter）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>) 全选（Ctrl+A）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">&#x27;c&#x27;</span>) 复制（Ctrl+C）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">&#x27;x&#x27;</span>) 剪切（Ctrl+X）</span><br><span class="line">send_keys(Keys.CONTROL,<span class="string">&#x27;v&#x27;</span>) 粘贴（Ctrl+V）</span><br><span class="line">send_keys(Keys.F1) 键盘 F1</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入框输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;seleniumm&quot;</span>)</span><br><span class="line"><span class="comment"># 删除多输入的一个 m</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.BACK_SPACE)</span><br></pre></td></tr></table></figure>
<h4 id="获取断言信息"><a href="#获取断言信息" class="headerlink" title="获取断言信息"></a>获取断言信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title = driver.title <span class="comment"># 打印当前页面title</span></span><br><span class="line">now_url = driver.current_url <span class="comment"># 打印当前页面URL</span></span><br><span class="line">user = driver.find_element_by_class_name(<span class="string">&#x27;nums&#x27;</span>).text <span class="comment"># # 获取结果数目</span></span><br></pre></td></tr></table></figure>
<h4 id="等待页面加载完成"><a href="#等待页面加载完成" class="headerlink" title="等待页面加载完成"></a>等待页面加载完成</h4><h5 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h5><p>显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常（TimeoutException）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">                      EC.presence_of_element_located((By.ID, <span class="string">&quot;kw&quot;</span>))</span><br><span class="line">                      )</span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
<p>WebDriverWait类是由WebDirver 提供的等待方法。在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常。具体格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver, timeout, poll_frequency=<span class="number">0.5</span>, ignored_exceptions=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>driver ：浏览器驱动。<br>timeout ：最长超时时间，默认以秒为单位。<br>poll_frequency ：检测的间隔（步长）时间，默认为0.5S。<br>ignored_exceptions ：超时后的异常信息，默认情况下抛NoSuchElementException异常。<br>WebDriverWait()一般由until()或until_not()方法配合使用，下面是until()和until_not()方法的说明。<br>until(method, message&#x3D;‘’) 调用该方法提供的驱动程序作为一个参数，直到返回值为True。<br>until_not(method, message&#x3D;‘’) 调用该方法提供的驱动程序作为一个参数，直到返回值为False。<br>在本例中，通过as关键字将expected_conditions 重命名为EC，并调用presence_of_element_located()方法判断元素是否存在。</p>
<h5 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h5><p>如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素。 默认等待时间是0秒，一旦设置该值，隐式等待是设置该WebDriver的实例的生命周期。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># seconds</span></span><br><span class="line">driver.get(<span class="string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)</span><br><span class="line">myDynamicElement = driver.find_element_by_id(<span class="string">&quot;myDynamicElement&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="警告框处理"><a href="#警告框处理" class="headerlink" title="警告框处理"></a>警告框处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alert = driver.switch_to_alert()</span><br></pre></td></tr></table></figure>
<p>text：返回 alert&#x2F;confirm&#x2F;prompt 中的文字信息。<br>accept()：接受现有警告框。<br>dismiss()：解散现有警告框。<br>send_keys(keysToSend)：发送文本至警告框。keysToSend：将文本发送至警告框。</p>
<h4 id="下拉框选择"><a href="#下拉框选择" class="headerlink" title="下拉框选择"></a>下拉框选择</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line">Select(sel).select_by_value(<span class="string">&#x27;50&#x27;</span>)  <span class="comment"># 显示50条</span></span><br></pre></td></tr></table></figure>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.find_element_by_name(<span class="string">&quot;file&quot;</span>).send_keys(<span class="string">&#x27;D:\\upload_file.txt&#x27;</span>)  <span class="comment"># # 定位上传按钮，添加本地文件</span></span><br></pre></td></tr></table></figure>
<h4 id="cookie操作"><a href="#cookie操作" class="headerlink" title="cookie操作"></a>cookie操作</h4><p>WebDriver操作cookie的方法：</p>
<p>get_cookies()： 获得所有cookie信息。<br>get_cookie(name)： 返回字典的key为“name”的cookie信息。<br>add_cookie(cookie_dict) ： 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。<br>delete_cookie(name,optionsString)：删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”。<br>delete_all_cookies()： 删除所有cookie信息</p>
<h4 id="窗口截图"><a href="#窗口截图" class="headerlink" title="窗口截图"></a>窗口截图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;D:\\baidu_img.jpg&quot;</span>) <span class="comment"># 截取当前窗口，并指定截图图片的保存位置</span></span><br></pre></td></tr></table></figure>
<h4 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h4><p>close() 关闭单个窗口<br>quit() 关闭所有窗口</p>
<h4 id="直接用cookie登录方法"><a href="#直接用cookie登录方法" class="headerlink" title="直接用cookie登录方法"></a>直接用cookie登录方法</h4><p>链接：<a href="https://www.jianshu.com/p/773c58406bdb">https://www.jianshu.com/p/773c58406bdb</a><br>手动获取网页的cookie，将其序列化并存储在本地</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookies:</span><br><span class="line">    driver.add_cookie(item)</span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>这篇文章的内容绝大多数是从网络上复制而来，没有经过实践验证，而且实测的几个基本都跑不通，只是留着给以后挖坑，不具有参考价值</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino笔记:serial相关操作</title>
    <url>/2022/serial-arduino/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Stream-类函数"><a href="#Stream-类函数" class="headerlink" title="Stream 类函数"></a>Stream 类函数</h2><p><strong>Stream 的这些函数 都会被 Serial 库继承。</strong></p>
<h4 id="available"><a href="#available" class="headerlink" title="available()"></a>available()</h4><p>说明（Description）: 获取数据流中接收到的字节数<br>返回值（Returns）：返回值是 int 类型</p>
<h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><p>说明（Description）：获取数据流中第一个字节数据，获取数据后会清除当前字节数据，与peek()函数有区别<br>返回值（Returns）：读取数据字符的第一个字节（8bit）</p>
<h4 id="flush"><a href="#flush" class="headerlink" title="flush()"></a>flush()</h4><p>说明（Description）：清除数据流所有未向外发送的数据。<br>返回值（Returns）：bool 类型</p>
<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>说明（Description）：从数据流中查找目标字符串，找到目标字符串后返回值 &#x3D; true，超时则返回值 &#x3D; false<br>返回值（Returns）：bool 类型</p>
<h4 id="findUntil"><a href="#findUntil" class="headerlink" title="findUntil()"></a>findUntil()</h4><p>说明（Description）：从数据流中读取目标字符串或者终止目标字符串，找到目标字符串后返回值 &#x3D; true，超时则返回值 &#x3D; false<br>语法（Syntax）：<br>　　stream.findUntil(target, terminal)<br>　　target：要搜索的字符串<br>　　terminal：终止目标字符串<br>返回值（Returns）：bool 类型</p>
<h4 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h4><p>说明（Description）：从数据流中读取当前的一个字节，不会清除数据流中当前字节数据，与 read() 函数有区别。<br>返回值（Returns）：当前缓存区数据流的第一个字节数据，如果缓存区无数据时返回 -1</p>
<h4 id="readBytes"><a href="#readBytes" class="headerlink" title="readBytes()"></a>readBytes()</h4><p>说明（Description）：) 从数据流中读取确定字节的数据到缓存区，读取确定长度数据或超时时终止<br>语法（Syntax）：<br>　　stream.readBytes(buffer, length)<br>　　stream：从 Stream 类 继承的实例<br>　　buffer：存放数据的缓存区（可以是 char[] 或 byte[] 这样的数组）<br>　　length：存放的字节数<br>返回值（Returns）：已经存放在缓存区中的字节数</p>
<h4 id="readBytesUntil"><a href="#readBytesUntil" class="headerlink" title="readBytesUntil()"></a>readBytesUntil()</h4><p>说明（Description）：从数据流中读取确定字节的数据到指定缓存地址，读取确定长度数据、或读取到终止字符、或超时时终止. 和 readBytes() 相比多了终止字符串<br>语法（Syntax）：<br>　　stream.readBytesUntil(character, buffer, length)<br>　　stream：从 Stream 类 继承的实例<br>　　character：终止字符（char 类型）<br>　　buffer：存放数据的指定缓存地址（可以是 char[] 或 byte[] 这样的数组）<br>　　length：存放的字节数（int 类型）<br>返回值（Returns）：已经存放在缓存区中的字节数</p>
<h4 id="readString"><a href="#readString" class="headerlink" title="readString()"></a>readString()</h4><p>说明（Description）：从数据流中读取字符到字符串中，超时时终止<br>返回值（Returns）：读取到的字符串（string）</p>
<h4 id="readStringUntil"><a href="#readStringUntil" class="headerlink" title="readStringUntil()"></a>readStringUntil()</h4><p>说明（Description）：从数据流中读取字符到字符串中，遇到终止字符，或超时时终止<br>语法（Syntax）：<br>　　stream.readString(terminator)<br>　　terminator：终止字符<br>返回值（Returns）：读取到的字符串（string）</p>
<h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h4><p>说明（Description）：从数据流中读取第一个 长整型数（long），<br>返回值（Returns）：长整型（long）</p>
<h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h4><p>说明（Description）：从数据流中读取第一个有效的浮点数（float），<br>语法（Syntax）：<br>　　stream.parseFloat(list)<br>　　list：检查的数据流<br>返回值（Returns）：浮点数（float）</p>
<h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h4><p>说明（Description）：设置等待数据流通讯超时时间，毫秒为单位<br>语法（Syntax）：<br>　　stream.setTimeout(time)<br>　　time：毫秒为单位的时间，长整型（long）</p>
<h2 id="Serial-类"><a href="#Serial-类" class="headerlink" title="Serial 类"></a>Serial 类</h2><p>Serial 继承 Stream 类，继承的函数方法参考 Stream 类；同时增加了几个新的函数，所有方法如下：</p>
<h4 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h4><p>说明（Description）：设置串口数据传输的波特率。<br>语法（Syntax）：<br>　　Serial.begin(speed)<br>　　Serial.begin(speed, config)<br>　　speed：波特率 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, or 115200<br>　　config：通讯格式 5N1, 6N1, 7N1, 8N1(默认), 5N2, 6N2, 7N2, 8N2, 5E1, 6E1, 7E1, 8E1, 5E2, 6E2, 7E2, 8E2, 5O1, 6O1, 7O1, 8O1, 5O2, 6O2, 7O2, 8O2,<br>返回值（Returns）：nothing 无</p>
<h4 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h4><p>说明（Description）：禁用串口。禁用串口后，原串口所占用引脚被当做一般输入输出使用。<br>语法（Syntax）：<br>　　Serial.end()<br>返回值（Returns）：nothing 无</p>
<h4 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h4><p>说明（Description）：将数据流通过串口以 ASCII 文本形式输出输出。<br>例子：<br>Serial.print(78) gives “78”　　以 ASCII 码形式以此输出 “7” 和 “8”<br>Serial.print(1.23456) gives “1.23”　　浮点数默认只输出小数点后两位<br>Serial.print(‘N’) gives “N”　<br>Serial.print(“Hello world.”) gives “Hello world.”<br>Serial.print(78, BIN) gives “1001110”<br>Serial.print(78, OCT) gives “116”<br>Serial.print(78, DEC) gives “78”<br>Serial.print(78, HEX) gives “4E”<br>Serial.println(1.23456, 0) gives “1”<br>Serial.println(1.23456, 2) gives “1.23”<br>Serial.println(1.23456, 4) gives “1.2346”<br>语法（Syntax）：<br>　　Serial.print(val)<br>　　Serial.print(val, format)<br>　　val：需要输出的值，支持任何类型数据<br>　　format：指定数据格式<br>返回值（Returns）：返回 print() 函数输出的字符数据个数，长整型（long）</p>
<h4 id="println"><a href="#println" class="headerlink" title="println()"></a>println()</h4><p>说明（Description）：将数据流通过串口以 ASCII 文本形式输出输出，并且在结尾输出换行符 (ASCII 13, 即 ‘\r’) 。参考 print() 函数<br>语法（Syntax）：<br>　　Serial.println(val)<br>　　Serial.println(val, format)<br>　　val：需要输出的值，支持任何类型数据<br>　　format：指定数据格式<br>返回值（Returns）：输出的字符数据个数，长整型（long）</p>
<h4 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h4><p>说明（Description）：将数据流通过串口以 二进制数据的形式发出，与 print() 函数是有区别的<br>语法（Syntax）：<br>　　Serial.write(val)<br>　　Serial.write(str)<br>　　Serial.write(buf, len)<br>　　val：单个字节的值<br>　　str：一连串字节的字符串<br>　　buf：定义的数组<br>　　len：指定的数组长度<br>返回值（Returns）：函数通过写入串口的字节数</p>
<h4 id="serialEvent"><a href="#serialEvent" class="headerlink" title="serialEvent()"></a>serialEvent()</h4><p>说明（Description）：串口中断事件函数，当串口有数据时被调用。可使用 Serial.read() 函数捕捉数据。<br>语法（Syntax）：<br>　　void serialEvent(){<br>　　　　&#x2F;&#x2F;statements<br>　　　}<br>statements：任何有效的语句</p>
<p>文章部分转载自<a href="https://www.cnblogs.com/aiyauto/p/7071712.html" title="aiyauto的博客">aiyauto的博客</a></p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常见的一行命令小问题</title>
    <url>/2022/some-issues/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="windows清除原有SSH公钥"><a href="#windows清除原有SSH公钥" class="headerlink" title="windows清除原有SSH公钥"></a>windows清除原有SSH公钥</h2><p>在powershell输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.ssh/known_hosts</span><br></pre></td></tr></table></figure>
<p>选择记事本打开方式，然后ctrl+a,然后delete</p>
<h2 id="连接状态为Attached的screen"><a href="#连接状态为Attached的screen" class="headerlink" title="连接状态为Attached的screen"></a>连接状态为Attached的screen</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -D  -R &lt;session&gt;</span><br></pre></td></tr></table></figure>
<h2 id="systemctl常用命令"><a href="#systemctl常用命令" class="headerlink" title="systemctl常用命令"></a>systemctl常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">sudo systemctl start frpc </span><br><span class="line">#关闭</span><br><span class="line">sudo systemctl stop frpc</span><br><span class="line">#重启</span><br><span class="line">sudo systemctl restart frpc</span><br><span class="line">#查看状态</span><br><span class="line">sudo systemctl status frpc</span><br><span class="line">#设置为开机自启动</span><br><span class="line">sudo systemctl enable frpc</span><br></pre></td></tr></table></figure>
<h2 id="安卓子系统安装apk"><a href="#安卓子系统安装apk" class="headerlink" title="安卓子系统安装apk"></a>安卓子系统安装apk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:58526</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install xxx.apk</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Triority\Desktop&gt; adb connect 127.0.0.1:58526</span><br><span class="line">connected to 127.0.0.1:58526</span><br><span class="line">PS C:\Users\Triority\Desktop&gt; adb install base.apk</span><br><span class="line">Performing Streamed Install</span><br><span class="line">Success</span><br><span class="line">PS C:\Users\Triority\Desktop&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18搭建代理服务器</title>
    <url>/2022/ubuntu18-proxy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="仅供学习请勿用于其他用途！"><a href="#仅供学习请勿用于其他用途！" class="headerlink" title="仅供学习请勿用于其他用途！"></a>仅供学习请勿用于其他用途！</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tinyproxy</span><br></pre></td></tr></table></figure>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/tinyproxy/tinyproxy.conf </span><br></pre></td></tr></table></figure>
<p>一般需要修改的内容是：<br><code>Port 8888 </code>改成自己喜欢的端口<br><code>Allow 127.0.0.1 </code>改为<code>#Allow 127.0.0.1 </code>也就是注释掉，就可以不进行ip验证<br><code>BasicAuth [Username] [Password]</code>可以在此设置授权</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service tinyproxy start</span><br><span class="line">sudo service tinyproxy stop</span><br><span class="line">sudo service tinyproxy status</span><br><span class="line">sudo service tinyproxy restart</span><br></pre></td></tr></table></figure>
<h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable tinyproxy.service</span><br></pre></td></tr></table></figure>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>windows-ubuntu双系统卸载ubuntu</title>
    <url>/2022/windows-ubuntu-uninstall/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>半年前安装的Windows+ubuntu18双系统，由于当时硬盘空间紧张，所以只分配了20G挂载在”&#x2F;“以及20G挂载在”&#x2F;home”，经过半年的使用，ubuntu的存储空间已经耗尽，所以打算重装来重新分配空间</p>
<h2 id="删除ubuntu分区"><a href="#删除ubuntu分区" class="headerlink" title="删除ubuntu分区"></a>删除ubuntu分区</h2><p>首先，在windows系统下，删除ubuntu的系统分区，我在安装时分区有4个，efi系统分区，两个日志文件分区以及一个交换空间分区，按下ctrl+x，选择磁盘管理，以上全部在磁盘管理中删除。由于efi分区是系统分区，windows不允许删除，可以先留着<del>[活得过初一躲不过十五]</del>。<br><img src="/2022/windows-ubuntu-uninstall/1.png" alt="是我完成重装后截的图"></p>
<h2 id="删除ubuntu系统引导"><a href="#删除ubuntu系统引导" class="headerlink" title="删除ubuntu系统引导"></a>删除ubuntu系统引导</h2><h3 id="打开被隐藏的启动项分区"><a href="#打开被隐藏的启动项分区" class="headerlink" title="打开被隐藏的启动项分区"></a>打开被隐藏的启动项分区</h3><p>win+R打开运行，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></table></figure>
<p>回车打开命令行，命令行内输入以下，即可看到全部磁盘：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list disk</span><br></pre></td></tr></table></figure>
<p><img src="/2022/windows-ubuntu-uninstall/2.png" alt="全部磁盘"></p>
<p>选择Windows的安装磁盘，启动项一般都是在磁盘0，选中这个磁盘：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select disk 0</span><br></pre></td></tr></table></figure>
<p><img src="/2022/windows-ubuntu-uninstall/3.png" alt="选中磁盘"></p>
<p>查看该磁盘的分区信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list partition</span><br></pre></td></tr></table></figure>
<p><img src="/2022/windows-ubuntu-uninstall/4.png" alt="分区信息"></p>
<p>确定Windows的EFI分区，一般是200M左右，我这里是分区1，选中这个分区：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select partition 1</span><br></pre></td></tr></table></figure>
<p><img src="/2022/windows-ubuntu-uninstall/5.png" alt="选中分区"></p>
<p>为它分配盘符，盘符不可与已有盘符重复，所以我写的是J</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assign letter=J</span><br></pre></td></tr></table></figure>
<p><img src="/2022/windows-ubuntu-uninstall/6.png" alt="分配盘符"></p>
<p>此时在资源管理器的我的电脑就可以看到新的J盘，但是由于权限不够无法打开<br>网上许多教程都写的是通过记事本间接打开，但是我实际操作时没有成功，一旦开始文件操作就会让记事本无响应，不知道与我的操作系统是win11有关<br>这里讲我的。首先用管理员权限打开powershell</p>
<p>然后cd进入J盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd J:\</span><br></pre></td></tr></table></figure>
<p>通过ls可以看到磁盘里的内容<br><img src="/2022/windows-ubuntu-uninstall/7.png" alt="J盘内容"><br>然后进入这个文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd EFI</span><br></pre></td></tr></table></figure>
<p>继续ls查看内容<br><img src="/2022/windows-ubuntu-uninstall/8.png" alt="EFI文件夹内容"></p>
<p>这里有一个ubuntu文件夹，这就是ubuntu的系统引导，把他删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remove-Item &#x27;ubuntu&#x27;</span><br></pre></td></tr></table></figure>
<p>会有一个确认操作，输入Y确认。<br>可以通过ls确认文件已经删除<br><img src="/2022/windows-ubuntu-uninstall/9.png" alt="删除完成"></p>
<p>继续隐藏启动分区：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remove letter=J</span><br></pre></td></tr></table></figure>
<p><img src="/2022/windows-ubuntu-uninstall/10.png" alt="隐藏分区"></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>注：由于我使用rEFInd引导系统启动，所以没有在BIOS中修改系统引导优先级[我觉得就算没安装也可以不改]<br>此时ubuntu已经完全卸载，可重启电脑，进行安装ubuntu双系统的操作</p>
<h2 id="ubuntu双系统的安装"><a href="#ubuntu双系统的安装" class="headerlink" title="ubuntu双系统的安装"></a>ubuntu双系统的安装</h2><p>ubuntu双系统的安装推荐这一篇文章：<br><a href="https://blog.csdn.net/jiqirenX/article/details/72367905" title="安装windows+ubuntu双系统教程">安装windows+ubuntu双系统教程</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>yolov5数据集训练</title>
    <url>/2022/yolov5-train/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载yolov5"><a href="#下载yolov5" class="headerlink" title="下载yolov5"></a>下载yolov5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ultralytics/yolov5</span><br></pre></td></tr></table></figure>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>使用yolo格式数据集：<br>datasets&#x2F;<br>└images&#x2F;<br>.  └10001.jpg<br>.  └10002.jpg<br>.  └……<br>└labels&#x2F;<br>.  └10001.txt<br>.  └10001.txt<br>.  └……<br>└classes.names<br><code>xxx.txt</code>:<code>0  0.160938  0.541667  0.120312  0.386111</code><br>分别指：<code>类别序号</code>、归一化后的<code>中心点x</code>坐标，归一化后的<code>中心点y</code>坐标，归一化后的<code>目标框宽度w</code>，归一化后的<code>目标框高度h</code><br><code>classes.names</code>:多行文本，分别为所有的类别名称</p>
<h3 id="训练参数"><a href="#训练参数" class="headerlink" title="训练参数"></a>训练参数</h3><p>由于我们不使用预训练模型，因此训练需要把<code>train.py</code>中的<code>weights</code>默认参数设为空，即改为<code>parser.add_argument(&#39;--weights&#39;, type=str, default=&#39;&#39;, help=&#39;initial weights path&#39;)</code></p>
<p>还需要修改 <code>xxx.yaml</code>和<code> yolov5s.yaml</code>：</p>
<p> <code>xxx.yaml</code>是数据集的配置文件，位于data文件夹内，需要修改内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path: data/datasets/YOLO-QR-datasets  # dataset root dir</span><br><span class="line">train: Dataset2/images  # train images (relative to &#x27;path&#x27;)</span><br><span class="line">val: Dataset1/images  # val images (relative to &#x27;path&#x27;)</span><br><span class="line">test:  # test images (optional)</span><br><span class="line">names:</span><br><span class="line">  0: QR</span><br></pre></td></tr></table></figure>
<p><code>path</code>为数据集目录，<code>train</code>为其中的训练集图片目录，<code>val</code>验证集图片目录，<code>test</code>测试集图片目录可选<br>训练启动时会自动将路径中的<code>images</code>替换为<code>labels</code>作为标注文件的路径。<br>如果只有一个要识别的类别，则<code>names</code>只需一项<code>0</code>，即数据集的类别序号，后面是其名称。</p>
<p><code> yolov5s.yaml</code>是模型的配置文件，其他可选的还有<code> yolov5m.yaml</code>，<code> yolov5l.yaml</code>等，按照需求选择模型大小后，需要修改的主要为<code>nc: 80  # number of classes</code>，但是后来发现即使不改启动训练之后也会用读取到的正确类别数量替换这一数值。</p>
<p>使用命令：<code>python train.py --data xxx.yaml --cfg yolov5s.yaml --img 640</code>开始训练。</p>
<h3 id="可视化及模型分析评估"><a href="#可视化及模型分析评估" class="headerlink" title="可视化及模型分析评估"></a>可视化及模型分析评估</h3><p>在同目录终端中使用<code>tensorboard --logdir runs\train</code>打开tensorboard可视化工具，在<code>http://localhost:6006/</code>中查看数据<br>训练程序运行中输出的数据：<code>box_loss</code> 定位损失，预测框与标定框之间的误差。  <code>obj_loss</code> 置信度损失，计算网络的置信度。  <code>cls_loss</code> 分类损失，计算锚框与对应的标定分类是否正确。</p>
<h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><p>训练得到的最佳模型保存于<code>run/train/expx/weights/best.pt</code></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ARISS SSTV REWARD</title>
    <url>/2024/ARISS-SSTV-REWARD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="先上证书"><a href="#先上证书" class="headerlink" title="先上证书"></a>先上证书</h1><p><img src="/2024/ARISS-SSTV-REWARD/b3ffe28b0a16749b9126c52008a3653.jpg"></p>
<h1 id="国际空间站SSTV活动"><a href="#国际空间站SSTV活动" class="headerlink" title="国际空间站SSTV活动"></a>国际空间站SSTV活动</h1><p>庆祝载人航天业余无线电广播40周年，国际空间站进行了一周的SSTV发射，这是我第一次使用定向天线接收卫星无线电信号。</p>
<p>虽然效果一般，主要是因为手机陀螺仪指示方向受到无线电接收系统的影响过大，导致巨大的积分误差，因此总是只收到半张图</p>
<p><img src="/2024/ARISS-SSTV-REWARD/ab899cf8e302b88d61f6527b45719e5.jpg"><br><img src="/2024/ARISS-SSTV-REWARD/52943eb720b36b4f19a333a664bf2c6.jpg"><br><img src="/2024/ARISS-SSTV-REWARD/691d8d1b3ef4d897cfa3da56e0e549a.jpg"><br><img src="/2024/ARISS-SSTV-REWARD/430666c9838367e1e02515142659884.jpg"></p>
<p>打算以后有空做个高精度的电动跟踪系统，除了可以用来控制定向天线跟踪卫星，还可以顺便用于星空摄影的极轴校准，挖个坑先</p>
<p>北航的同学给出的建议是不要依靠手机指示方向，可惜等有机会尝试时候活动已经结束了，下次一定</p>
<p>这是来自ARISS的奖励确认邮件</p>
<p><img src="/2024/ARISS-SSTV-REWARD/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241123225213.jpg"></p>
<h1 id="2025"><a href="#2025" class="headerlink" title="2025"></a>2025</h1><p>新年之际这次活动再次尝试，但是没有使用定向天线，直接原装uvk5，效果良好：</p>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113731757474923&bvid=BV1Vn6pYFEap&cid=27583119378&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>


<p><img src="/2024/ARISS-SSTV-REWARD/50f2689287694ac1ba88a1f5e973b31.jpg"></p>
]]></content>
      <categories>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>接收中科院授时中心电台信号并电子邮件请求QSL</title>
    <url>/2024/BPM-QSL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通联"><a href="#通联" class="headerlink" title="通联"></a>通联</h2><p>之前尝试过几次接收BPM的信号，可惜都没能得到有足够辨识度的信号。今天晚上偶然想起来这件事，运气不错，传播状况良好，不过最后有一点衰减</p>
<p>频率: 15MHz<br>地点: OM89dx<br>北京时间: 2024.9.26 17:00<br>高度方向：9层向东<br>设备：SDR RSP1<br>天线：小环有源</p>
<p><a href="BPM.MP3">录音文件(不宜公开内容已做处理)</a></p>
<h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接收设备名称、型号；接收频段；接收时间段的起止时刻；接收到的内容；以及信号的其它情况：所在地、信号是否清晰，干扰大小、接收体会等情况，写成收听报告(Reception Reports)。</span><br><span class="line">然后，用电子邮件（ch117@ntsc.ac.cn）或平信发给我们国家授时中心。按照国际惯例，我们经过验证后，将及时给无线电爱好者邮寄短波时码接收认证卡。</span><br><span class="line"></span><br><span class="line">索取国家授时中心BPM短波时号认证QSL卡通讯地址：</span><br><span class="line">邮编：710600</span><br><span class="line">地址：陕西临潼18号信箱 中科院国家授时中心</span><br><span class="line">Email:ch117@ntsc.ac.cn</span><br><span class="line">联系人：刘长虹</span><br><span class="line">对于有兴趣的用户可以先阅读本站有关短波授时的情况介绍，然后，选择短波时号的接收频率（5MHZ、10MHz、15MHz、20MHz）中的一种。一般可在半点及整点到来前几分钟开始对准频段，作好记录准备。待听到正确的女生报时内容：BPM......（抱歉此处必须由用户自行收听后，在收听报告中给出），再接收几分钟，就可完成（最明显的特征是每秒一次嘟、嘟声，然后，在半点时刻及整点时刻有女生报时）。</span><br></pre></td></tr></table></figure>
<p><img src="/2024/BPM-QSL/1727354542795.png"></p>
]]></content>
      <categories>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年CQWWRTTY竞赛</title>
    <url>/2024/CQWWRTTY2024/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CQWWRTTY"><a href="#CQWWRTTY" class="headerlink" title="CQWWRTTY"></a>CQWWRTTY</h1><p><a href="https://cqwwrtty.com/">CQWWRTTY</a>：Held each year on the last full weekend of September, the contest draws over 15,000 participants and over 3,600 log submittals from around the world.</p>
<h1 id="BI1HT"><a href="#BI1HT" class="headerlink" title="BI1HT"></a>BI1HT</h1><p>这次是作为北航业余无线电协会的OP参加的，在28号的下午和晚上值机。完成了自己第一次短波QSO。每个OP应该有自己的通联记录的不过现在还没出，有结果再写在这（）</p>
<p><img src="/img/2287c0f19791f2c90769b79121f165c.jpg"></p>
<p>同时白嫖来了三张eyeball QSL，因为我没带自己的qwq</p>
<p><img src="/2024/CQWWRTTY2024/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241002225853.jpg"></p>
]]></content>
      <categories>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>超高速直线电机</title>
    <url>/2024/Ultra-high-speed-linear-motor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这个项目是我大学本科四年做的最复杂的一个，从大一下学期到大三结束一路磕磕绊绊走走停停终于到了可以写总结的时候，现在这个仅剩下一点无关紧要的收尾工作了。</p>
<div class="note danger modern"><p>警告：本文设计内容具有危险性，不提供任何制造文件资料，仅供科研交流使用，装置测试后已经拆除，严禁仿造用于其他用途。</p>
</div>

<p>说一下我的最终设计路线和目标：</p>
<ul>
<li>高压方案(&gt;300V)</li>
<li>快速连续工作(&lt;1s)</li>
<li>速度快(&gt;100m&#x2F;s)</li>
<li>效率有追求但不很重要(&gt;10%)</li>
</ul>
<h1 id="Maxwell电磁力运动仿真"><a href="#Maxwell电磁力运动仿真" class="headerlink" title="Maxwell电磁力运动仿真"></a>Maxwell电磁力运动仿真</h1><p>之前写的教程比较简略（晦涩难懂），步骤太多文字写起来很麻烦，直接录下来操作视频发b站了</p>
<p>视频中演示的结构为高压方案的单路boost拓扑，位置触发的时序控制，外电路激励源</p>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113007065564118&bvid=BV168WEeBEmV&cid=500001658823200&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>


<h1 id="4-LEVELS"><a href="#4-LEVELS" class="headerlink" title="4 LEVELS"></a>4 LEVELS</h1><h2 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h2><ul>
<li>加速体：A3材质M8x20圆柱定位销</li>
<li>轨道：内8.5外9.5钢管</li>
<li>电压：350V</li>
<li>拓扑：boost</li>
<li>IGBT：IRGPS4067d</li>
<li>线圈：0.45mm漆包铜线</li>
</ul>
<h2 id="Ansys-Maxwell仿真"><a href="#Ansys-Maxwell仿真" class="headerlink" title="Ansys Maxwell仿真"></a>Ansys Maxwell仿真</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"/2024/Ultra-high-speed-linear-motor/baaf983f8c3aca6c53c2238da466f09d.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/a39d70ac42f5250a742b76c01ecb0b3.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/16358072e8a10c489cf6da88cacde99.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/a77a7f8f7a4bb36dd2e99821d910b03.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/69911deecbd0ee65e2049c05d23a9d8.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/86de12335351f9e49a989d161d67152.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">实体模型</td>
<td align="center">电路模型</td>
<td align="center">电流</td>
<td align="center">拉力</td>
<td align="center">速度</td>
</tr>
</tbody></table>
<p><a href="DCP_maxwell.zip">仿真工程文件</a></p>
<p>我还找到了一个maxwell的使用教程文档，不知道有没有用，因为太长了我没看，但是万一有人需要呢？</p>


	<div class="row">
    <embed src="MAXWELL基础教程电子版.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h2 id="功率电路"><a href="#功率电路" class="headerlink" title="功率电路"></a>功率电路</h2><table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240719201740.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240719202048.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/f6e19e7d493377e57490c1ba6c95cbc.jpg"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/fb16ed462e5e7065995940dd605b93f.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">功率板原理图</td>
<td align="center">驱动板原理图</td>
<td align="center">照片</td>
<td align="center">效果</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>线圈设计参数：</p>
<p><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240719202940.png"></p>
<p>实测速度基本稳定在45m&#x2F;s，如果连续使用线圈发热增加的电阻率会降低电流导致速度降低，实测温度到40度时速度会降低到40左右，因此未来的设计将会关注热管理问题。</p>
<h2 id="时序控制"><a href="#时序控制" class="headerlink" title="时序控制"></a>时序控制</h2><p>外接自制那个esp32开发板，代码在这里，时序使用循环计算，不再需要手动考虑高低电平切换顺序了，以及做了串口调参，节省一下flash的烧录寿命hhh</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cxx: control[just a str], level, 0:duration/1:start time//2:end time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start time</span></span><br><span class="line"><span class="type">int</span> c11_time = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c21_time = <span class="number">1650</span>;</span><br><span class="line"><span class="type">int</span> c31_time = <span class="number">2400</span>;</span><br><span class="line"><span class="type">int</span> c41_time = <span class="number">2950</span>;</span><br><span class="line"><span class="comment">// duration</span></span><br><span class="line"><span class="type">int</span> c10_time = <span class="number">1460</span>;</span><br><span class="line"><span class="type">int</span> c20_time = <span class="number">840</span>;</span><br><span class="line"><span class="type">int</span> c30_time = <span class="number">670</span>;</span><br><span class="line"><span class="type">int</span> c40_time = <span class="number">580</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// trigger status</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c1 = <span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c2 = <span class="number">27</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c3 = <span class="number">14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c4 = <span class="number">12</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c5 = <span class="number">13</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseStartTime = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseNowTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">String inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(c1, OUTPUT);</span><br><span class="line">  pinMode(c2, OUTPUT);</span><br><span class="line">  pinMode(c3, OUTPUT);</span><br><span class="line">  pinMode(c4, OUTPUT);</span><br><span class="line">  pinMode(c5, OUTPUT);</span><br><span class="line">  digitalWrite(c1, LOW);</span><br><span class="line">  digitalWrite(c2, LOW);</span><br><span class="line">  digitalWrite(c3, LOW);</span><br><span class="line">  digitalWrite(c4, LOW);</span><br><span class="line">  digitalWrite(c5, LOW);</span><br><span class="line"></span><br><span class="line">  pinMode(sw, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// serial</span></span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    delay(<span class="number">5</span>);</span><br><span class="line">    <span class="type">char</span> recieved = Serial.read();</span><br><span class="line">    inData += recieved;</span><br><span class="line">    <span class="keyword">if</span>(recieved == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (inData.length()&lt;<span class="number">4</span>)&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Too short&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String function = inData.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (function==<span class="string">&quot;c11 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c11_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c11 = &quot;</span>);</span><br><span class="line">        Serial.println(c11_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c10 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c10_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c10 = &quot;</span>);</span><br><span class="line">        Serial.println(c10_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c21 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c21_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c21 = &quot;</span>);</span><br><span class="line">        Serial.println(c21_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c20 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c20_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c20 = &quot;</span>);</span><br><span class="line">        Serial.println(c20_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c31 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c31_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c31 = &quot;</span>);</span><br><span class="line">        Serial.println(c31_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c30 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c30_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c30 = &quot;</span>);</span><br><span class="line">        Serial.println(c30_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c41 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c41_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c41 = &quot;</span>);</span><br><span class="line">        Serial.println(c41_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c40 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c40_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c40 = &quot;</span>);</span><br><span class="line">        Serial.println(c40_time);</span><br><span class="line">      &#125;</span><br><span class="line">      inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// switch</span></span><br><span class="line">  <span class="keyword">if</span> (digitalRead(sw)==LOW)&#123;</span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    <span class="type">int</span> c11 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c21 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c31 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c41 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c22 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c32 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c42 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12_time = c11_time + c10_time;</span><br><span class="line">    <span class="type">int</span> c22_time = c21_time + c20_time;</span><br><span class="line">    <span class="type">int</span> c32_time = c31_time + c30_time;</span><br><span class="line">    <span class="type">int</span> c42_time = c41_time + c40_time;</span><br><span class="line">    Serial.println(<span class="string">&quot;starting&quot;</span>);</span><br><span class="line">    pulseStartTime = micros();</span><br><span class="line">    pulseNowTime = micros();</span><br><span class="line">    <span class="keyword">while</span>(c11||c12||c21||c22||c31||c32||c41||c42)&#123;</span><br><span class="line">      pulseNowTime = micros();</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c11_time &amp;&amp; c11)&#123;</span><br><span class="line">        digitalWrite(c1, HIGH);</span><br><span class="line">        c11 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c12_time &amp;&amp; c12)&#123;</span><br><span class="line">        digitalWrite(c1, LOW);</span><br><span class="line">        c12 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c21_time &amp;&amp; c21)&#123;</span><br><span class="line">        digitalWrite(c2, HIGH);</span><br><span class="line">        c21 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c22_time &amp;&amp; c22)&#123;</span><br><span class="line">        digitalWrite(c2, LOW);</span><br><span class="line">        c22 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c31_time &amp;&amp; c31)&#123;</span><br><span class="line">        digitalWrite(c3, HIGH);</span><br><span class="line">        c31 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c32_time &amp;&amp; c32)&#123;</span><br><span class="line">        digitalWrite(c3, LOW);</span><br><span class="line">        c32 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c41_time &amp;&amp; c41)&#123;</span><br><span class="line">        digitalWrite(c4, HIGH);</span><br><span class="line">        c41 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c42_time &amp;&amp; c42)&#123;</span><br><span class="line">        digitalWrite(c4, LOW);</span><br><span class="line">        c42 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;<span class="number">1000000</span>)&#123;</span><br><span class="line">        Serial.print(<span class="string">&quot;ERROR, time out&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.println(<span class="string">&quot;releasing&quot;</span>);</span><br><span class="line"></span><br><span class="line">    digitalWrite(c5, HIGH);</span><br><span class="line">    delay(<span class="number">2000</span>);</span><br><span class="line">    digitalWrite(c5, LOW);</span><br><span class="line">    Serial.println(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ZVS升压电源"><a href="#ZVS升压电源" class="headerlink" title="ZVS升压电源"></a>ZVS升压电源</h2><p>电源有多种方案，最简单的ZVS谐振逆变升压，十分简单但是不够可控可靠，无法控制工作状态，而且在负载过流情况下一旦停止谐振就会直接在电源上短路，如果使用电池供电十分危险，不过只要重新接入电源重新进入谐振状态就可以继续正常工作。另一种使用开关电路逆变升压，较为复杂但是可控。当然我们的需求是给电容充电，使用恒流源更合适，具体实现参考论文《一种谐振型推挽式直流变换器》</p>
<p>不知道为什么这个电路被称为ZVS(零电压开关)电路，这只是一个恰好工作在零电压开关状态的谐振电路，不过这个名称和电路十分经典广为流传和使用，甚至淘宝所售套件的电源全都是这个方案，而且也足够简单，非常容易做</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_1.jpg"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839.jpg"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_2.jpg"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_3.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">洞洞板试验</td>
<td align="center">输入</td>
<td align="center">波形</td>
<td align="center">输出</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240704130314.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240704130544.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231113160735.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">3D模型</td>
<td align="center">照片</td>
</tr>
</tbody></table>
<p>缺失模型的元件是电感和变压器。电感一定要电流足够大，分享一下我的电感和变压器选型吧</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/80744d6641f6b1eeb3cd457683ebc8e.jpg"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/055435e79723270fdaf48b5150b58e2.jpg"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/11fc579bfb3f5c95989dac205c9dcf4.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">电感</td>
<td align="center">现在用的电容</td>
<td align="center">打算以后换的电容</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>这个电路的问题我也说过了，就是一旦过载停振就会短路，所以我在前面加了一个PMos控制电源开关，短路可以及时关闭和重启。</p>
<h1 id="n-5-LEVELS"><a href="#n-5-LEVELS" class="headerlink" title="n*5 LEVELS"></a>n*5 LEVELS</h1><h2 id="电路设计"><a href="#电路设计" class="headerlink" title="电路设计"></a>电路设计</h2><p>这次采用了模块化设计，每个板子是5级功率回路，可以直接串联使用</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134109.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134138.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134204.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134123.png"></td>
<td align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134148.png"></td>
<td align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134215.png"></td>
</tr>
<tr>
<td align="center">放电电路</td>
<td align="center">驱动电路</td>
<td align="center">供电主板</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>线圈设计参数：<br><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134526.png"></p>
<h2 id="时序控制-1"><a href="#时序控制-1" class="headerlink" title="时序控制"></a>时序控制</h2><h3 id="控制程序"><a href="#控制程序" class="headerlink" title="控制程序"></a>控制程序</h3><p>考虑到esp32引脚数量不足，主控芯片更换为stm32。以及这次可以进行电压测量和充电电流监控并主动控制，加入了这部分控制代码</p>
<details>
  <summary>一些吐槽</summary>
  这段代码实在是太不优雅了，真受不了这一堆if else，但是又一直懒得重构。。。至少暂时不耽误用。以及现在电压主动控制还没写，等写完了就删掉这句话
</details>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cxx: control[just a str], level, 0:duration/1:start time//2:end time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start time</span></span><br><span class="line"><span class="type">int</span> c11_time = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c21_time = <span class="number">1350</span>;</span><br><span class="line"><span class="type">int</span> c31_time = <span class="number">2000</span>;</span><br><span class="line"><span class="type">int</span> c41_time = <span class="number">2630</span>;</span><br><span class="line"><span class="type">int</span> c51_time = <span class="number">3100</span>;</span><br><span class="line"><span class="type">int</span> c61_time = <span class="number">3490</span>;</span><br><span class="line"><span class="type">int</span> c71_time = <span class="number">3830</span>;</span><br><span class="line"><span class="type">int</span> c81_time = <span class="number">4140</span>;</span><br><span class="line"><span class="type">int</span> c91_time = <span class="number">4410</span>;</span><br><span class="line"><span class="comment">// duration</span></span><br><span class="line"><span class="type">int</span> c10_time = <span class="number">1340</span>;</span><br><span class="line"><span class="type">int</span> c20_time = <span class="number">880</span>;</span><br><span class="line"><span class="type">int</span> c30_time = <span class="number">770</span>;</span><br><span class="line"><span class="type">int</span> c40_time = <span class="number">590</span>;</span><br><span class="line"><span class="type">int</span> c50_time = <span class="number">500</span>;</span><br><span class="line"><span class="type">int</span> c60_time = <span class="number">470</span>;</span><br><span class="line"><span class="type">int</span> c70_time = <span class="number">400</span>;</span><br><span class="line"><span class="type">int</span> c80_time = <span class="number">360</span>;</span><br><span class="line"><span class="type">int</span> c90_time = <span class="number">340</span>;</span><br><span class="line"><span class="comment">// trigger status</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c1 = <span class="number">13</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c2 = <span class="number">12</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c3 = <span class="number">14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c4 = <span class="number">27</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c5 = <span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c6 = <span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c7 = <span class="number">33</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c8 = <span class="number">32</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c9 = <span class="number">23</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sw = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> serial_sw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseStartTime = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseNowTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">String inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(c1, OUTPUT);</span><br><span class="line">  pinMode(c2, OUTPUT);</span><br><span class="line">  pinMode(c3, OUTPUT);</span><br><span class="line">  pinMode(c4, OUTPUT);</span><br><span class="line">  pinMode(c5, OUTPUT);</span><br><span class="line">  pinMode(c6, OUTPUT);</span><br><span class="line">  pinMode(c7, OUTPUT);</span><br><span class="line">  pinMode(c8, OUTPUT);</span><br><span class="line">  pinMode(c9, OUTPUT);</span><br><span class="line">  digitalWrite(c1, LOW);</span><br><span class="line">  digitalWrite(c2, LOW);</span><br><span class="line">  digitalWrite(c3, LOW);</span><br><span class="line">  digitalWrite(c4, LOW);</span><br><span class="line">  digitalWrite(c5, LOW);</span><br><span class="line">  digitalWrite(c6, LOW);</span><br><span class="line">  digitalWrite(c7, LOW);</span><br><span class="line">  digitalWrite(c8, LOW);</span><br><span class="line">  digitalWrite(c9, LOW);</span><br><span class="line"></span><br><span class="line">  pinMode(sw, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// serial</span></span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    delay(<span class="number">5</span>);</span><br><span class="line">    <span class="type">char</span> recieved = Serial.read();</span><br><span class="line">    inData += recieved;</span><br><span class="line">    <span class="keyword">if</span>(recieved == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (inData.length()&lt;<span class="number">4</span>)&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Too short&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String function = inData.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">if</span> (function==<span class="string">&quot;shot&quot;</span>)&#123;</span><br><span class="line">        serial_sw = <span class="number">1</span>;</span><br><span class="line">        Serial.println(<span class="string">&quot;Shot after 1 second!&quot;</span>);</span><br><span class="line">        delay(<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (function==<span class="string">&quot;c11 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c11_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c11 = &quot;</span>);</span><br><span class="line">        Serial.println(c11_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c10 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c10_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c10 = &quot;</span>);</span><br><span class="line">        Serial.println(c10_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c21 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c21_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c21 = &quot;</span>);</span><br><span class="line">        Serial.println(c21_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c20 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c20_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c20 = &quot;</span>);</span><br><span class="line">        Serial.println(c20_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c31 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c31_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c31 = &quot;</span>);</span><br><span class="line">        Serial.println(c31_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c30 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c30_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c30 = &quot;</span>);</span><br><span class="line">        Serial.println(c30_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c41 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c41_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c41 = &quot;</span>);</span><br><span class="line">        Serial.println(c41_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c40 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c40_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c40 = &quot;</span>);</span><br><span class="line">        Serial.println(c40_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c51 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c51_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c51 = &quot;</span>);</span><br><span class="line">        Serial.println(c51_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c50 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c50_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c50 = &quot;</span>);</span><br><span class="line">        Serial.println(c50_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c61 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c61_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c61 = &quot;</span>);</span><br><span class="line">        Serial.println(c61_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c60 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c60_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c60 = &quot;</span>);</span><br><span class="line">        Serial.println(c60_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c71 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c71_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c71 = &quot;</span>);</span><br><span class="line">        Serial.println(c71_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c70 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c70_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c70 = &quot;</span>);</span><br><span class="line">        Serial.println(c70_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c81 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c81_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c81 = &quot;</span>);</span><br><span class="line">        Serial.println(c81_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c80 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c80_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c80 = &quot;</span>);</span><br><span class="line">        Serial.println(c80_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c91 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c91_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c91 = &quot;</span>);</span><br><span class="line">        Serial.println(c91_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c90 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c90_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c90 = &quot;</span>);</span><br><span class="line">        Serial.println(c90_time);</span><br><span class="line">      &#125;</span><br><span class="line">      inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// switch</span></span><br><span class="line">  <span class="keyword">if</span> (digitalRead(sw)==LOW||serial_sw)&#123;</span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    serial_sw = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c11 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c21 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c31 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c41 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c51 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c61 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c71 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c81 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c91 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c22 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c32 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c42 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c52 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c62 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c72 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c82 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c92 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12_time = c11_time + c10_time;</span><br><span class="line">    <span class="type">int</span> c22_time = c21_time + c20_time;</span><br><span class="line">    <span class="type">int</span> c32_time = c31_time + c30_time;</span><br><span class="line">    <span class="type">int</span> c42_time = c41_time + c40_time;</span><br><span class="line">    <span class="type">int</span> c52_time = c51_time + c50_time;</span><br><span class="line">    <span class="type">int</span> c62_time = c61_time + c60_time;</span><br><span class="line">    <span class="type">int</span> c72_time = c71_time + c70_time;</span><br><span class="line">    <span class="type">int</span> c82_time = c81_time + c80_time;</span><br><span class="line">    <span class="type">int</span> c92_time = c91_time + c90_time;</span><br><span class="line">    Serial.println(<span class="string">&quot;starting&quot;</span>);</span><br><span class="line">    pulseStartTime = micros();</span><br><span class="line">    pulseNowTime = micros();</span><br><span class="line">    <span class="keyword">while</span>(c11||c12||c21||c22||c31||c32||c41||c42||c51||c52||c61||c62||c71||c72||c81||c82||c91||c92)&#123;</span><br><span class="line">      pulseNowTime = micros();</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c11_time &amp;&amp; c11)&#123;</span><br><span class="line">        digitalWrite(c1, HIGH);</span><br><span class="line">        c11 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c12_time &amp;&amp; c12)&#123;</span><br><span class="line">        digitalWrite(c1, LOW);</span><br><span class="line">        c12 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c21_time &amp;&amp; c21)&#123;</span><br><span class="line">        digitalWrite(c2, HIGH);</span><br><span class="line">        c21 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c22_time &amp;&amp; c22)&#123;</span><br><span class="line">        digitalWrite(c2, LOW);</span><br><span class="line">        c22 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c31_time &amp;&amp; c31)&#123;</span><br><span class="line">        digitalWrite(c3, HIGH);</span><br><span class="line">        c31 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c32_time &amp;&amp; c32)&#123;</span><br><span class="line">        digitalWrite(c3, LOW);</span><br><span class="line">        c32 = <span class="number">0</span>;&#125;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c41_time &amp;&amp; c41)&#123;</span><br><span class="line">        digitalWrite(c4, HIGH);</span><br><span class="line">        c41 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c42_time &amp;&amp; c42)&#123;</span><br><span class="line">        digitalWrite(c4, LOW);</span><br><span class="line">        c42 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c51_time &amp;&amp; c51)&#123;</span><br><span class="line">        digitalWrite(c5, HIGH);</span><br><span class="line">        c51 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c52_time &amp;&amp; c52)&#123;</span><br><span class="line">        digitalWrite(c5, LOW);</span><br><span class="line">        c52 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c61_time &amp;&amp; c61)&#123;</span><br><span class="line">        digitalWrite(c6, HIGH);</span><br><span class="line">        c61 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c72_time &amp;&amp; c62)&#123;</span><br><span class="line">        digitalWrite(c6, LOW);</span><br><span class="line">        c62 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c71_time &amp;&amp; c71)&#123;</span><br><span class="line">        digitalWrite(c7, HIGH);</span><br><span class="line">        c71 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c72_time &amp;&amp; c72)&#123;</span><br><span class="line">        digitalWrite(c7, LOW);</span><br><span class="line">        c72 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c81_time &amp;&amp; c81)&#123;</span><br><span class="line">        digitalWrite(c8, HIGH);</span><br><span class="line">        c81 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c82_time &amp;&amp; c82)&#123;</span><br><span class="line">        digitalWrite(c8, LOW);</span><br><span class="line">        c82 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c91_time &amp;&amp; c91)&#123;</span><br><span class="line">        digitalWrite(c9, HIGH);</span><br><span class="line">        c91 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c92_time &amp;&amp; c92)&#123;</span><br><span class="line">        digitalWrite(c9, LOW);</span><br><span class="line">        c92 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;<span class="number">1000000</span>)&#123;</span><br><span class="line">        Serial.print(<span class="string">&quot;ERROR, time out&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// not release</span></span><br><span class="line">    <span class="comment">//Serial.println(&quot;releasing&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//digitalWrite(c5, HIGH);</span></span><br><span class="line">    delay(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//digitalWrite(c5, LOW);</span></span><br><span class="line">    Serial.println(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="电磁运动仿真计算"><a href="#电磁运动仿真计算" class="headerlink" title="电磁运动仿真计算"></a>电磁运动仿真计算</h3><p>maxwell计算结果和coilgun RLC基本一致，但是出现了一些新的问题，由于线圈电流的巨大变化率，会在相邻线圈产生感生电流，可能导致IGBT过压击穿，因此本来计划做15级破百，由于11-15级匝数更少电流更大产生的感生电流过大，因此打算只做10级，速度只能达到70-80。解决这个问题需要改成多路boost，需要重新设计PCB，所以等下一版本再说吧</p>
<p>经过计算发现，最佳的开启和关断位置是固定的，这一次仿真已经是完全由位置触发得到的了，效果非常好，甚至可以用于估算代码设置的延迟时间</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/Speed.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/Winding.png"></th>
<th align="center"><img src="/2024/Ultra-high-speed-linear-motor/NodeVoltage.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">运动参数</td>
<td align="center">线圈电流</td>
<td align="center">电容电压</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>但是线圈电流仿真结果显示线圈匝数的设计还有优化空间，关断时的电流过大，降低了效率和IGBT可靠性</p>
<p><a href="DCP_maxwell.7z">Maxwell仿真文件</a></p>
<h3 id="设计优化"><a href="#设计优化" class="headerlink" title="设计优化"></a>设计优化</h3><p>对于线圈，首先应该用较大的匝数进行初始的加速，然后随着速度增加，线圈导通的时间越来越短，因此需要减少电感量来提高响应速度，即减少匝数。因此后级最佳的匝数应逐级减少。</p>
<p>当IGBT关断时，线圈的电流应该已经过了峰值，并且降低的足够低，这样可以降低电容剩余电压，提高加速度。因此可以根据关断时的电流值确定合适的匝数。如果刚过峰值就关断，就减少线圈的匝数。应该比较好的关断时机是电流峰值的2&#x2F;3到1&#x2F;2</p>
<p>当速度达到接近100时，由于匝数很小可能导致电感过小电流过大，此时可以降低电容容量，降低峰值电流避免IGBT出现故障</p>
<p>对于磁阻结构，能量的损耗在于电阻发热和磁场加速损耗，线圈使用更大的线径可以降低电阻，进一步提高效率。实际制造中，更粗的线圈会极大提高手工绕制难度，因此我自己的方案仍然使用0.45mm直径</p>
<p>线圈直径越大，在缝隙处的损耗就会占比更小，因此拥有更高的效率，我也因此把定位销尺寸从m6改为m8。为了减少缝隙的磁场损耗，缝隙处从1mm厚度的abs和1mm厚度线轴改为0.5mm的不锈钢缠绕高温胶带绝缘。减少缝隙可以极大提高效率。</p>
<p>根据其他人的实验，AUIRGPS4067D的峰值电流在驱动电压正20负5时，520V560uf100uh大概每隔30s放电一次，800A450us关断，极限测试了50次没有问题。不过保守使用3-500A应该不会有问题</p>
<h3 id="推挽升压电源"><a href="#推挽升压电源" class="headerlink" title="推挽升压电源"></a>推挽升压电源</h3><p>这种方案使用芯片产生的指定频率的互补的PWM波形控制MOS推挽升压，至少不会停振短路了。我用的是SG3525产生信号然后UCC27324驱动MOS，经过变压器升压，整流后输出高压直流。为了及时关断，使用单片机采集电压控制开关</p>
<h3 id="全桥恒流谐振"><a href="#全桥恒流谐振" class="headerlink" title="全桥恒流谐振"></a>全桥恒流谐振</h3><p>直接上论文：</p>


	<div class="row">
    <embed src="一种谐振型推挽式直流变换器_袁义生.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p><a href="https://www.kechuang.org/f/367">科创网</a><br><a href="https://www.jlc.com/">JLC</a><br><strong>QQX</strong></p>
]]></content>
      <categories>
        <category>值得一提的文章</category>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
      </tags>
  </entry>
  <entry>
    <title>一个“比较”亮的手电</title>
    <url>/2024/bright-light/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>做这个的想法大部分来源于有一天晚上，走G6辅路从昌平骑车回市内，一堆解限速横冲直撞的逆行远光电动车给我整破防了，想做个小手电制裁一下。起因只是这么简单但是考虑到其他无辜的人我也不会真的这样去做，但是发现这个东西好像确实需要，用来摄影打光，以及夜间外出徒步这类活动都可以用，所以还是决定做出来</p>
<p>另一方面，关于这个手电的电源。绝大部分的设计方案都是使用一颗升压芯片来做电源控制，但是我这里有些别的想法。我以后会做一个大功率自动升降压可调电源，正好可以在这里复用，就当提前踩个坑了，所以虽然会更贵一点，我决定供电方案采用buck-boost自动升降压的恒定电流控制，顺便兼容一下各种电压的电池。（来自2025年的补充：考虑到复刻可行性和成本因素还是决定用boost恒流）</p>
<p>至于控制芯片，考虑到这个功能不算复杂，以及我想拿stm32但是用的机会不多，就用stm32f103c8t6做主控吧</p>
<h1 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h3><details>
  <summary>隐藏内容：已被抛弃的大力转飞但是高效率方案（很难想象这两个形容词放在了一起）</summary>
  这部分没啥技术含量，找个光效高功率大的灯就完了，这里我选择了立德达的5050贴片LED，光效250lm/w，显色指数70，电压选择了6V。随手画一个2串50并的铝基板灯板。按照规格书的功率最大值，单个功率3W，光通量700lm，总计12V 25A 300W功率，70000流明。

<table>
<thead>
<tr>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241210150050.png"></th>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241210150036.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="ProDoc_P1_2024-12-10.epro">原理图</a></td>
<td align="center"><a href="ProDoc_PCB1_(6V)_2024-12-10.epro">PCB</a></td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>  但是这样有个问题，发光面积过大导致光强过低，因此后来没有采用这一方案。关于冷却方案，原计划<del>直接上水冷！冷头使用60x60mm的铝制水冷头，搭配150x40x40的服务器冷排，在手电筒的体积内散热400W已经完全足够了。为了体积也不打算要水箱了，水泵随手买了个5V供电的微型水泵</del> 但是考虑到体积因素还是风冷了</p>
<p>  这一方案需要电压为12V，考虑到电池为3s电压因此供电采用buck-boost拓扑，这一部分也进行了matlab仿真设计，可惜在这里用不到了。仿真条件：电阻1Ω，输入电压12V，输出电容110uf，ESR10mΩ，电感33uH，开关频率100kHz，半桥PWM占空比最大值95%。<a href="buckboost.slx">matlab simulink仿真文件</a></p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222224440.png"></th>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222224225.png"></th>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222224422.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">5A恒流输出</td>
<td align="center">10A恒流输出</td>
<td align="center">20A恒流输出</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>  甚至还画了一个boost电路但是WDDQQX把mos橄榄了没有用得上</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222223801.png"></th>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222223834.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">3D-PCB</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
</details>

<p>综合发光面积、价格、效率等，最终选择SFY55灯珠，参数如下：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/bright-light/69bd46e38601a5c39a4775097e952c4.jpg"></th>
<th align="center"><img src="/2024/bright-light/9e2aa0a23079d13a982fd5dbf028188.jpg"></th>
<th align="center"><img src="/2024/bright-light/357dc85888bb8805679a9b63933a9be.jpg"></th>
<th align="center"><img src="/2024/bright-light/49928d9e79ca2d41cbe7b6165ae1758.jpg"></th>
<th align="center"><img src="/2024/bright-light/617e2a1d9a860104e65897fc72a1f42.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">外形尺寸</td>
<td align="center">光通量-电功率</td>
<td align="center">光通量-电流</td>
<td align="center">伏安特性曲线</td>
<td align="center">CCT色温-电流</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>这款灯珠为国产型号，虽然光效较低（但考虑人眼对数感知特性这点效率也问题不大）但是价格便宜，而且功率密度足够。上面加上反光杯进一步增加光强。</p>
<h3 id="制冷"><a href="#制冷" class="headerlink" title="制冷"></a>制冷</h3><p>散热方案极其重要，工作温度直接影响到灯珠功率效率和寿命。考虑体积没有采用水冷，而是使用了下压式风冷CPU散热器。虽然远超出了此类散热器的标称功率，但是更换风扇为台达9cm 12V 4.32A暴力风扇后完美解决（别问噪音，问就没有）</p>
<p><img src="/2024/bright-light/535a78305d36408756ae3cecb5cfe69.jpg"></p>
<h3 id="供电"><a href="#供电" class="headerlink" title="供电"></a>供电</h3><p>灯珠供电需要恒流控制下的大约24V电压，正常情况下电流需要20A.以及最高12V可调供电给散热风扇，3.3V给主控电路，外围这部分直接用buck降压电路和LDO芯片解决了没啥可说的。</p>
<h4 id="恒流boost电路"><a href="#恒流boost电路" class="headerlink" title="恒流boost电路"></a>恒流boost电路</h4><h5 id="v3驱动板设计"><a href="#v3驱动板设计" class="headerlink" title="v3驱动板设计"></a>v3驱动板设计</h5><h5 id="v2驱动板设计"><a href="#v2驱动板设计" class="headerlink" title="v2驱动板设计"></a>v2驱动板设计</h5><table>
<thead>
<tr>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250730214721.png"></th>
<th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250730214705.png"></th>
<th align="center"><img src="/2024/bright-light/fe65e89473042650ebb57acb621e241.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="ProDoc_P1_2025-07-30.epro">原理图</a></td>
<td align="center"><a href="ProDoc_PCB3_2025-07-30.epro">PCB</a></td>
<td align="center">实物</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>实验效果较好：信号线路工作正常，无电磁干扰影响，实现恒流控制。</p>
<p>存在的问题：风扇未知原因无法启动，断开信号线连接仅接入电源可以启动；逐渐加大电流过程中mos烧毁(200w+)；芯片短路保护控制引脚电压过低，短接后级放大电路强行上拉mos栅极才能工作。</p>
<p>增大功率过程中mos发热严重，换用TO-220封装的并联折角加散热片焊上去测试可以正常工作到30%电流：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/bright-light/8a17e114a10a43199fff09d865ebc15.jpg"></th>
<th align="center"><img src="/2024/bright-light/751b88d810fcca3590ff2f78bb0068c.jpg"></th>
<th align="center"><img src="/2024/bright-light/c0fa337e340a19501c9705a8f6f66f8.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">20%电流工作情况</td>
<td align="center">Vgs波形</td>
<td align="center">Vds波形</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>综上，下一个版本要做的改进:</p>
<ol>
<li>散热风扇测速信号导致错误</li>
<li>更换电感值同时降低mosfet开关频率</li>
<li>stm32的电流检测分辨率不足，要加个运算放大器</li>
<li>更换mosfet封装和散热</li>
<li>风扇电源应内部稳压而非直连电源以满足宽电压要求</li>
<li>栅极电阻改用3.3欧</li>
<li>芯片ldo电容改用1uf</li>
</ol>
<h5 id="v1驱动板设计"><a href="#v1驱动板设计" class="headerlink" title="v1驱动板设计"></a>v1驱动板设计</h5><p>基本无法正常工作，信号反馈回路遭遇严重电磁干扰。设计就不在这放了，主要是PCB设计的问题</p>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250730222639.png"><br><a href="Light.zip">cubemx设计</a></p>
<p>stm32:keil main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Header */</span></span><br><span class="line"><span class="comment">/* USER CODE END Header */</span></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;adc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dma.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tim.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private includes ----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ssd1306.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private user code ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">int</span> ERR = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> bufnum[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint16_t</span> ADC_Value[<span class="number">9</span>];</span><br><span class="line"><span class="type">uint16_t</span> ADC_Vout,ADC_Fb,ADC_Vin,ADC_TEMP0,ADC_TEMP1,ADC_KNOB0,ADC_KNOB1,ADC_SW,ADC_TEMPSTM;</span><br><span class="line"><span class="type">float</span> Vout,Iout,Vin,TEMP0,TEMP1,KNOB0,KNOB1,SW,TEMPSTM;</span><br><span class="line"><span class="type">int</span> status_SW,status_KNOB;</span><br><span class="line"><span class="type">int</span> DIM_9209;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  The application entry point.</span></span><br><span class="line"><span class="comment">  * @retval int</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_DMA_Init();</span><br><span class="line">  MX_ADC1_Init();</span><br><span class="line">  MX_I2C1_Init();</span><br><span class="line">  MX_USART1_UART_Init();</span><br><span class="line">  MX_TIM2_Init();</span><br><span class="line">  MX_TIM3_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">	HAL_TIM_Base_Start_IT(&amp;htim3);</span><br><span class="line">	HAL_TIM_PWM_Start (&amp;htim2,TIM_CHANNEL_1);</span><br><span class="line">	HAL_TIM_PWM_Start (&amp;htim2,TIM_CHANNEL_2);</span><br><span class="line">	HAL_ADC_Start_DMA(&amp;hadc1, (<span class="type">uint32_t</span>*)&amp;ADC_Value, <span class="number">9</span>);</span><br><span class="line">	</span><br><span class="line">	SSD1306_Init ();</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">		<span class="comment">//EN</span></span><br><span class="line">		<span class="keyword">if</span>(ERR||status_SW==<span class="number">1</span>)&#123;</span><br><span class="line">			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//ADC</span></span><br><span class="line">		ADC_Vout=ADC_Value[<span class="number">0</span>];</span><br><span class="line">		ADC_Fb=ADC_Value[<span class="number">1</span>];</span><br><span class="line">		ADC_Vin=ADC_Value[<span class="number">2</span>];</span><br><span class="line">		ADC_TEMP0=ADC_Value[<span class="number">3</span>];</span><br><span class="line">		ADC_TEMP1=ADC_Value[<span class="number">4</span>];</span><br><span class="line">		ADC_KNOB0=ADC_Value[<span class="number">5</span>];</span><br><span class="line">		ADC_KNOB1=ADC_Value[<span class="number">6</span>];</span><br><span class="line">		ADC_SW=ADC_Value[<span class="number">7</span>];</span><br><span class="line">		ADC_TEMPSTM=ADC_Value[<span class="number">8</span>];</span><br><span class="line">		Vout=(<span class="type">float</span>)ADC_Vout * <span class="number">3.3f</span> * <span class="number">11.0f</span>/ <span class="number">4095.0f</span>;</span><br><span class="line">		Iout=(<span class="type">float</span>)ADC_Fb * <span class="number">3.3f</span> / <span class="number">0.0125f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">		Vin=(<span class="type">float</span>)ADC_Vin * <span class="number">3.3f</span> * <span class="number">11.0f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">		TEMP0=(<span class="type">float</span>)ADC_TEMP0 * <span class="number">3.3f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">		TEMP1=(<span class="type">float</span>)ADC_TEMP1 * <span class="number">3.3f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">		KNOB0=(<span class="type">float</span>)ADC_KNOB0 / <span class="number">4095.0f</span>;</span><br><span class="line">		KNOB1=(<span class="type">float</span>)ADC_KNOB1 / <span class="number">4095.0f</span>;</span><br><span class="line">		SW=(<span class="type">float</span>)ADC_SW / <span class="number">4095.0f</span>;</span><br><span class="line">		TEMPSTM=(<span class="number">1.43f</span> - ((<span class="type">float</span>)ADC_TEMPSTM * <span class="number">3.3f</span> / <span class="number">4095.0f</span>))/<span class="number">0.0043f</span> + <span class="number">25.0f</span>;</span><br><span class="line">		<span class="comment">//status</span></span><br><span class="line">		status_KNOB = (<span class="type">int</span>)(KNOB0*<span class="number">20</span>)*<span class="number">10</span>+(<span class="type">int</span>)(KNOB1*<span class="number">20.0f</span>);</span><br><span class="line">		<span class="keyword">if</span>(status_KNOB&gt;<span class="number">100</span>)status_KNOB=<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">if</span>(SW&gt;<span class="number">0.66f</span>)&#123;status_SW=<span class="number">2</span>;&#125;<span class="keyword">else</span> <span class="keyword">if</span>(SW&gt;<span class="number">0.33f</span>)&#123;status_SW=<span class="number">1</span>;&#125;<span class="keyword">else</span>&#123;status_SW=<span class="number">0</span>;&#125;</span><br><span class="line">		<span class="comment">//DIM pwm</span></span><br><span class="line">		DIM_9209 = <span class="number">10</span> + status_KNOB*<span class="number">989</span>/<span class="number">100</span>;</span><br><span class="line">		__HAL_TIM_SET_COMPARE(&amp;htim2, TIM_CHANNEL_2, DIM_9209);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief System Clock Configuration</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_PeriphCLKInitTypeDef PeriphClkInit = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class="line"><span class="comment">  * in the RCC_OscInitTypeDef structure.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.HSIState = RCC_HSI_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK</span><br><span class="line">                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;</span><br><span class="line">  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCCEx_PeriphCLKConfig(&amp;PeriphClkInit) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span>&#123;</span><br><span class="line">	  <span class="keyword">if</span>(htim == &amp;htim3)</span><br><span class="line">	 &#123;</span><br><span class="line">	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);</span><br><span class="line">		 <span class="comment">//oled</span></span><br><span class="line">		  SSD1306_GotoXY (<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">			<span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;PWM%03d&quot;</span>, DIM_9209);</span><br><span class="line">			SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">			SSD1306_GotoXY (<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">			<span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;Vo:%03.1f&quot;</span>, Vout);</span><br><span class="line">			SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">			SSD1306_GotoXY (<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line">			<span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;Io:%03.1f&quot;</span>, Iout);</span><br><span class="line">			SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">			SSD1306_UpdateScreen();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function is executed in case of error occurrence.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Error_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class="line">  <span class="comment">/* USER CODE END Error_Handler_Debug */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Reports the name of the source file and the source line number</span></span><br><span class="line"><span class="comment">  *         where the assert_param error has occurred.</span></span><br><span class="line"><span class="comment">  * @param  file: pointer to the source file name</span></span><br><span class="line"><span class="comment">  * @param  line: assert_param error line source number</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span> *file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 6 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 6 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_FULL_ASSERT */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h1>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>FOC电机驱动器项目总结</title>
    <url>/2024/foc-driver-finally/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小功率主控驱动集成设计"><a href="#小功率主控驱动集成设计" class="headerlink" title="小功率主控驱动集成设计"></a>小功率主控驱动集成设计</h1><p>PCB专为4010&#x2F;4008无刷云台电机设计，集成了esp32主控，drv8313驱动，as5600磁编码器，can总线通讯控制，ina240在线三相电流采样放大(这部分独立出来可选插装，因为这个芯片太贵了而且不是每个板子都用)</p>
<h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><h3 id="原理图下载"><a href="#原理图下载" class="headerlink" title="原理图下载"></a>原理图<a href="ProDoc_P1_2024-07-02.epro">下载</a></h3>

	<div class="row">
    <embed src="SCH_Schematic1_1_2024-07-02.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h3 id="PCB下载"><a href="#PCB下载" class="headerlink" title="PCB下载"></a>PCB<a href="ProDoc_PCB5_2024-07-02.epro">下载</a></h3><p><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702154730.png"></p>
<h3 id="3D及实物"><a href="#3D及实物" class="headerlink" title="3D及实物"></a>3D及实物</h3><h4 id="底板"><a href="#底板" class="headerlink" title="底板"></a>底板</h4><table>
<thead>
<tr>
<th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702155112.png"></th>
<th align="center"><img src="/2024/foc-driver-finally/3ff5fd67c30ac14c014e009861d6d0e.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">3D</td>
<td align="center">照片</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<h4 id="电流检测插件"><a href="#电流检测插件" class="headerlink" title="电流检测插件"></a>电流检测插件</h4><table>
<thead>
<tr>
<th align="center">原理图</th>
<th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702160102.png"></th>
<th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702160152.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">PCB</td>
<td align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702155918.png"></td>
<td align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702155932.png"></td>
</tr>
<tr>
<td align="center">说明</td>
<td align="center"><a href="ProDoc_PCB2_2024-07-02.epro">SOIC8封装的INA240A2DR</a></td>
<td align="center"><a href="ProDoc_PCB2_1_2024-07-02.epro">TSSOP8封装的INA240A2PWR</a></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><div class="note info modern"><p>这部分使用simplefoc，对硬件进行简单测试用。实际项目中使用的代码可以在项目的文章中找到</p>
</div>

<h3 id="位置闭环控制"><a href="#位置闭环控制" class="headerlink" title="位置闭环控制"></a>位置闭环控制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// angle set point variable</span></span><br><span class="line"><span class="type">float</span> target_angle = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// instantiate the commander</span></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;target_angle, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensor</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link the motor and the driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// choose FOC modulation (optional)</span></span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::angle;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// contoller configuration</span></span><br><span class="line">  <span class="comment">// default parameters in defaults.h</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity PI controller parameters</span></span><br><span class="line">  motor.PID_velocity.P = <span class="number">0.2f</span>;</span><br><span class="line">  motor.PID_velocity.I = <span class="number">20</span>;</span><br><span class="line">  motor.PID_velocity.D = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// maximal voltage to be set to the motor</span></span><br><span class="line">  motor.voltage_limit = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity low pass filtering time constant</span></span><br><span class="line">  <span class="comment">// the lower the less filtered</span></span><br><span class="line">  motor.LPF_velocity.Tf = <span class="number">0.01f</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// angle P controller</span></span><br><span class="line">  motor.P_angle.P = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// maximal velocity of the position control</span></span><br><span class="line">  motor.velocity_limit = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target angle&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Set the target angle using serial terminal:&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  <span class="comment">// the faster you run this function the better</span></span><br><span class="line">  <span class="comment">// Arduino UNO loop  ~1kHz</span></span><br><span class="line">  <span class="comment">// Bluepill loop ~10kHz</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  <span class="comment">// velocity, position or voltage (defined in motor.controller)</span></span><br><span class="line">  <span class="comment">// this function can be run at much lower frequency than loopFOC() function</span></span><br><span class="line">  <span class="comment">// You can also use motor.move() and set the motor.target in the code</span></span><br><span class="line">  motor.move(target_angle);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// function intended to be used with serial plotter to monitor motor variables</span></span><br><span class="line">  <span class="comment">// significantly slowing the execution down!!!!</span></span><br><span class="line">  <span class="comment">// motor.monitor();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="速度闭环控制"><a href="#速度闭环控制" class="headerlink" title="速度闭环控制"></a>速度闭环控制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// velocity set point variable</span></span><br><span class="line"><span class="type">float</span> target_velocity = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// instantiate the commander</span></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;target_velocity, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensor</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link the motor and the driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::velocity;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// contoller configuration</span></span><br><span class="line">  <span class="comment">// default parameters in defaults.h</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity PI controller parameters</span></span><br><span class="line">  motor.PID_velocity.P = <span class="number">0.2f</span>;</span><br><span class="line">  motor.PID_velocity.I = <span class="number">20</span>;</span><br><span class="line">  motor.PID_velocity.D = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// default voltage_power_supply</span></span><br><span class="line">  motor.voltage_limit = <span class="number">6</span>;</span><br><span class="line">  <span class="comment">// jerk control using voltage voltage ramp</span></span><br><span class="line">  <span class="comment">// default value is 300 volts per sec  ~ 0.3V per millisecond</span></span><br><span class="line">  motor.PID_velocity.output_ramp = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity low pass filtering</span></span><br><span class="line">  <span class="comment">// default 5ms - try different values to see what is the best.</span></span><br><span class="line">  <span class="comment">// the lower the less filtered</span></span><br><span class="line">  motor.LPF_velocity.Tf = <span class="number">0.01f</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target velocity&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Set the target velocity using serial terminal:&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  <span class="comment">// the faster you run this function the better</span></span><br><span class="line">  <span class="comment">// Arduino UNO loop  ~1kHz</span></span><br><span class="line">  <span class="comment">// Bluepill loop ~10kHz</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  <span class="comment">// velocity, position or voltage (defined in motor.controller)</span></span><br><span class="line">  <span class="comment">// this function can be run at much lower frequency than loopFOC() function</span></span><br><span class="line">  <span class="comment">// You can also use motor.move() and set the motor.target in the code</span></span><br><span class="line">  motor.move(target_velocity);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// function intended to be used with serial plotter to monitor motor variables</span></span><br><span class="line">  <span class="comment">// significantly slowing the execution down!!!!</span></span><br><span class="line">  <span class="comment">// motor.monitor();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="力矩-foc电流-闭环控制"><a href="#力矩-foc电流-闭环控制" class="headerlink" title="力矩(foc电流)闭环控制"></a>力矩(foc电流)闭环控制</h3><p><img src="https://docs.simplefoc.com/extras/Images/foc_current_mode.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// current sensor</span></span><br><span class="line">InlineCurrentSense current_sense = InlineCurrentSense(<span class="number">0.01f</span>, <span class="number">50.0f</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// instantiate the commander.2</span></span><br><span class="line"></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;motor.target, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123; </span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensora</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">18</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line">  <span class="comment">// link the driver to the current sense</span></span><br><span class="line">  current_sense.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// current sense init hardware</span></span><br><span class="line">  current_sense.init();</span><br><span class="line">  <span class="comment">// link the current sense to the motor</span></span><br><span class="line">  motor.linkCurrentSense(&amp;current_sense);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set torque mode:</span></span><br><span class="line">  motor.torque_controller = TorqueControlType::foc_current; </span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::torque;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// foc current control parameters (Arduino UNO/Mega)</span></span><br><span class="line">  motor.PID_current_q.P = <span class="number">5</span>;</span><br><span class="line">  motor.PID_current_q.I= <span class="number">300</span>;</span><br><span class="line">  motor.PID_current_d.P= <span class="number">5</span>;</span><br><span class="line">  motor.PID_current_d.I = <span class="number">300</span>;</span><br><span class="line">  motor.LPF_current_q.Tf = <span class="number">0.01</span>; </span><br><span class="line">  motor.LPF_current_d.Tf = <span class="number">0.01</span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial </span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target current&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  motor.move();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>2023年电赛期间，当时虽然还没做力矩闭环，但是已经完成的位置闭环已经足够完成E类控制题了，当时用的网上买来的数字舵机精度不满足要求(激光笔云台3m外指向精度1cm以内),当场用两个4010做了个新云台，精度不知道高了几个数量级</p>
<p>到写这篇总结时候虽然已经过去一年了，但是东西还在，随手拿起来拍张照片吧，电赛那四天三夜也是很难忘的经历了</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/foc-driver-finally/21b15661c5ad6a7de24ad9e7f6cc525.jpg"></th>
<th align="center">当时做的两轴激光笔云台，集成esp32,as5600,drv8313，当时还没做好电流检测，精度的限制已经不在于执行硬件了，变成激光定位算法了。</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<h1 id="大功率驱动设计"><a href="#大功率驱动设计" class="headerlink" title="大功率驱动设计"></a>大功率驱动设计</h1><p>这个驱动没有集成主控需要输入三相PWM信号进行控制</p>
<h2 id="原理图下载-1"><a href="#原理图下载-1" class="headerlink" title="原理图下载"></a>原理图<a href="SCH_EG2104+NCE6080_2024-07-02.json">下载</a></h2>

	<div class="row">
    <embed src="Schematic_EG2104+NCE6080_2024-07-02.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h2 id="PCB下载-1"><a href="#PCB下载-1" class="headerlink" title="PCB下载"></a>PCB<a href="PCB_PCB_EG2104+NCE6080_2_2024-07-02.json">下载</a></h2><p><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702152608.png"></p>
<h2 id="3D及实物-1"><a href="#3D及实物-1" class="headerlink" title="3D及实物"></a>3D及实物</h2><table>
<thead>
<tr>
<th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702152849.png"></th>
<th align="center"><img src="/2024/foc-driver-finally/3d9015afaf27f26da5a2927097fa7ce.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">3D</td>
<td align="center">照片</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p><a href="https://www.simplefoc.com/">Simplefoc Project</a><br><a href="https://www.jlc.com/">JLC</a><br>2023年电赛电源组学长，QQX</p>
]]></content>
      <categories>
        <category>值得一提的文章</category>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>esp32</tag>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>KSP引力弹弓</title>
    <url>/2024/gravitational-slingshot-try/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>尝试用引力弹弓只用3000m&#x2F;s的△v从kerbin的100km低轨道转移到jool</p>
<p><img src="/2024/gravitational-slingshot-try/0651d48ff8a413923a00bcf86842cae.png"></p>
<p>首先进入地球100km低轨道，携带3000m&#x2F;s的△v，先使用了800m&#x2F;s进入月球转移轨道，经过两次月球引力弹弓加速离开地球引力范围</p>
<p>然后使用2000m&#x2F;s加速到了地球共振轨道，一个轨道周期后利用地球引力弹弓加速进入木星转移轨道，终于可以飞掠jool了</p>
<p>​然发后现到达木星近地点的速度为10km&#x2F;s，木星大气层厚度200km我降低到了185km进行气大制动也会过爆热炸……</p>
<p>​尝用试卫星的引力弓弹制动，然发后现最快卫星的速度是2.5km&#x2F;s，就算理论大最效率动制也超过了木星的逃逸速度……</p>
<p>​好吧没救了合个影先<br><img src="/img/62e4fa302f27ac7d1292d0c36a11364.png"></p>
<p>然后alt+F12开调试模式（写这篇文章就为了记一下这个快捷键永远想不起来永远查不到）</p>
<p><img src="/2024/gravitational-slingshot-try/5b18efa10bd08494ea04f5ab9bac0f9.png"></p>
<p>短暂的看一眼jool的日出之后到达海拔高度0，即使开了无损坏也会直接爆炸</p>
<p><img src="/2024/gravitational-slingshot-try/8119ca77c5a35013bf2cb924a828976.png"></p>
<p>附赠一张高清dv图，维基百科的太糊了<br><img src="/2024/gravitational-slingshot-try/f301b63d683434dafa9b8779080f40a17105e555.jpg@1256w_1776h_!web-article-pic.avif"></p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>Kerbal Space Program</tag>
      </tags>
  </entry>
  <entry>
    <title>博客github仓库通过action自动化部署</title>
    <url>/2024/hexo-github-action/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="方案比较"><a href="#方案比较" class="headerlink" title="方案比较"></a>方案比较</h1><p>之前的部署方案是服务器本地保存源文件，写入新内容时使用vscode的远程ssh编辑，然后git推送到github仓库作为备份。有一点问题就是服务器硬件来自阿里云的轻量应用服务器，对硬盘的iops有限制，进行大量读写操作时候一旦超过就会引发系统死机。以及稀烂的CPU和内存资源，随着源文件越来越大，生成时间也越来越长。这个时候github推出了action功能，允许我直接在github的服务器上进行生成操作，而且速度掉打阿里云服务器。所以方案改成这样，直接使用github保存源代码，每次提交代码之后自动进行生成操作，同时将生成的静态文件直接复制到服务器的网站服务目录内。同时也简化了另一个问题，就是多用户编辑，之前需要服务器上多个用户的读写权限，现在只需要github仓库添加作者就可以了。</p>
<h1 id="hexo部署推送"><a href="#hexo部署推送" class="headerlink" title="hexo部署推送"></a>hexo部署推送</h1><p>本来是应该用hexo的git部署的，然后没配置明白hexo部署action的ssh密钥登录，反正这段用不到了，已经换成直接复制了</p>
<p>也就是执行<code>hexo d</code>之后将生成的代码通过git推送到自己的远程服务器，这部分内容我在2022年写过，因为当时的方案是本地编辑生成然后git推送到服务器，和现在一样，直接参考<a href="https://triority.cc/2022/remote-server-hexo/">这篇文章</a></p>
<h1 id="github-action配置"><a href="#github-action配置" class="headerlink" title="github action配置"></a>github action配置</h1><p>github开了一个新的仓库保存源代码，上传现有内容之后，准备新建action。<code>GitHub Actions</code>的配置文件叫做<code>workflow</code>文件，存放在源代码仓库的<code>.github/workflows</code>目录。GitHub在我们完成预设触发条件时，只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动读取运行该文件。</p>
<h2 id="编辑workflow"><a href="#编辑workflow" class="headerlink" title="编辑workflow"></a>编辑workflow</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Blog CI/CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [main] # 当监测 main,master 的 push</span><br><span class="line">    paths: # 监测文件变动限制</span><br><span class="line">      - &#x27;*.json&#x27;</span><br><span class="line">      - &#x27;**.yml&#x27;</span><br><span class="line">      - &#x27;**.md&#x27;</span><br><span class="line">      - &#x27;**/source/**&#x27;</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  blog: # 任务名称</span><br><span class="line">    timeout-minutes: 10 # 设置 10 分钟超时</span><br><span class="line">    runs-on: ubuntu-latest # 指定最新 ubuntu 系统</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2 # 拉取仓库代码</span><br><span class="line">      - uses: actions/setup-node@v2 # 设置 node.js 环境</span><br><span class="line">      - name: Cache node_modules # 缓存 node_modules，提高编译速度，毕竟每月只有 2000 分钟。</span><br><span class="line">        uses: actions/cache@v2</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: ~/.npm</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line">      - name: Init Node.js # 安装源代码所需插件</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line">          echo &quot;init node successful&quot;</span><br><span class="line">      - name: Install Hexo-cli # 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          npm install -g hexo-cli --save</span><br><span class="line">          echo &quot;install hexo successful&quot;</span><br><span class="line">      - name: Build # 编译创建静态博客文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo g</span><br><span class="line">          echo &quot;build blog successful&quot;</span><br><span class="line">      - name: Deploy # 设置 git 信息并推送静态博客文件</span><br><span class="line">        uses: easingthemes/ssh-deploy@v2.1.1</span><br><span class="line">        env:</span><br><span class="line">          # 私钥id_rsa，存在secrets的PRIVATE_KEY中</span><br><span class="line">          SSH_PRIVATE_KEY: $&#123;&#123; secrets.PRIVATE_KEY &#125;&#125;</span><br><span class="line">          # 复制操作参数，&quot;-avzr --delete&quot;部署时清空服务器目标目录下的文件</span><br><span class="line">          ARGS: &quot;-avzr --delete&quot; </span><br><span class="line">          # 源目录，相对于$GITHUB_WORKSPACE根目录的路径</span><br><span class="line">          SOURCE: &quot;public/&quot;</span><br><span class="line">          REMOTE_HOST: &quot;www.triority.cc&quot;</span><br><span class="line">          REMOTE_USER: &quot;root&quot;</span><br><span class="line">          # 目标目录</span><br><span class="line">          TARGET: &quot;/blog_public&quot;</span><br><span class="line"></span><br><span class="line">      - run: echo &quot;Deploy Successful!&quot;</span><br></pre></td></tr></table></figure>
<p>然后在仓库设置密钥<code>PRIVATE_KEY</code>值为ssh私钥文件即可</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>博客文章编辑发布指南</title>
    <url>/2024/hexo-post-guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>博客采用静态hexo框架，基于node js，文章使用markdown语言进行编写。源文件保存于github仓库，使用git进行源码管理，使用github action自动化部署到远程服务器，并使用nginx提供对外服务。</p>
<h1 id="编辑权限"><a href="#编辑权限" class="headerlink" title="编辑权限"></a>编辑权限</h1><p>可以私信我或发邮件申请仓库编辑权限，或者直接在github仓库发起合并请求</p>
<h1 id="新建和编辑文章"><a href="#新建和编辑文章" class="headerlink" title="新建和编辑文章"></a>新建和编辑文章</h1><ul>
<li><code>git clone</code>下载github仓库源代码到本地</li>
<li>编辑文件内容或使用<code>hexo new [name]</code>新建一个web链接为name的文章，新建的文章保存为<code>/hexo/source/[year]/[name].md</code>，即可在其中使用markdown语言编写文章</li>
<li>提交你的更改并同步到github仓库</li>
<li>github action自动进行网站内容的生成和部署，等待三五分钟左右即可打开网站查看更改。如果<code>build</code>出现报错<code>err: Error: ENOENT: no such file or directory, open &#39;./search.xml&#39;</code>请直接重试，仍然报错基本上markdown语法错误，请再次检查你的更改</li>
</ul>
<h1 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h1><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: [name]</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> null</span><br><span class="line">cover: /img/RUN.png</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> - 值得一提的文章</span><br><span class="line"><span class="bullet">  -</span> - 旅游&amp;摄影</span><br><span class="line"><span class="bullet">  -</span> - 日记本</span><br><span class="line"><span class="bullet">  -</span> - 整活&amp;游戏</span><br><span class="line"><span class="bullet">  -</span> - 文档&amp;笔记</span><br><span class="line"><span class="bullet">  -</span> - 折腾记录</span><br><span class="line"><span class="bullet">  -</span> - 作品&amp;项目总结</span><br><span class="line"><span class="bullet">  -</span> - 过时&amp;弃用&amp;无意义&amp;失败品</span><br><span class="line"><span class="bullet">  -</span> - 外部引用</span><br><span class="line"><span class="bullet">  -</span> - 无线电</span><br><span class="line">date: 2024-07-22 18:44:51</span><br><span class="line"><span class="section">description:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建的文章文件就包含上面的内容：</p>
<ul>
<li>title:文章标题，默认为设置的文章链接，可以修改为其他文字，可以为中文</li>
<li>tags:文章标签，可以参考标签页已有的进行设置，也可以新建自己的。如果不想设置请直接删除这一配置项</li>
<li>cover:文章封面图。文章封面图片统一保存于<code>hexo/source/img/</code>内</li>
<li>categories:文章分类，设置方法类似tag</li>
<li>data:文件新建时间，自动生成。主页文章排序依靠时间，修改为较大的值可用于置顶文章，但是一般不建议设置置顶</li>
<li>description:简介描述。随便写两句话介绍一下就好。建议在此处加入文章作者信息(如果不是Triority本人编辑的话)</li>
</ul>
<p>编辑完成应该类似这样，以本篇文章为例：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客文章编辑发布指南</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> hexo</span><br><span class="line"><span class="bullet">  -</span> 文档</span><br><span class="line">cover: /img/RUN.png</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 文档&amp;笔记</span><br><span class="line">date: 2024-07-22 18:33:41</span><br><span class="line"><span class="section">description: 博客帮助文件</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<div class="note danger modern"><p>不需要的配置项记得删除，比如你不想写description就把这一行全都删掉，否则文件生成会报错。<br>如果你添加了新的categories，请编辑模板文件加上你新增的分类字符串，模板文件位于<code>/hexo/scaffolds/post.md</code></p>
</div>

<h1 id="内容编辑"><a href="#内容编辑" class="headerlink" title="内容编辑"></a>内容编辑</h1><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p>markdown语言语法请自行学习，初期使用不熟练推荐使用开源项目：<a href="https://pandao.github.io/editor.md/">Editor.md</a></p>
<h2 id="资源文件路径"><a href="#资源文件路径" class="headerlink" title="资源文件路径"></a>资源文件路径</h2><p>新建文章时，除了文章的文本文件<code>/hexo/source/[year]/[name].md</code>同时还会新建<code>/hexo/source/[year]/[name]</code>文件夹，对于在文章中使用的文件，均应保存在此处，包括图片，文件等内容。调用时直接使用文件名即可。</p>
<p>例如文章中添加的图片<code>![](img.img)</code>，图片<code>img.img</code>直接保存在上述文件夹即可，文件同理</p>
<h2 id="标签外挂等特殊语法"><a href="#标签外挂等特殊语法" class="headerlink" title="标签外挂等特殊语法"></a>标签外挂等特殊语法</h2><p>这里只说一些常用的，因为标签外挂语法太多了，参见<a href="https://butterfly.js.org/posts/2df239ce/">文档</a></p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用插件的语法</span><br><span class="line">&#123;% asset_img xxx.png 描述 %&#125;</span><br><span class="line">//Markdown语法</span><br><span class="line">![描述](xxx.png)</span><br></pre></td></tr></table></figure>

<h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=wwww.xxx.cn/xxx.mp4&quot; %&#125;</span><br><span class="line">&#123;% dplayer &quot;url=/video/xxx.mp4&quot; %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="站内跳转"><a href="#站内跳转" class="headerlink" title="站内跳转"></a>站内跳转</h3><p>虽然可以直接使用markdown超链接直接跳转，但是不建议这样做。因为一旦更改了域名所有文章内的链接都将失效。建议使用<code>post_link</code>标签。<a href="https://hexo.io/docs/tag-plugins#Include-Posts">官方文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure>

<p>这样就会跳转到文件名为<code>filename.md</code>的文章，并显示标题为<code>[title]</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link CQWWRTTY2024 &#x27;RTTY竞赛&#x27; %&#125;</span><br></pre></td></tr></table></figure>

<a href="/2024/CQWWRTTY2024/" title="RTTY竞赛">RTTY竞赛</a>

<h3 id="并排的图片"><a href="#并排的图片" class="headerlink" title="并排的图片"></a>并排的图片</h3><p>并排图片一般使用表格来表示格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| ![](1.png) | ![](2.png) | ![](3.png) |</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">| str1 | str2 | str3 |</span><br></pre></td></tr></table></figure>

<p>如果图片宽度不一致可能导致看起来很奇怪，如果不想手动改变图片尺寸，可以直接在表格新增一行相同的超级长的假图片，就可以让表格均分宽度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| ![](1.png) | ![](2.png) | ![](3.png) |</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">| str1 | str2 | str3 |</span><br><span class="line">| &lt;img width=2000/&gt; | &lt;img width=2000/&gt; | &lt;img width=2000/&gt; |</span><br></pre></td></tr></table></figure>


<h3 id="文件下载链接"><a href="#文件下载链接" class="headerlink" title="文件下载链接"></a>文件下载链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[文字](xxx.zip)</span><br></pre></td></tr></table></figure>
<h3 id="哔哩哔哩视频"><a href="#哔哩哔哩视频" class="headerlink" title="哔哩哔哩视频"></a>哔哩哔哩视频</h3><p>需要替换的内容：<code>src</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=727587109&amp;bvid=BV1LS4y1v7Nj&amp;cid=748560556&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; height: 100%; Left: 0; top: 0;&quot; &gt;&lt;/iframe&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="特殊提示"><a href="#特殊提示" class="headerlink" title="特殊提示"></a>特殊提示</h3><div class="note danger modern"><p>DANGER!!!</p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">DANGER!!!</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>


<h3 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h3><details>
  <summary>来点击我</summary>
  于是我就被展开啦
</details>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;点击时的区域标题&lt;/summary&gt;</span><br><span class="line">  xxx</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>

<h3 id="小黑块"><a href="#小黑块" class="headerlink" title="小黑块"></a>小黑块</h3><p>这是什么？哦原来<!-- spoiler-1ffd9:black -->
  <span class="spoiler" onclick="this.classList.toggle('spoiler')">
    <span class="spoiler-box spoiler-1ffd9">这是一个小黑块</span>
  </span>哦！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% spoiler 被遮挡文字 %&#125;</span><br></pre></td></tr></table></figure>


<h1 id="文件生成和git提交"><a href="#文件生成和git提交" class="headerlink" title="文件生成和git提交"></a>文件生成和git提交</h1><p>文章编辑完成之后，在<code>/hexo</code>目录打开终端，输入<code>hexo g</code>进行html文件生成，如果报错请检查文章内是否有语法错误，特别是文章配置部分。</p>
<p>如果报错为以下内容，无需理会重新执行<code>hexo g</code>就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    errno: -2,</span><br><span class="line">    syscall: &#x27;open&#x27;,</span><br><span class="line">    code: &#x27;ENOENT&#x27;,</span><br><span class="line">    path: &#x27;./search.xml&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line">root@iZj6c9vpc0x2q5gkwla1erZ:/hexo#</span><br></pre></td></tr></table></figure>

<p>然后进行git提交和推送。别忘记这一步，git已经拯救了好几次这个博客</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>非常离谱的MC服务端启动程序</title>
    <url>/2024/minecraft-server-launcher/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本来是想写一个服务端自动重启的，但是闲的没事往里加了点别的功能，比如自动启动frp内网穿透，以及没有任何意义的等待进度条。如果以后更加无聊也许会往里增加更多没卵用的功能，比如frp的控制？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># minecraft</span></span><br><span class="line">server_jar_path = <span class="string">&quot;server.jar&quot;</span></span><br><span class="line">java_Xms = <span class="string">&quot;1024M&quot;</span></span><br><span class="line">java_Xmx = <span class="string">&quot;4096M&quot;</span></span><br><span class="line"><span class="comment"># frp</span></span><br><span class="line">frp_enable = <span class="literal">True</span></span><br><span class="line">frp_dir_path = <span class="string">&quot;frpc\\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># something useless</span></span><br><span class="line"><span class="keyword">import</span> os,time,sys</span><br><span class="line">GREEN_TEXT = (<span class="string">&#x27;\033[92m&#x27;</span>, <span class="string">&#x27;\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frp_thread_func</span>(<span class="params">frp_dir_path</span>):</span><br><span class="line">    <span class="built_in">print</span> (GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Frpc thread starting&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">    os.system(<span class="string">&quot;.\\&quot;</span> + frp_dir_path+ <span class="string">&quot;frpc -c &quot;</span> + frp_dir_path + <span class="string">&quot;frpc.ini&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> frp_enable:</span><br><span class="line">    <span class="keyword">import</span> _thread</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _thread.start_new_thread(frp_thread_func, (frp_dir_path, ))</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Frp thread Error&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress_bar</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Waiting: &#123;&#125;%: &quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;▋&quot;</span> * (i // <span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Minecraft server Starting: ----- &quot;</span> + time.asctime(time.localtime(time.time())) + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.system(<span class="string">&quot;java -Xmx&quot;</span> + java_Xmx + <span class="string">&quot; -Xms&quot;</span> + java_Xms + <span class="string">&quot; -jar &quot;</span> + server_jar_path + <span class="string">&quot; nogui&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;ERROR, Stopped&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Server Stopped. Restart in 5 seconds. Press Ctrl+C to exit.&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">        progress_bar()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;EXIT&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">        exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实现效果：<br><img src="/2024/minecraft-server-launcher/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240520212634.png"></p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Orange pi 5 plus开发板在ubuntu系统下使用docker安装openwrt</title>
    <url>/2024/orangepi5plus-openwrt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h1><p>香橙派新出了一个orangepi 5 plus，外设非常适合日常折腾，两个2.5G网口，两个USB3.0，还有pciex4的2280规格m2硬盘接口，算力也是足够强大，CPU是著名的RK3588，NPU算力6TOP，完全可以胜任绝大多数任务。于是入手一个8G内存版本，可以作为软理由+NAS，日常挂载一些服务也毫无压力</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2024/orangepi5plus-openwrt/pi5-plus-17.png"></th>
<th align="center"><img src="/2024/orangepi5plus-openwrt/pi5-plus-16.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">正面</td>
<td align="center">背面</td>
</tr>
</tbody></table>
<p>原计划是作为主路由用的，但是由于没有认真阅读官方文档，官方出售的orangepi5plus专用网卡是不支持openwrt镜像的，本来想自己打个驱动，然后看了一下发现官方没做支持是有原因的。只好拿来做旁路由，除非再去买支持的ax200或ax210芯片的网卡</p>
<h1 id="在docker内安装openwrt"><a href="#在docker内安装openwrt" class="headerlink" title="在docker内安装openwrt"></a>在docker内安装openwrt</h1><p>这是我第一次使用docker，但是配置过程还算顺利，指只折腾我一个下午然后发现原因是ip写错了才不能用</p>
<p>首先拉取docker镜像，我使用的镜像是这个:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hub.docker.com/r/sulinggg/openwrt</span><br></pre></td></tr></table></figure>
<p>作者还为我们提供了不同CPU架构下的阿里云镜像站地址，RK3588是ARMv8架构，so</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:armv8</span><br></pre></td></tr></table></figure>
<p>然后开始网路配置，打开网卡混杂模式，首先查看网卡名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@orangepi5plus:~# ifconfig</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:2e:0e:eb:05  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enP3p49s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether c0:74:2b:fe:72:fc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 142</span><br><span class="line"></span><br><span class="line">enP4p65s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.125  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::42e5:883e:acef:1760  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether c0:74:2b:fe:72:fd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 32116  bytes 6923836 (6.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 51813  bytes 23028566 (23.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 154</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 29409  bytes 19939785 (19.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 29409  bytes 19939785 (19.9 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlP2p33s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether c2:4b:24:c1:3e:d4  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether c0:4b:24:c1:3e:d4  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>可以看出设备的网卡<code>enP4p65s0</code>及当前的IP地址是<code>192.168.1.125</code>，然后打开这个网卡的混杂模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ip link set enP4p65s0 promisc on </span><br></pre></td></tr></table></figure>
<p>然后为未来的容器创建一个网络：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=enP4p65s0 macnet</span><br></pre></td></tr></table></figure>
<p>如果网段不一致要修改成使用环境下的网段</p>
<p>然后就可以创建和启动容器了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:armv8 /sbin/init</span><br></pre></td></tr></table></figure>
<p>这是设置了容器总是自动重启，名称为<code>openwrt</code>，<code>-d</code>参数为容器运行在 Daemon 模式，加入<code>macnet</code>网络，<code>--privileged</code> 参数定义容器运行在特权模式下，启动命令是<code>/sbin/init</code></p>
<p>接下来进入容器，修改相关配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it openwrt bash</span><br></pre></td></tr></table></figure>
<p>首先，我们需要编辑 OpenWrt 的网络配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/config/network</span><br></pre></td></tr></table></figure>
<p>更改 Lan 口设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">        option type &#x27;bridge&#x27;</span><br><span class="line">        option ifname &#x27;eth0&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.1.126&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ip6assign &#x27;60&#x27;</span><br><span class="line">        option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">        option broadcast &#x27;192.168.1.255&#x27;</span><br><span class="line">        option dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure>
<p>注意由于已经在容器的虚拟环境下这时的网卡已经是<code>eth0</code>，以及<code>ipaddr</code>是访问<code>openwrt</code>的地址而不是开发板本身的地址，开发板是<code>192.168.1.125</code>，为了方便我就给<code>openwrt</code>地址<code>192.168.1.126</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash-5.1# ifconfig</span><br><span class="line">br-lan    Link encap:Ethernet  HWaddr 02:42:C0:A8:01:02</span><br><span class="line">          inet addr:192.168.123.100  Bcast:192.168.123.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:34 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:58 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:2648 (2.5 KiB)  TX bytes:6292 (6.1 KiB)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:01:02</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:37 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:59 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:3304 (3.2 KiB)  TX bytes:7335 (7.1 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:20 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:20 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:1760 (1.7 KiB)  TX bytes:1760 (1.7 KiB)</span><br></pre></td></tr></table></figure>
<p>重启网络：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure>
<p>之后就可以打开<code>192.168.1.126</code>的openwrt后台了，默认账号<code>root</code>密码<code>password</code>、</p>
<h1 id="openwrt配置"><a href="#openwrt配置" class="headerlink" title="openwrt配置"></a>openwrt配置</h1>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>香橙派</tag>
      </tags>
  </entry>
  <entry>
    <title>在vscode中使用c语言开发raspberry-pico</title>
    <url>/2024/raspberry-pico-c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工具链环境安装"><a href="#工具链环境安装" class="headerlink" title="工具链环境安装"></a>工具链环境安装</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://www.raspberrypi.com/news/raspberry-pi-pico-windows-installer/">官方教程</a></p>
<p><a href="https://github.com/raspberrypi/pico-setup-windows">安装程序仓库</a></p>
<p>在仓库readme中<a href="https://github.com/raspberrypi/pico-setup-windows/releases/latest/download/pico-setup-windows-x64-standalone.exe">Download the latest release</a></p>
<p>程序安装完成后，打开位于开始菜单的<code>Raspberry Pi Pico SDK v1.5.1</code>文件夹，运行里面的<code>Pico - Visual Studio Code</code>。会自动启动vscode打开保存在我的文档中的<code>pico-examples</code>文件夹，并询问使用的编译设置，选择<code>带有 GCC arm-none-eabi 条目的 Pico ARM GCC - Pico SDK 工具链</code>。</p>
<p>添加环境变量：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody><tr>
<td><code>PICO_SDK_PATH</code></td>
<td><code>C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk</code></td>
</tr>
<tr>
<td><code>PICO_EXAMPLES_PATH</code></td>
<td><code>C:\Users\Triority\Documents\Pico-v1.5.1\pico-examples</code></td>
</tr>
</tbody></table>
<h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>新建文件夹，打开<code>powershell</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> <span class="variable">$</span>&#123;env:PICO_SDK_PATH&#125;\external\pico_sdk_import.cmake .</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> <span class="variable">$</span>&#123;env:PICO_EXAMPLES_PATH&#125;\.vscode . <span class="literal">-recurse</span></span><br></pre></td></tr></table></figure>
<p>新建一个<code>CMakeLists.txt</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.13)</span><br><span class="line"></span><br><span class="line"># initialize the SDK based on PICO_SDK_PATH</span><br><span class="line"># note: this must happen before project()</span><br><span class="line">include(pico_sdk_import.cmake)</span><br><span class="line"></span><br><span class="line">project(my_project)</span><br><span class="line"></span><br><span class="line"># initialize the Raspberry Pi Pico SDK</span><br><span class="line">pico_sdk_init()</span><br><span class="line"></span><br><span class="line"># rest of your project</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>About the simplest you can do is a single source file (e.g. hello_world.c)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pico/stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setup_default_uart();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加到<code>CMakeLists.txt</code>文件的末尾：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_executable(hello_world</span><br><span class="line">    hello_world.c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Add pico_stdlib library which aggregates commonly used features</span><br><span class="line">target_link_libraries(hello_world pico_stdlib)</span><br><span class="line"></span><br><span class="line"># create map/bin/hex/uf2 file in addition to ELF.</span><br><span class="line">pico_add_extra_outputs(hello_world)</span><br></pre></td></tr></table></figure>

<p>在开始菜单的<code>Pico - Visual Studio Code</code>打开刚才的文件夹即可，点击左下角的生成，会询问编译器配置，直接选择之前一样的<code>Pico ARM GCC - Pico SDK Toolchain with GCC arm-none-eabi entry</code>，如果编译成功到此配置完成</p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>树莓派</tag>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>SDR使用FT8模式通联信号接收</title>
    <url>/2024/sdr-ft8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FT8简介"><a href="#FT8简介" class="headerlink" title="FT8简介"></a>FT8简介</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FT8 于 2017 年 7 月推出，由 Steve Franke ，K9AN 和 Bill Somerille，G4WJS 制作。</span><br><span class="line">设计用于 6 米波段的突发 E 层通联，然后被引入短波，迅速风靡全球。</span><br><span class="line">和 JT65 一样，它不适合随意聊天，仅仅是为了完成最基本的通联</span><br><span class="line"></span><br><span class="line">FT8 极强的弱信号通联为很多短波爱好者提供了更多的 DX 机会。</span><br><span class="line">FT8 减少了人类活动的参与，降低了错误的出现，效率极高。</span><br><span class="line">可以在很短的时间内获取更多的 DXCC。7天时间完成DXCC100，FT8创造奇迹</span><br><span class="line"></span><br><span class="line">---- BH4IWK</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">场景：BG2KSI在PN33进行CQ，BG2XXX在PN35抄收并回复，并假定双方接收的信号报告均为-10</span><br><span class="line">BG2KSI：CQ BG2KSI PN33</span><br><span class="line">BG2XXX：BG2KSI BG2XXX PN35</span><br><span class="line">BG2KSI：BG2XXX BG2KSI -10</span><br><span class="line">BG2XXX：BG2KSI BG2XXX R -10</span><br><span class="line">BG2KSI：BG2XXX BG2KSI RR 73</span><br><span class="line">BG2XXX：BG2KSI BG2XXX 73</span><br><span class="line"></span><br><span class="line">以上内容含义如下：</span><br><span class="line">BG2KSI：CQ 我是BG2KSI 我的位置是PN33</span><br><span class="line">BG2XXX：BG2KSI 我是BG2XXX 我的位置是PN35</span><br><span class="line">BG2KSI：BG2XXX 我是BG2KSI 我收到你的信号报告为-10</span><br><span class="line">BG2XXX：BG2KSI 我是BG2XXX 收到 我收到你的信号报告为-10</span><br><span class="line">BG2KSI：BG2XXX 我是BG2KSI 收到收到 73</span><br><span class="line">BG2XXX：BG2KSI 我是BG2XXX 73</span><br><span class="line"></span><br><span class="line">---- BG2KSI</span><br></pre></td></tr></table></figure>

<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><ul>
<li>SDRuno(SDR信号接收)</li>
<li><a href="VBCABLE_Driver_Pack43.zip">VB-Audio cable(虚拟声卡)</a></li>
<li>JTDX(FT8信号解码)</li>
<li>GridTracker(可选，网格可视化)</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>QTH：北京市海淀区学院路某楼9层向东阳台<br>SDR：RSP1(BG7YZF)<br>ANT：有源小环天线(BG7YZF)<br>FREQ：10.136MHz<br>TIME：文章创建时间</p>
<p><img src="/2024/sdr-ft8/88057845a059ca6c10a9feb6498515d.png"></p>
<p>可能是天线朝向原因收到几个十分活跃的日本友台，以及一些中国韩国俄罗斯友台</p>
<p>第一次尝试不过感觉有点怪，虽然FT8据说十分流行，但是通联成为了电脑全自动完成的过程还是少了很多乐趣，不过FT8的弱信号接收能力是真的强，这一点真的离谱</p>
<p><img src="/2024/sdr-ft8/c7c9077c6632ce35692c4fa5dcf36b9.png"></p>
<p>要是SSB模式你跟我说这是有信息？？？</p>
]]></content>
      <categories>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>sdruno使用说明</title>
    <url>/2024/sdruno/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sdr-Software-Defined-Radio-设备"><a href="#sdr-Software-Defined-Radio-设备" class="headerlink" title="sdr(Software Defined Radio)设备"></a>sdr(Software Defined Radio)设备</h1><p>前段时间买了RSP1接收机，搭配天线是直径大概在40cm的小环有源天线(用于短波段)挂在我宿舍的衣柜上，然后从<code>BI1PTK</code>那里白嫖了一根大概45cm的中心频率在u段和v段玻璃钢天线，架设在宿舍阳台上。</p>
<h1 id="sdr软件"><a href="#sdr软件" class="headerlink" title="sdr软件"></a>sdr软件</h1><p>sdr常用软件一般是<code>sdr#</code>(sdrsharp)和<code>sdruno</code>，sdr#有汉化版本，但是由于某些未知原因我的电脑使用sdr#无法读取到sdr设备，因此只能使用sdruno。</p>
<p><code>sdruno</code>是<code>sdrplay</code>官方支持的接收软件，但是没有中文版本，而且功能按钮众多难以记忆，广泛流传的中文说明明显是机器翻译难以使用，因此写一篇常用功能的使用说明。</p>
<p><code>sdruno</code>的GUI：</p>
<p><img src="/2024/sdruno/8ee1a3e43724e841907bb7aff58b8b2.png"></p>
<h1 id="操作面板"><a href="#操作面板" class="headerlink" title="操作面板"></a>操作面板</h1><h2 id="main-主控面板"><a href="#main-主控面板" class="headerlink" title="main(主控面板)"></a>main(主控面板)</h2><p><img src="/2024/sdruno/main.png"></p>
<p>最上面的<code>PLUGINS</code>可以打开<a href="#plugins%E6%8F%92%E4%BB%B6%E5%B7%B2%E5%8A%A0%E8%BD%BDrec%E6%8F%92%E4%BB%B6">插件面板</a></p>
<p>左上角的<code>OPT</code>可以修改操作面板设置，例如将窗口恢复默认排布。当你调整好了窗口之后可以按<code>ctrl+w</code>保存你当前的窗口设置。<code>SCAN``SCHEDULER``SP1``SP2``RX</code>分别可以打开其他几个窗口，分别是扫描器大小瀑布和接收控制面板</p>
<p>右侧<code>ADD VRX</code>和<code>DEL VRX</code>可以在同频段内设置多个收听频率。<br><code>LO LOCK</code>可以锁定瀑布中的频率选择线。开关可以选择是移动频率选择线还是水平频率坐标轴。</p>
<p><code>IF MODE</code>设置为<code>ZIF</code>时可以在右侧调节总频宽(图中为10M宽度)</p>
<p><code>PLAY</code>和<code>STOP</code>可以打开必应翻译查看按键功能。</p>
<h2 id="rx-control-接收控制"><a href="#rx-control-接收控制" class="headerlink" title="rx control(接收控制)"></a>rx control(接收控制)</h2><p><img src="/2024/sdruno/rx.png"></p>
<p>上面最显眼的就是频率，可以鼠标滚轮调节每一位数字。下面可以选择各种接收模式，<code>AM</code>调幅，<code>SAM</code>，<code>FM</code>调频，<code>CW</code>短幅报，<code>DSB</code>双边带<code>LSB</code>下边带<code>USB</code>上边带，<code>DIGTIAL</code>数字模式</p>
<p>如果选择<code>FM</code>下面需要选择<code>NFM</code>还是<code>WFM</code>等，每种模式都有自己的滤波器设置和宽度</p>
<p>如果选择<code>CW</code>下面的<code>CW OP</code>可以设置</p>
<p>右侧<code>FILTER</code>可以设置信号宽度</p>
<p><code>NB</code>可以选择</p>
<p>最右侧<code>NORCH</code>陷波器可以添加最多四个陷波器</p>
<p>左下侧<code>MUTE</code>可以一键静音</p>
<p><code>SQLC</code>可以设置静噪，<code>VOLUME</code>设置音量</p>
<p>右下侧<code>AGC</code>是自动增益控制</p>
<p>面板最右侧可以快捷调整接收波段</p>
<h2 id="rx-ex-其他接收控制选项"><a href="#rx-ex-其他接收控制选项" class="headerlink" title="rx ex(其他接收控制选项)"></a>rx ex(其他接收控制选项)</h2><p><img src="/2024/sdruno/rx_ex.png"></p>
<p>中间几个滑块，<code>AGC</code>,<code>NB</code>一般保持默认即可，<code>NR</code>降噪效果取决于信号强度</p>
<p><code>DEEM</code>是去重控制，除美国外一般设置<code>50us</code></p>
<p><code>AFC</code>是自动频率控制，可以追踪中心频点</p>
<p><code>MONO</code>是在SFM模式中关闭立体声接收</p>
<p><code>FMS-NR</code>是FM立体声降噪</p>
<p><code>PDBPF</code>带通滤波器可以设置音频输出频率范围到<code>LC</code>和<code>HC</code>，可以用于去除模拟哑音信号</p>
<h2 id="main-sp-大瀑布"><a href="#main-sp-大瀑布" class="headerlink" title="main sp(大瀑布)"></a>main sp(大瀑布)</h2><p><img src="/2024/sdruno/main_sp.png"></p>
<p>左上的<code>sett</code>可以设置瀑布图的对比度增益刷新速度等，下面的<code>SP</code>,<code>WF</code>,<code>SP+WF</code>设置显示频谱或者瀑布图或二者都显示，<code>COMBO</code>是叠加显示</p>
<p>放大时点击<code>VFO</code>可以将中心频点设置为屏幕中央</p>
<h2 id="aux-sp-小瀑布"><a href="#aux-sp-小瀑布" class="headerlink" title="aux sp(小瀑布)"></a>aux sp(小瀑布)</h2><p><img src="/aux.png"></p>
<p>这里显示的是音频频谱，与大瀑布非常相似</p>
<p>点击<code>F</code>只显示过滤后的音频信号，点击<code>FMAF</code>将显示FM信号</p>
<h2 id="plugins-插件-已加载rec插件"><a href="#plugins-插件-已加载rec插件" class="headerlink" title="plugins(插件,已加载rec插件)"></a>plugins(插件,已加载rec插件)</h2><p><img src="/2024/sdruno/plugins_rec.png"></p>
<p>插件就没什么好说的了用哪个就去安装然后load，图片右边是录音插件，只有一项提一嘴，<code>Use Squesch</code>开关控制静噪录音，勾选后信号只有高于静噪强度之后才会开启录音</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>Surface Pro使用rEFind引导Windows和Ubuntu双系统</title>
    <url>/2024/surface-rEFind/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><p>最近换了新的平板，从surface pro 7 i5 8+128G换成了surface pro 7 plus i7 16+512G，可以说是解决了以前一切的使用痛点(也许有个LTE会更加完美?但是不太必要)，由于windows系统无与伦比的巨大功耗，准备再分出64G安装一个ubuntu用于应急情况</p>
<p>写这篇文章还有一个原因就是在我大一刚买电脑时候参考的C**N上一篇很好的双系统安装教程文章现在改成收费了，让我十分不爽，也重新写一份给入门的同学们看，最后有关surface的特定内容忽略就好。关于双系统中Ubuntu系统的卸载可以参考<a href="https://triority.cc/2022/windows-ubuntu-uninstall/">这篇之前的文章</a><!-- spoiler-1ffd9:black -->
  <span class="spoiler" onclick="this.classList.toggle('spoiler')">
    <span class="spoiler-box spoiler-1ffd9">（这篇文章的结尾还有C**N那篇文章的链接）</span>
  </span></p>
<h1 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h1><p>提前准备了一个64G空白位置用于安装ubuntu22.04 LTS系统，启动盘制作好后，在按下音量+的时候按电源键开机，直到进入BIOS松开音量键，设置U盘启动，关闭安全启动(如果你有)，进入ubuntu安装程序。</p>
<div class="note warning disabled"><p>安全启动(Secureboot)仅允许受信任的系统在Surface上启动，安装非windows系统会无法直接启动<br>一旦关闭安全启动，如果你开启了bitlocker进入windows系统需要输入密钥，而且windows hello无法使用。<br>后面会写如何打开安全启动情况下使用linux</p>
</div>

<p>安装程序中一路continue在<code>install type</code>界面中选择<code>Something else</code>，然后<code>continue</code>，设置系统分区。</p>
<p>找到刚才留出的64G空间，也就是显示的<code>free space</code>，选择后点击加号新建分区。需要新建的分区如下：</p>
<ul>
<li><code>/swap</code>交换分区作为虚拟内存，逻辑分区，一般内存8G甚至更小的需要给8-16G左右，16G及以上看自己情况，我觉得我不需要所以没有设置</li>
<li><code>/boot</code>分区放置Ubuntu的启动引导文件，逻辑分区，默认ext4，大小512M即可</li>
<li><code>/</code> 根目录，逻辑分区，默认ext4，如果你不打算单独分出<code>/home</code>分区那么剩下的空间都给这里，否则给个几十G就足够了(如果你的总空间比较小给十几G也可以总之大概1&#x2F;4吧)</li>
<li><code>/home</code>用户目录，默认ext4，如果你单独设置了这个路径，那么剩下的空间都给这里就可以了</li>
</ul>
<p>然后下面<code>Device for boot loader installation</code>选择刚才设置的<code>/boot</code>的设备，我这里是<code>/dev/nvme0n1p5</code>然后继续continue，直到系统安装完成</p>
<p>如果你只是想安装一个双系统而不想用rEFind，可以用ubuntu来引导Windows启动，但是这样每次进入都会默认选择第一项进入ubuntu。我们可以把它改成保存上次设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/default/grub</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># If you change this file, run &#x27;update-grub&#x27; afterwards to update</span><br><span class="line"># /boot/grub/grub.cfg.</span><br><span class="line"># For full documentation of the options in this file, see:</span><br><span class="line">#   info -f grub -n &#x27;Simple configuration&#x27;</span><br><span class="line"># 下面这个默认是0改成saved即可</span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_TIMEOUT_STYLE=hidden</span><br><span class="line"># 这个是等待时间，默认10s没啥必要改成3了</span><br><span class="line">GRUB_TIMEOUT=3 </span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment to enable BadRAM filtering, modify to suit your needs</span><br><span class="line"># This works with Linux (no patch required) and with any kernel that obtains</span><br><span class="line"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)</span><br><span class="line">#GRUB_BADRAM=&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment to disable graphical terminal (grub-pc only)</span><br><span class="line">#GRUB_TERMINAL=console</span><br><span class="line"></span><br><span class="line"># The resolution used on graphical terminal</span><br><span class="line"># note that you can use only modes which your graphic card supports via VBE</span><br><span class="line"># you can see them in real GRUB with the command `vbeinfo&#x27;</span><br><span class="line">#GRUB_GFXMODE=640x480</span><br><span class="line"></span><br><span class="line"># Uncomment if you don&#x27;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux</span><br><span class="line">#GRUB_DISABLE_LINUX_UUID=true</span><br><span class="line"></span><br><span class="line"># Uncomment to disable generation of recovery mode menu entries</span><br><span class="line">#GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment to get a beep at grub start</span><br><span class="line">#GRUB_INIT_TUNE=&quot;480 440 1&quot;</span><br></pre></td></tr></table></figure>
<h1 id="安装rEFind"><a href="#安装rEFind" class="headerlink" title="安装rEFind"></a>安装rEFind</h1><p>rEFInd是一个非常好看好用的UEFI启动管理器，如果不用第三方引导，启动windows要么先启动ubuntu然后选择启动windows，要么BIOS设置windows优先然后每次启动ubuntu都要修改bios(然后再改回去十分离谱不建议)</p>
<p>rEFind在ubuntu或windows都可以安装，但是在windows下极其麻烦，强烈建议在ubuntu安装，下面也是这样做的。</p>
<p>进入ubuntu系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:rodsmith/refind  	</span><br><span class="line">sudo apt-get update  	</span><br><span class="line">sudo apt-get install refind</span><br></pre></td></tr></table></figure>
<p>安装过程中会有一些询问，不用看直接yes就好</p>
<p>完成到这一步，电脑默认会首选<code>rEFInd</code>引导，如果没有，去BIOS中设置一下引导顺序为<code>rEFind</code>优先</p>
<p>现在其实已经可以使用了，但是比较丑陋，所以接下来我们安装一个主题来美化</p>
<h1 id="可选-美化：rEFind主题设置"><a href="#可选-美化：rEFind主题设置" class="headerlink" title="(可选)美化：rEFind主题设置"></a>(可选)美化：rEFind主题设置</h1><h2 id="配置文件信息"><a href="#配置文件信息" class="headerlink" title="配置文件信息"></a>配置文件信息</h2><p><code>rEFind</code>的配置信息位于<code>/boot/efi/EFI/refind/refind.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># refind.conf</span><br><span class="line"># Configuration file for the rEFInd boot menu</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line"># Timeout in seconds for the main menu screen. Setting the timeout to 0</span><br><span class="line"># disables automatic booting (i.e., no timeout). Setting it to -1 causes</span><br><span class="line"># an immediate boot to the default OS *UNLESS* a keypress is in the buffer</span><br><span class="line"># when rEFInd launches, in which case that keypress is interpreted as a</span><br><span class="line"># shortcut key. If no matching shortcut is found, rEFInd displays its</span><br><span class="line"># menu with no timeout.</span><br><span class="line">#</span><br><span class="line">#设置默认等待时间为5s</span><br><span class="line">#timeout 0代表无限等待 timeout -1代表立即进入对应的系统</span><br><span class="line">timeout 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set the screen&#x27;s video resolution. Pass this option either:</span><br><span class="line">#  * two values, corresponding to the X and Y resolutions</span><br><span class="line">#  * one value, corresponding to a GOP (UEFI) video mode</span><br><span class="line"># Note that not all resolutions are supported. On UEFI systems, passing</span><br><span class="line"># an incorrect value results in a message being shown on the screen to</span><br><span class="line"># that effect, along with a list of supported modes. On EFI 1.x systems</span><br><span class="line"># (e.g., Macintoshes), setting an incorrect mode silently fails. On both</span><br><span class="line"># types of systems, setting an incorrect resolution results in the default</span><br><span class="line"># resolution being used. A resolution of 1024x768 usually works, but higher</span><br><span class="line"># values often don&#x27;t.</span><br><span class="line"># Default is &quot;0 0&quot; (use the system default resolution, usually 800x600).</span><br><span class="line">#</span><br><span class="line">#分辨率设置，我建议这里别动，上面注释中也说了。1024*768以上的分辨率并不支持，我是默认的，没动它，所以没事别自己搞个1920 1080（更新：可用）</span><br><span class="line">#resolution 1024 768</span><br><span class="line">#resolution 1440 900</span><br><span class="line">#resolution 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Directories that should NOT be scanned for boot loaders. By default,</span><br><span class="line"># rEFInd doesn&#x27;t scan its own directory, the EFI/tools directory, the</span><br><span class="line"># EFI/memtest directory, the EFI/memtest86 directory, or the</span><br><span class="line"># com.apple.recovery.boot directory. Using the dont_scan_dirs option</span><br><span class="line"># enables you to &quot;blacklist&quot; other directories; but be sure to use &quot;+&quot;</span><br><span class="line"># as the first element if you want to continue blacklisting existing</span><br><span class="line"># directories. You might use this token to keep EFI/boot/bootx64.efi out</span><br><span class="line"># of the menu if that&#x27;s a duplicate of another boot loader or to exclude</span><br><span class="line"># a directory that holds drivers or non-bootloader utilities provided by</span><br><span class="line"># a hardware manufacturer. If a directory is listed both here and in</span><br><span class="line"># also_scan_dirs, dont_scan_dirs takes precedence. Note that this</span><br><span class="line"># blacklist applies to ALL the filesystems that rEFInd scans, not just</span><br><span class="line"># the ESP, unless you precede the directory name by a filesystem name or</span><br><span class="line"># partition unique GUID, as in &quot;myvol:EFI/somedir&quot; to exclude EFI/somedir</span><br><span class="line"># from the scan on the myvol volume but not on other volumes.</span><br><span class="line">#</span><br><span class="line">#这部分看注释的意思，应该是不扫描ESP分区的某些文件夹，我自己为了去除某些多余</span><br><span class="line">#的启动项，于是设置了dont_scan_dirs ESP:/EFI/ubuntu，但不知道为什么，没有用，启动项里仍会出现Ubuntu的引导项，所以我不建议在这部分选择屏蔽引导项.</span><br><span class="line">#dont_scan_dirs ESP:/EFI/boot,EFI/Dell,EFI/memtest86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Files that should NOT be included as EFI boot loaders (on the</span><br><span class="line"># first line of the display). If you&#x27;re using a boot loader that</span><br><span class="line"># relies on support programs or drivers that are installed alongside</span><br><span class="line"># the main binary or if you want to &quot;blacklist&quot; certain loaders by</span><br><span class="line"># name rather than location, use this option. Note that this will</span><br><span class="line"># NOT prevent certain binaries from showing up in the second-row</span><br><span class="line"># set of tools. Most notably, various Secure Boot and recovery</span><br><span class="line"># tools are present in this list, but may appear as second-row</span><br><span class="line"># items.</span><br><span class="line"># The file may be specified as a bare name (e.g., &quot;notme.efi&quot;), as</span><br><span class="line"># a complete pathname (e.g., &quot;/EFI/somedir/notme.efi&quot;), or as a</span><br><span class="line"># complete pathname with volume (e.g., &quot;SOMEDISK:/EFI/somedir/notme.efi&quot;</span><br><span class="line"># or 2C17D5ED-850D-4F76-BA31-47A561740082:/EFI/somedir/notme.efi&quot;).</span><br><span class="line"># OS tags hidden via the Delete or &#x27;-&#x27; key in the rEFInd menu are</span><br><span class="line"># added to this list, but stored in NVRAM.</span><br><span class="line"># The default is shim.efi,shim-fedora.efi,shimx64.efi,PreLoader.efi,</span><br><span class="line"># TextMode.efi,ebounce.efi,GraphicsConsole.efi,MokManager.efi,HashTool.efi,</span><br><span class="line"># HashTool-signed.efi,bootmgr.efi,fb&#123;arch&#125;.efi</span><br><span class="line"># (where &quot;&#123;arch&#125;&quot; is the architecture code, like &quot;x64&quot;).</span><br><span class="line">#</span><br><span class="line">#这部分和上面那部分类似，都是屏蔽之用，区别在于上面部分是针对文件夹，这部分是针</span><br><span class="line">#对具体文件，这部分在去除某些启动项有着极为关键的作用，我将详细展开叙述。</span><br><span class="line">#dont_scan_files shim.efi,MokManager.efi</span><br></pre></td></tr></table></figure>

<h2 id="删除多余启动项"><a href="#删除多余启动项" class="headerlink" title="删除多余启动项"></a>删除多余启动项</h2><p><code>refind</code>他针对某些<code>.efi</code>的文件会选择无脑的引导，因此我们为了简洁或者美观，需要屏蔽某些文件的引导，屏蔽不会修改原EFI分区中的系统引导文件。针对我的<code>ubuntu</code>，引导文件位于<code>ubuntu/grubx64.efi</code>（EFI分区的相对路径），以及我的<code>windows</code>引导文件，位于<code>Microsoft/Boot/bootmgfw.efi</code>，而我们需要保留的就这两个，其他的一律屏蔽。下面命令代表屏蔽了<code>ubuntu</code>文件夹下的<code>shim.efi</code>引导文件和其他文件XXX</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dont_scan_files /EFI/ubuntu/shim.efi,XXX,XXX</span><br></pre></td></tr></table></figure>

<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>在<code>refind.conf</code>文件最后需要加一行指令来加载主题文件(（相对路径是指你的主题配置文件<code>theme.config</code>在以<code>refind</code>目录为根目录的文件路径）)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include &lt;相对路径&gt;/theme.config </span><br></pre></td></tr></table></figure>
<p>比如我的theme文件位于<code>refind</code>目录下的<code>themes/rEFInd-minimal</code>处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include themes/rEFInd-minimal/theme.conf</span><br></pre></td></tr></table></figure>
<p><code>refind</code>文件夹位于EFI分区目录，<code>theme</code>文件夹位于<code>refind</code>文件夹，主题文件位于<code>theme</code>文件夹</p>
<p>关于<code>theme.conf</code>文件，这是<a href="https://github.com/topics/refind-theme">官方介绍文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Minimal refind theme</span><br><span class="line"></span><br><span class="line"># Hide user interface elements for personal preference or to increase</span><br><span class="line"># security:</span><br><span class="line">#  banner      - the rEFInd title banner (built-in or loaded via &quot;banner&quot;)</span><br><span class="line">#  label       - boot option text label in the menu</span><br><span class="line">#  singleuser  - remove the submenu options to boot Mac OS X in single-user</span><br><span class="line">#                or verbose modes; affects ONLY MacOS X</span><br><span class="line">#  safemode    - remove the submenu option to boot Mac OS X in &quot;safe mode&quot;</span><br><span class="line">#  hwtest      - the submenu option to run Apple&#x27;s hardware test</span><br><span class="line">#  arrows      - scroll arrows on the OS selection tag line</span><br><span class="line">#  hints       - brief command summary in the menu</span><br><span class="line">#  editor      - the options editor (+, F2, or Insert on boot options menu)</span><br><span class="line">#  all         - all of the above</span><br><span class="line"># Default is none of these (all elements active)</span><br><span class="line">#</span><br><span class="line">hideui singleuser,hints,arrows,label,badges</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set the name of a subdirectory in which icons are stored. Icons must</span><br><span class="line"># have the same names they have in the standard directory. The directory</span><br><span class="line"># name is specified relative to the main rEFInd binary&#x27;s directory. If</span><br><span class="line"># an icon can&#x27;t be found in the specified directory, an attempt is made</span><br><span class="line"># to load it from the default directory; thus, you can replace just some</span><br><span class="line"># icons in your own directory and rely on the default for others.</span><br><span class="line"># Default is &quot;icons&quot;.</span><br><span class="line">#各种系统的启动图标</span><br><span class="line">icons_dir themes/rEFInd-minimal/icons</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Use a custom title banner instead of the rEFInd icon and name. The file</span><br><span class="line"># path is relative to the directory where refind.efi is located. The color</span><br><span class="line"># in the top left corner of the image is used as the background color</span><br><span class="line"># for the menu screens. Currently uncompressed BMP images with color</span><br><span class="line"># depths of 24, 8, 4 or 1 bits are supported, as well as PNG images.</span><br><span class="line">#这是启动界面背景图片路径，也是相对路径，且暂时似乎只支持png格式的图片</span><br><span class="line">banner themes/rEFInd-minimal/background.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tells rEFInd whether to display banner images pixel-for-pixel (noscale)</span><br><span class="line"># or to scale banner images to fill the screen (fillscreen). The former is</span><br><span class="line"># the default.</span><br><span class="line">#默认全屏填充</span><br><span class="line">banner_scale fillscreen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Custom images for the selection background. There is a big one (144 x 144)</span><br><span class="line"># for the OS icons, and a small one (64 x 64) for the function icons in the</span><br><span class="line"># second row. If only a small image is given, that one is also used for</span><br><span class="line"># the big icons by stretching it in the middle. If only a big one is given,</span><br><span class="line"># the built-in default will be used for the small icons.</span><br><span class="line">#</span><br><span class="line"># Like the banner option above, these options take a filename of an</span><br><span class="line"># uncompressed BMP image file with a color depth of 24, 8, 4, or 1 bits,</span><br><span class="line"># or a PNG image. The PNG format is required if you need transparency</span><br><span class="line"># support (to let you &quot;see through&quot; to a full-screen banner).</span><br><span class="line">#</span><br><span class="line">selection_big   themes/rEFInd-minimal/selection_big.png</span><br><span class="line">selection_small themes/rEFInd-minimal/selection_small.png</span><br><span class="line"></span><br><span class="line"># Which non-bootloader tools to show on the tools line, and in what</span><br><span class="line"># order to display them:</span><br><span class="line">#  shell           - the EFI shell (requires external program; see rEFInd</span><br><span class="line">#                    documentation for details)</span><br><span class="line">#  gptsync         - the (dangerous) gptsync.efi utility (requires external</span><br><span class="line">#                    program; see rEFInd documentation for details)</span><br><span class="line">#  apple_recovery  - boots the Apple Recovery HD partition, if present</span><br><span class="line">#  mok_tool        - makes available the Machine Owner Key (MOK) maintenance</span><br><span class="line">#                    tool, MokManager.efi, used on Secure Boot systems</span><br><span class="line">#  about           - an &quot;about this program&quot; option</span><br><span class="line">#  exit            - a tag to exit from rEFInd</span><br><span class="line">#  shutdown        - shuts down the computer (a bug causes this to reboot</span><br><span class="line">#                    EFI systems)</span><br><span class="line">#  reboot          - a tag to reboot the computer</span><br><span class="line">#  firmware        - a tag to reboot the computer into the firmware&#x27;s</span><br><span class="line">#                    user interface (ignored on older computers)</span><br><span class="line"># Default is shell,apple_recovery,mok_tool,about,shutdown,reboot,firmware</span><br><span class="line">#</span><br><span class="line">showtools shutdown</span><br></pre></td></tr></table></figure>
<h1 id="可选-安装Ubuntu下的surface硬件驱动"><a href="#可选-安装Ubuntu下的surface硬件驱动" class="headerlink" title="(可选)安装Ubuntu下的surface硬件驱动"></a>(可选)安装Ubuntu下的surface硬件驱动</h1><div class="note info modern"><p>感谢<a href="https://github.com/linux-surface/linux-surface">linux-surface项目的贡献</a></p>
</div>

<p>导入用于签名软件包的密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO - https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc \</span><br><span class="line">    | gpg --dearmor | sudo dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg</span><br></pre></td></tr></table></figure>
<p>如果你的网络不是特别好可能会报错，你可以把这个命令的下载和导入分开执行，下载链接可以直接使用文件替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc</span><br><span class="line">cat surface.asc | gpg --dearmor | sudo dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg</span><br></pre></td></tr></table></figure>
<p>然后添加存储库配置并更新APT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;deb [arch=amd64] https://pkg.surfacelinux.com/debian release main&quot; \</span><br><span class="line">	| sudo tee /etc/apt/sources.list.d/linux-surface.list</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>安装linux-surface内核及其依赖项，还可以启用iptsd服务以使用触摸屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-image-surface linux-headers-surface iptsd libwacom-surface</span><br><span class="line">sudo systemctl enable iptsd</span><br></pre></td></tr></table></figure>
<p>如果在启用服务时候报错没有找到服务配置文件可能需要自己创建然后写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /lib/systemd/system/iptsd.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Intel Precise Touch &amp; Stylus Daemon</span><br><span class="line">Documentation=https://github.com/linux-surface/iptsd</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/bin/iptsd</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>
<p>重启电脑，surface硬件基本都可以使用了</p>
<h1 id="对于下面的可选项十分重要重要重要-风险提示和过程解释"><a href="#对于下面的可选项十分重要重要重要-风险提示和过程解释" class="headerlink" title="(对于下面的可选项十分重要重要重要)风险提示和过程解释"></a>(对于下面的可选项十分重要重要重要)风险提示和过程解释</h1><div class="note danger modern"><p>接下来的操作涉及系统引导等底层的重要内容，如果你没有基本的计算机知识建议到这里点到为止。要进行下面的操作务必了解你在做什么以及如何修复或回滚你的操作，最严重的后果可能会让你的电脑变成砖头。请先看下图，这是写这篇文章时候我遇到的错误<br><img src="/img/b3ebe4434dfdbe95d46db4c08a30255.jpg"></p>
</div>


<p>下面简要介绍一下我们在做什么以及为什么要这样做</p>
<h1 id="可选-surface开启安全启动：签名ubuntu的内核"><a href="#可选-surface开启安全启动：签名ubuntu的内核" class="headerlink" title="(可选)surface开启安全启动：签名ubuntu的内核"></a>(可选)surface开启安全启动：签名ubuntu的内核</h1><p>由于我们在安装surface驱动的时候更改了系统内核，会导致<code>secure boot</code>在开启状态下无法直接引导系统，所以我们需要将内核进行签名，将Linux-Surface内核的密钥导入到引导加载程序中，以便内核可以引导而不禁用<code>secure boot</code></p>
<p>安装签名工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-surface-secureboot-mok</span><br></pre></td></tr></table></figure>
<p>有的版本的mok会直接给你一个密码来给你，后面导入的流程里就不会再需要输入密码了。安装时候终端输出都会告诉你，类似这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> apt install linux-surface-secureboot-mok</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> triority: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  linux-surface-secureboot-mok</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 94 not upgraded.</span><br><span class="line">Need to get 5,616 B of archives.</span><br><span class="line">After this operation, 18.4 kB of additional disk space will be used.</span><br><span class="line">Get:1 https://pkg.surfacelinux.com/debian release/main amd64 linux-surface-secureboot-mok amd64 20231003-1 [5,616 B]</span><br><span class="line">Fetched 5,616 B <span class="keyword">in</span> 8s (678 B/s)                          </span><br><span class="line">Selecting previously unselected package linux-surface-secureboot-mok.</span><br><span class="line">(Reading database ... 195210 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../linux-surface-secureboot-mok_20231003-1_amd64.deb ...</span><br><span class="line">Unpacking linux-surface-secureboot-mok (20231003-1) ...</span><br><span class="line">Setting up linux-surface-secureboot-mok (20231003-1) ...</span><br><span class="line"></span><br><span class="line">The secure-boot certificate has been installed to</span><br><span class="line"></span><br><span class="line">    /usr/share/linux-surface-secureboot/surface.cer</span><br><span class="line"></span><br><span class="line">It will now be automatically enrolled <span class="keyword">for</span> you and guarded with the password</span><br><span class="line"></span><br><span class="line">    surface</span><br><span class="line"></span><br><span class="line">To finish the enrollment process you need to reboot, <span class="built_in">where</span> you will <span class="keyword">then</span> be</span><br><span class="line">asked to enroll the certificate. During the import, you will be prompted <span class="keyword">for</span></span><br><span class="line">the password mentioned above. Please make sure that you are indeed adding</span><br><span class="line">the right key and confirm by entering <span class="string">&#x27;surface&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Note that you can always manage your secure-boot keys, including the one</span><br><span class="line">just enrolled, from inside Linux via the <span class="string">&#x27;mokutil&#x27;</span> tool.</span><br></pre></td></tr></table></figure>

<p>然后下载<a href="https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.cer">linux-surface签名公钥</a></p>
<p>导入公钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mokutil --import surface.cer</span><br></pre></td></tr></table></figure>
<p>此过程会要求你输入一个一次性密码，一定要记住一会要用，但是只会用这一次</p>
<p>重启后会进入一个比较原始的蓝色界面，回车后选择<code>import mok</code>，然后continue直到要求你输入刚才设置的密码，然后完成即可</p>
<p>完成后即可进入UEFI，在<code>secure boot</code>中将<code>boot configuration</code>改为<code>Microsoft &amp; 3rd party CA</code>就可以使用安全启动了</p>
<h1 id="可选-surface开启安全启动：签名rEFind"><a href="#可选-surface开启安全启动：签名rEFind" class="headerlink" title="(可选)surface开启安全启动：签名rEFind"></a>(可选)surface开启安全启动：签名rEFind</h1><p>其实最开始跟上面差不多，看看目录内容(我闲的,没必要)然后导入密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI</span><br><span class="line">Boot  Microsoft  refind  tools ubuntu</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI/ubuntu</span><br><span class="line">BOOTX64.CSV  grub.cfg  grubx64.efi  mmx64.efi  shimx64.efi</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI/refind/keys</span><br><span class="line">altlinux.cer          openSUSE-UEFI-CA-Certificate.cer</span><br><span class="line">canonical-uefi-ca.cer         redhatsecureboot003.cer</span><br><span class="line">centossecureboot201.cer         redhatsecureboot401.cer</span><br><span class="line">centossecurebootca2.cer         redhatsecurebootca2.cer</span><br><span class="line">debian.cer          redhatsecurebootca4.cer</span><br><span class="line">fedora-ca.cer          refind.cer</span><br><span class="line">microsoft-kekca-public.cer        refind_local.cer</span><br><span class="line">microsoft-pca-public.cer        refind_local.crt</span><br><span class="line">microsoft-uefica-public.cer        SLES-UEFI-CA-Certificate.cer</span><br><span class="line">openSUSE-UEFI-CA-Certificate-4096.cer</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI/refind</span><br><span class="line">BOOT.CSV  drivers_x64  icons  keys  refind.conf  refind_x64.efi  vars</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /boot/efi/EFI/ubuntu/shimx64.efi /boot/efi/EFI/refind</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /boot/efi/EFI/ubuntu/mmx64.efi /boot/efi/EFI/refind</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> mokutil -i /boot/efi/EFI/refind/keys/refind.cer</span><br><span class="line">input password: </span><br><span class="line">input password again: </span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>沈阳桃仙机场SHE拍摄活动</title>
    <url>/2025/SHE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>回想去年过生日那一天，一个何人快递送来了zve-10从此入坑摄影，如今一整年过去，前段时间买走了学弟的腾龙70300准备享受一下长焦的快乐，相机已经从zve10换成了a6400（换了又好像没换），就在写文章的今天（1.19）我又卖掉了我的a6400给JasonZYT同学准备换成a7r2（反正就是一个一分钱不加），下面这些也是a6400陪我拍的最后一次了。</p>
<p>下午来到桃仙机场，目测绝大多数飞机都是空客A320和A321，没什么大飞机，穿插其中几个HL7727的波音737-900或者P-633的图-204一类。</p>
<div class="gallery-container" data-type="data" data-button="false">
      <div class="gallery-data">[{"url":"DSC0755.jpg","alt":""},{"url":"DSC0761.jpg","alt":""},{"url":"DSC0834.jpg","alt":""},{"url":"DSC0936.jpg","alt":""},{"url":"DSC1020.jpg","alt":""},{"url":"DSC1104.jpg","alt":""},{"url":"DSC1231.jpg","alt":""},{"url":"DSC1316.jpg","alt":""},{"url":"DSC1332.jpg","alt":""},{"url":"DSC1396.jpg","alt":""},{"url":"DSC1429-已增强-降噪.jpg","alt":""},{"url":"DSC1432.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>还拍摄了几个降落的视频，但是第一次拍摄视频没什么经验导致了一些问题，包括没有锁定对焦导致多次的重新对焦尝试，侧面拍摄同时进行变焦导致无法追踪目标大小。以及我的懒导致的没有调色和去掉达芬奇导出bug导致的问题</p>
<div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"/2025/SHE/2.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"video":{"url":"/2025/SHE/3.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <categories>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>本科毕业设计论文：巷道移动机器人SLAM技术研究</title>
    <url>/2025/Visual-SLAM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计划完成的任务目标"><a href="#计划完成的任务目标" class="headerlink" title="计划完成的任务目标"></a>计划完成的任务目标</h1><ul>
<li>制作一台移动机器人</li>
<li>使用三维激光雷达和毫米波雷达进行建图</li>
<li>使用深度相机和imu数据融合进行建图和导航</li>
</ul>
<h1 id="三维激光雷达建图的实现（LeGO-LOAM）"><a href="#三维激光雷达建图的实现（LeGO-LOAM）" class="headerlink" title="三维激光雷达建图的实现（LeGO-LOAM）"></a>三维激光雷达建图的实现（LeGO-LOAM）</h1><ul>
<li>算法：<a href="https://github.com/RobustFieldAutonomyLab/LeGO-LOAM">LeGO-LOAM</a></li>
<li>激光雷达：<a href="RS-Helios-5515%E4%BA%A7%E5%93%81%E6%89%8B%E5%86%8C.pdf">RS-Helios-5515</a></li>
</ul>
<h2 id="通讯连接和基本配置"><a href="#通讯连接和基本配置" class="headerlink" title="通讯连接和基本配置"></a>通讯连接和基本配置</h2><p>首先用交换机连接激光雷达和电脑，为了方便我决定在vmware中开发，系统为<code>Ubuntu 18.04</code>安装了<code>ROS1-melodic</code>。网络设置为桥接模式，系统内设置网络手动ip<code>192.168.1.102</code>，子网掩码<code>255.255.255.0</code>（雷达默认ip<code>192.168.1.200</code>发送udp数据包到<code>192.168.1.102</code>的端口<code>6699``7788</code>）</p>
<p>新建ros工作空间后<code>src</code>文件夹放入<a href="5515_SDK.rar">雷达ros驱动</a>和<a href="rslidar_msg-master.zip">雷达话题定义(驱动文档也有说明)</a>，按照里面的要求进行配置修改即可，以及<code>LeGO-LOAM</code>代码包，除了按照文档说明进行修改以外，还要将<code>CMakeLists.txt</code>第四行的c++版本14:<code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++14 -O3&quot;)</code>。</p>
<p>设置雷达数据为我们使用的32线雷达，修改<code>LeGO-LOAM/include/utility.h</code>，这里我补充一些注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Mine</span><br><span class="line">// 传感器垂直方向上的扫描线数量</span><br><span class="line">extern const int N_SCAN = 32;</span><br><span class="line">// 水平方向上扫描一周360度所采集的点数</span><br><span class="line">extern const int Horizon_SCAN = 1800;</span><br><span class="line">// 水平方向上的角度分辨率</span><br><span class="line">extern const float ang_res_x = 0.2;</span><br><span class="line">// 垂直方向上的角度分辨率（某些垂直角度分辨率可能不是均匀的，可以写平均值）</span><br><span class="line">extern const float ang_res_y = 2.2;</span><br><span class="line">// 最底部扫描线的垂直角度</span><br><span class="line">extern const float ang_bottom = 55.0;</span><br><span class="line">// 地面点分割或移除算法中，指定了一个扫描线的索引号。索引号小于或等于groundScanInd的扫描线上的点，会被认为是潜在的地面点</span><br><span class="line">extern const int groundScanInd = 7;</span><br></pre></td></tr></table></figure>

<p>由于雷达数据的格式不同，使用<a href="https://github.com/HViktorTsoi/rs_to_velodyne">rs_to_velodyne</a>进行格式转化，<code>A ros tool for converting Robosense pointcloud to Velodyne pointcloud format, which can be directly used for downstream algorithm, such as LOAM, LEGO-LOAM, LIO-SAM, etc.</code><br>使用<code>rostopic list</code>可以看到代码接收雷达topic<code>/rslidar_points</code>转换后发送到<code>/velodyne_points</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@ubuntu:~/Desktop/lidar$ rostopic list</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/rslidar_points</span><br><span class="line">/velodyne_points</span><br></pre></td></tr></table></figure>

<p>这里我由于openGL驱动问题导致rviz报错闪退，即使不闪退也不显示任何点云，要将其改为软件驱动。由于rviz错误log为空文件导致我很久没有找到问题所在。没有在物理机上试过不知道和vmware有没有关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LIBGL_ALWAYS_SOFTWARE=1</span><br></pre></td></tr></table></figure>

<p>按照LeGO-LOAM文档要求在实际运行和使用rosbag时需要使用不同的roslaunch配置，具体是修改<code>LeGO-LOAM/launch/run.launch</code>的第四行，仿真下设置为false否则为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;param name=&quot;/use_sim_time&quot; value=&quot;false&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>由于雷达驱动和LeGO-LOAM都会启动rviz，我这里直接修改雷达驱动启动文件<code>rslidar_sdk-dev_opt/launch/start.launch</code>注释掉rviz的启动内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">  &lt;node pkg=&quot;rslidar_sdk&quot; name=&quot;rslidar_sdk_node&quot; type=&quot;rslidar_sdk_node&quot; output=&quot;screen&quot;&gt;</span><br><span class="line">    &lt;param name=&quot;config_path&quot; value=&quot;&quot;/&gt;</span><br><span class="line">  &lt;/node&gt;</span><br><span class="line">  &lt;!-- rviz --&gt;</span><br><span class="line">  &lt;!--&lt;node pkg=&quot;rviz&quot; name=&quot;rviz&quot; type=&quot;rviz&quot; args=&quot;-d $(find rslidar_sdk)/rviz/rviz.rviz&quot; /&gt;--&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>

<h2 id="建图测试"><a href="#建图测试" class="headerlink" title="建图测试"></a>建图测试</h2><p>习惯上我喜欢先单独启动roscore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>

<p>启动雷达：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roslaunch rslidar_sdk start.launch</span><br></pre></td></tr></table></figure>

<p>启动雷达数据转换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun rs_to_velodyne rs_to_velodyne XYZIRT XIRI</span><br></pre></td></tr></table></figure>

<p>启动建图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roslaunch lego_loam run.launch</span><br></pre></td></tr></table></figure>

<p>这时就可以使用激光雷达的数据进行建图了，下图是我所在的实验室<br><img src="/2025/Visual-SLAM/69a805494e5c171e8fcc88a78ff7393.png"></p>
<h2 id="地图保存和数据记录"><a href="#地图保存和数据记录" class="headerlink" title="地图保存和数据记录"></a>地图保存和数据记录</h2><p>如果需要保存建好的地图，在建图快要结束时，打开终端订阅全局点云地图的话题<code>/laser_cloud_surround</code>保存为bag包，然后转bag为pcd，使用<br><code>pcl_viewer</code>打开点云地图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@ubuntu:~/Desktop/lidar$ rosbag record /laser_cloud_surround</span><br><span class="line">[ INFO] [1744615722.083300899]: Subscribing to /laser_cloud_surround</span><br><span class="line">[ INFO] [1744615722.089056296]: Recording to &#x27;2025-04-14-00-28-42.bag&#x27;.</span><br><span class="line"></span><br><span class="line">triority@ubuntu:~/Desktop/lidar$ rosrun pcl_ros bag_to_pcd 2025-04-14-00-28-42.bag /laser_cloud_surround pcd1</span><br><span class="line">Creating directory pcd1</span><br><span class="line">Saving recorded sensor_msgs::PointCloud2 messages on topic /laser_cloud_surround to pcd1</span><br><span class="line">Got 1681 data points in frame /camera_init on topic /laser_cloud_surround with the following fields: x y z intensity</span><br><span class="line">Data saved to pcd1/1744615726.458191872.pcd</span><br><span class="line"></span><br><span class="line">triority@ubuntu:~/Desktop/lidar$ pcl_viewer pcd1/1744615726.458191872.pcd</span><br></pre></td></tr></table></figure>

<p>此外也可以直接记录雷达原始数据，便于后续对算法进行改进测试比较等</p>
<h1 id="LeGO-LOAM源码分析"><a href="#LeGO-LOAM源码分析" class="headerlink" title="LeGO-LOAM源码分析"></a>LeGO-LOAM源码分析</h1><details>
  <summary>引用一下来自google ai studio的源码分析作为大致方向上的参考</summary>
  好的，我们来大致分析一下 LeGO-LOAM 的源代码结构和核心思想。LeGO-LOAM (Lightweight and Ground-Optimized Lidar Odometry and Mapping) 是对经典 LOAM 算法的改进，特别针对地面车辆（如自动驾驶汽车）的应用场景进行了优化。

<p><strong>核心目标：</strong> 实现低计算量、实时的激光雷达里程计和建图，并特别优化地面点的处理。</p>
<p><strong>主要代码结构 (基于常见的 ROS 实现):</strong></p>
<p>LeGO-LOAM 通常由以下几个核心的 ROS 节点（或 Nodelet）组成，它们通过 ROS Topic 进行通信：</p>
<ol>
<li><p><strong><code>imageProjection</code> 节点 (预处理模块):</strong></p>
<ul>
<li><strong>输入:</strong> 原始激光雷达点云数据 (<code>sensor_msgs/PointCloud2</code>)，通常来自 <code>/points_raw</code> 或类似 topic。</li>
<li><strong>核心功能:</strong><ul>
<li><strong>点云分割 (Segmentation):</strong><ul>
<li><strong>地面分割 (Ground Segmentation):</strong> 这是 LeGO-LOAM 的关键优化之一。它将点云投影到一个深度图（Range Image）上，然后利用点与点之间的角度关系或简单的平面拟合方法，快速地将地面点与非地面点分离。这极大地减少了后续处理的点云数量，并移除了可能不稳定的地面特征。</li>
<li><strong>点云聚类 (Point Cloud Clustering):</strong> 对分割出的非地面点进行聚类（例如使用基于距离或连通性的方法），将点云分割成独立的物体或障碍物。小的、稀疏的聚类会被滤除，以消除噪声和不可靠的特征点。</li>
</ul>
</li>
<li><strong>点云信息标记:</strong> 为每个点打上标签（地面点、分割后的聚类ID等），并计算每个点的距离、角度等信息，方便后续处理。</li>
</ul>
</li>
<li><strong>输出:</strong><ul>
<li>分割后的点云 (<code>/segmented_cloud</code>)：包含非地面点的聚类结果。</li>
<li>地面点云 (<code>/ground_cloud</code>)：单独发布的地面点。</li>
<li>外点&#x2F;噪声点云 (<code>/outlier_cloud</code>)。</li>
<li>点云信息 (<code>/cloud_info</code>)：包含每个点的标签、范围、起始&#x2F;结束索引等辅助信息。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>featureAssociation</code> 节点 (特征提取与里程计模块):</strong></p>
<ul>
<li><strong>输入:</strong> <code>imageProjection</code> 节点输出的分割点云、地面点云和点云信息。</li>
<li><strong>核心功能:</strong><ul>
<li><strong>特征提取 (Feature Extraction):</strong><ul>
<li>基于分割后的非地面点云，计算每个点的曲率（Curvature）。</li>
<li>根据曲率大小，选取<strong>边缘点 (Edge Points)</strong> (曲率大的点) 和<strong>平面点 (Planar Points)</strong> (曲率小的点)。</li>
<li>为了提高鲁棒性，会排除一些不稳定的特征点（例如，平行于激光束方向的点、被遮挡的点）。</li>
<li>LeGO-LOAM 的一个特点是它会分别处理边缘特征和平面特征。</li>
</ul>
</li>
<li><strong>激光雷达里程计 (Lidar Odometry):</strong><ul>
<li>执行<strong>扫描到扫描 (Scan-to-Scan)</strong> 的匹配。</li>
<li>将当前帧提取的边缘点与上一帧的边缘线进行匹配（点到线距离最小化）。</li>
<li>将当前帧提取的平面点与上一帧的平面片进行匹配（点到面距离最小化）。</li>
<li><strong>两步优化 (Two-Step Optimization):</strong> LeGO-LOAM 的另一个关键优化。它首先利用地面点（被视为一个大平面）和分割出的平面点进行匹配，估计车辆的 [z, roll, pitch]；然后利用边缘点匹配，估计车辆的 [x, y, yaw]。这种分离优化降低了计算复杂度，并提高了对特定运动的估计精度。</li>
<li>使用优化算法（通常是 Levenberg-Marquardt, LM）迭代求解最小化点到线&#x2F;点到面距离的位姿变换（旋转和平移）。</li>
</ul>
</li>
</ul>
</li>
<li><strong>输出:</strong><ul>
<li>高频、但可能存在漂移的激光雷达里程计位姿 (<code>/laser_odom_to_init</code>)。</li>
<li>当前帧提取的特征点云（角点 <code>/laser_cloud_corner_last</code>，平面点 <code>/laser_cloud_surf_last</code>），供建图模块使用。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>mapOptmization</code> 节点 (建图与位姿优化模块):</strong></p>
<ul>
<li><strong>输入:</strong> <code>featureAssociation</code> 节点输出的里程计位姿、特征点云。</li>
<li><strong>核心功能:</strong><ul>
<li><strong>地图维护 (Map Maintenance):</strong><ul>
<li>接收来自 <code>featureAssociation</code> 的特征点云和粗略位姿。</li>
<li>根据里程计位姿，将历史关键帧的特征点（边缘点和平面点）变换到世界坐标系下，构建一个全局的特征地图（通常用 Voxel Grid 或 K-D Tree 存储，以便快速查找）。</li>
</ul>
</li>
<li><strong>扫描到地图 (Scan-to-Map) 匹配:</strong><ul>
<li>将当前帧的特征点与全局地图中的对应特征（边缘线、平面片）进行匹配。</li>
<li>再次使用优化算法（如 LM），最小化当前帧特征点到地图中对应特征的距离，进一步优化当前帧的位姿。</li>
<li>这个过程频率较低（相对于 Odometry），但可以有效修正 Odometry 累积的漂移。</li>
</ul>
</li>
<li><strong>(可选) 回环检测 (Loop Closure):</strong> 一些 LeGO-LOAM 的变种或后续工作会加入回环检测模块，通过识别之前访问过的场景来进一步消除累积误差，但这在原始 LeGO-LOAM 中可能不是核心部分。</li>
</ul>
</li>
<li><strong>输出:</strong><ul>
<li>经过地图优化后的、更精确的位姿 (<code>/aft_mapped_to_init</code>)。</li>
<li>构建的全局点云地图 (<code>/map</code>) 或特征地图。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>transformFusion</code> 节点 (位姿融合与发布):</strong></p>
<ul>
<li><strong>输入:</strong> <code>featureAssociation</code> 输出的高频里程计位姿，<code>mapOptmization</code> 输出的低频优化位姿。</li>
<li><strong>核心功能:</strong> 融合这两个位姿信息。通常是将低频的精确位姿作为基准，然后用高频的里程计增量来插值，得到一个平滑、连续、高频发布的最终位姿估计。</li>
<li><strong>输出:</strong> 最终的车辆位姿 (<code>/integrated_to_init</code> 或 TF 变换)。</li>
</ul>
</li>
</ol>
<p><strong>核心算法与技术总结:</strong></p>
<ol>
<li><strong>范围图像 (Range Image):</strong> 高效处理结构化激光雷达数据（如 Velodyne）的基础。</li>
<li><strong>地面分割:</strong> 关键优化，显著减少计算量，移除不稳定特征。</li>
<li><strong>点云聚类:</strong> 过滤噪声，聚焦于有意义的物体。</li>
<li><strong>曲率计算:</strong> 用于区分边缘点和平面点。</li>
<li><strong>特征关联 (点到线&#x2F;点到面):</strong> LOAM 系列算法的核心匹配方式。</li>
<li><strong>两步位姿优化:</strong> LeGO-LOAM 的特色，分离优化不同自由度，提高效率和精度。</li>
<li><strong>迭代优化算法 (Levenberg-Marquardt):</strong> 用于求解非线性最小二乘问题（位姿估计）。</li>
<li><strong>Scan-to-Scan &amp; Scan-to-Map 框架:</strong> LOAM 的经典框架，高频里程计+低频地图优化。</li>
</ol>
<p><strong>代码阅读建议:</strong></p>
<ol>
<li><strong>从 <code>imageProjection</code> 开始:</strong> 理解预处理流程，特别是地面分割和聚类是如何实现的。</li>
<li><strong>接着看 <code>featureAssociation</code>:</strong> 关注特征提取（曲率计算、点选择）和两步优化（如何分别使用平面&#x2F;地面点和边缘点进行匹配和优化）。</li>
<li><strong>然后是 <code>mapOptmization</code>:</strong> 理解地图如何构建和维护，以及 Scan-to-Map 匹配如何修正位姿。</li>
<li><strong>最后看 <code>transformFusion</code>:</strong> 理解如何融合高频和低频位姿。</li>
<li><strong>关注 ROS 接口:</strong> 理解各个节点之间的输入输出（订阅和发布的 Topic），以及它们传递的数据结构 (<code>sensor_msgs/PointCloud2</code>, 自定义消息如 <code>cloud_info</code>, <code>geometry_msgs/PoseStamped</code>, <code>nav_msgs/Odometry</code>, TF)。</li>
<li><strong>查看 <code>launch</code> 文件和 <code>config</code> 文件:</strong> 这些文件定义了节点如何启动以及各种参数（如特征提取的阈值、优化迭代次数等），理解参数对算法性能的影响很重要。</li>
<li><strong>核心库依赖:</strong> LeGO-LOAM 大量使用了 PCL (Point Cloud Library) 进行点云处理，以及 Eigen 进行线性代数运算。熟悉这两个库会对理解代码很有帮助。</li>
</ol>
<p>总的来说，LeGO-LOAM 的源代码体现了在经典 LOAM 基础上，针对特定应用场景（地面车辆）进行巧妙优化的思想，通过地面分割和两步优化等手段，在保证精度的同时显著降低了计算复杂度。</p>
</details>


<h1 id="VINS-Mono视觉slam实现"><a href="#VINS-Mono视觉slam实现" class="headerlink" title="VINS-Mono视觉slam实现"></a>VINS-Mono视觉slam实现</h1><p>数据集<a href="https://github.com/kminoda/VIODE/tree/master">The VIODE dataset</a></p>
<p>视觉slam算法<a href="https://github.com/HKUST-Aerial-Robotics/VINS-Mono">VINS-Mono</a></p>
<h1 id="使用wsl环境开发深度相机（已弃用）"><a href="#使用wsl环境开发深度相机（已弃用）" class="headerlink" title="使用wsl环境开发深度相机（已弃用）"></a>使用wsl环境开发深度相机（已弃用）</h1><div class="note danger modern"><p>此部分内容已经弃用，不打算使用深度相机了，但该过程未来仍有可能有参考价值，故保留。以及在wsl环境下即使挂载了usb设备，intel驱动程序也会报错检测不到深度相机，这一问题还没有解决。</p>
</div>

<p>目前还在寒假期间没有实物制作的条件，打算先跑跑仿真，准备好技术路线。目前打算在windows系统中使用wsl2的ubuntu20进行开发</p>
<details>
<summary>wsl内安装ros后无法启动roscore的问题</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@Triority-Desktop:~$ roscore</span><br><span class="line">... logging to /home/triority/.ros/log/499be312-e486-11ef-add2-75fb32d30971/roslaunch-Triority-Desktop-36755.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is 1GB.</span><br></pre></td></tr></table></figure>
启动之后卡死在这里。主要原因是虚拟机内网络问题。$ROS_MASTER_URI通常是http://localhost:11311，$ROS_IP通常是WSL的IP地址，这里没有显示，指定为本机IP后问题解决：
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@Triority-Desktop:~$ echo $ROS_MASTER_URI</span><br><span class="line">http://localhost:11311</span><br><span class="line">triority@Triority-Desktop:~$ echo $ROS_IP</span><br><span class="line"></span><br><span class="line">triority@Triority-Desktop:~$ export ROS_IP=192.168.0.100</span><br><span class="line">triority@Triority-Desktop:~$ echo $ROS_IP</span><br><span class="line">192.168.0.100</span><br><span class="line"></span><br><span class="line">triority@Triority-Desktop:~$ roscore</span><br><span class="line">... logging to /home/triority/.ros/log/f7cd5362-e486-11ef-add2-75fb32d30971/roslaunch-Triority-Desktop-36776.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://192.168.0.100:42277/</span><br><span class="line">ros_comm version 1.17.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: noetic</span><br><span class="line"> * /rosversion: 1.17.0</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [36784]</span><br><span class="line">ROS_MASTER_URI=http://192.168.0.100:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to f7cd5362-e486-11ef-add2-75fb32d30971</span><br><span class="line">process[rosout-1]: started with pid [36794]</span><br><span class="line">started core service [/rosout]</span><br><span class="line">^C[rosout-1] killing on exit</span><br><span class="line">[master] killing on exit</span><br><span class="line">shutting down processing monitor...</span><br><span class="line">... shutting down processing monitor complete</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

</details>

<p>创建ros的工作空间之后在src文件夹新建一个包用于试验代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg lab roscpp rospy std_msgs</span><br></pre></td></tr></table></figure>


<p><strong>wsl挂载usb设备：</strong></p>
<p>使用usb3.2连接电脑，要在wsl中使用usb设备请参考<a href="https://learn.microsoft.com/zh-cn/windows/wsl/connect-usb">微软的文档</a>。</p>
<p>首先安装<a href="https://github.com/dorssel/usbipd-win/releases">USBIPD-WIN项目</a></p>
<p>在windows powershell中使用<code>usbipd list</code>查看usb设备列表，然后根据总线ID共享设备<code>usbipd bind --busid 4-4</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Triority&gt; usbipd list</span><br><span class="line">Connected:</span><br><span class="line">BUSID  VID:PID    DEVICE                                                        STATE</span><br><span class="line">1-2    1462:7d42  USB 输入设备                                                  Not shared</span><br><span class="line">1-5    1ea7:0064  USB 输入设备                                                  Not shared</span><br><span class="line">1-6    1a2c:9ef4  USB 输入设备                                                  Not shared</span><br><span class="line">1-14   8087:0026  英特尔(R) 无线 Bluetooth(R)                                   Not shared</span><br><span class="line">2-1    8086:0b3a  Intel(R) RealSense(TM) Depth Camera 435i Depth, Intel(R) ...  Not shared</span><br><span class="line"></span><br><span class="line">Persisted:</span><br><span class="line">GUID                                  DEVICE</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来应该附加USB设备<code>usbipd attach --wsl --busid 2-1</code>，但是报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Triority&gt; usbipd attach --wsl --busid 2-1</span><br><span class="line">usbipd: info: Using WSL distribution &#x27;Ubuntu-20.04&#x27; to attach; the device will be available in all WSL 2 distributions.</span><br><span class="line">usbipd: info: Detected networking mode &#x27;virtioproxy&#x27;.</span><br><span class="line">usbipd: error: Networking mode &#x27;virtioproxy&#x27; is not supported.</span><br></pre></td></tr></table></figure>
<p>显然需要修改网络模式，这里改成<code>mirrored</code>，这个模式的作用在<a href="https://learn.microsoft.com/en-us/windows/wsl/networking#mirrored-mode-networking">微软的文档有介绍</a></p>
<p>也就是配置文件<code>.wslconfig</code>内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=mirrored</span><br></pre></td></tr></table></figure>
<p>此时将wsl重启<code>wsl --shutdown</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Triority&gt; usbipd attach --wsl --busid 2-1</span><br><span class="line">usbipd: info: Using WSL distribution &#x27;Ubuntu-20.04&#x27; to attach; the device will be available in all WSL 2 distributions.</span><br><span class="line">usbipd: info: Detected networking mode &#x27;mirrored&#x27;.</span><br><span class="line">usbipd: info: Using IP address 127.0.0.1 to reach the host.</span><br><span class="line">WSL usbip: error: Attach Request for 2-1 failed - Device busy (exported)</span><br><span class="line">usbipd: warning: The device appears to be used by Windows; stop the software using the device, or bind the device using the &#x27;--force&#x27; option.</span><br><span class="line">usbipd: error: Failed to attach device with busid &#x27;2-1&#x27;.</span><br></pre></td></tr></table></figure>
<p>按照要求强制执行<code>usbipd bind --busid 2-1 --force</code>并重启电脑</p>
<p>此时重新<code>usbipd attach --wsl --busid 2-1</code>并在ubuntu中查看usb设备</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@Triority-Desktop:~$ lsusb</span><br><span class="line">Bus 002 Device 002: ID 8086:0b3a Intel Corp. Intel(R) RealSense(TM) Depth Camera 435i</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>

<p>Intel D435i相关链接：</p>
<ul>
<li><a href="https://www.intelrealsense.com/depth-camera-d435i/">商品页面</a></li>
<li><a href="https://www.intelrealsense.com/download/21345/?tmstv=1697035582">datasheet</a></li>
<li><a href="https://github.com/IntelRealSense/librealsense/releases">SDK</a></li>
<li><a href="https://github.com/IntelRealSense/realsense-ros/tree/ros1-legacy">ros1使用</a></li>
</ul>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记</title>
    <url>/2025/c++/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>这篇文章是c++的学习笔记，仅作为我自己的备忘录使用，不包含我已经非常熟悉的内容，所以不适合入门看哦，最好有其他语言基础，当然我猜这玩意也没人看（）</p>
<p>所有示例程序都是我自己重新写的简化举例可放心参考。</p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="windows下开发：VS-studio"><a href="#windows下开发：VS-studio" class="headerlink" title="windows下开发：VS studio"></a>windows下开发：VS studio</h2><p>目前最新版本是2022，直接下载安装就能用，一切都已经准备好了</p>
<h2 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h2><p>一些开源开发者朋友们得知我要学一遍c++，非常热情的想要教会我，并且建议我用vscode连接wsl在ubuntu虚拟机内使用clang&#x2F;msvc开发</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="数据类型长度和范围"><a href="#数据类型长度和范围" class="headerlink" title="数据类型长度和范围"></a>数据类型长度和范围</h2><p>c++标准没用固定值的规定，但是有最小标准：</p>
<ul>
<li><code>short</code>至少16位（-32,768 - 32,767）</li>
<li><code>int</code>至少于<code>short</code>一样长</li>
<li><code>long</code>至少32位（-2,147,483,648 - 2,147,483,647），且至少于<code>int</code>一样长</li>
<li><code>long long</code>至少64位（-9,223,372,036,854,775,808 - 9,223,372,036,854,775,807），且至少于<code>long</code>一样长（有的系统不支持）</li>
</ul>
<p>可以通过<code>#include &lt;climits&gt;</code>获取具体范围：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> n_int = INT_MAX;</span><br><span class="line">    <span class="type">short</span> n_short = SHRT_MAX;</span><br><span class="line">    <span class="type">long</span> n_long = LONG_MAX;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n_llong = LLONG_MAX;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_int &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;short is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_short &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_long &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long long is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_llong &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在我的64位windwos系统上结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int is 4 bytes, maximum value: 2147483647</span><br><span class="line">short is 4 bytes, maximum value: 32767</span><br><span class="line">long is 4 bytes, maximum value: 2147483647</span><br><span class="line">long long is 4 bytes, maximum value: 9223372036854775807</span><br></pre></td></tr></table></figure>

<h2 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span>&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    std::string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    MyStruct the_string;</span><br><span class="line">    cin &gt;&gt; the_string.str;</span><br><span class="line">    the_string.len = the_string.str.<span class="built_in">length</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The Length of &quot;</span>  &lt;&lt; the_string.str &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; the_string.len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指针相关操作"><a href="#指针相关操作" class="headerlink" title="指针相关操作"></a>指针相关操作</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span> &#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    std::string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">10.0</span>;</span><br><span class="line">    <span class="comment">//地址p为double*类型，值设置为取num的地址</span></span><br><span class="line">    <span class="type">double</span>* p = &amp;num;</span><br><span class="line">    <span class="comment">//输出:00000004664FF714指向的值为1</span></span><br><span class="line">    std::cout &lt;&lt; p &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态数组（动态联编）和赋值</span></span><br><span class="line">    <span class="type">int</span>* pz = <span class="keyword">new</span> <span class="type">int</span> [<span class="number">5</span>];</span><br><span class="line">    *pz = <span class="number">1</span>;</span><br><span class="line">    pz[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    *(pz + <span class="number">2</span>) = <span class="number">3</span>;</span><br><span class="line">    std::cout &lt;&lt; pz &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; pz[<span class="number">0</span>] &lt;&lt; pz[<span class="number">1</span>] &lt;&lt; pz[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//使用完成后释放（如果new有[]那么del时候要写[]，反之亦然）</span></span><br><span class="line">    <span class="keyword">delete</span> [] pz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态结构操作</span></span><br><span class="line">    MyStruct* ps = <span class="keyword">new</span> MyStruct;</span><br><span class="line">    <span class="comment">//使用-&gt;运算符访问成员</span></span><br><span class="line">    ps-&gt;str = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">    <span class="comment">//使用地址访问成员</span></span><br><span class="line">    std::cout &lt;&lt; (*ps).str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="简单IO"><a href="#简单IO" class="headerlink" title="简单IO"></a>简单IO</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入ofstream（覆盖原内容）</span></span><br><span class="line">    ofstream outfile;</span><br><span class="line">    outfile.<span class="built_in">open</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line">    string str0;</span><br><span class="line">    <span class="built_in">getline</span>(cin,str0);</span><br><span class="line">    outfile &lt;&lt; str0;</span><br><span class="line">    outfile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取ifstream</span></span><br><span class="line">    ifstream infile;</span><br><span class="line">    infile.<span class="built_in">open</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!infile.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    string str1;</span><br><span class="line">    <span class="keyword">while</span> (infile.<span class="built_in">good</span>())&#123;</span><br><span class="line">        <span class="built_in">getline</span>(infile,str1);</span><br><span class="line">        cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h2><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>函数前加<code>inline</code>，编译器将函数代码替换函数调用，减少跳转导致的时间消耗</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">square</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">square</span>(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数引用变量"><a href="#函数引用变量" class="headerlink" title="函数引用变量"></a>函数引用变量</h3><p>使用引用变量作为函数参数，函数将使用原始数据而不是其副本，可用于函数处理大型结构或进行类的设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> &amp; number = num;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    number++;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外需要注意，引用变量必须在创建时初始化，而且无法修改关联的变量。</p>
<p>使用结构引用参数只需在声明结构参数时使用引用运算符<code>&amp;</code>即可。例如如下结构定义，函数原型应该这样编写，从而在函数中将指向该结构的引用作为参数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">STRUCT</span>&#123;</span><br><span class="line">    std:string name;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FUNC</span><span class="params">(STRUCT &amp; s)</span></span>;</span><br><span class="line"><span class="comment">//如果不希望函数修改传入的结构可使用const</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FUNC</span><span class="params">(<span class="type">const</span> STRUCT &amp; s)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="参数重载"><a href="#参数重载" class="headerlink" title="参数重载"></a>参数重载</h3><p>可以通过函数重载来设计一系列函数，他们名称相同，完成相同的操作，但是使用不同的参数列表（他们的返回值类型也可以不一样）。</p>
<h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>可以使用泛型来定义函数，避免了对函数多次几乎相同的编写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span> </span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a , b = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Swap</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a , b = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> c = <span class="number">11.4</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">51.4</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c , d = &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Swap</span>(c, d);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c , d = &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="多文件编程"><a href="#多文件编程" class="headerlink" title="多文件编程"></a>多文件编程</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>头文件应该包含以下内容：</p>
<ul>
<li>函数原型</li>
<li>使用<code>#define</code>或<code>const</code>定义的符号常量</li>
<li>结构声明</li>
<li>类声明</li>
<li>模板声明</li>
<li>内联函数</li>
</ul>
<p>在包含头文件时，应使用<code>a.h</code>而不是<code>&lt;a.h&gt;</code>，后者编译器会在存储标准头文件的位置查找，而前者先在当前工作目录查找，如果没用找到再去标准位置。</p>
<p>为了避免包含同一个头文件多次（可能包含了另一个包含某个头文件的头文件），可以使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STH</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STH</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="存储持续性"><a href="#存储持续性" class="headerlink" title="存储持续性"></a>存储持续性</h3><ul>
<li>自动存储：函数中定义将在函数结束后释放。</li>
<li>静态存储：在函数外定义的变量和用关键字<code>static</code>定义的变量。在整个程序运行过程中存在。<ul>
<li>链接性为外部，可在其他文件访问，必须在代码块外声明。在一个文件中定义，其他文件使用<code>extern</code>关键字声明。</li>
<li>链接性为内部，只能在当前文件访问，必须在代码块外声明并使用<code>static</code>限定符</li>
<li>无链接性，只能在当前函数或代码块内访问，必须在代码块内声明并使用<code>static</code>限定符</li>
</ul>
</li>
<li>线程存储：使用关键字<code>thread_local</code>声明，其生命周期和其所属线程一样长</li>
<li>动态存储：使用<code>new</code>关键字分配，一直存在直到使用<code>delete</code>将其释放或程序结束。也被称为自由存储（free store）或堆（heap）</li>
</ul>
<h3 id="说明符和限定符"><a href="#说明符和限定符" class="headerlink" title="说明符和限定符"></a>说明符和限定符</h3><p>存储说明符：</p>
<ul>
<li>auto（c++11中不再是说明符）</li>
<li>register</li>
<li>static</li>
<li>extern</li>
<li>thread_local（c++11新增的）</li>
<li>mutable</li>
</ul>
<p>限定符：</p>
<ul>
<li>const</li>
<li>volatile（避免编译器进行将数据复制到寄存器的优化，因为硬件等可能对其进行修改，例如串口信息）</li>
<li>mutable（用于指出即使结构或类为const，其某个成员也可以进行修改）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">data</span>&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> accesses;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> data veep = &#123;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">strcpy</span>(veep.name, <span class="string">&quot;abc&quot;</span>);<span class="comment">//not allowed</span></span><br><span class="line">veep.accesses++;<span class="comment">//allowed</span></span><br></pre></td></tr></table></figure>
<h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><p>两个名称空间的相同名称将不会导致冲突。下面的代码使用新的关键字<code>namespace</code>创建了一个新的名称空间：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Triority&#123;</span><br><span class="line">    <span class="type">int</span> sth;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>名称空间可以是全局的也可以位于其他名称空间中，但是不能在代码块中。默认情况下其链接性为外部的（除非引用了常量）</p>
<p>标记一下，这一段我没写完，我要先去写cmake</p>
<h2 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h2><h3 id="简要介绍和安装"><a href="#简要介绍和安装" class="headerlink" title="简要介绍和安装"></a>简要介绍和安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">完成C++项目的执行过程， 主要是分为四步: 预处理、编译、汇编、链接。g++命令确实可以对一个C++项目通过上面四步转成可执行文件，但在中大型项目里面，这样还是太复杂。 于是乎就有了MakeFile。</span><br><span class="line">Makefile 文件描述了 Linux 系统下 C/C++ 工程的编译规则，它用来自动化编译 C/C++ 项目。一旦写编写好 Makefile 文件，只需要一个 make 命令，整个工程就开始自动编译，不再需要手动执行 GCC 命令。</span><br><span class="line">CMake是简化MakeFile编写，可以自动生成MakeFile文件</span><br><span class="line">CMake是一个跨平台的编译(Build)工具，可以用简单的语句来描述所有平台的编译过程，其是在make基础上发展而来的，早期的make需要程序员写Makefile文件，进行编译，而现在CMake能够通过对cmakelists.txt的编辑，轻松实现对复杂工程的组织</span><br><span class="line"></span><br><span class="line">cmake编译流程：</span><br><span class="line">1. 编写Cmake配置文件CMakeLists.txt, 理解成Cmake所要处理的代码</span><br><span class="line">2. 执行命令 cmake path生成MakeFile, path是CmakeList.txt所在目录</span><br><span class="line">3. 使用make命令进行编译</span><br></pre></td></tr></table></figure>
<p>安装cmake并查看版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure>
<h3 id="目录组织"><a href="#目录组织" class="headerlink" title="目录组织"></a>目录组织</h3><ul>
<li>项目根目录下建立<code>build</code>文件夹并建立<code>CMakeLists.txt</code>文件（和.cpp和.h在一起，这里只是最简单的演示文件）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.28)</span><br><span class="line"></span><br><span class="line"># set the project name</span><br><span class="line">project(main)</span><br><span class="line"></span><br><span class="line"># add the executable</span><br><span class="line">add_executable(main 1.cpp main.cpp)</span><br></pre></td></tr></table></figure></li>
<li>build文件夹内使用cmake生成makefile  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake ../.</span><br></pre></td></tr></table></figure></li>
<li>编译项目  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li>执行程序  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure>
<img src="/2025/c++/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250126175713.png"></li>
</ul>
<h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><p>这里面的大部分命令都是固定语法，相当于我们只需要指定一些参数即可。 先整理上面几个命令，如果有其他命令需要用到，可以<a href="https://cmake.org/cmake/help/v2.8.8/cmake.html#section_Commands">去官网查看具体使用</a>（当然这个页面我觉得不会有人愿意看）</p>
<ul>
<li>cmake_minimum_required命令<ul>
<li><code>cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]][FATAL_ERROR])</code></li>
<li>用于指定需要的CMake 的最低版本</li>
<li>示例：<code>cmake_minimum_required(VERSION 3.28)</code></li>
</ul>
</li>
<li>project命令<ul>
<li><code>project( [languageName1 languageName2 … ] )</code></li>
<li>用于指定项目的名称，一般和项目的文件名称对应</li>
<li>示例：<code>project(main)</code></li>
</ul>
</li>
<li>add_executable命令<ul>
<li><code>add_executable( [WIN32] [MACOSX_BUNDLE][EXCLUDE_FROM_ALL] source1 source2 … sourceN)</code></li>
<li>用于指定从一组源文件 source1 source2 … sourceN 编译出一个可执行文件且命名为name</li>
<li>示例：<code>add_executable(main 1.cpp main.cpp)</code></li>
</ul>
</li>
<li>include_directories命令<ul>
<li><code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)</code></li>
<li>用于设定目录，这些设定的目录将被编译器用来查找 include 文件</li>
</ul>
</li>
</ul>
<h4 id="vscode自动生成CMakeLists-txt"><a href="#vscode自动生成CMakeLists-txt" class="headerlink" title="vscode自动生成CMakeLists.txt"></a>vscode自动生成CMakeLists.txt</h4><p>利用vscode中的cmaketools插件，可以自动生成cmakelist文件，例如需要include两个头文件生成就是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5.0)</span><br><span class="line">project(main VERSION 0.1.0 LANGUAGES C CXX)</span><br><span class="line"></span><br><span class="line">add_executable(main 1.cpp 2.cpp main.cpp)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在vscode安装<code>cmake</code>,<code>CMake Tools</code>,<code>Makefile Tools</code>三个插件，<code>Ctrl+shift+p</code>调出VSCode的指令面板，输入<code>cmake</code>，找到<code>cmake:quick start</code>，按照提示填写一个项目的名称，选择C++orC，选择构建库或者可执行文件，我这里只需要一个可执行文件，然后就会自动帮你生成一个CMakeLists</p>
<h2 id="OOP：面向对象"><a href="#OOP：面向对象" class="headerlink" title="OOP：面向对象"></a>OOP：面向对象</h2><h3 id="类的定义和使用"><a href="#类的定义和使用" class="headerlink" title="类的定义和使用"></a>类的定义和使用</h3><p><code>a_class.h</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stock</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//默认就是private，也可以不写这个关键字</span></span><br><span class="line">    std::string company;</span><br><span class="line">    <span class="type">long</span> shares;</span><br><span class="line">    <span class="type">double</span> share_val;</span><br><span class="line">    <span class="type">double</span> total_val;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        total_val = shares * share_val;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数用于初始化</span></span><br><span class="line">    <span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n = <span class="number">0</span>, <span class="type">double</span> pr = <span class="number">0.0</span>);</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buy</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span>;</span><br><span class="line">    <span class="comment">//const成员函数，保证函数不会修改调用对象</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//析构函数,一般不应显式调用，如果没用定义将隐式生成，用于完成清理工作，例如进行delate内存释放</span></span><br><span class="line">    ~<span class="built_in">Stock</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>a_class.cpp</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock::buy</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span>&#123;</span><br><span class="line">    shares += num;</span><br><span class="line">    share_val = price;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock::show</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Company:&quot;</span> &lt;&lt; company &lt;&lt; std::endl </span><br><span class="line">        &lt;&lt; <span class="string">&quot;Shares:&quot;</span> &lt;&lt; shares &lt;&lt; std::endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;Share Price:&quot;</span> &lt;&lt; share_val &lt;&lt; std::endl </span><br><span class="line">        &lt;&lt; <span class="string">&quot;Total Worth:&quot;</span> &lt;&lt; total_val &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::<span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n, <span class="type">double</span> pr)&#123;</span><br><span class="line">    company = co;</span><br><span class="line">    shares = n;</span><br><span class="line">    share_val = pr;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::~<span class="built_in">Stock</span>()&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;DEL &quot;</span> &lt;&lt; company &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="function">Stock <span class="title">triority</span><span class="params">(<span class="string">&quot;Triority&quot;</span>)</span></span>;</span><br><span class="line">    triority.<span class="built_in">buy</span>(<span class="number">114514</span>, <span class="number">3.1415926</span>);</span><br><span class="line">    triority.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果要创建同一个类的多个对象，可以这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Stock stocks[<span class="number">4</span>];</span><br><span class="line">stocks[<span class="number">0</span>].<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure>
<p>如果使用构造函数则必须这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Stock stocks[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="built_in">Stock</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1.0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Stock</span>(<span class="string">&quot;b&quot;</span>, <span class="number">1.0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>在 C++ 中，this指针是一个特殊的指针，它指向当前对象的实例。每一个对象都能通过this指针来访问自己的地址。可以在类的成员函数中使用，可以用来指向调用对象。</p>
<p>当一个对象的成员函数被调用时，编译器会隐式地传递该对象的地址作为 this 指针。</p>
<p>通过使用 this 指针，我们可以在成员函数中访问当前对象的成员变量，即使它们与函数参数或局部变量同名，这样可以避免命名冲突，并确保我们访问的是正确的变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;value &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>假设有一个Time类包含hours和minutes变量，求和的函数方法大概是这样<br><code>time.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Time <span class="title">Time::Sum</span><span class="params">(<span class="type">const</span> Time &amp; t)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>time.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Time <span class="title">Time::Sum</span><span class="params">(<span class="type">const</span> Time &amp; t)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    Time sum;</span><br><span class="line">    sum.minutes = minutes + t.minutes;</span><br><span class="line">    sum.hours = hours + t.hours + sum.minutes/<span class="number">60</span></span><br><span class="line">    sum.minutes %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要使用加法运算符进行这个操作，只需要把<code>Sum()</code>的名称改为<code>operator+()</code>即可<br><code>time.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time <span class="keyword">operator</span>+(<span class="type">const</span> Time &amp; t) <span class="type">const</span>;</span><br></pre></td></tr></table></figure>
<p><code>time.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time <span class="keyword">operator</span>+(<span class="type">const</span> Time &amp; t) <span class="type">const</span>&#123;</span><br><span class="line">    Time sum;</span><br><span class="line">    sum.minutes = minutes + t.minutes;</span><br><span class="line">    sum.hours = hours + t.hours + sum.minutes/<span class="number">60</span></span><br><span class="line">    sum.minutes %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此后计算时间总和就可以直接用<code>+</code>了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">time_total = time_1 + time_2;</span><br></pre></td></tr></table></figure>

<p>重载的使用有一些限制：</p>
<ul>
<li>重载后必须至少有一个操作数是用户定义的类型，避免用户为标准类型重载，比如重载<code>-</code>符号为求和</li>
<li>不能修改运算符优先级</li>
<li>重载不能违反原来的句法规则，比如将求模<code>%</code>重载成只用一个操作数</li>
<li>不能创建新的运算符</li>
<li>一些不能重载的运算符：<code>sizeof</code>等（懒得全写一遍了，这玩意估计八百年用不到一次）</li>
</ul>
<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>类对象的公有类发布方法是访问对象私有部分的唯一途径，但是这种限制有时候过于严格，因此提供了友元的概念，包括友元函数，友元类，友元成员函数。通过让函数成为类的友元可以赋予函数与类的成员函数相同的访问权限</p>
<p>在刚才的例子中可以实现时间的加法，那如果是乘法呢？由于运算符左侧是操作数，我们只能<code>A = B * double</code>而不能<code>A = double * B</code>，因为这个<code>double</code>不是对象。另一种解决方式就是使用友元</p>
<p>创建友元函数只要将其原型放在类声明中，并在前面加上<code>friend</code>关键字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="type">double</span> m, <span class="type">const</span> Time &amp; t);</span><br></pre></td></tr></table></figure>
<p>显然这个函数在类声明中调用但是不是成员函数，但是拥有成员函数一样的访问权限</p>
<p>因为他不是成员函数，所以编写定义时不要使用<code>Time::</code>限定符，也不要使用关键字<code>friend</code>，应该这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time <span class="keyword">operator</span>*(<span class="type">double</span> m, <span class="type">const</span> Time &amp; t)&#123;</span><br><span class="line">    Time result;</span><br><span class="line">    <span class="type">long</span> totalminutes = t.hours *m * <span class="number">60</span> + t.minutes * m;</span><br><span class="line">    result.hours = totalminutes / <span class="number">60</span>;</span><br><span class="line">    result.minutes = totalminutes % <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了这些声明和定义之后，就可以使用这一语句了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time_A = <span class="number">2.75</span> * Time_B</span><br></pre></td></tr></table></figure>

<h3 id="类的自动转换和强制类型转换"><a href="#类的自动转换和强制类型转换" class="headerlink" title="类的自动转换和强制类型转换"></a>类的自动转换和强制类型转换</h3><p>c++会自动转换兼容的类型，比如<code>int a = 3.5;</code>会只保留整数部分，不兼容的类型不会自动转换，但是也许可以强制类型转换<code>int * p = (int *) 10;</code>，因为<code>p</code>和<code>(int *)</code>都是指针，虽然这样的转换大概率毫无意义</p>
<p>对于类，当构造函数只接受一个参数时（或者其他参数有默认值），可以编写这样的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">AClass</span>(<span class="type">int</span> a);</span><br><span class="line"></span><br><span class="line">AClass aclass;</span><br><span class="line">aclass = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>如果需要避免意外的这种转换，可以在声明构造函数时使用关键字<code>explicit</code>，从而关闭隐式转换，但仍然允许显式转换:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AClass aclass;</span><br><span class="line">aclass = <span class="built_in">AClass</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">aclass = (AClass) <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>转换函数可以反过来将类对象转换为一个值，这是一种用户定义的强制类型转换。要创建一个转换函数要注意，转换函数必须是类方法，不能指定返回类型，而且不能有参数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转换为double类型的函数的原型，添加到类的声明中</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//或者int，出于严谨也可以加入const</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>
<p>然后在类定义中加入转换的方法（int返回double+0.5可以巧妙地四舍五入而不是丢弃小数部分）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">AClass::<span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span> (pounds + <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样调用时候便可以直接使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a_int = aclass;</span><br></pre></td></tr></table></figure>
<h3 id="类和动态内存分配"><a href="#类和动态内存分配" class="headerlink" title="类和动态内存分配"></a>类和动态内存分配</h3><p>使用<code>new</code>初始化对象的指针成员时应该注意一些事情：</p>
<ul>
<li>在构造函数中使用<code>new</code>初始化之后，应该在析构函数中使用<code>delete</code>，且必须互相兼容<code>new</code>对应<code>delete</code>且<code>new[]</code>对应于<code>delete[]</code></li>
<li>如果要进行对象的复制，应定义一个复制构造函数，进行实际内容的复制，而非指针。例如<code>b.str</code>是通过<code>new</code>创建的，类似<code>a.str = b.str</code>这样的直接复制只会复制地址，导致两个成员实际上指向同一份内容，并在当其中一个执行<code>delete</code>时导致数据损坏</li>
<li>也应该定义一个赋值运算符，通过深度复制将一个对象复制给另一个对象。具体来说，应该首先检查自我赋值的情况，释放成员指针以前指向的内存，复制数据而不是地址，返回一个指向调用对象的引用</li>
</ul>
<p>这部分内容可能比较难懂，需要一些举例才能完全理解，但是我现在又懒得在这补充一大堆代码作为举例，因此这件事交给未来的自己吧。在此之前可以直接阅读原书的P356</p>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>假设已经有了下面这个类（由前面的例子删减而来）<br><code>1.h</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stock</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string company;</span><br><span class="line">    <span class="type">long</span> shares;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    ~<span class="built_in">Stock</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>1.cpp</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock::show</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Company:&quot;</span> &lt;&lt; company &lt;&lt; std::endl </span><br><span class="line">        &lt;&lt; <span class="string">&quot;Shares:&quot;</span> &lt;&lt; shares &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::<span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n)&#123;</span><br><span class="line">    company = co;</span><br><span class="line">    shares = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::~<span class="built_in">Stock</span>()&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;DEL &quot;</span> &lt;&lt; company &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我现在想要让这个类新增一个<code>id</code>成员，但是不想改动已有的代码（甚至可能没有源代码），那么可以直接派生出一个类：<br><code>2.h</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;1.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stock_id</span> : <span class="keyword">public</span> Stock&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stock_id</span>(<span class="type">long</span> i, std::string co, <span class="type">long</span> n = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_id</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>2.cpp</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock_id::show_id</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">    Stock_id::<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock_id::<span class="built_in">Stock_id</span>(<span class="type">long</span> i, std::string co, <span class="type">long</span> n) : <span class="built_in">Stock</span>(co, n)&#123;</span><br><span class="line">    id = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>派生类需要自己的构造函数，也可以添加额外的数据成员和成员函数</p>
<p>但是注意不能直接访问基类的私有成员而必须通过基类方法进行访问，也就是说，<code>private</code>只能这个类自己访问，<code>protected</code>允许自己和派生类访问，<code>public</code>允许全部访问</p>
<p>派生类继承了所有的基类方法，但下列情况除外：基类的构造函数、析构函数和拷贝构造函数，基类的重载运算符，基类的友元函数。</p>
<h3 id="多态继承"><a href="#多态继承" class="headerlink" title="多态继承"></a>多态继承</h3><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Enter 2 nums:&quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">&quot;y = 0 is not allowed!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="built_in">catch</span>(<span class="type">const</span> <span class="type">char</span> * s)&#123;</span><br><span class="line">            std::cout &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z = x/y;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;x / y is:&quot;</span> &lt;&lt; z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>try</code>捕获异常，然后在<code>catch()</code>中对异常进行处理。（异常是新增的内容，一些老式编译器可能不支持）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@Triority-Desktop:~/c++l/build$ /home/triority/c++l/build/main</span><br><span class="line">Enter 2 nums:114 514</span><br><span class="line">x / y is:0.22179</span><br><span class="line">Enter 2 nums:114514 0</span><br><span class="line">y = 0 is not allowed!</span><br><span class="line">Enter 2 nums:^C</span><br></pre></td></tr></table></figure>

<div class="note danger modern"><p>这一部分原来书上的代码<code>catch (char* str)</code>运行会报错<code>terminate called after throwing an instance of &#39;char const*&#39;</code>，这里是我改正且简化的版本。<br>原因是应该捕获const异常<code>catch (const char const* strException)</code>，<a href="https://stackoverflow.com/questions/24458563/throwing-exceptions-error-terminate-called">参考链接</a>中还讨论了更加规范的错误处理方法和其他”style note: This tutorial smells, maybe you should find another source.”😨😨😨</p>
</div>

<p>想让<code>catch</code>块能够处理<code>try</code>块抛出的任何类型的异常，则必须在异常声明的括号内使用省略号<code>...</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="built_in">catch</span>(...)&#123;</span><br><span class="line">    <span class="comment">// 能处理任何异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者可以连续使用<code>catch</code>来分别处理多种异常：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="built_in">catch</span>(exc_a)&#123;</span><br><span class="line">&#125;<span class="built_in">catch</span>(exc_b)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常引发异常的函数会传递一个对象，从而可以使用不同的异常类型来区分不同函数在不同情况下引发的异常。对象也可以携带可以确定异常原因的信息。C++提供了一系列标准的异常，定义在<code>&lt;exception&gt;</code>中，我们可以在程序中使用这些标准的异常，或者通过继承和重载<code>exception</code>类来定义新的异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyException</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="type">char</span> * <span class="title">what</span> <span class="params">()</span> <span class="type">const</span> <span class="title">throw</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;C++ Exception&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">MyException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span>(MyException&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span>(std::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//其他的错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用的类和模板：string类-智能指针-STL标准模板库"><a href="#常用的类和模板：string类-智能指针-STL标准模板库" class="headerlink" title="常用的类和模板：string类,智能指针,STL标准模板库"></a>常用的类和模板：string类,智能指针,STL标准模板库</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p>使用<code>new</code>分配内存时别忘了要<code>delete</code>释放内存，但是别忘了这件事总是不可靠的。如果指针是一个对象就可以在过期时调用析构函数释放内存该有多好，这就是智能指针对象。</p>
<p>在C++11及之后的版本中，最常见的智能指针类型包括<code>std::unique_ptr</code>、<code>std::shared_ptr</code>和<code>std::weak_ptr</code>。</p>
<ul>
<li><code>std::unique_ptr</code>提供了独占所有权的语义，确保同一时间内只有一个智能指针指向特定的资源。在<code>std::unique_ptr</code>的生命周期结束时，它会自动释放所拥有的资源，无需程序员手动干预。</li>
<li><code>std::shared_ptr</code>实现了共享所有权模型，允许多个智能指针共同拥有对同一资源的引用。这种模型通过引用计数来实现，每当一个新的<code>std::shared_ptr</code>被创建并指向同一资源时，引用计数会增加；当<code>std::shared_ptr</code>被销毁时，引用计数减少。只有当引用计数降至零时，资源才会被释放。<code>std::shared_ptr</code>的使用也带来了循环引用的问题，这时</li>
<li><code>std::weak_ptr</code>提供了一种不控制对象生命周期的智能指针，它指向由<code>std::shared_ptr</code>管理的对象，但不增加引用计数。这允许程序员访问资源，同时避免循环引用导致的内存泄漏。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Report</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Report</span>(<span class="type">const</span> std::string s) : <span class="built_in">str</span>(s)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Object created!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Report</span>()&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Object deleted!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">comment</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Report&gt; <span class="title">ps</span> <span class="params">(<span class="keyword">new</span> Report(<span class="string">&quot;using unique_ptr&quot;</span>))</span></span>;</span><br><span class="line">    ps -&gt; <span class="built_in">comment</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@Triority-Desktop:~/c++l/build$ /home/triority/c++l/build/main</span><br><span class="line">Object created!</span><br><span class="line">using unique_ptr</span><br><span class="line">Object deleted!</span><br></pre></td></tr></table></figure>

<h3 id="STL标准模板库"><a href="#STL标准模板库" class="headerlink" title="STL标准模板库"></a>STL标准模板库</h3><blockquote>
<p>C++ 标准模板库（Standard Template Library，STL）是一套功能强大的 C++ 模板类和函数的集合，它提供了一系列通用的、可复用的算法和数据结构。</p>
<p>STL 的设计基于泛型编程，这意味着使用模板可以编写出独立于任何特定数据类型的代码。</p>
</blockquote>
<p>C++ 标准模板库的核心包括以下重要组件组件：</p>
<ul>
<li>容器（Containers）：容器是 STL 中最基本的组件之一，提供了各种数据结构，包括向量（vector）、链表（list）、队列（queue）、栈（stack）、集合（set）、映射（map）等。这些容器具有不同的特性和用途，可以根据实际需求选择合适的容器。</li>
<li>算法（Algorithms）：STL 提供了大量的算法，用于对容器中的元素进行各种操作，包括排序、搜索、复制、移动、变换等。这些算法在使用时不需要关心容器的具体类型，只需要指定要操作的范围即可。</li>
<li>迭代器（iterators）：迭代器用于遍历容器中的元素，允许以统一的方式访问容器中的元素，而不用关心容器的内部实现细节。STL 提供了多种类型的迭代器，包括随机访问迭代器、双向迭代器、前向迭代器和输入输出迭代器等。</li>
<li>函数对象（Function Objects）：函数对象是可以像函数一样调用的对象，可以用于算法中的各种操作。STL 提供了多种函数对象，包括一元函数对象、二元函数对象、谓词等，可以满足不同的需求。</li>
<li>适配器（Adapters）：适配器用于将一种容器或迭代器适配成另一种容器或迭代器，以满足特定的需求。STL 提供了多种适配器，包括栈适配器（stack adapter）、队列适配器（queue adapter）和优先队列适配器（priority queue adapter）等。</li>
</ul>
<h4 id="容器矢量vector"><a href="#容器矢量vector" class="headerlink" title="容器矢量vector"></a>容器矢量vector</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的整数向量</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; myVector;</span><br><span class="line">    <span class="comment">// 添加元素到向量中</span></span><br><span class="line">    myVector.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    myVector.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">    myVector.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="comment">// 访问向量中的元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Elements in the vector: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> element : myVector)std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 访问向量中的第一个元素myVector[0]</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;First element: &quot;</span> &lt;&lt; myVector[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 获取向量的大小myVector.size()</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size of the vector: &quot;</span> &lt;&lt; myVector.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 定义一个迭代器，也可以使用auto语法</span></span><br><span class="line">    <span class="comment">// auto pd = myVector.begin();</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;::iterator pd = myVector.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="comment">// 删除向量中的第2个元素，迭代器的行为和指针很相似，erase函数也可以接受两个迭代器参数进行[区间)删除</span></span><br><span class="line">    myVector.<span class="built_in">erase</span>(++pd);</span><br><span class="line">    <span class="comment">// 输出删除元素后的向量</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Elements in the vector after erasing: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> element : myVector)std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//除此以外还有insert()等其他方法，不再单独举例，insert接受三个迭代器参数，插入位置，要插入的容器对象的起始和结束位置</span></span><br><span class="line">    <span class="comment">// 清空向量</span></span><br><span class="line">    myVector.<span class="built_in">clear</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size of the vector after clearing: &quot;</span> &lt;&lt; myVector.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基于范围的循环和迭代器"><a href="#基于范围的循环和迭代器" class="headerlink" title="基于范围的循环和迭代器"></a>基于范围的循环和迭代器</h4><p>这段内容作为一些补充，考虑到前面没有提到循环这些语法</p>
<p>基于范围的for循环就是为了用于STL而设计的，上面的写法<code>for (int element : myVector)&#123;&#125;;</code>就是遍历整个容器的内容，方便一点可以使用<code>auto</code>语法<code>for (auto x : myVector) do_something(x);</code>，使用引用参数也可以在遍历的同时修改元素内容<code>for (auto &amp; x : myVector) do_something(x);</code></p>
<p>STL规定了5种迭代器：</p>
<ul>
<li>输入迭代器（Input Iterator）：只能进行单次读取操作，不能进行写入操作。</li>
<li>输出迭代器（Output Iterator）：只能进行单次写入操作，不能进行读取操作。</li>
<li>正向迭代器（Forward Iterator）：可以进行读取和写入操作，并且可以向前移动。</li>
<li>双向迭代器（Bidirectional Iterator）：除了可以进行正向迭代器的所有操作外，还可以向后移动。</li>
<li>随机访问迭代器（Random Access Iterator）：除了可以进行双向迭代器的所有操作外，还可以进行随机访问，例如通过下标访问元素。</li>
</ul>
<p>不同容器的迭代器的功能也不同：</p>
<table>
<thead>
<tr>
<th align="center">容器</th>
<th align="center">迭代器功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">vector</td>
<td align="center">随机访问</td>
</tr>
<tr>
<td align="center">deque</td>
<td align="center">随机访问</td>
</tr>
<tr>
<td align="center">list</td>
<td align="center">双向</td>
</tr>
<tr>
<td align="center">set &#x2F; multiset</td>
<td align="center">双向</td>
</tr>
<tr>
<td align="center">map &#x2F; multimap</td>
<td align="center">双向</td>
</tr>
<tr>
<td align="center">stack</td>
<td align="center">不支持迭代器</td>
</tr>
<tr>
<td align="center">queue</td>
<td align="center">不支持迭代器</td>
</tr>
<tr>
<td align="center">priority_queue</td>
<td align="center">不支持迭代器</td>
</tr>
</tbody></table>
<h4 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h4><p>关联容器存储的元素，是由一个个“键值对”（key, value）组成。通过键，往往能很快的检索到对应的值。</p>
<p>关联容器可以快速查找、读取或者删除所存储的元素，同时该类型的容器插入元素的效率比序列容器高。</p>
<p>STL提供了4种关联容器：</p>
<ul>
<li><code>set</code>：关键字即值，即只保存关键字的容器。set类似一个集合，用来存储同类型的元素</li>
<li><code>multiset</code>：关键字可重复出现的set</li>
<li><code>map</code>：元素是一些键值对：关键字起到索引的作用，值则表示与索引相关联的数据，数据的存放是有序的</li>
<li><code>multimap</code>：关键字可以重复出现的map</li>
</ul>
<blockquote>
<p>C++ 11 还新增了 4 种哈希容器,即<code>unordered_map</code>、<code>unordered_multimap</code>以及<code>unordered_set</code>、<code>unordered_multiset</code>。严格来说,它们也属于关联式容器。哈希容器底层采用的是哈希表。</p>
</blockquote>
<p>这里以<code>map</code>为例简单介绍部分用法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建空 map 容器，默认根据个键值对中键的值，对键值对做降序排序</span></span><br><span class="line">    std::map&lt;std::string, std::string, std::greater&lt;std::string&gt;&gt;myMap&#123; &#123;<span class="string">&quot;d&quot;</span>,<span class="string">&quot;4&quot;</span>&#125; &#125;;</span><br><span class="line">    <span class="comment">//向 map 容器添加新键值对</span></span><br><span class="line">    myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    myMap[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    myMap[<span class="string">&quot;c&quot;</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="comment">//输出当前 myMap 容器存储键值对的个数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;myMap size==&quot;</span> &lt;&lt; myMap.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//判断当前 myMap 容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!myMap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">//借助 myMap 容器迭代器，将该容器的键值对逐个输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = myMap.<span class="built_in">begin</span>(); i != myMap.<span class="built_in">end</span>(); ++i)std::cout &lt;&lt; i-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triority@Triority-Desktop:~/c++l/build$ /home/triority/c++l/build/main</span><br><span class="line">myMap size==4</span><br><span class="line">d 4</span><br><span class="line">c 3</span><br><span class="line">b 2</span><br><span class="line">a 1</span><br></pre></td></tr></table></figure>

<h2 id="书上内容的结束"><a href="#书上内容的结束" class="headerlink" title="书上内容的结束"></a>书上内容的结束</h2><p>原书最后两章节继续介绍了c++的IO操作和c++11新内容总结，这部分内容我认为完全没有必要单独写出来，内容又多又杂但是没有难度，用的时候上网查便是。</p>
<p>如果我的这篇文章接着写下去我认为应该写一些应用功能了，例如并发编程或者opencv这些标准外的库的使用，这部分内容就交给未来勤奋的自己咯！ <del>是某个勤奋的面壁者吗？</del></p>
<h1 id="继续深造"><a href="#继续深造" class="headerlink" title="继续深造"></a>继续深造</h1><h2 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h2><p>opencv的使用教程文章早已经写过，这里只写c++下需要进行的内容</p>
<p>OpenCV的功能被组织成多个模块，每个模块专注于不同的任务：</p>
<ul>
<li><code>Core</code>：提供基本数据结构和函数，如图像存储、矩阵操作、文件 I&#x2F;O 等。</li>
<li><code>Imgproc</code>：图像处理功能，包括滤波、几何变换、颜色空间转换、边缘检测、形态学操作等。</li>
<li><code>Highgui</code>：图像和视频的显示、窗口管理、用户交互（如鼠标事件、滑动条）。</li>
<li><code>Video</code>：视频处理功能，包括视频捕获、背景减除、光流计算等。</li>
<li><code>Calib3d</code>：相机标定、3D 重建、姿态估计等。</li>
<li><code>Features2d</code>：特征检测与描述，包括关键点检测、特征匹配等。</li>
<li><code>Objdetect</code>：目标检测功能，如 Haar 级联检测、HOG 检测等。</li>
<li><code>DNN</code>：深度学习模型的加载和推理，支持 TensorFlow、PyTorch、Caffe 等框架。</li>
<li><code>ML</code>：机器学习算法，如 KNN、SVM、决策树等。</li>
<li><code>Flann</code>：快速近似最近邻搜索（FLANN），用于特征匹配和高维数据搜索。</li>
<li><code>Photo</code>：图像修复、去噪、HDR 成像等。</li>
<li><code>Stitching</code>：图像拼接功能，用于创建全景图。</li>
<li><code>Shape</code>：形状分析和匹配。</li>
<li><code>Tracking</code>：目标跟踪算法，如 MIL、KCF、GOTURN 等。</li>
</ul>
<h3 id="安装和编译配置"><a href="#安装和编译配置" class="headerlink" title="安装和编译配置"></a>安装和编译配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure>
<p>然后是编译配置<code>CMakeLists.txt</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.16.3)</span><br><span class="line"></span><br><span class="line"># set the project name</span><br><span class="line">project(main)</span><br><span class="line"></span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line">#about opencv output(Optional)</span><br><span class="line">message(STATUS &quot;Opnecv library status: &quot;)</span><br><span class="line">message(STATUS &quot;&gt; version: $&#123;OpenCV_VERSION&#125; &quot;)</span><br><span class="line">message(STATUS &quot;&gt; libraries: $&#123;OpenCV_LIBS&#125; &quot;)</span><br><span class="line">message(STATUS &quot;&gt; include: $&#123;OpenCV_INCLUDE_DIRS&#125;  &quot;)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"># add the executable</span><br><span class="line">add_executable(main 1.cpp main.cpp)</span><br><span class="line"></span><br><span class="line">target_link_libraries(main $&#123;OpenCV_LIBS&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关于上面新增的内容做一些解释：</p>
<ul>
<li><code>find_package</code>：CMake 本身不提供任何关于搜索库的便捷方法，也不会对库本身的环境变量进行设置。它仅仅是按照优先级顺序在指定的搜索路径进行查找 Findxxx.cmake 文件和xxxConfig.cmake文件(其中xxx代表库的名字，特别注意的是有大小写之分)，这两个文件大体上是没有区别的，CMake 能够找到这两个文件中的任何一个，我们都能成功使用该库。</li>
<li><code>include_directories</code>：将指定目录添加到编译器的头文件搜索路径之下，指定的目录被解释成当前源码路径的相对路径</li>
<li><code>target_link_libraries</code>：该指令的作用为将目标文件与库文件进行链接</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>下面这个程序调用<code>wget</code>命令下载网站的图标（这一步是吃饱了撑的）然后显示图片</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;wget https://www.triority.cc/img/favicon.png&quot;</span>);</span><br><span class="line">    <span class="type">char</span> imageName[] = <span class="string">&quot;favicon.png&quot;</span>;</span><br><span class="line">    cv::Mat M = cv::<span class="built_in">imread</span>(imageName, cv::IMREAD_COLOR);</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>, M);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用神经网络方法的视频水印消除</title>
    <url>/2025/watermark_removal_tool/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="近期情况"><a href="#近期情况" class="headerlink" title="近期情况"></a>近期情况</h1><p>已经几个月没有在网站上更新文章了，已经到了被朋友催更的地步。一部分原因是前段时间在忙活毕业的事情，包括毕业论文和期末考试给我折磨的死去活来（主要是期末考试）；另一部分原因是一直在填坑，之前的好多项目做了一半没做完的，都在接着做，所有虽然没有新建文章但是之前的文章是一直在更新的啦</p>
<p>七月初毕业回家，全家出去玩了几天，回来之后开始谋划我都毕业旅行，打算去西藏和深圳。可惜去西藏的半个月花光了存款，深圳只好暂时放弃，不过考虑到温度，深圳香港寒假再去也是明智的选择。去西藏的经历的文章稍后推出（x</p>
<p>虽然原计划八月份要回学校干活了，但是宿舍没有解决，要在家等到9.2开学再去学校了。计划学点东西，包括深度学习，模电，信号处理（显然后两个是为自制短波台准备的，九月份开学去考b类操作证）以及背点单词准备六级。</p>
<p>去西藏无人机拍摄的素材有osd数据的叠加，虽然已经有现成的软件去除水印，但是吧神经网络学过那么久了从来没正经用过（pytorch学习笔记是已经有两年之久的2023年的文章了），于是就有了这篇文章</p>
<h1 id="水印数据"><a href="#水印数据" class="headerlink" title="水印数据"></a>水印数据</h1><p><img src="/2025/watermark_removal_tool/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250812155953.png"><br>上图即为穿越机拍摄的视频的截图。为了训练这个神经网络，首先需要大量对应的无水印视频和水印视频。电脑的机械硬盘里有大概700G的电影，都是没有任何水印的蓝光原盘高码率视频，除了超高码率的缺点以外非常适合用来生成数据集。最开始想直接做视频截取图片叠加水印，已经写好了视频抽帧的程序，但是后来想到应该让网络学习连续的帧片段而不是单独处理每一张图片，否则视频的连贯性肯定要出问题。反正两个造数据的程序都放在下面</p>
<p><code>video2img.py</code>:视频截取图片。由于视频码率很高处理特别慢还写了多进程<del>写了我好几个小时还没用上</del></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_processes = multiprocessing.cpu_count()</span><br><span class="line">img_time_interval = <span class="number">5</span></span><br><span class="line">img_size = (<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">img_Dir = <span class="string">&#x27;data\img&#x27;</span></span><br><span class="line">video_Dir = <span class="string">&#x27;D:\movie\data&#x27;</span></span><br><span class="line">video_Type = <span class="string">&#x27;.mkv&#x27;</span></span><br><span class="line">start_frame_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video2img</span>(<span class="params">video_path, img_path, interval, size, progress_queue, shared_total_counter</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_path):</span><br><span class="line">        os.makedirs(img_path)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: Could not open file <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    frame_interval = <span class="built_in">int</span>(fps * interval)</span><br><span class="line">    <span class="keyword">if</span> frame_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Frame interval is calculated as 0.&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> frame_count % frame_interval == <span class="number">0</span>:</span><br><span class="line">            frame = cv2.resize(frame, size)</span><br><span class="line">            output_image_path = os.path.join(img_path, <span class="string">f&quot;Frame_<span class="subst">&#123;shared_total_counter.value&#125;</span>.jpg&quot;</span>)</span><br><span class="line">            cv2.imwrite(output_image_path, frame)</span><br><span class="line">            shared_total_counter.value += <span class="number">1</span></span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">        progress_queue.put(<span class="number">1</span>)</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_video_files</span>(<span class="params">directory, file_type=<span class="string">&quot;.mkv&quot;</span></span>):</span><br><span class="line">    mkv_files_list = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(file_type):</span><br><span class="line">                full_path = os.path.join(root, file)</span><br><span class="line">                mkv_files_list.append(full_path)</span><br><span class="line">    <span class="keyword">return</span> mkv_files_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    video_path_list = find_video_files(video_Dir, video_Type)</span><br><span class="line">    frame_total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        cap = cv2.VideoCapture(i)</span><br><span class="line">        frame_total = frame_total + <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">        cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The total number of frames of the video is <span class="subst">&#123;frame_total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    progress_queue = manager.Queue()</span><br><span class="line">    frame_completed = <span class="number">0</span></span><br><span class="line">    shared_total_counter = manager.Value(<span class="string">&#x27;i&#x27;</span>, start_frame_num)</span><br><span class="line">    pool = multiprocessing.Pool(processes=num_processes)</span><br><span class="line">    pbar = tqdm(total=frame_total, desc=<span class="string">&quot;Video frame processing&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        pool.apply_async(video2img, args=(i, img_Dir, img_time_interval, img_size, progress_queue, shared_total_counter))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frame_completed &lt; frame_total:</span><br><span class="line">        _ = progress_queue.get()</span><br><span class="line">        frame_completed += <span class="number">1</span></span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pbar.close()</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nCompleted!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>video_mask.py</code>:视频截取指定帧长度的视频，并随机生成文字掩膜，保存视频片段、带水印的视频片段和掩膜图片。这个程序大部分是用Google AI Studio写的</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_processes = multiprocessing.cpu_count()</span><br><span class="line">img_time_interval = <span class="number">5</span></span><br><span class="line">img_size = (<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">img_Dir = <span class="string">&#x27;data\img&#x27;</span></span><br><span class="line">video_Dir = <span class="string">&#x27;D:\movie\data&#x27;</span></span><br><span class="line">video_Type = <span class="string">&#x27;.mkv&#x27;</span></span><br><span class="line">start_frame_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video2img</span>(<span class="params">video_path, img_path, interval, size, progress_queue, shared_total_counter</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_path):</span><br><span class="line">        os.makedirs(img_path)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: Could not open file <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    frame_interval = <span class="built_in">int</span>(fps * interval)</span><br><span class="line">    <span class="keyword">if</span> frame_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Frame interval is calculated as 0.&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> frame_count % frame_interval == <span class="number">0</span>:</span><br><span class="line">            frame = cv2.resize(frame, size)</span><br><span class="line">            output_image_path = os.path.join(img_path, <span class="string">f&quot;Frame_<span class="subst">&#123;shared_total_counter.value&#125;</span>.jpg&quot;</span>)</span><br><span class="line">            cv2.imwrite(output_image_path, frame)</span><br><span class="line">            shared_total_counter.value += <span class="number">1</span></span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">        progress_queue.put(<span class="number">1</span>)</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_video_files</span>(<span class="params">directory, file_type=<span class="string">&quot;.mkv&quot;</span></span>):</span><br><span class="line">    mkv_files_list = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(file_type):</span><br><span class="line">                full_path = os.path.join(root, file)</span><br><span class="line">                mkv_files_list.append(full_path)</span><br><span class="line">    <span class="keyword">return</span> mkv_files_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    video_path_list = find_video_files(video_Dir, video_Type)</span><br><span class="line">    frame_total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        cap = cv2.VideoCapture(i)</span><br><span class="line">        frame_total = frame_total + <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">        cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The total number of frames of the video is <span class="subst">&#123;frame_total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    progress_queue = manager.Queue()</span><br><span class="line">    frame_completed = <span class="number">0</span></span><br><span class="line">    shared_total_counter = manager.Value(<span class="string">&#x27;i&#x27;</span>, start_frame_num)</span><br><span class="line">    pool = multiprocessing.Pool(processes=num_processes)</span><br><span class="line">    pbar = tqdm(total=frame_total, desc=<span class="string">&quot;Video frame processing&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        pool.apply_async(video2img, args=(i, img_Dir, img_time_interval, img_size, progress_queue, shared_total_counter))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frame_completed &lt; frame_total:</span><br><span class="line">        _ = progress_queue.get()</span><br><span class="line">        frame_completed += <span class="number">1</span></span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pbar.close()</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nCompleted!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p>由于要处理的数据是运动性极强的FPV视频，需要使用循环神经网络来让网络考虑上一帧内容，以及用卷积神经网络来恢复图像。因此使用带有ConvLSTM的U-Net结构。</p>
<p>输入图像经过4组卷积，维度扩展到512维，然后在这里通过ConvLSTM将当前信息和过去记忆拼接考虑，并通过四个门控更新记忆和生成输出和新的隐藏状态，再经过4组和前面卷积组有跳跃连接的转置卷积恢复图像尺寸，最终得到三维度的RGB输出</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBlock, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.convblock = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convblock(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvLSTMCell</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, hidden_dim, kernel_size, bias</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvLSTMCell, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_dim = input_dim</span><br><span class="line">        <span class="variable language_">self</span>.hidden_dim = hidden_dim</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.padding = kernel_size[<span class="number">0</span>] // <span class="number">2</span>, kernel_size[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将输入门、遗忘门、输出门和细胞门的卷积操作合并计算</span></span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels=<span class="variable language_">self</span>.input_dim + <span class="variable language_">self</span>.hidden_dim,</span><br><span class="line">                              out_channels=<span class="number">4</span> * <span class="variable language_">self</span>.hidden_dim,  <span class="comment"># 4 for i, f, o, g gates</span></span><br><span class="line">                              kernel_size=<span class="variable language_">self</span>.kernel_size,</span><br><span class="line">                              padding=<span class="variable language_">self</span>.padding,</span><br><span class="line">                              bias=<span class="variable language_">self</span>.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_tensor, cur_state</span>):</span><br><span class="line">        h_cur, c_cur = cur_state</span><br><span class="line">        combined = torch.cat([input_tensor, h_cur], dim=<span class="number">1</span>)</span><br><span class="line">        combined_conv = <span class="variable language_">self</span>.conv(combined)</span><br><span class="line">        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, <span class="variable language_">self</span>.hidden_dim, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 计算4*门</span></span><br><span class="line">        i = torch.sigmoid(cc_i)</span><br><span class="line">        f = torch.sigmoid(cc_f)</span><br><span class="line">        o = torch.sigmoid(cc_o)</span><br><span class="line">        g = torch.tanh(cc_g)</span><br><span class="line">        c_next = f * c_cur + i * g</span><br><span class="line">        h_next = o * torch.tanh(c_next)</span><br><span class="line">        <span class="keyword">return</span> h_next, c_next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_hidden</span>(<span class="params">self, batch_size, image_size</span>):</span><br><span class="line">        height, width = image_size</span><br><span class="line">        <span class="keyword">return</span> (torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device),</span><br><span class="line">                torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.final_conv(current_frame)</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br></pre></td></tr></table></figure>

<h1 id="改进和效果记录"><a href="#改进和效果记录" class="headerlink" title="改进和效果记录"></a>改进和效果记录</h1><h2 id="RGB三维输入"><a href="#RGB三维输入" class="headerlink" title="RGB三维输入"></a>RGB三维输入</h2><p>让网络直接学习加了水印的视频，训练了五轮的效果如下（由于显存限制，图像降低分辨率到480*270之后给网络计算）</p>
<table>
<thead>
<tr>
<th align="center"><div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"video":{"url":"/2025/watermark_removal_tool/b34be09f1bee268c4fc728776988c605.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"video":{"url":"/2025/watermark_removal_tool/9a9d89aef96d5c03e600bdaa5e65f646.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
</tr>
</thead>
<tbody><tr>
<td align="center">水印视频</td>
<td align="center">去水印视频</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>看起来网络已经学会了什么样的东西是文字水印并进行了一定处理。于是，为什么要让模型自己学习文字水印长啥样啊我明明有掩膜图片的，无人机视频也能用白色过滤选中水印区域啊，于是稍作修改，改成叠加了掩膜的四个通道输入</p>
<h2 id="RGB-Mask四维输入"><a href="#RGB-Mask四维输入" class="headerlink" title="RGB+Mask四维输入"></a>RGB+Mask四维输入</h2><p><code>train.py</code>: 训练程序</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBlock, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.convblock = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convblock(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvLSTMCell</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, hidden_dim, kernel_size, bias</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvLSTMCell, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_dim = input_dim</span><br><span class="line">        <span class="variable language_">self</span>.hidden_dim = hidden_dim</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.padding = kernel_size[<span class="number">0</span>] // <span class="number">2</span>, kernel_size[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将输入门、遗忘门、输出门和细胞门的卷积操作合并计算</span></span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels=<span class="variable language_">self</span>.input_dim + <span class="variable language_">self</span>.hidden_dim,</span><br><span class="line">                              out_channels=<span class="number">4</span> * <span class="variable language_">self</span>.hidden_dim,  <span class="comment"># 4 for i, f, o, g gates</span></span><br><span class="line">                              kernel_size=<span class="variable language_">self</span>.kernel_size,</span><br><span class="line">                              padding=<span class="variable language_">self</span>.padding,</span><br><span class="line">                              bias=<span class="variable language_">self</span>.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_tensor, cur_state</span>):</span><br><span class="line">        h_cur, c_cur = cur_state</span><br><span class="line">        combined = torch.cat([input_tensor, h_cur], dim=<span class="number">1</span>)</span><br><span class="line">        combined_conv = <span class="variable language_">self</span>.conv(combined)</span><br><span class="line">        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, <span class="variable language_">self</span>.hidden_dim, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 计算4*门</span></span><br><span class="line">        i = torch.sigmoid(cc_i)</span><br><span class="line">        f = torch.sigmoid(cc_f)</span><br><span class="line">        o = torch.sigmoid(cc_o)</span><br><span class="line">        g = torch.tanh(cc_g)</span><br><span class="line">        c_next = f * c_cur + i * g</span><br><span class="line">        h_next = o * torch.tanh(c_next)</span><br><span class="line">        <span class="keyword">return</span> h_next, c_next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_hidden</span>(<span class="params">self, batch_size, image_size</span>):</span><br><span class="line">        height, width = image_size</span><br><span class="line">        <span class="keyword">return</span> (torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device),</span><br><span class="line">                torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.final_conv(current_frame)</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, sequence_length=<span class="number">10</span>, transform=<span class="literal">None</span>, size=(<span class="params"><span class="number">480</span>, <span class="number">270</span></span>)</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = pathlib.Path(root_dir)</span><br><span class="line">        <span class="variable language_">self</span>.clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;mask_clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;masks&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_dir.glob(<span class="string">&#x27;*.png&#x27;</span>)])</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_files), <span class="string">&quot;The number of dataset files does not match!&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.sequence_length = sequence_length</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform</span><br><span class="line">        <span class="comment"># 输入格式(width, height)，PyTorch(height, width)</span></span><br><span class="line">        <span class="variable language_">self</span>.target_size = size</span><br><span class="line">        <span class="variable language_">self</span>.target_size_torch = (size[<span class="number">1</span>], size[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.clips_files[idx])</span><br><span class="line">        mask_clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_clips_files[idx])</span><br><span class="line">        mask_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_files[idx])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">read_and_resize_frames</span>(<span class="params">video_path, num_frames, size</span>):</span><br><span class="line">            cap = cv2.VideoCapture(video_path)</span><br><span class="line">            total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_frames &lt; num_frames:</span><br><span class="line">                cap.release()</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Video <span class="subst">&#123;video_path&#125;</span> : total_frames (<span class="subst">&#123;total_frames&#125;</span>) &lt; num_frames (<span class="subst">&#123;num_frames&#125;</span>)。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            frames = []</span><br><span class="line">            start_frame_index = <span class="number">0</span></span><br><span class="line">            cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, start_frame_index)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_frames):</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                frame_resized = cv2.resize(frame, size, interpolation=cv2.INTER_AREA)</span><br><span class="line"></span><br><span class="line">                frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">                frames.append(TF.to_tensor(frame_rgb))</span><br><span class="line">            cap.release()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(frames) != num_frames:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Read frame failed: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> torch.stack(frames)</span><br><span class="line"></span><br><span class="line">        clips_seq = read_and_resize_frames(clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        masked_seq = read_and_resize_frames(mask_clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        mask_image = torchvision.io.read_image(<span class="built_in">str</span>(mask_path))</span><br><span class="line">        mask_image_resized = TF.resize(mask_image, <span class="variable language_">self</span>.target_size_torch, antialias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 归一化</span></span><br><span class="line">        clips_seq = clips_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line">        masked_seq = masked_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        mask_seq = mask_image_resized.<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">        mask_seq[mask_seq &gt; <span class="number">0.5</span>] = <span class="number">1.0</span></span><br><span class="line">        mask_seq[mask_seq &lt;= <span class="number">0.5</span>] = <span class="number">0.0</span></span><br><span class="line">        mask_seq = mask_seq.unsqueeze(<span class="number">0</span>).repeat(<span class="variable language_">self</span>.sequence_length, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        mask_seq = mask_seq[:, <span class="number">0</span>:<span class="number">1</span>, :, :]</span><br><span class="line">        masked_seq = torch.cat((masked_seq, mask_seq), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> masked_seq, clips_seq, mask_seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr = <span class="number">1e-4</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line">    sequence_len = <span class="number">4</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    dataset_path = <span class="string">&quot;D:\Dataset&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，路径为空字符串则从零开始训练且设置的轮次无效</span></span><br><span class="line">    load_model_path = <span class="string">&quot;model\epoch_7.pth&quot;</span></span><br><span class="line">    load_model_epoch = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line">    model = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    <span class="keyword">if</span> load_model_path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        load_model_epoch = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model.load_state_dict(torch.load(load_model_path, map_location=device))</span><br><span class="line"></span><br><span class="line">    criterion = nn.L1Loss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">    num_params = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Model has <span class="subst">&#123;num_params:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        shuffle=<span class="literal">True</span>,</span><br><span class="line">        num_workers=dataset_loader_workers,</span><br><span class="line">        pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        model.train()</span><br><span class="line">        total_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                restored_seq, h_last = model(masked_seq)</span><br><span class="line"></span><br><span class="line">                loss = criterion(restored_seq, clips_seq)</span><br><span class="line">                loss.backward()</span><br><span class="line">                optimizer.step()</span><br><span class="line">                total_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(loss=<span class="string">f&#x27;<span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        avg_loss = total_loss / <span class="built_in">len</span>(train_loader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss: <span class="subst">&#123;avg_loss:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        torch.save(model.state_dict(), <span class="string">f&quot;model\epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>infer.py</code>:有了训练的代码，这段程序就很容易了（懒得写了），以下内容由Google AI Studio生成。不要问为什么注释序号从2开始，因为第一部分被我整个删掉换成了<code>from train import RecurrentUNet</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> RecurrentUNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="comment"># 2. 推理主函数</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postprocess_and_write</span>(<span class="params">output_tensor, writer</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;辅助函数：后处理并写入文件 (无需修改)&quot;&quot;&quot;</span></span><br><span class="line">    output_tensor = output_tensor.squeeze(<span class="number">0</span>).cpu()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(output_tensor.shape[<span class="number">0</span>]):</span><br><span class="line">        frame = (output_tensor[i] + <span class="number">1.0</span>) / <span class="number">2.0</span></span><br><span class="line">        frame = (frame.clamp(<span class="number">0</span>, <span class="number">1</span>) * <span class="number">255</span>).byte()</span><br><span class="line">        frame_np = frame.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).numpy()</span><br><span class="line">        frame_bgr = cv2.cvtColor(frame_np, cv2.COLOR_RGB2BGR)</span><br><span class="line">        writer.write(frame_bgr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer_video_4channel</span>(<span class="params">config</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用4通道输入(RGB+Mask)对视频进行分段推理。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    device = torch.device(config[<span class="string">&quot;device&quot;</span>])</span><br><span class="line">    target_size = config[<span class="string">&quot;input_size&quot;</span>]</span><br><span class="line">    target_size_torch = (target_size[<span class="number">1</span>], target_size[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在加载模型...&quot;</span>)</span><br><span class="line">    <span class="comment"># *** 关键改动: in_channels=4 ***</span></span><br><span class="line">    <span class="comment"># 模型输出仍然是修复后的RGB图像，所以 out_channels=3</span></span><br><span class="line">    model = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    model.load_state_dict(torch.load(config[<span class="string">&quot;model_path&quot;</span>], map_location=device))</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;模型已加载到设备: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 新增: 加载并预处理掩膜 ---</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在加载并处理掩膜: <span class="subst">&#123;config[<span class="string">&#x27;mask_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    mask_image = torchvision.io.read_image(config[<span class="string">&#x27;mask_path&#x27;</span>])</span><br><span class="line">    mask_resized = TF.resize(mask_image, target_size_torch, antialias=<span class="literal">True</span>)</span><br><span class="line">    mask_tensor = mask_resized.<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">    mask_tensor[mask_tensor &gt; <span class="number">0.5</span>] = <span class="number">1.0</span></span><br><span class="line">    mask_tensor[mask_tensor &lt;= <span class="number">0.5</span>] = <span class="number">0.0</span></span><br><span class="line">    <span class="comment"># 确保是单通道 [1, H, W]，并放在CPU上以便和每帧拼接</span></span><br><span class="line">    mask_tensor_cpu = mask_tensor[<span class="number">0</span>:<span class="number">1</span>, :, :]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在处理输入视频: <span class="subst">&#123;config[<span class="string">&#x27;input_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    cap = cv2.VideoCapture(config[<span class="string">&quot;input_video_path&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">f&quot;无法打开视频文件: <span class="subst">&#123;config[<span class="string">&#x27;input_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    original_fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;VP09&#x27;</span>)</span><br><span class="line">    out_writer = cv2.VideoWriter(config[<span class="string">&quot;output_video_path&quot;</span>], fourcc, original_fps, target_size)</span><br><span class="line"></span><br><span class="line">    hidden_state = <span class="literal">None</span></span><br><span class="line">    chunk_frames = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">with</span> tqdm(total=total_frames, desc=<span class="string">&quot;正在推理&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 1. 预处理RGB帧</span></span><br><span class="line">                frame_resized = cv2.resize(frame, target_size, interpolation=cv2.INTER_AREA)</span><br><span class="line">                frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">                frame_tensor_3ch = TF.to_tensor(frame_rgb) * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 2. *** 关键改动: 拼接成4通道输入 ***</span></span><br><span class="line">                <span class="comment"># torch.cat 沿着第0维(通道维)拼接 [3,H,W] 和 [1,H,W] -&gt; [4,H,W]</span></span><br><span class="line">                four_channel_tensor = torch.cat([frame_tensor_3ch, mask_tensor_cpu], dim=<span class="number">0</span>)</span><br><span class="line">                chunk_frames.append(four_channel_tensor)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(chunk_frames) == config[<span class="string">&quot;chunk_size&quot;</span>]:</span><br><span class="line">                    input_chunk = torch.stack(chunk_frames).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">                    restored_chunk, hidden_state = model(input_chunk, hidden_state)</span><br><span class="line">                    postprocess_and_write(restored_chunk, out_writer)</span><br><span class="line">                    chunk_frames = []</span><br><span class="line"></span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> chunk_frames:</span><br><span class="line">                pbar.set_description(<span class="string">&quot;处理最后一段&quot;</span>)</span><br><span class="line">                input_chunk = torch.stack(chunk_frames).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">                restored_chunk, hidden_state = model(input_chunk, hidden_state)</span><br><span class="line">                postprocess_and_write(restored_chunk, out_writer)</span><br><span class="line"></span><br><span class="line">    cap.release()</span><br><span class="line">    out_writer.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n视频推理完成并保存到: <span class="subst">&#123;config[<span class="string">&#x27;output_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="comment"># 3. 配置和执行</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    inference_config = &#123;</span><br><span class="line">        <span class="string">&quot;model_path&quot;</span>: <span class="string">&quot;model/epoch_2.pth&quot;</span>,</span><br><span class="line">        <span class="comment"># 这是需要修复的视频，例如视频中某些区域被涂黑或有水印</span></span><br><span class="line">        <span class="string">&quot;input_video_path&quot;</span>: <span class="string">&quot;D:\Dataset\mask_clips\\0628.mp4&quot;</span>,</span><br><span class="line">        <span class="comment"># 这是对应的单张二值化掩膜图片，白色区域代表需要修复的地方</span></span><br><span class="line">        <span class="string">&quot;mask_path&quot;</span>: <span class="string">&quot;D:\Dataset\masks\\0628.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;output_video_path&quot;</span>: <span class="string">&quot;restored_video.mp4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input_size&quot;</span>: (<span class="number">480</span>, <span class="number">270</span>),</span><br><span class="line">        <span class="string">&quot;device&quot;</span>: <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;chunk_size&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pathlib.Path(inference_config[<span class="string">&quot;model_path&quot;</span>]).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 模型文件未找到 -&gt; <span class="subst">&#123;inference_config[<span class="string">&#x27;model_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> pathlib.Path(inference_config[<span class="string">&quot;input_video_path&quot;</span>]).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 输入视频未找到 -&gt; <span class="subst">&#123;inference_config[<span class="string">&#x27;input_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增对掩膜文件路径的检查</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> pathlib.Path(inference_config[<span class="string">&quot;mask_path&quot;</span>]).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 掩膜文件未找到 -&gt; <span class="subst">&#123;inference_config[<span class="string">&#x27;mask_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        infer_video_4channel(inference_config)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"video":{"url":"/2025/watermark_removal_tool/video_0628.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><img src="/2025/watermark_removal_tool/mask0628.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">水印视频</td>
<td align="center">掩膜图片</td>
</tr>
<tr>
<td align="center"><div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"video":{"url":"/2025/watermark_removal_tool/restored_epoch2_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
<td align="center"><div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"video":{"url":"/2025/watermark_removal_tool/restored_epoch8_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
</tr>
<tr>
<td align="center">训练2轮去水印效果</td>
<td align="center">训练8轮去水印效果</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<h2 id="最后卷积层溢出"><a href="#最后卷积层溢出" class="headerlink" title="最后卷积层溢出"></a>最后卷积层溢出</h2><p>此时去水印已经有一定效果，但是在纯色区域和动态区域出现了疑似像素值溢出的彩色条带状区域。</p>
<div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"video":{"url":"/2025/watermark_removal_tool/明显的白色溢出.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>考虑原因可能是网络最后一层是卷积层，输出的值没有范围限制，因此在后面追加了一个tanh层，现在RecurrentUNet类变成这样（只是在__init__和生成帧的两个位置改了两行）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tanh = nn.Tanh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.tanh(<span class="variable language_">self</span>.final_conv(current_frame))</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br></pre></td></tr></table></figure>

<p>经过10轮的训练和测试，溢出问题得到解决：</p>
<table>
<thead>
<tr>
<th align="center"><div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"video":{"url":"/2025/watermark_removal_tool/epoch5_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><div id="dplayer11" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer11"),"video":{"url":"/2025/watermark_removal_tool/epoch10_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><div id="dplayer12" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer12"),"video":{"url":"/2025/watermark_removal_tool/epoch10_0628_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
</tr>
</thead>
<tbody><tr>
<td align="center">训练5轮去水印效果</td>
<td align="center">训练10轮去水印效果</td>
<td align="center">与前面的测试作比较</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>看起来训练轮次的增加效果不是那么明显，在继续训练的同时排查一下是不是激活函数导致的梯度消失问题。以及考虑是否是损失函数的缺陷，考虑增加对抗损失？</p>
<h2 id="梯度消失和可视化"><a href="#梯度消失和可视化" class="headerlink" title="梯度消失和可视化"></a>梯度消失和可视化</h2><p>对于梯度消失问题，用TensorBoard进行参数可视化，检查梯度范数。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;runs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录梯度范数到TensorBoard，在backward()和step()之间</span></span><br><span class="line">    <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">        <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 使用writer.add_scalar来记录，标签格式 &#x27;grads/层名&#x27; 可以在 TensorBoard 中分组</span></span><br><span class="line">            writer.add_scalar(<span class="string">f&#x27;grads/<span class="subst">&#123;name&#125;</span>_norm&#x27;</span>, param.grad.norm(<span class="number">2</span>), epoch)</span><br><span class="line">    <span class="comment"># 记录总的梯度范数，以监控梯度爆炸</span></span><br><span class="line">    total_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;grads/total_norm&#x27;</span>, total_norm, epoch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束，关闭writer</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p>此时在终端输入启动命令即可在web查看具体图表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir=runs</span><br></pre></td></tr></table></figure>

<p>得到的数据如下，发生梯度消失的可能性比较大，特别是ConvLSTM梯度已经到-7次的数量级，很有可能与此处使用的多个sigmoid和tanh激活函数有关。</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2025/watermark_removal_tool/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816140036.png"></th>
<th align="center"><img src="/2025/watermark_removal_tool/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816140051.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>考虑增加应该跳跃连接来让梯度传播跳过ConvLSTM层？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ConvLSTM</span></span><br><span class="line">h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">hidden_state = (h, c)</span><br><span class="line"><span class="comment">#下一行为改动内容，原来是current_frame = h</span></span><br><span class="line">current_frame = h + current_frame</span><br></pre></td></tr></table></figure>

<p>反正先试一下，在10轮的基础上继续训练一轮</p>
<table>
<thead>
<tr>
<th align="center"><div id="dplayer13" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer13"),"video":{"url":"/2025/watermark_removal_tool/epoch10_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><div id="dplayer14" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer14"),"video":{"url":"/2025/watermark_removal_tool/epoch11_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原来10轮模型效果</td>
<td align="center">改动后训练1轮也就是第11轮效果</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>效果不太明显，同时发生了图片整体的偏色，当然也不排除训练次数不够的原因，有待继续训练测试，下面是梯度图像</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2025/watermark_removal_tool/%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816151838.png"></th>
<th align="center"><img src="/2025/watermark_removal_tool/%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816151901.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<h2 id="对抗损失函数"><a href="#对抗损失函数" class="headerlink" title="对抗损失函数"></a>对抗损失函数</h2><p>使用多层3D卷积网络作为判别器的对抗网络的推理作为损失函数<br>train_gan.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> RecurrentUNet, VideoDataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDiscriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        layers = []</span><br><span class="line">        <span class="comment"># 3D卷积输入视频片段[Batch, Channels, Time, Height, Width]，卷积核在时间维度上覆盖了3帧，在空间高度上覆盖4个像素</span></span><br><span class="line">        <span class="comment"># stride滑动步长，在时间维度上每次只移动1帧，在空间上每次移动2个像素，起到下采样的作用</span></span><br><span class="line">        <span class="comment"># padding输入视频数据块的三个维度的两侧填充0</span></span><br><span class="line">        layers.append(nn.Conv3d(in_channels, features[<span class="number">0</span>], kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="comment"># inplace=True会直接在存储输入数据的内存上进行计算并覆盖，节省一些GPU显存</span></span><br><span class="line">        layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(features) - <span class="number">1</span>):</span><br><span class="line">            layers.append(nn.Conv3d(features[i], features[i + <span class="number">1</span>],kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>))</span><br><span class="line">            layers.append(nn.InstanceNorm3d(features[i + <span class="number">1</span>]))</span><br><span class="line">            layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        layers.append(nn.Conv3d(features[-<span class="number">1</span>], <span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="variable language_">self</span>.model = nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.model(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr_gen = <span class="number">2e-4</span></span><br><span class="line">    lr_disc = <span class="number">2e-4</span></span><br><span class="line">    L1_weigth = <span class="number">100</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line">    sequence_len = <span class="number">4</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    dataset_path = <span class="string">&quot;D:\Dataset&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，输入0则从零开始训练</span></span><br><span class="line">    load_model_epoch = <span class="number">0</span></span><br><span class="line">    load_model_path_gen = <span class="string">&quot;&quot;</span></span><br><span class="line">    load_model_path_disc = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gen = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    disc = VideoDiscriminator(in_channels=<span class="number">3</span>).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> load_model_epoch != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Generator from <span class="subst">&#123;load_model_path_gen&#125;</span>&quot;</span>)</span><br><span class="line">        gen.load_state_dict(torch.load(load_model_path_gen, map_location=device))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Discriminator from <span class="subst">&#123;load_model_path_disc&#125;</span>&quot;</span>)</span><br><span class="line">        disc.load_state_dict(torch.load(load_model_path_disc, map_location=device))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adam优化器，学习率lr，beta1默认值0.9的动量大约是过去10个时间步梯度的平均，降低到0.5降低动量惯性</span></span><br><span class="line">    <span class="comment"># beta2默认值0.999的二阶矩估计大约是过去1000个时间步梯度平方的平均，保持较高的值有助于保持自适应学习率的稳定性，防止因为单次梯度爆炸而导致学习率剧烈变化</span></span><br><span class="line">    opt_gen = optim.Adam(gen.parameters(), lr=lr_gen, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    opt_disc = optim.Adam(disc.parameters(), lr=lr_disc, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    <span class="comment"># 二元交叉熵和L1损失函数</span></span><br><span class="line">    adversarial_loss_fn = nn.BCEWithLogitsLoss()</span><br><span class="line">    l1_loss_fn = nn.L1Loss()</span><br><span class="line"></span><br><span class="line">    num_params_gen = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> gen.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    num_params_disc = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> disc.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Generator has <span class="subst">&#123;num_params_gen:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Discriminator has <span class="subst">&#123;num_params_disc:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>,num_workers=dataset_loader_workers, pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        total_loss_g = <span class="number">0.0</span></span><br><span class="line">        total_loss_d = <span class="number">0.0</span></span><br><span class="line">        gen.train()</span><br><span class="line">        disc.train()</span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                <span class="comment"># masked_seq: [B, T, 4, H, W], clips_seq: [B, T, 3, H, W]</span></span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># disc训练</span></span><br><span class="line">                clips_fake, _ = gen(masked_seq)</span><br><span class="line">                opt_disc.zero_grad()</span><br><span class="line">                <span class="comment"># 将视频维度从[B, T, C, H, W]转换到[B, C, T, H, W]以匹配Conv3d</span></span><br><span class="line">                real_clip_for_disc = clips_seq.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                fake_clip_for_disc = clips_fake.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                <span class="comment"># 判别器分别推理真实视频与全1张量、虚假视频与全0张量，计算二元交叉熵损失</span></span><br><span class="line">                disc_real = disc(real_clip_for_disc)</span><br><span class="line">                loss_disc_real = adversarial_loss_fn(disc_real, torch.ones_like(disc_real))</span><br><span class="line">                <span class="comment"># 用 .detach() 阻止梯度传回生成器</span></span><br><span class="line">                disc_fake = disc(fake_clip_for_disc.detach())</span><br><span class="line">                loss_disc_fake = adversarial_loss_fn(disc_fake, torch.zeros_like(disc_fake))</span><br><span class="line">                <span class="comment"># 判别器总损失</span></span><br><span class="line">                loss_disc = (loss_disc_real + loss_disc_fake) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">                loss_disc.backward()</span><br><span class="line">                opt_disc.step()</span><br><span class="line">                total_loss_d += loss_disc.item()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 训练生成器</span></span><br><span class="line">                opt_gen.zero_grad()</span><br><span class="line">                disc_fake_for_gen = disc(fake_clip_for_disc)</span><br><span class="line">                loss_g_adv = adversarial_loss_fn(disc_fake_for_gen, torch.ones_like(disc_fake_for_gen))</span><br><span class="line">                loss_g_l1 = l1_loss_fn(clips_fake, clips_seq) * L1_weigth</span><br><span class="line">                loss_g = loss_g_adv + loss_g_l1</span><br><span class="line">                loss_g.backward()</span><br><span class="line">                opt_gen.step()</span><br><span class="line">                total_loss_g += loss_g.item()</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(</span><br><span class="line">                    Loss_D=<span class="string">f&#x27;<span class="subst">&#123;loss_disc.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    Loss_G=<span class="string">f&#x27;<span class="subst">&#123;loss_g.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_adv=<span class="string">f&#x27;<span class="subst">&#123;loss_g_adv.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_L1=<span class="string">f&#x27;<span class="subst">&#123;loss_g_l1.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            avg_loss_g = total_loss_g / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_d = total_loss_d / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss_G: <span class="subst">&#123;avg_loss_g:<span class="number">.4</span>f&#125;</span>, avg_loss_D: <span class="subst">&#123;avg_loss_d:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pathlib.Path(<span class="string">&quot;model_gan&quot;</span>).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        torch.save(gen.state_dict(), <span class="string">f&quot;model_gan/gen_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line">        torch.save(disc.state_dict(), <span class="string">f&quot;model_gan/disc_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用对抗损失后出现了一些进步和问题。14轮的模型在天空纯色区域明显好于13轮，但是出现少量溢出。再看15轮的结果就只剩溢出了……</p>
<table>
<thead>
<tr>
<th align="center"><div id="dplayer15" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer15"),"video":{"url":"/2025/watermark_removal_tool/GAN_epoch13_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><div id="dplayer16" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer16"),"video":{"url":"/2025/watermark_removal_tool/GAN_epoch14_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
<th align="center"><div id="dplayer17" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer17"),"video":{"url":"/2025/watermark_removal_tool/GAN_epoch15_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th>
</tr>
</thead>
<tbody><tr>
<td align="center">13轮</td>
<td align="center">14轮</td>
<td align="center">15轮</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
<p>这部分训练是和前一节的梯度消失解决同时在两台电脑上测试的，因此并没有在convlstm引入跳跃连接，考虑到有可能由此引发这一问题，因此下面是加入了这一结构之后的训练效果。很明显溢出问题再次消失。</p>
<h2 id="残差网络"><a href="#残差网络" class="headerlink" title="残差网络"></a>残差网络</h2><p>虽然在convLSTM层加入了跳跃连接，但是在u-net部分的卷积层仍然出现了一定的梯度消失。不仅在梯度数据上，实际效果上从十几轮开始几乎就没有进步了。因此将残差网络的思想也加入这里，在卷积块加入了一个1*1的卷积层直连输入输出。卷积层的激活函数也从ReLU改为LeakyReLU，避免出现死亡节点。此外初始化遗忘门值改为1让信息全部通过，在初期避免进入饱和区（后来看这一点收效甚微，循环网络部分依然有严重的梯度消失）。判别器的第一层也加入了归一化层避免梯度消失或爆炸。</p>
<p>此外还增加了tensorboard对训练数据进行检测，包括梯度权重和损失的可视化。</p>
<p>由于额外加入了多个卷积层，对显存的占用更高，因此将输入图像序列长度sequence_len从4改为3，以能在我的8G显存3060ti上运行。由于这样减少了计算量，在我的电脑上单个epoch训练时间从70分钟缩短到55分钟。</p>
<p>由于改动巨大，github上开启了一个新的分支<code>dev</code>来和之前的代码<code>main</code>相区别。如果后续再有大规模修改这部分内容将以<code>GAN_GRAD</code>分支保存并在<code>dev</code>继续改进。</p>
<p>tarin.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBlock, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.convblock = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> in_channels != out_channels:</span><br><span class="line">            <span class="variable language_">self</span>.shortcut = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(out_channels))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.shortcut = nn.Identity()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.final_activation = nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.convblock(x) + <span class="variable language_">self</span>.shortcut(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.final_activation(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvLSTMCell</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, hidden_dim, kernel_size, bias</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvLSTMCell, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_dim = input_dim</span><br><span class="line">        <span class="variable language_">self</span>.hidden_dim = hidden_dim</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.padding = kernel_size[<span class="number">0</span>] // <span class="number">2</span>, kernel_size[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将输入门、遗忘门、输出门和细胞门的卷积操作合并计算</span></span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels=<span class="variable language_">self</span>.input_dim + <span class="variable language_">self</span>.hidden_dim,</span><br><span class="line">                              out_channels=<span class="number">4</span> * <span class="variable language_">self</span>.hidden_dim,  <span class="comment"># 4 for i, f, o, g gates</span></span><br><span class="line">                              kernel_size=<span class="variable language_">self</span>.kernel_size,</span><br><span class="line">                              padding=<span class="variable language_">self</span>.padding,</span><br><span class="line">                              bias=<span class="variable language_">self</span>.bias)</span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            <span class="comment"># 初始化遗忘门的偏置为1.0，尽可能地保持打开</span></span><br><span class="line">            forget_gate_bias_start = hidden_dim</span><br><span class="line">            forget_gate_bias_end = <span class="number">2</span> * hidden_dim</span><br><span class="line">            <span class="variable language_">self</span>.conv.bias.data[forget_gate_bias_start:forget_gate_bias_end].fill_(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_tensor, cur_state</span>):</span><br><span class="line">        h_cur, c_cur = cur_state</span><br><span class="line">        combined = torch.cat([input_tensor, h_cur], dim=<span class="number">1</span>)</span><br><span class="line">        combined_conv = <span class="variable language_">self</span>.conv(combined)</span><br><span class="line">        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, <span class="variable language_">self</span>.hidden_dim, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 计算4*门</span></span><br><span class="line">        i = torch.sigmoid(cc_i)</span><br><span class="line">        f = torch.sigmoid(cc_f)</span><br><span class="line">        o = torch.sigmoid(cc_o)</span><br><span class="line">        g = torch.tanh(cc_g)</span><br><span class="line">        c_next = f * c_cur + i * g</span><br><span class="line">        h_next = o * torch.tanh(c_next)</span><br><span class="line">        <span class="keyword">return</span> h_next, c_next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_hidden</span>(<span class="params">self, batch_size, image_size</span>):</span><br><span class="line">        height, width = image_size</span><br><span class="line">        <span class="keyword">return</span> (torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device),</span><br><span class="line">                torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tanh = nn.Tanh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h + current_frame</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.tanh(<span class="variable language_">self</span>.final_conv(current_frame))</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, sequence_length=<span class="number">10</span>, transform=<span class="literal">None</span>, size=(<span class="params"><span class="number">480</span>, <span class="number">270</span></span>)</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = pathlib.Path(root_dir)</span><br><span class="line">        <span class="variable language_">self</span>.clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;mask_clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;masks&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_dir.glob(<span class="string">&#x27;*.png&#x27;</span>)])</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_files), <span class="string">&quot;The number of dataset files does not match!&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.sequence_length = sequence_length</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform</span><br><span class="line">        <span class="comment"># 输入格式(width, height)，PyTorch(height, width)</span></span><br><span class="line">        <span class="variable language_">self</span>.target_size = size</span><br><span class="line">        <span class="variable language_">self</span>.target_size_torch = (size[<span class="number">1</span>], size[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.clips_files[idx])</span><br><span class="line">        mask_clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_clips_files[idx])</span><br><span class="line">        mask_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_files[idx])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">read_and_resize_frames</span>(<span class="params">video_path, num_frames, size</span>):</span><br><span class="line">            cap = cv2.VideoCapture(video_path)</span><br><span class="line">            total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_frames &lt; num_frames:</span><br><span class="line">                cap.release()</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Video <span class="subst">&#123;video_path&#125;</span> : total_frames (<span class="subst">&#123;total_frames&#125;</span>) &lt; num_frames (<span class="subst">&#123;num_frames&#125;</span>)。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            frames = []</span><br><span class="line">            start_frame_index = <span class="number">0</span></span><br><span class="line">            cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, start_frame_index)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_frames):</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                frame_resized = cv2.resize(frame, size, interpolation=cv2.INTER_AREA)</span><br><span class="line"></span><br><span class="line">                frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">                frames.append(TF.to_tensor(frame_rgb))</span><br><span class="line">            cap.release()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(frames) != num_frames:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Read frame failed: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> torch.stack(frames)</span><br><span class="line"></span><br><span class="line">        clips_seq = read_and_resize_frames(clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        masked_seq = read_and_resize_frames(mask_clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        mask_image = torchvision.io.read_image(<span class="built_in">str</span>(mask_path))</span><br><span class="line">        mask_image_resized = TF.resize(mask_image, <span class="variable language_">self</span>.target_size_torch, antialias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 归一化</span></span><br><span class="line">        clips_seq = clips_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line">        masked_seq = masked_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        mask_seq = mask_image_resized.<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">        mask_seq[mask_seq &gt; <span class="number">0.5</span>] = <span class="number">1.0</span></span><br><span class="line">        mask_seq[mask_seq &lt;= <span class="number">0.5</span>] = <span class="number">0.0</span></span><br><span class="line">        mask_seq = mask_seq.unsqueeze(<span class="number">0</span>).repeat(<span class="variable language_">self</span>.sequence_length, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        mask_seq = mask_seq[:, <span class="number">0</span>:<span class="number">1</span>, :, :]</span><br><span class="line">        masked_seq = torch.cat((masked_seq, mask_seq), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> masked_seq, clips_seq, mask_seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr = <span class="number">1e-4</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line">    sequence_len = <span class="number">4</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    dataset_path = <span class="string">r&quot;D:/Dataset&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，路径为空字符串则从零开始训练且设置的轮次无效</span></span><br><span class="line">    load_model_path = <span class="string">r&quot;model/epoch_10.pth&quot;</span></span><br><span class="line">    load_model_epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    writer = SummaryWriter(<span class="string">r&#x27;runs/gradient_monitoring&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line">    model = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    <span class="keyword">if</span> load_model_path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        load_model_epoch = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model.load_state_dict(torch.load(load_model_path, map_location=device))</span><br><span class="line"></span><br><span class="line">    criterion = nn.L1Loss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">    num_params = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Model has <span class="subst">&#123;num_params:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        shuffle=<span class="literal">True</span>,</span><br><span class="line">        num_workers=dataset_loader_workers,</span><br><span class="line">        pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        model.train()</span><br><span class="line">        total_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                restored_seq, h_last = model(masked_seq)</span><br><span class="line"></span><br><span class="line">                loss = criterion(restored_seq, clips_seq)</span><br><span class="line">                loss.backward()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">                    <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="comment"># 使用writer.add_scalar来记录，标签格式 &#x27;grads/层名&#x27; 可以在 TensorBoard 中分组</span></span><br><span class="line">                        writer.add_scalar(<span class="string">f&#x27;grads/<span class="subst">&#123;name&#125;</span>_norm&#x27;</span>, param.grad.norm(<span class="number">2</span>), epoch)</span><br><span class="line">                <span class="comment"># 记录总的梯度范数，以监控梯度爆炸</span></span><br><span class="line">                total_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;grads/total_norm&#x27;</span>, total_norm, epoch)</span><br><span class="line"></span><br><span class="line">                optimizer.step()</span><br><span class="line">                total_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(loss=<span class="string">f&#x27;<span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        avg_loss = total_loss / <span class="built_in">len</span>(train_loader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss: <span class="subst">&#123;avg_loss:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        torch.save(model.state_dict(), <span class="string">f&quot;model/epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tarin_GAN.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> RecurrentUNet, VideoDataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDiscriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        layers = []</span><br><span class="line">        <span class="comment"># 3D卷积输入视频片段[Batch, Channels, Time, Height, Width]，卷积核在时间维度上覆盖了3帧，在空间高度上覆盖4个像素</span></span><br><span class="line">        <span class="comment"># stride滑动步长，在时间维度上每次只移动1帧，在空间上每次移动2个像素，起到下采样的作用</span></span><br><span class="line">        <span class="comment"># padding输入视频数据块的三个维度的两侧填充0</span></span><br><span class="line">        layers.append(nn.Conv3d(in_channels, features[<span class="number">0</span>], kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        layers.append(nn.InstanceNorm3d(features[<span class="number">0</span>]))</span><br><span class="line">        <span class="comment"># inplace=True会直接在存储输入数据的内存上进行计算并覆盖，节省一些GPU显存</span></span><br><span class="line">        layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(features) - <span class="number">1</span>):</span><br><span class="line">            layers.append(nn.Conv3d(features[i], features[i + <span class="number">1</span>],kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>))</span><br><span class="line">            layers.append(nn.InstanceNorm3d(features[i + <span class="number">1</span>]))</span><br><span class="line">            layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        layers.append(nn.Conv3d(features[-<span class="number">1</span>], <span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="variable language_">self</span>.model = nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.model(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr_gen = <span class="number">2e-4</span></span><br><span class="line">    lr_disc = <span class="number">2e-4</span></span><br><span class="line">    L1_weigth = <span class="number">100</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">100</span></span><br><span class="line">    sequence_len = <span class="number">3</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">6</span></span><br><span class="line">    Gradient_intervals = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集和模型保存路径</span></span><br><span class="line">    dataset_path = <span class="string">r&quot;D:/Dataset&quot;</span></span><br><span class="line">    model_save_dir = <span class="string">r&quot;model_gan_2&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，输入0则从零开始训练</span></span><br><span class="line">    load_model_epoch = <span class="number">9</span></span><br><span class="line">    load_model_path_gen = <span class="string">r&quot;model_gan_2/gen_epoch_9.pth&quot;</span></span><br><span class="line">    load_model_path_disc = <span class="string">r&quot;model_gan_2/disc_epoch_9.pth&quot;</span></span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer = SummaryWriter(<span class="string">&#x27;runs/GAN_2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    gen = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    disc = VideoDiscriminator(in_channels=<span class="number">3</span>).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> load_model_epoch != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Generator from <span class="subst">&#123;load_model_path_gen&#125;</span>&quot;</span>)</span><br><span class="line">        gen.load_state_dict(torch.load(load_model_path_gen, map_location=device))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Discriminator from <span class="subst">&#123;load_model_path_disc&#125;</span>&quot;</span>)</span><br><span class="line">        disc.load_state_dict(torch.load(load_model_path_disc, map_location=device))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adam优化器，学习率lr，beta1默认值0.9的动量大约是过去10个时间步梯度的平均，降低到0.5降低动量惯性</span></span><br><span class="line">    <span class="comment"># beta2默认值0.999的二阶矩估计大约是过去1000个时间步梯度平方的平均，保持较高的值有助于保持自适应学习率的稳定性，防止因为单次梯度爆炸而导致学习率剧烈变化</span></span><br><span class="line">    opt_gen = optim.Adam(gen.parameters(), lr=lr_gen, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    opt_disc = optim.Adam(disc.parameters(), lr=lr_disc, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    <span class="comment"># 二元交叉熵和L1损失函数</span></span><br><span class="line">    adversarial_loss_fn = nn.BCEWithLogitsLoss()</span><br><span class="line">    l1_loss_fn = nn.L1Loss()</span><br><span class="line"></span><br><span class="line">    num_params_gen = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> gen.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    num_params_disc = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> disc.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Generator has <span class="subst">&#123;num_params_gen:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Discriminator has <span class="subst">&#123;num_params_disc:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>,num_workers=dataset_loader_workers, pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    writer.add_graph(gen, <span class="built_in">next</span>(<span class="built_in">iter</span>(train_loader))[<span class="number">0</span>].to(device))</span><br><span class="line">    writer.add_graph(disc, <span class="built_in">next</span>(<span class="built_in">iter</span>(train_loader))[<span class="number">1</span>].permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>).to(device))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        total_loss_g = <span class="number">0.0</span></span><br><span class="line">        total_loss_d = <span class="number">0.0</span></span><br><span class="line">        total_loss_g_L1 = <span class="number">0.0</span></span><br><span class="line">        total_loss_g_adv = <span class="number">0.0</span></span><br><span class="line">        gen.train()</span><br><span class="line">        disc.train()</span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                <span class="comment"># masked_seq: [B, T, 4, H, W], clips_seq: [B, T, 3, H, W]</span></span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># disc训练</span></span><br><span class="line">                clips_fake, _ = gen(masked_seq)</span><br><span class="line">                opt_disc.zero_grad()</span><br><span class="line">                <span class="comment"># 将视频维度从[B, T, C, H, W]转换到[B, C, T, H, W]以匹配Conv3d</span></span><br><span class="line">                real_clip_for_disc = clips_seq.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                fake_clip_for_disc = clips_fake.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                <span class="comment"># 判别器分别推理真实视频与全1张量、虚假视频与全0张量，计算二元交叉熵损失</span></span><br><span class="line">                disc_real = disc(real_clip_for_disc)</span><br><span class="line">                loss_disc_real = adversarial_loss_fn(disc_real, torch.ones_like(disc_real))</span><br><span class="line">                <span class="comment"># 用 .detach() 阻止梯度传回生成器</span></span><br><span class="line">                disc_fake = disc(fake_clip_for_disc.detach())</span><br><span class="line">                loss_disc_fake = adversarial_loss_fn(disc_fake, torch.zeros_like(disc_fake))</span><br><span class="line">                <span class="comment"># 判别器总损失</span></span><br><span class="line">                loss_disc = (loss_disc_real + loss_disc_fake) / <span class="number">2</span></span><br><span class="line">                loss_disc.backward()</span><br><span class="line">                <span class="comment"># 记录梯度权重</span></span><br><span class="line">                <span class="keyword">if</span> batch_idx % Gradient_intervals == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> name, param <span class="keyword">in</span> disc.named_parameters():</span><br><span class="line">                        <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                            <span class="comment"># 使用 f-string 为每个梯度直方图创建唯一的、有组织的标签</span></span><br><span class="line">                            <span class="comment"># &#x27;Gradients/&#x27; 会在 TensorBoard 中创建一个名为 Gradients 的分组</span></span><br><span class="line">                            writer.add_histogram(</span><br><span class="line">                                tag=<span class="string">f&#x27;Grad_disc/<span class="subst">&#123;name&#125;</span>&#x27;</span>,values=param.grad,global_step=epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                opt_disc.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 训练生成器</span></span><br><span class="line">                opt_gen.zero_grad()</span><br><span class="line">                disc_fake_for_gen = disc(fake_clip_for_disc)</span><br><span class="line">                loss_g_adv = adversarial_loss_fn(disc_fake_for_gen, torch.ones_like(disc_fake_for_gen))</span><br><span class="line">                loss_g_l1 = l1_loss_fn(clips_fake, clips_seq) * L1_weigth</span><br><span class="line">                loss_g = loss_g_adv + loss_g_l1</span><br><span class="line">                loss_g.backward()</span><br><span class="line">                <span class="keyword">if</span> batch_idx % Gradient_intervals == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> name, param <span class="keyword">in</span> gen.named_parameters():</span><br><span class="line">                        <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                            writer.add_histogram(tag=<span class="string">f&#x27;Grad_gan/<span class="subst">&#123;name&#125;</span>&#x27;</span>,values=param.grad,global_step=epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                opt_gen.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 统计记录</span></span><br><span class="line">                total_loss_g += loss_g.item()</span><br><span class="line">                total_loss_d += loss_disc.item()</span><br><span class="line">                total_loss_g_L1 += loss_g_l1.item()</span><br><span class="line">                total_loss_g_adv += loss_g_adv.item()</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_g_l1&#x27;</span>, loss_g_l1.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_g_adv&#x27;</span>, loss_g_adv.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_g&#x27;</span>, loss_g.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_disc&#x27;</span>, loss_disc.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/D_real&#x27;</span>, loss_disc_real.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/D_fake&#x27;</span>, loss_disc_fake.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(</span><br><span class="line">                    D_real=<span class="string">f&#x27;<span class="subst">&#123;loss_disc_real.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    D_fake=<span class="string">f&#x27;<span class="subst">&#123;loss_disc_fake.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    Loss_D=<span class="string">f&#x27;<span class="subst">&#123;loss_disc.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    Loss_G=<span class="string">f&#x27;<span class="subst">&#123;loss_g.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_adv=<span class="string">f&#x27;<span class="subst">&#123;loss_g_adv.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_L1=<span class="string">f&#x27;<span class="subst">&#123;loss_g_l1.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            avg_loss_g = total_loss_g / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_d = total_loss_d / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_g_L1 = total_loss_g_L1 / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_d_adv = total_loss_g_adv / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss_G: <span class="subst">&#123;avg_loss_g:<span class="number">.4</span>f&#125;</span>, avg_loss_D: <span class="subst">&#123;avg_loss_d:<span class="number">.4</span>f&#125;</span>, avg_loss_g_L1: <span class="subst">&#123;avg_loss_g_L1:<span class="number">.4</span>f&#125;</span>, avg_loss_d_adv: <span class="subst">&#123;avg_loss_d_adv:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pathlib.Path(<span class="string">&quot;model_gan&quot;</span>).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        torch.save(gen.state_dict(), <span class="string">f&quot;<span class="subst">&#123;model_save_dir&#125;</span>/gen_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line">        torch.save(disc.state_dict(), <span class="string">f&quot;<span class="subst">&#123;model_save_dir&#125;</span>/disc_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过测试，效果提升极其显著。这里将前一两节内容结合得到的模型和多处改进的当前模型的推理结果进行对比，两者在5、10、20、30轮的效果分别如何：</p>
<table>
<thead>
<tr>
<th align="center">—</th>
<th align="center">仅在循环网络部分加入一处跳跃连接</th>
<th align="center">卷积层也加入残差网络等修改之后</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5轮</td>
<td align="center"><div id="dplayer18" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer18"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_5_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
<td align="center"><div id="dplayer19" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer19"),"video":{"url":"/2025/watermark_removal_tool/GAN_2_5_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
</tr>
<tr>
<td align="center">10轮</td>
<td align="center"><div id="dplayer20" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer20"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_10_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
<td align="center"><div id="dplayer21" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer21"),"video":{"url":"/2025/watermark_removal_tool/GAN_2_10_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
</tr>
<tr>
<td align="center">20轮</td>
<td align="center"><div id="dplayer22" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer22"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_20_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
<td align="center">bad asset path...</td>
</tr>
<tr>
<td align="center">30轮</td>
<td align="center"><div id="dplayer24" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer24"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_30_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td>
<td align="center">bad asset path...</td>
</tr>
<tr>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
<td align="center"><img width=2000/></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino舵机库控制舵机和无刷电调</title>
    <url>/2023/Arduino-Servo-h/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>当在UNO使用<code>&lt;Servo.h&gt;</code>时，由于占用的9和10号数字引脚的PWM定时器，因此它们无法使用<code>analogWrite()</code>语句。但是可以接作为舵机控制信号引脚。其他型号详见各自文档。</p>
<h1 id="使用-lt-Servo-h-gt-控制舵机"><a href="#使用-lt-Servo-h-gt-控制舵机" class="headerlink" title="使用&lt;Servo.h&gt;控制舵机"></a>使用&lt;Servo.h&gt;控制舵机</h1><p>有两种控制方法，一种是直接定角度控制，一种是更加准确通用的脉宽控制。后面控制无刷电调的程序使用的就是脉宽控制方式。所以这里只写角度控制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;Servo.h&gt;</span><br><span class="line"></span><br><span class="line">Servo myServo;</span><br><span class="line"></span><br><span class="line">String comStr = &quot;&quot;;</span><br><span class="line">int comInt=0;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  // put your setup code here, to run once:</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  while(Serial.read()&gt;=0)&#123;&#125; // clear serial port&#x27;s buffer</span><br><span class="line">  </span><br><span class="line">  myServo.attach(9); // attach myServo to GPIO_09</span><br><span class="line">  myServo.write(90);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  // put your main code here, to run repeatedly:</span><br><span class="line">  if (Serial.available() &gt; 0)&#123;</span><br><span class="line">    // listen the Serial port, run the code when something catched..</span><br><span class="line">    delay(50);</span><br><span class="line">    comStr = Serial.readString(); // read out the string</span><br><span class="line">    comInt = comStr.toInt(); // convert the string to integer</span><br><span class="line">    comInt = constrain(comInt, 0, 180); // between to 0 and 180</span><br><span class="line">    Serial.println(comInt);</span><br><span class="line">    </span><br><span class="line">    myServo.write(comInt);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="使用-lt-Servo-h-gt-控制无刷电机电调"><a href="#使用-lt-Servo-h-gt-控制无刷电机电调" class="headerlink" title="使用&lt;Servo.h&gt;控制无刷电机电调"></a>使用&lt;Servo.h&gt;控制无刷电机电调</h1><p>可使用串口发送<code>1000-2000</code>控制速度。</p>
<p>电调所期望的控制信号通常是频率为50Hz的PWM信号，通过占空比来控制“油门”的大小，1ms高电平为电调识别的最低“油门”（转速0%,PWM50%），2ms高电平则为最高可识别的“油门”（转速100%,PWM100%）。</p>
<p>第一次开机时需要对电调进行校准，具体校准流程如下：</p>
<ul>
<li>正常电调上电提示音是do re mi, 哔哔哔 哔<del>，100%油门的设置要在哔</del>之前操作，否则电调会直接进入正常上电状态，而不会进入校准模式</li>
<li>油门设置到100%等待2s(哔哔两声)</li>
<li>油门设置到0%等待1s(哔一声)</li>
<li>油门全行程校准完成</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;Servo.h&gt;</span><br><span class="line"></span><br><span class="line">Servo myServo;</span><br><span class="line"></span><br><span class="line">String comStr = &quot;&quot;;</span><br><span class="line">int comInt=0;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  // put your setup code here, to run once:</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  while(Serial.read()&gt;=0)&#123;&#125; // clear serial port&#x27;s buffer</span><br><span class="line">  </span><br><span class="line">  myServo.attach(9); // attach myServo to GPIO_09</span><br><span class="line">  myServo.writeMicroseconds(1000); // set initial PWM to minimal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  // put your main code here, to run repeatedly:</span><br><span class="line">  if (Serial.available() &gt; 0)&#123;</span><br><span class="line">    // listen the Serial port, run the code when something catched..</span><br><span class="line">    delay(10);</span><br><span class="line">    comStr = Serial.readString(); // read out the string</span><br><span class="line">    comInt = comStr.toInt(); // convert the string to integer</span><br><span class="line">    comInt = constrain(comInt, 1000, 2000); // limit the integer between to 1000 and 2000</span><br><span class="line"></span><br><span class="line">    Serial.println(comInt); // show the integer number on Serial Monitor</span><br><span class="line">    myServo.writeMicroseconds(comInt); // write the integer number to Servo in unit of micro-second</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>中国矿业大学（北京）3D打印社团招新简述（2022-2023学年末）</title>
    <url>/2023/CUMTB-CLUB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><blockquote>
<p>社团简介</p>
</blockquote>
<p>Hello！这里是中国矿业大学（北京）3D打印社团，一个实现创意想法的地方，一个在实践中学习的平台。</p>
<p>在这里，你可以做出曾经难以想象的各种东西：无论是从买一颗颗螺丝开始自制3D打印机，还是做一个轮腿机器人，或者做一个可以航拍的无人机，甚至一个电磁炮<del>(威力过小不敢展示)</del>……这些都是我们曾经做过的，希望有你的加入，我们可以互相帮助做出更有趣更有创意的东西。</p>
<blockquote>
<p>社团资源</p>
</blockquote>
<p>在沙河校区我们有两个实验室可以使用，硬件设备基本满足你对搓东西的一切幻想：<strong>GeForce RTX™ 3090 Ti</strong>，3D打印机，激光切割，车床，铣床……</p>
<p>也许你以前没接触过这些内容，但是只要你感兴趣，我们愿意从0开始带你一起玩。我们有每周例行活动，为大家讲如何实现自己的想法。如果你感兴趣，可以和现任社长联系常驻实验室，更深一步了解和参与我们社团。</p>
<blockquote>
<p>最重要的是什么</p>
</blockquote>
<p>虽然社团已经有很多的设备，但我想说的是，有没有足够的硬件设备永远不是你的障碍。在社团成立初期我们什么都没有的时候，并不影响我们实践自己的想法，最重要的永远是一个充满智慧和创意的大脑。第一任副社长(2021-2022学年)就是最好的榜样。</p>
<h1 id="历史，2022-2023学年"><a href="#历史，2022-2023学年" class="headerlink" title="历史，2022-2023学年"></a>历史，2022-2023学年</h1><blockquote>
<p>招新</p>
</blockquote>
<p>2022年9月我开始担任社长。由于疫情影响，学校没有组织任何招新活动，也不允许我们招新，所以我和同学年的科协研发部部长陈震一起去宿舍楼扫楼，招了一部分同学过来。这里就要感谢一下陈震同学了，他后来在科协研发部见面会上带着他的成员来到了实验室，后来实验室主要几位同学差不多一半都是那次招新来的哈哈</p>
<p>扫楼还是要去宿舍的，但是我这21级的社员没有女生也就没法去女生宿舍招新，于是从另一个校区叫来了20级的佳冉学姐去扫楼。当晚陈震也来了然后带着学姐去溜达一大圈一直到没时间扫楼了，然后学姐就在操场上遇到一个22级的班长同学答应她回去给自己班级同学宣传。我宣布此时陈震同学功过相抵乐乐乐</p>
<blockquote>
<p>授课</p>
</blockquote>
<p>考虑到社员平时看不懂我们在做什么，也就很难参与进来，我们开始进行例行活动，向同学们讲解如何入手。但是后面这个活动也被迫停止，因为北京或者说全国的一些特殊原因…我们在11末12月初提前放假了。再开学时候因为大家学习负担也比较重，来的人也不多，也就没有继续做下去。也许下一学年再试试？</p>
<blockquote>
<p>折腾</p>
</blockquote>
<p>到了下半学期，我们开始做些有趣的东西，比如四轴无人机，蓝牙小键盘，两轮机器人，电磁炮……以后也许把这些东西完善一下分别发文章吧。</p>
<p>最离谱的应该是电磁炮，做出来的当天晚上，我们把实验室所有能塞进炮管的金属物体全都发射了一遍。</p>
<p>这里面最快乐的应该是无人机，我们每天下午或者晚上去沙河校区的小草坪放无人机，拍下许多视频，未来也单独发文章再说吧</p>
<blockquote>
<p>结束</p>
</blockquote>
<p>下半学期结束的很快，新一届选举也已经完成了，希望他们可以带领社团变得更好咯</p>
<h1 id="我，2022-2023学年社长"><a href="#我，2022-2023学年社长" class="headerlink" title="我，2022-2023学年社长"></a>我，2022-2023学年社长</h1><p>我的经历和上一任社长有很大不同，我在大学之前没有接触硬件的机会。小学开始用红米2A给我的世界写插件，由于没有电脑一直用手机敲代码，高三还建了自己的我的世界服务器和网站(当时还用的wordpress框架)。直到高中毕业我假期自学了蟒蛇书，但是此时依然对于写的代码对现实世界毫无影响感到痛苦。大学之后买了一个树莓派开始了软硬件结合的学习，包括后来的arduino等等等。</p>
<h1 id="我想说的"><a href="#我想说的" class="headerlink" title="我想说的"></a>我想说的</h1><p>下一届社长，李彦恺同学，他来我们第一次聊天时候我跟他说的，也就是我对于这个社团的想法：<code>以实践为导向学习</code></p>
]]></content>
      <categories>
        <category>外部引用</category>
      </categories>
      <tags>
        <tag>3D打印</tag>
      </tags>
  </entry>
  <entry>
    <title>电磁炉：使用晶闸管半控制</title>
    <url>/2023/DCP-70tops16/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="潘多拉魔盒"><a href="#潘多拉魔盒" class="headerlink" title="潘多拉魔盒"></a>潘多拉魔盒</h1><p>这个实际上是在2022.11.1做的，当时没有整理东西写篇文章，现在补一下</p>
<p>做这个属实是心血来潮当天晚上没回去宿舍，在实验室没什么事干，直接动手开始搓的，技术上十分简单就是用晶闸管控制电容放电，一次成功玩了一晚上hhhc</p>
<p>这个电路图来源于淘宝商家电磁爱好，当天晚上就是直接用电线焊接的电路，没用洞洞板或者PCB，本来计划做三级加速，但是因为ABS管受热变形最后只能做一级加速</p>
<p><img src="/2023/DCP-70tops16/tb_image_share_1673668494913.jpg" alt="电路图"></p>
<p>做完之后效果如下：</p>
<div id="dplayer26" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer26"),"video":{"url":"https://cr.triority.cc/f/10UP/VID_20221102_044358.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>实测使用6mm直径的钢珠有一定概率打穿易拉罐</p>
<p><img src="/2023/DCP-70tops16/IMG_20221102_045138.jpg" alt="饮料瓶"></p>
<p>22年末北京发生了一些事情(嗯对因为疫情)，11月份就放假回家了，所以当时被迫中止</p>
<h1 id="整合一下：2023-10-13"><a href="#整合一下：2023-10-13" class="headerlink" title="整合一下：2023.10.13"></a>整合一下：2023.10.13</h1><p>原以为晶闸管的故事在11个月前就应该结束了，知道昨天我用RLC工具做了仿真，使用IGBT可控关断和晶闸管直接控制相比，在三级加速以内竟然是晶闸管更有优势。</p>
<p>主要原因是IGBT有电流的限制，例如我用的4067D，保守一点最大电流400A，而使用70tps16电流1000A不成问题，于是反而前几级更适合使用晶闸管。所以如果至少想做一个非常小的三四级加速的，晶闸管控制又便宜又好。</p>
<p>很巧70tps16和4067D的引脚顺序刚好相反，也就是是为4067D设计的板子可以把管子方向掉转180度，直接用于驱动70tps16。因此我就用<a href="https://triority.cc/2023/DCP-GPS4067D/#%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A11-0">原本为4067D设计的PCB了</a>：</p>
<p>PC817C最大驱动电流是100mA，而70tps16驱动电流刚好100mA，所以去掉两个稳压二极管就可以直接拿来用了，IGBT留着直接去做半桥吧</p>
<h1 id="害怕炸管，随手重画：2023-10-14"><a href="#害怕炸管，随手重画：2023-10-14" class="headerlink" title="害怕炸管，随手重画：2023.10.14"></a>害怕炸管，随手重画：2023.10.14</h1><p>如本段标题所示，担心光耦电流不够所以再加一个三极管放大吧，顺便去掉两个稳压二极管，以及两级放在一个板子上方便安装</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-70tops16/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231014171245.png"></th>
<th align="center"><img src="/2023/DCP-70tops16/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231014171259.png"></th>
<th align="center"><img src="/2023/DCP-70tops16/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231014171323.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB</td>
<td align="center">3D模型</td>
</tr>
</tbody></table>
<p>实测这个也有些问题，三极管如果长时间道通会因为过流损坏，因此要么改PCB加上限流电阻，要么减少导通时间。显然我选择了后者因为我懒hhhhhhhhhc</p>
<h1 id="叠层"><a href="#叠层" class="headerlink" title="叠层"></a>叠层</h1><p>上面那个设计上还是有缺陷，长时间导通可能导致三极管过流烧毁，所有又做了一个，加上好几个限流电阻，同时为了在大电容的情况下减小总体积使用的叠层结构</p>
<p>这个版本做了两个，第一次只是加上了限流电阻，但是铺铜层忘记增大到高电压走线的规避距离导致击穿，同时这次结构磁感线在控制电路里可以产生回路极易导致误触，因此删掉了三极管放大，反正不加也能用</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-70tops16/814b854a0605f40f383bba870886a4e.jpg"></th>
<th align="center"><img src="/2023/DCP-70tops16/11e431f3c8ccea551ba5def4198345b.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">组装</td>
<td align="center">击穿处</td>
</tr>
</tbody></table>
<p>做的新的直接去掉了铺铜，看原理图有一种返璞归真的感觉：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-70tops16/QQ%E6%88%AA%E5%9B%BE20231231234030.png"></th>
<th align="center"><img src="/2023/DCP-70tops16/QQ%E6%88%AA%E5%9B%BE20231231234043.png"></th>
<th align="center"><img src="/2023/DCP-70tops16/QQ%E6%88%AA%E5%9B%BE20231231234109.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB</td>
<td align="center">3D模型</td>
</tr>
</tbody></table>
<h1 id="控制程序"><a href="#控制程序" class="headerlink" title="控制程序"></a>控制程序</h1><p>考虑到还要根据实际情况调参，这里时间和引脚配置没有直接int而是写了个数组，等我不懒的时候会改成串口调参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 三极管导通时间(us)</span><br><span class="line">int time_trigger = 10;</span><br><span class="line">// 级数</span><br><span class="line">int levels = 2;</span><br><span class="line">// 每一级的控制引脚和下一级的间隔时间</span><br><span class="line">int pin_delaymicros[4][2] = &#123;</span><br><span class="line">  &#123;13,2000&#125;,</span><br><span class="line">  &#123;12,1000&#125;,</span><br><span class="line">  &#123;14,500&#125;,</span><br><span class="line">  &#123;27,250&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  for (int i=0;i&lt;levels;i++)&#123;</span><br><span class="line">    pinMode(pin_delaymicros[i][0], OUTPUT);</span><br><span class="line">    digitalWrite(pin_delaymicros[i][0], LOW);</span><br><span class="line">    Serial.print(&quot;初始化引脚：&quot;);</span><br><span class="line">    Serial.println(pin_delaymicros[i][0]);</span><br><span class="line">  &#125;</span><br><span class="line">  pinMode(0,INPUT);</span><br><span class="line">  Serial.println(&quot;初始化完成等待触发...&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  if(digitalRead(0)==LOW)&#123;</span><br><span class="line">    for (int i=0;i&lt;levels;i++)&#123;</span><br><span class="line">      digitalWrite(pin_delaymicros[i][0], HIGH);</span><br><span class="line">      Serial.print(&quot;trigger:&quot;);</span><br><span class="line">      Serial.println(pin_delaymicros[i][0]);</span><br><span class="line">      delayMicroseconds(time_trigger);</span><br><span class="line">      digitalWrite(pin_delaymicros[i][0], LOW);</span><br><span class="line"></span><br><span class="line">      delayMicroseconds(pin_delaymicros[i][1]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delay(2000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嗯串口调参也写完了博客发了也在github开源了(2023.12.31突然想起来补充)</p>
<h1 id="器件参数"><a href="#器件参数" class="headerlink" title="器件参数"></a>器件参数</h1><p>晶闸管70tps16参数如下<br><img src="/2023/DCP-70tops16/QQ%E6%88%AA%E5%9B%BE20230626020054.png"></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>电磁炉</tag>
      </tags>
  </entry>
  <entry>
    <title>电磁炉：使用IGBT主动关断控制</title>
    <url>/2023/DCP-GPS4067D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主动关断概述"><a href="#主动关断概述" class="headerlink" title="主动关断概述"></a>主动关断概述</h1><p>之前已经完成了一个使用晶闸管的版本，晶闸管的缺点就是无法控制关闭，线圈电流只能等电容完全放电完成和二极管反向短路放电完成之后才能完全归零，这段时间仍然会产生磁场吸引炮弹，导致反拉，反而降低速度，所以需要主动关断停止电容放电，同时线圈也应该在续流二极管上串联电阻加速反向电流衰减。</p>
<p>同时主动关断可以让电容在放电之后仍有一定能量储存，便于下一次升压发射，也就是说减少下一次发射充电时间，连发速度更快</p>
<p>有一篇文章讲了相关内容：<a href="https://www.kechuang.org/t/87752">浅谈电炮能量回收——斩波电路与绕组能量回收</a></p>
<p>放一个IGBT的参数在这：IRGPS4067D<br><img src="/2023/DCP-GPS4067D/QQ%E6%88%AA%E5%9B%BE20230626014726.png"></p>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="电路设计1-0"><a href="#电路设计1-0" class="headerlink" title="电路设计1.0"></a>电路设计1.0</h2><p>目前的电路设计原理上没什么问题，用直流电源30V测试工作良好。主要是当充电电压大于300V时线圈位置有可能会有电火花，同时IGBT击穿，初步判断是PCB的电容和线圈距离过小直接击穿线圈绝缘层或者线圈本身被击穿</p>
<p>以及光耦提供的驱动电流有限，PC817C只能提供0.2A的驱动电流，IGBT栅极有几十us的上升时间，不知道是不是导致损坏的原因</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-GPS4067D/QQ%E6%88%AA%E5%9B%BE20231010124847.png"></th>
<th align="center"><img src="/2023/DCP-GPS4067D/QQ%E6%88%AA%E5%9B%BE20231010124819.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB模型</td>
</tr>
</tbody></table>
<h2 id="电路设计2-0"><a href="#电路设计2-0" class="headerlink" title="电路设计2.0"></a>电路设计2.0</h2><p>针对之前的问题，首先使用tc2240驱动芯片来驱动IGBT提高栅极驱动速度，然后电容和线圈分开放置防止隔空击穿</p>
<p>额tc2240怎么这么贵啊笑死自己用三极管搭一个吧还是(这个是欧阳鑫给的驱动图):</p>
<p><img src="/2023/DCP-GPS4067D/b7e2ec0014f30cb7c8f6a371270e939.jpg"></p>
<blockquote>
<p>欧阳鑫原话：ss8550和s8050的BE脚并1k电阻主要是防止小电流开启，还有就是让上升沿下降沿更快些，毕竟单片机输出有些电流拖尾，不加这1k电阻，直接放大的话单片机关闭后很小的电流拖尾都被放大了</p>
</blockquote>
<p>再次反转发现一个还挺便宜的驱动芯片看网友评价还不错？拿来试试看：<code>eg27324</code>还是一个双路低端驱动，可以一个板子做两级减少铜柱花费hhh</p>
<p>2023.10.13：出了点小问题，坏消息是我仿真发现IGBT因为电流限制在前几级甚至不如直接用晶闸管，好消息是我找了一个eg的半桥芯片，没有闭锁电路的，可以同时驱动上下半桥，所以…顺手直接把H桥的方案画了，也就是说读者可以直接<a href="https://triority.cc/2023/DCP-H/">跳转到H桥电路的文章</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>电磁炉</tag>
      </tags>
  </entry>
  <entry>
    <title>电磁炉：使用H桥能量回收</title>
    <url>/2023/DCP-H/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>使用H电路原理大概就是IGBT导通线圈放电，关断时线圈通过二极管把电能充回电容。这样可以达到让电感电流衰减最快，反拉效应最小，同时能量回收提高效率，缩短下次充电时间</p>
<p>电路图大致就是这样：<br><img src="/2023/DCP-H/fbq.png" alt="电路图"></p>
<p>这个电路需要同时导通上下IGBT管，而且控制上比较复杂等单个IGBT做明白了再说</p>
<h1 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h1><p>总之就是本来想先做单个igbt可控关断的，结果10.13发现因为igbt电流比较小前几级效果甚至不如晶闸管的，但是半桥回收的方案在后面几级效率太强了，碰巧刷到一个半桥芯片<code>eg3116D</code>没有闭锁可以同时导通上下半桥，所以直接就给板子做了</p>
<p>目前完成的设计是这样的：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-H/QQ%E6%88%AA%E5%9B%BE20231014004719.png"></th>
<th align="center"><img src="/2023/DCP-H/QQ%E6%88%AA%E5%9B%BE20231014004745.png"></th>
<th align="center"><img src="/2023/DCP-H/QQ%E6%88%AA%E5%9B%BE20231013180823.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB</td>
<td align="center">3D模型</td>
</tr>
</tbody></table>
<p>3D模型那个电容重叠是因为要兼容1个1000uf电容和最多4个220uf的电容，节约点高度(不然高度10cm以上了你懂的)</p>
<p>等板子到了再更新效果</p>
<p>程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void setup() &#123;</span><br><span class="line">  // put your setup code here, to run once:</span><br><span class="line">  pinMode(13, OUTPUT);</span><br><span class="line">  digitalWrite(13, LOW);</span><br><span class="line">  pinMode(12, OUTPUT);</span><br><span class="line">  digitalWrite(12, LOW);</span><br><span class="line">  pinMode(0,INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  // put your main code here, to run repeatedly:</span><br><span class="line">  if(digitalRead(0)==LOW)&#123;</span><br><span class="line">    digitalWrite(13, HIGH);</span><br><span class="line">    delayMicroseconds(1200);</span><br><span class="line">    digitalWrite(13, LOW);</span><br><span class="line">    delay(2000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>电磁炉</tag>
      </tags>
  </entry>
  <entry>
    <title>电磁炉：电源部分-ZVS升压电路和稳压输出</title>
    <url>/2023/DCP-ZVS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一般充电电路采用的都是zvs电路，直流逆变到高频交流，然后变压器升压，整流逆变之后给电容充电</p>
<p>具体的充电电压，一般使用电容耐压450V，充电到400V可以初速最大化，但是充电时间更长，而且效率更低，综合考虑充电时间等因素，250V或300V最合理</p>
<p>如果希望弹道稳定，那就需要精准控制电容充电电压，看其他人的方案一般上下浮动5V就可以大致控制落点。</p>
<p>可以使用继电器控制zvs升压的开关，之后也可以改成mos管控制(原理上其实没啥区别)，就是继电器延迟更大可能不够精准</p>
<h1 id="zvs"><a href="#zvs" class="headerlink" title="zvs"></a>zvs</h1><p>b站上有个up详细讲解了无抽头zvs的原理：</p>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=683950620&bvid=BV1UU4y127Gt&cid=717467029&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>


<p>这个视频已经讲的很详细了，但是这个电路输出的是高频交流，我们需要高压直流，而且绝对不能高于电容的耐压。高压直流好办，zvs输出的高频交流经过变压器升压，得到高压交流，再经过整流桥得到高压直流。但是如何限制最高电压好久没找到可信的方案。</p>
<p>之前电磁炮原件是在tb的电磁爱好家买的，我去问了升压模块原理图，他给我发了个这个：<br><img src="/2023/DCP-ZVS/8de9584e18cd329317822012d20e009b.jpg" alt="zvs升压电路"></p>
<p>显然没有我想要的变压器右边的内容，不过可以留着将来自己做元件选型时候用。<br>今天在科创网上看见一些范例看起来还可行：</p>
<p><a href="https://www.kechuang.org/t/53017">简单的电容充电限压电路</a></p>
<p><img src="/2023/DCP-ZVS/%E7%94%B5%E5%AE%B9%E5%85%85%E7%94%B5%E9%99%90%E5%8E%8B.png" alt="电容充电限压"></p>
<blockquote>
<p>主要是LM393P电压比较器，对分压后的电容电压进行检测，达到指定值（通过R3调节）后驱动8550来控制ZVS的开启与关闭（这个控制端怎么接就不用细说了吧~）；<br>通过R7的正反馈使LM393P产生迟滞效应，实际效果如：电容充至405V关，降到395V开，以此循环；<br>调节R7可以调整迟滞的范围，不加此电阻的话会导致ZVS不停的开启关闭，此时ZVS中的MOS管会较大的损耗发热</p>
</blockquote>
<p>大草在网上看见一个没有迟滞效应的，输出这样的：</p>
<p><img src="/2023/DCP-ZVS/SDS2502XPlus_PNG_6.png" alt="示波器"></p>
<p>这要是直接接进去mos死得惨啊hhhhc</p>
<p>到这里直流升压电路理论上基本完成，有空画个电路图，然后等到开学去再选型制作等。</p>
<h1 id="开始制作：2023-10-19"><a href="#开始制作：2023-10-19" class="headerlink" title="开始制作：2023.10.19"></a>开始制作：2023.10.19</h1><p>虽然前面写的是无抽头的，但是我选用的变压器的初级是有抽头的所以改成这个方案(而且省下一个电感钱捏)</p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>整流桥是KBU810，8A，1000V，整流桥价格差的不多，电流余量留大一点给未来1000W的用</p>
<p>安规电容x2做谐振电容，275V，0.68uf，以及次级输出的滤波电容是cbb电容，630v100nf</p>
<p>电感大部分人推荐的是50A的电感，但是我觉得200W的功率下30A的电感其实也足够了(主要是便宜一半多的价钱)<br><img src="/2023/DCP-ZVS/80744d6641f6b1eeb3cd457683ebc8e.jpg"></p>
<p>变压器是高频升压3+3:110功率200W，但是未来可能换成更大的1000W的另一个型号，大概是长这样：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-ZVS/055435e79723270fdaf48b5150b58e2.jpg"></th>
<th align="center"><img src="/2023/DCP-ZVS/11fc579bfb3f5c95989dac205c9dcf4.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">200W(3+3:110)</td>
<td align="center">1000W(3+3:85)</td>
</tr>
</tbody></table>
<p>mos管用手头一大堆的nce6080a</p>
<h2 id="洞洞板实验成功2023-10-22"><a href="#洞洞板实验成功2023-10-22" class="headerlink" title="洞洞板实验成功2023.10.22"></a>洞洞板实验成功2023.10.22</h2><p>在洞洞板上成功实现，输入12V，空载逆变得到峰值大约40V，21.7kHz的正弦波，电源电流0.2A，变压器升压并逆变之后得到552V直流</p>
<p><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_1.jpg"><br><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839.jpg"><br><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_2.jpg"><br><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_3.jpg"></p>
<p>但是这个电路升压完成后不可以直接连接电容，输出电流过大导致zvs震荡无法维持，必须加限流电阻。我目前用的一个470欧5瓦水泥电阻，没有尝试过更小阻值，但是470目前表现良好。目前认为可能和我用的可调电源有关，最大输出电流只有6.4A，电源因为过流限压到4V左右应该是无法起振的原因，之后用电池试一试</p>
<p>在加上限流电阻的情况下，给一个900V3000uf的电解电容组充电到500V仅需几秒(因为没有足够大功率电源没详细测过)，充电显然是越来越慢的因为压差降低，因此建议电源输入更高，比如电源16V就很不错</p>
<p>附赠学弟用焊锡丝短路充电400V的3000uf电容组的视频(真正的实验室安全教育)</p>
<div id="dplayer27" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer27"),"video":{"url":"/2023/DCP-ZVS/d4e4da8173750bf5b3e040a3b433aab0.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>我觉得我还是很需要一个大功率可调电源的hhh应该尽快开始做</p>
<h2 id="200W版本PCB设计"><a href="#200W版本PCB设计" class="headerlink" title="200W版本PCB设计"></a>200W版本PCB设计</h2><table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231110092432.png"></th>
<th align="center"><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231110092456.png"></th>
<th align="center"><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231110092513.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB</td>
<td align="center">3D</td>
</tr>
</tbody></table>
<p>输出限流其实可以用更小的电阻，实测220也能正常工作，更小还没试过</p>
<blockquote>
<p>WARNING:<br>已知严重bug:电路输出滤波电容没有加放电电阻，断电后触摸有触电风险！<br>但是100nf电容的能量只会让你麻一下hhhc<br>务必注意用后短路一下输出端进行放电，或者并联放电电阻，推荐1M欧1W电阻<br><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231113160735.jpg"></p>
</blockquote>
<h2 id="200W版本改进"><a href="#200W版本改进" class="headerlink" title="200W版本改进"></a>200W版本改进</h2><p>首先删掉了输出限流电阻换成了电容限流，LC震荡频率为19.3kHz，每个680nf电容容抗约为11.88Ω，因为很难计算需要的限流量因此保留了几个电容位，同时删除了输出电容避免了电人情况hhh</p>
<p><img src="/2023/DCP-ZVS/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231227143801.png"></p>
<h2 id="1000W版本设计"><a href="#1000W版本设计" class="headerlink" title="1000W版本设计"></a>1000W版本设计</h2><p>首先是ZVS震荡的电路改为双管并联增大电流，然后加入了输入电流电压检测避免停震导致的过热损坏，</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>电磁炉</tag>
      </tags>
  </entry>
  <entry>
    <title>电磁炉：仿真计算(RLC和maxwell)</title>
    <url>/2023/DCP-simulation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RLC计算"><a href="#RLC计算" class="headerlink" title="RLC计算"></a>RLC计算</h1><p>有一个社区工具：<a href="RLC%E5%B7%A5%E5%85%B7.exe">线圈RLC工具</a></p>
<p>如果报错缺少DLL，请安装这个：<a href="IDAutomation_VB6RuntimeFiles.exe">VB6RuntimeFiles</a></p>
<p>有了仿真工具设计就容易多了hhh当然具体参数不便透露，嗯嗯最终发射速度大概1m&#x2F;s吧，打穿一张A4纸看运气</p>
<p><img src="/2023/DCP-simulation/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231012171920.png"></p>
<p>下面是<code>我叫欧阳鑫</code>给出的使用说明：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/DCP-simulation/483f93118f76d90d1befeb952c1aca4.jpg"></th>
<th align="center"><img src="/2023/DCP-simulation/320695395a6dab46b0b5b543a044ceb.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/DCP-simulation/78f3b5d8e608f423e2004fd2e61df9e.jpg"></td>
<td align="center"><img src="/2023/DCP-simulation/f029f4a6dc094e7928d91bd31541f52.jpg"></td>
</tr>
</tbody></table>
<h1 id="使用maxwell仿真"><a href="#使用maxwell仿真" class="headerlink" title="使用maxwell仿真"></a>使用maxwell仿真</h1>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>电力电子</tag>
        <tag>电磁炉</tag>
      </tags>
  </entry>
  <entry>
    <title>内蒙古-天津自驾游旅行</title>
    <url>/2023/Inner-Mongolia-DRIVING/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>去乌兰察布的计划是在今年六月份开始的，当时我矿天文社团的dob8望远镜还在我们实验室，想找个光污染小的地方观星。我们看光污染地图在乌兰察布北边两百公里左右的地方找到一个零级光污染区域，是一个风电场。由于望远镜不便于携带(摔坏了直接紫砂)，计划开车自驾前往。</p>
<p>原计划的时间是暑假，考完试就去，结果教务处突然说考完试要认识实习一周，只好推迟。今年中秋节和十一假期连放10天，终于大家都有时间，提前半个月开始准备租了一辆SUV(-2501RMB)，买了一堆帐篷椅子，还买了木柴准备架一个篝火</p>
<p>很巧的是LYK的哥哥在十一假期结婚，正好他中秋节早点回去，10.4早几天直接回北京，当天我和学院路校区的LGH和LSY早上去学校旁边的桥底下拿车，自提一下QQX的睡袋直接开去北京西，接上LYK，去沙河接上QQX，收拾东西出发，前两天去乌兰察布，10.4第一晚露营风电场，第二天10.5去火山，第三天10.6下午去天津，第四天10.7滨海新区拍日出。</p>
<p>这是央求着我们去接他的LYK：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696344413040.jpg"></p>
<h1 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h1><p>拿到车看了眼后备箱，容量比想象的小的多，至少望远镜肯定是放不下了(你才我们最开始为什么要租车)，装上行李和露营装备已经满满当当。LSY老司机开车去自提睡袋，然后我开车去北京西(这是我第一次开手动挡车hhh)，接完LYK之后LSY第一次上高速，走G6去沙河。在沙河吃个饭就来到了G6前往乌兰察布</p>
<p><img src="/2023/Inner-Mongolia-DRIVING/DSC4578-scaled.jpg"></p>
<p>原本安全起见不打算走高速，结果高德地图导航选择了不走高速之后仍然把我们导航到了收费站，当时LYK开车上过高速也就直接走了，但是决定过一会就下道。十分倒霉的，我们选择了八达岭下道，下面景区前面一段堵车一望无际，之后一段对向车道全是车(路很窄很难开)。LYK驾驶位一顿输出，后面QQX画正记录输出次数(到回北京之后画了5个，里面差不多3个在八达岭画的)。后面有了收费站直接转上高速hhhhhhhhhc</p>
<p><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231004_101938.jpg" alt="八达岭大堵车"></p>
<p><img src="/2023/Inner-Mongolia-DRIVING/59f1bb178f43c05b.jpg"></p>
<p><img src="/2023/Inner-Mongolia-DRIVING/DSC4556-scaled.jpg"></p>
<p>到乌兰察布已经是晚上七八点钟几个人饿得要死，找了家饭店吃了顿(全程最贵)，当时饿的已经顾不上拍照了，烤羊腿是第二道菜有幸来得及拍一张：</p>
<p><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231004_202127.jpg" alt="烤羊腿"></p>
<h1 id="风电场露营"><a href="#风电场露营" class="headerlink" title="风电场露营"></a>风电场露营</h1><p>吃过饭继续在高速北上200km到风电场，布置好篝火搭好帐篷(不是我说河人玩火还是很可以的)：</p>
<p><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696498540957.jpg"></p>
<p><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696766101007.jpg"></p>
<p>然后架上相机开始拍照：</p>
<p><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231005_012424-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.jpg"></p>
<p><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696498513990.jpg"></p>
<p><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696498511257.jpg"></p>
<p>以及星轨和风电场：</p>
<div id="dplayer28" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer28"),"video":{"url":"/2023/Inner-Mongolia-DRIVING/lv_0_20231005173433.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h1 id="乌兰察布的火山"><a href="#乌兰察布的火山" class="headerlink" title="乌兰察布的火山"></a>乌兰察布的火山</h1><p>第二天上午来到了火山景区，路上还遇到了一些差点变成食物的小动物们：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696680304049.jpg"></p>
<p>然后找缝隙停车hhh这是沿途第一座火山<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696527620797.jpg"></p>
<p>再往前走还有一座黑色的火山，可以爬上去，这张是在山顶拍的(全是小圆石头爬上去费死劲，下来更费劲，但是河人再一次表现出他的专业素养)<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696527634637.jpg"></p>
<p>很多人在火山中间摞石头，写字<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696527546483.jpg"></p>
<p>这几张看起来还挺酷的<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696527494690.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231005_135901.jpg"></p>
<p>晚上回去大吃一顿，两个喝酒没输过的人遇到了一起：<br><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231005_193615.jpg"><br>QQX二锅头一口闷一瓶，LYK啤酒五六瓶，战况焦灼</p>
<div id="dplayer29" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer29"),"video":{"url":"/2023/Inner-Mongolia-DRIVING/QQ视频_741d55b1c114505608e269d34e91145a1696771478.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h1 id="海河烟花"><a href="#海河烟花" class="headerlink" title="海河烟花"></a>海河烟花</h1><p>在放海河图之前先吐槽天津市内交通：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696610547032.jpg"><br>我的评价是别的地方有路政公敌，这里只有公敌路政。红绿灯其实是次要的，主要是乱七八糟的路网规划和逆天的护栏摆放</p>
<p>第二天晚上吃饭唱歌回去已经是后半夜两三点钟了，第三天中午起床，直奔天津，一直到晚上8点到达天津，吃过饭以后计划去天塔拍夜景，结果到天塌时候已经关门了，只好去海河边，很巧遇到了河边有放烟花的：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696680248562.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696680251484.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231006_232351-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.jpg"></p>
<h1 id="遗弃20年的旧火车"><a href="#遗弃20年的旧火车" class="headerlink" title="遗弃20年的旧火车"></a>遗弃20年的旧火车</h1><p>第四天按计划早上去滨海新区拍日出，但是四点起床之后一看云图直接绝望继续睡觉，中午起来去天塔看看，白天并没有什么好看的(除了天津糟糕的路网规划)，下午去天津港，拍到了LYK心心念念已久的废弃旧火车，昭和44年1969年产，2003年开始废弃在了天津港：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696772225801.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696772232819.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696772238151.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696772745856.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696772749700.jpg"></p>
<h1 id="躲得过初一躲不过十五"><a href="#躲得过初一躲不过十五" class="headerlink" title="躲得过初一躲不过十五"></a>躲得过初一躲不过十五</h1><p>早上阴天没拍到日出，但是日落，可是被我们抓住了，在海边：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696680291825.jpg"><br>等我们返程上高速之后更是绝美：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696680272992.jpg"><br>高速上拍照实在有点逆天，如图所示：</p>
<div id="dplayer30" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer30"),"video":{"url":"/2023/Inner-Mongolia-DRIVING/mmexport1696769646053.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>从海边走回来发现我们车后面停了一辆外交人员的车：<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696769651024.jpg"><br>直接开始拍照之时，发现原来车主人一直就在我们后面走，还向我们问好。回来之后查了一下，188是巴基斯坦的国家代码<br><img src="/2023/Inner-Mongolia-DRIVING/d043ad4bd11373f061d5a486a90f4bfbfaed04c5.png"></p>
<h1 id="结算"><a href="#结算" class="headerlink" title="结算"></a>结算</h1><p>最后是我从天津港直接开回学校里，前一段高速很爽，后一段四环大堵车很想砂仁</p>
<p>第一次学校里开车hhh：<br><img src="/2023/Inner-Mongolia-DRIVING/IMG_20231007_193518.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696679424477.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696679906068.jpg"></p>
<p>最后本次自驾游总计里程：14534-12791&#x3D;1743km<br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696681156029.jpg"><br><img src="/2023/Inner-Mongolia-DRIVING/mmexport1696681080805.jpg"></p>
]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>旅游</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络学习：从尝试识别手写数字开始</title>
    <url>/2023/Neural-networks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><p>文章创建时间就很离谱：<code>2023-04-24 04:53:00</code>，晚上躺在床上感觉饿了，但是懒得下床买吃的，就一直饿的睡不着，终于在三点起床了下楼吃饱喝足了，回来毫无困意，于是开始写这篇离谱的文章</p>
<h1 id="起点：分类任务"><a href="#起点：分类任务" class="headerlink" title="起点：分类任务"></a>起点：分类任务</h1><h2 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h2><p>已知四个数据点(1,1)(-1,1)(-1,-1)(1,-1)，这四个点分别对应I~IV象限，如果这时候给我们一个新的坐标点(比如(2,2))，那么它应该属于哪个象限呢？(当然是第I象限，但我们的任务是要让机器知道)</p>
<p>“分类”是神经网络的一大应用，我们使用神经网络完成这个分类任务。</p>
<h2 id="网络结构：理论基础"><a href="#网络结构：理论基础" class="headerlink" title="网络结构：理论基础"></a>网络结构：理论基础</h2><p>我们构建一个两层神经网络，理论上两层神经网络已经可以拟合任意函数。这个神经网络的结构如下图：<br><img src="/2023/Neural-networks/v2-7ee8cabcbd707dd4deab7155af2ba4cd_1440w.webp" alt="简化网络结构"></p>
<h3 id="正向传播"><a href="#正向传播" class="headerlink" title="正向传播"></a>正向传播</h3><h4 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h4><p>在我们的例子中，输入层是坐标值，例如(1,1)，这是一个包含两个元素的数组，也可以看作是一个1<em>2的矩阵。输入层的元素维度与输入量的特征相关，如果输入的是一张32</em>32的灰度图，那么输入层就是一个32*32的矩阵</p>
<h4 id="输入层到隐藏层"><a href="#输入层到隐藏层" class="headerlink" title="输入层到隐藏层"></a>输入层到隐藏层</h4><p>连接输入层和隐藏层的是W1和b1。由X计算得到H就是矩阵运算<code>H=X*W1+b1</code>。如上图中所示，在设定隐藏层为50维(也可以理解成50个神经元)之后，矩阵H的大小为(1*50)的矩阵</p>
<h4 id="隐藏层到输出层"><a href="#隐藏层到输出层" class="headerlink" title="隐藏层到输出层"></a>隐藏层到输出层</h4><p>连接隐藏层和输出层的是W2和b2。同样是通过矩阵运算<code>Y=X*W2+b2</code></p>
<h4 id="激活层"><a href="#激活层" class="headerlink" title="激活层"></a>激活层</h4><p>通过上述两个线性方程的计算，我们就能得到最终的输出Y了，但是一系列线性方程的运算最终都可以用一个线性方程表示。也就是说，上述两个式子联立后可以用一个线性方程表达。对于两次神经网络是这样，就算网络深度加到100层，也依然是这样。这样的话神经网络就失去了意义。所以这里要对网络注入灵魂：激活层。</p>
<p>激活层是为矩阵运算的结果添加非线性的。常用的激活函数有三种，分别是阶跃函数、Sigmoid和ReLU。</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/Neural-networks/d000baa1cd11728b445e79fccbfcc3cec2fd2cf8.jfif"></th>
<th align="center"><img src="/2023/Neural-networks/d009b3de9c82d158dfb4e7218a0a19d8bc3e426f.jfif"></th>
<th align="center"><img src="/2023/Neural-networks/OIP-C.jfif"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">阶跃函数</td>
<td align="center">Sigmoid</td>
<td align="center">ReLU</td>
</tr>
<tr>
<td align="center">当输入小于等于0时，输出0；当输入大于0时，输出1</td>
<td align="center">当输入趋近于正无穷&#x2F;负无穷时，输出无限接近于1&#x2F;0</td>
<td align="center">当输入小于0时，输出0；当输入大于0时，输出等于输入</td>
</tr>
</tbody></table>
<p>阶跃函数输出值是跳变的，且只有二值，较少使用；Sigmoid函数在当x的绝对值较大时，曲线的斜率变化很小(梯度消失)，并且计算较复杂；ReLU是当前较为常用的激活函数。<br>每个隐藏层计算(矩阵线性运算)之后，都需要加一层激活层，要不然该层线性计算是没有意义的。</p>
<p>此时网络结构以及变成了：<br><img src="/2023/Neural-networks/v2-0ced86f32dfa241fc9de10421edbd9b4_1440w.webp"></p>
<h4 id="输出的正规化"><a href="#输出的正规化" class="headerlink" title="输出的正规化"></a>输出的正规化</h4><p>在上一步之后，输出Y的值可能会是(3,1,0.1,0.5)这样的矩阵，诚然我们可以找到里边的最大值“3”，从而找到对应的分类为I，但是这并不直观。我们想让最终的输出为概率，也就是说可以生成像(90%,5%,2%,3%)这样的结果，这样做不仅可以找到最大概率的分类，而且可以知道各个分类计算的概率值。</p>
<p>计算公式如下：这样求出的结果中，所有元素的和一定为1，而每个元素可以代表概率值<br><img src="/2023/Neural-networks/v2-3ad93ae576918ff385485dab6a2e6b87_1440w.png"></p>
<p>我们将使用这个计算公式做输出结果正规化处理的层叫做“Softmax”层。此时的神经网络将变成如下图所示：<br><img src="/2023/Neural-networks/v2-01285f87ff9d523f62d2d4f6586583c5_1440w.webp"></p>
<h4 id="交叉熵损失-Cross-Entropy-Error"><a href="#交叉熵损失-Cross-Entropy-Error" class="headerlink" title="交叉熵损失(Cross Entropy Error)"></a>交叉熵损失(Cross Entropy Error)</h4><p>比如，Softmax输出的结果是(90%,5%,3%,2%)，真实的结果是(100%,0,0,0)。虽然输出的结果可以正确分类，但是与真实结果之间是有差距的，一个优秀的网络对结果的预测要无限接近于100%，为此，我们需要将Softmax输出结果的好坏程度做一个“量化”。常用且巧妙的方法是，求对数的负数。用90%举例，对数的负数就是：-log0.9&#x3D;0.046</p>
<p>概率越接近100%，该计算结果值越接近于0，说明结果越准确，该输出叫做<code>交叉熵损失</code>。我们训练神经网络的目的，就是尽可能地减少这个损失。</p>
<p>此时的网络如下图：<br><img src="/2023/Neural-networks/v2-6fac69d2abab24639943ebaab0b70bde_1440w.webp"></p>
<h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>反向传播就是一个参数优化的过程，优化对象就是网络中的所有W和b。神经网络的神奇之处，就在于它可以自动做W和b的优化。使用的方法叫做梯度下降法</p>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>神经网络需要反复迭代。如上述例子中，第一次计算得到的概率是90%，交叉熵损失值是0.046；将该损失值反向传播，使W1,b1,W2,b2做相应微调；再做第二次运算，此时的概率可能就会提高到92%，相应地，损失值也会下降，然后再反向传播损失值，微调参数W1,b1,W2,b2。依次类推，损失值越来越小，直到我们满意为止。此时我们就得到了理想的W1,b1,W2,b2。</p>
<p>此时如果将任意一组坐标作为输入，利用图4或图5的流程，就能得到分类结果。</p>
<h2 id="网络实现：使用python实现分类功能"><a href="#网络实现：使用python实现分类功能" class="headerlink" title="网络实现：使用python实现分类功能"></a>网络实现：使用python实现分类功能</h2><h3 id="前置任务"><a href="#前置任务" class="headerlink" title="前置任务"></a>前置任务</h3><p>导入numpy库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>
<h3 id="正向传播函数"><a href="#正向传播函数" class="headerlink" title="正向传播函数"></a>正向传播函数</h3><h4 id="函数代码"><a href="#函数代码" class="headerlink" title="函数代码"></a>函数代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def affine_forward(x, w, b):   </span><br><span class="line">    out = None                       # 初始化返回值为None</span><br><span class="line">    # 输入参数处理</span><br><span class="line">    n = x.shape[0]                   # 获取输入参数X的形状</span><br><span class="line">    x_row = x.reshape(n, -1)         # (N,D)</span><br><span class="line">    # 矩阵的线性运算</span><br><span class="line">    out = np.dot(x_row, w) + b       # (N,M)</span><br><span class="line">    # 缓存值，反向传播时使用</span><br><span class="line">    cache = (x, w, b)</span><br><span class="line">    return out,cache</span><br></pre></td></tr></table></figure>
<p>affine_forward函数，用于计算公式：<code>H=X*W1+b1</code>，输入参数就是公式中的矩阵X，W1和b1，对应到程序中就是x，w和b。</p>
<h4 id="输入参数处理"><a href="#输入参数处理" class="headerlink" title="输入参数处理"></a>输入参数处理</h4><p>程序中的输入参数x，其形状可以是(n，d_1，…，d_k).在我们这个例子中，输入参数x是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[2,1],</span><br><span class="line">[-1,1],</span><br><span class="line">[-1,-1],</span><br><span class="line">[1,-1]]</span><br></pre></td></tr></table></figure>
<p>它是一个4行2列的二维数组，那么x的形状就是(4,2)，对应的参数n&#x3D;4，d_1&#x3D;2。这是我们用来做训练的坐标数据，分别对应了I、II、III、IV象限。</p>
<p>在某些应用场景中，x的维度可能更高。比如对于一个20*20像素的4张灰度图，x的形状将是(4,20,20)，对应的参数就是n&#x3D;4，d_1&#x3D;20，d_2&#x3D;20。n代表的是同时用于计算前向传播的数据有几组，后边的参数d_1~d_k代表的是数据本身的形状。</p>
<p>为了方便计算，对于这种维度大于2的x来说，需要对其进行重新塑形，也就是将(4,20,20)的高维数组变化为(4,20<em>20)这样的二位数组。<br>这样变换之后高维的向量被“拍扁”成一维向量(长度为20</em>20的一维向量)，对应的W和b也都是一维的，既统一了参数形式，又不会影响数据的正常使用。</p>
<p><code>x.reshape(n,-1)</code>是对x重新塑形，即保留第0维，其他维度排列成1维。</p>
<h4 id="矩阵的线性运算"><a href="#矩阵的线性运算" class="headerlink" title="矩阵的线性运算"></a>矩阵的线性运算</h4><p><code>.dot</code>就是numpy中的函数，可以实现x_row与w的矩阵相乘。x_row的形状为(N,D)，w的形状为(D,M)，得到的out的形状是(N,M)</p>
<h3 id="反向传播函数"><a href="#反向传播函数" class="headerlink" title="反向传播函数"></a>反向传播函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def affine_backward(dout, cache): </span><br><span class="line">  # 读取缓存</span><br><span class="line">  x, w, b = cache</span><br><span class="line">  # 返回值初始化</span><br><span class="line">  dx, dw, db = None, None, None</span><br><span class="line">  # 仿射变换反向传播：更新参数w的值-计算流向下一个节点的数值-更新参数b的值</span><br><span class="line">  dx = np.dot(dout, w.T)                       # (N,D)    </span><br><span class="line">  dx = np.reshape(dx, x.shape)                 # (N,d1,...,d_k)   </span><br><span class="line">  x_row = x.reshape(x.shape[0], -1)            # (N,D)    </span><br><span class="line">  dw = np.dot(x_row.T, dout)                   # (D,M)    </span><br><span class="line">  db = np.sum(dout, axis=0, keepdims=True)     # (1,M)    </span><br><span class="line">  return dx, dw, db</span><br></pre></td></tr></table></figure>
<h3 id="学习参数初始化"><a href="#学习参数初始化" class="headerlink" title="学习参数初始化"></a>学习参数初始化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用于训练的坐标，对应的是I、II、III、IV象限</span><br><span class="line">X = np.array([[2,1], [-1,1], [-1,-1], [1,-1]])</span><br><span class="line"># 标签，对应的是I、II、III、IV象限</span><br><span class="line">t = np.array([0,1,2,3])</span><br><span class="line"># 生成随机数保持一致</span><br><span class="line">np.random.seed(1)</span><br><span class="line"></span><br><span class="line"># 输入参数的维度，此处为2，即每个坐标用两个数表示</span><br><span class="line">input_dim = X.shape[1]</span><br><span class="line"># 输出参数的维度，此处为4，即最终分为四个象限</span><br><span class="line">num_classes = t.shape[0]</span><br><span class="line"># 隐藏层维度，可调参数</span><br><span class="line">hidden_dim = 50</span><br><span class="line"># 正则化强度，可调参数</span><br><span class="line">reg = 0.001</span><br><span class="line"># 梯度下降的学习率，为可调参数</span><br><span class="line">epsilon = 0.001</span><br><span class="line"># 初始化W1，W2，b1，b2</span><br><span class="line">W1 = np.random.randn(input_dim, hidden_dim) # 生成随机矩阵</span><br><span class="line">W2 = np.random.randn(hidden_dim, num_classes)</span><br><span class="line">b1 = np.zeros((1, hidden_dim))  # 生成以0填充的矩阵</span><br><span class="line">b2 = np.zeros((1, num_classes))</span><br></pre></td></tr></table></figure>
<p>对一些必要的参数进行了初始化。对于训练数据以及训练模型已经确定的网络来说，为了得到更好的训练效果需要调节的参数就是上述的隐藏层维度、正则化强度和梯度下降的学习率，以及下一节中的训练循环次数。</p>
<h3 id="训练与迭代"><a href="#训练与迭代" class="headerlink" title="训练与迭代"></a>训练与迭代</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#训练的循环次数为10000</span><br><span class="line">for j in range(10000):</span><br><span class="line"></span><br><span class="line">  # 前向传播</span><br><span class="line">  # 第一层前向传播。调用了之前写的前向传播的函数，完成了第一层网络的矩阵线性代数运算</span><br><span class="line">  H,fc_cache = affine_forward(X,W1,b1)</span><br><span class="line">  # 激活函数。从0和H中选择较大的值赋给H，也就是实现了ReLU激活层函数。</span><br><span class="line">  H = np.maximum(0, H)</span><br><span class="line">  # 缓存第一层激活后的结果</span><br><span class="line">  relu_cache = H</span><br><span class="line">  # 第二层网络的矩阵线性代数运算</span><br><span class="line">  Y,cachey = affine_forward(H,W2,b2)     </span><br><span class="line"></span><br><span class="line">  # 输出的正规化：Softmax层计算。之前我们说过的Softmax的计算公式在实际应用中会存在一个问题，比如i的值等于1000时，e^1000在计算机中会变成无穷大的inf，后续计算将无法完成，所以程序中会对计算公式做一些修改。修改见下文说明。</span><br><span class="line">  probs = np.exp(Y - np.max(Y, axis=1, keepdims=True))    </span><br><span class="line">  probs /= np.sum(probs, axis=1, keepdims=True)</span><br><span class="line"></span><br><span class="line">  # 计算loss值</span><br><span class="line">  # 取了最终输出的维度，这个例子中为4，即四个象限</span><br><span class="line">  N = Y.shape[0]</span><br><span class="line">  # 打印各个数据的正确解标签对应的神经网络的输出</span><br><span class="line">  print(probs[np.arange(N), t])</span><br><span class="line">  # 先求了N维数据中的交叉熵损失，然后对这N个交叉熵损失求平均值，作为最终loss值</span><br><span class="line">  loss = -np.sum(np.log(probs[np.arange(N), t])) / N</span><br><span class="line">  print(loss)</span><br><span class="line"></span><br><span class="line">  # 反向传播</span><br><span class="line">  # 以Softmax输出结果作为反向输出的起点</span><br><span class="line">  dx = probs.copy()</span><br><span class="line">  # 将Softmax的输出值赋给dx， 这里dx代表反向传播的主线值</span><br><span class="line">  dx[np.arange(N), t] -= 1</span><br><span class="line">  # 反向传播到softmax前</span><br><span class="line">  dx /= N</span><br><span class="line">  # 反向传播至第二层前</span><br><span class="line">  dh1, dW2, db2 = affine_backward(dx, cachey)</span><br><span class="line">  # 反向传播至激活层前</span><br><span class="line">  dh1[relu_cache &lt;= 0] = 0</span><br><span class="line">  # 反向传播至第一层前</span><br><span class="line">  dX, dW1, db1 = affine_backward(dh1, fc_cache)</span><br><span class="line"></span><br><span class="line">  # 参数更新</span><br><span class="line">  # 引入正则化惩罚项更新dW</span><br><span class="line">  dW2 += reg * W2</span><br><span class="line">  dW1 += reg * W1</span><br><span class="line">  # 引入学习率更新W和b</span><br><span class="line">  W2 += -epsilon * dW2</span><br><span class="line">  b2 += -epsilon * db2</span><br><span class="line">  W1 += -epsilon * dW1</span><br><span class="line">  b1 += -epsilon * db1</span><br></pre></td></tr></table></figure>
<p>修改说明：<br>原公式为<img src="/2023/Neural-networks/v2-3ad93ae576918ff385485dab6a2e6b87_1440w.png"><br>在指数上减去常数C不影响最终结果，而这个常数C通常取i中的最大值。<br><img src="/2023/Neural-networks/v2-7e7f127681085bfd26ae59511ab2c8fd_1440w.png"><br>第一句probs &#x3D; np.exp(Y - np.max(Y, axis&#x3D;1, keepdims&#x3D;True)) 就是求输出各个行的指数值，举个例子，Y的值如果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[-4,17,20,-4],</span><br><span class="line">[10,-2,5,3],</span><br><span class="line">[-5,3,4,10],</span><br><span class="line">[-5,5,5,2]]</span><br></pre></td></tr></table></figure>
<p>np.max(Y, axis&#x3D;1, keepdims&#x3D;True)计算得到的是<code>[[20],[10],[10],[5]]</code>，后边括号里的参数axis代表以竖轴为基准 ，在同行中取值； keepdims&#x3D;True代表保持矩阵的二维特性。<br>所以<code>np.exp(Y - np.max(Y, axis=1, keepdims=True))</code>代表：Y矩阵中每个值减掉改行最大值后再取对数。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test = np.array([[2,2],[-2,2],[-2,-2],[2,-2]])</span><br><span class="line">#仿射</span><br><span class="line">H,fc_cache = affine_forward(test,W1,b1)</span><br><span class="line"># 激活</span><br><span class="line">H = np.maximum(0, H)</span><br><span class="line">relu_cache = H</span><br><span class="line"># 仿射</span><br><span class="line">Y,cachey = affine_forward(H,W2,b2)</span><br><span class="line"># Softmax</span><br><span class="line">probs = np.exp(Y - np.max(Y, axis=1, keepdims=True))    </span><br><span class="line">probs /= np.sum(probs, axis=1, keepdims=True)  # Softmax</span><br><span class="line">print(probs)</span><br><span class="line">for k in range(4):</span><br><span class="line">  print(test[k,:],&quot;所在的象限为&quot;,np.argmax(probs[k,:])+1)</span><br></pre></td></tr></table></figure>
<p>其实验证的方法和训练时的正向传播的过程基本一致，即第一层网络线性计算→激活→第二层网络线性计算→Softmax→得到分类结果.</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 前向传播函数</span><br><span class="line"># - x：包含输入数据的numpy数组，形状为(N，d_1，...，d_k)</span><br><span class="line"># - w：形状为(D，M)的一系列权重</span><br><span class="line"># - b：偏置，形状为(M，)</span><br><span class="line">def affine_forward(x, w, b):</span><br><span class="line">    out = None  # 初始化返回值为None</span><br><span class="line">    N = x.shape[0]  # 重置输入参数X的形状</span><br><span class="line">    x_row = x.reshape(N, -1)  # (N,D)</span><br><span class="line">    out = np.dot(x_row, w) + b  # (N,M)</span><br><span class="line">    cache = (x, w, b)  # 缓存值，反向传播时使用</span><br><span class="line">    return out, cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 反向传播函数</span><br><span class="line"># - x：包含输入数据的numpy数组，形状为(N，d_1，...，d_k)</span><br><span class="line"># - w：形状(D，M)的一系列权重</span><br><span class="line"># - b：偏置，形状为(M，)</span><br><span class="line">def affine_backward(dout, cache):</span><br><span class="line">    x, w, b = cache  # 读取缓存</span><br><span class="line">    dx, dw, db = None, None, None  # 返回值初始化</span><br><span class="line">    dx = np.dot(dout, w.T)  # (N,D)</span><br><span class="line">    dx = np.reshape(dx, x.shape)  # (N,d1,...,d_k)</span><br><span class="line">    x_row = x.reshape(x.shape[0], -1)  # (N,D)</span><br><span class="line">    dw = np.dot(x_row.T, dout)  # (D,M)</span><br><span class="line">    db = np.sum(dout, axis=0, keepdims=True)  # (1,M)</span><br><span class="line">    return dx, dw, db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = np.array([[2, 1],</span><br><span class="line">              [-1, 1],</span><br><span class="line">              [-1, -1],</span><br><span class="line">              [1, -1]])  # 用于训练的坐标，对应的是I、II、III、IV象限</span><br><span class="line">t = np.array([0, 1, 2, 3])  # 标签，对应的是I、II、III、IV象限</span><br><span class="line"># np.random.seed(1)  # 有这行语句，你们生成的随机数就和我一样了</span><br><span class="line"></span><br><span class="line"># 一些初始化参数</span><br><span class="line">input_dim = X.shape[1]  # 输入参数的维度，此处为2，即每个坐标用两个数表示</span><br><span class="line">num_classes = t.shape[0]  # 输出参数的维度，此处为4，即最终分为四个象限</span><br><span class="line">hidden_dim = 50  # 隐藏层维度，为可调参数</span><br><span class="line">reg = 0.001  # 正则化强度，为可调参数</span><br><span class="line">epsilon = 0.001  # 梯度下降的学习率，为可调参数</span><br><span class="line"># 初始化W1，W2，b1，b2</span><br><span class="line">W1 = np.random.randn(input_dim, hidden_dim)  # (2,50)</span><br><span class="line">W2 = np.random.randn(hidden_dim, num_classes)  # (50,4)</span><br><span class="line">b1 = np.zeros((1, hidden_dim))  # (1,50)</span><br><span class="line">b2 = np.zeros((1, num_classes))  # (1,4)</span><br><span class="line"></span><br><span class="line">for j in range(10000):  # 这里设置了训练的循环次数为10000</span><br><span class="line">    # ①前向传播</span><br><span class="line">    H, fc_cache = affine_forward(X, W1, b1)  # 第一层前向传播</span><br><span class="line">    H = np.maximum(0, H)  # 激活</span><br><span class="line">    relu_cache = H  # 缓存第一层激活后的结果</span><br><span class="line">    Y, cachey = affine_forward(H, W2, b2)  # 第二层前向传播</span><br><span class="line">    # ②Softmax层计算</span><br><span class="line">    probs = np.exp(Y - np.max(Y, axis=1, keepdims=True))</span><br><span class="line">    probs /= np.sum(probs, axis=1, keepdims=True)  # Softmax算法实现</span><br><span class="line">    # ③计算loss值</span><br><span class="line">    N = Y.shape[0]  # 值为4</span><br><span class="line">    print(probs[np.arange(N), t])  # 打印各个数据的正确解标签对应的神经网络的输出</span><br><span class="line">    loss = -np.sum(np.log(probs[np.arange(N), t])) / N  # 计算loss</span><br><span class="line">    print(loss)  # 打印loss</span><br><span class="line">    # ④反向传播</span><br><span class="line">    dx = probs.copy()  # 以Softmax输出结果作为反向输出的起点</span><br><span class="line">    dx[np.arange(N), t] -= 1  #</span><br><span class="line">    dx /= N  # 到这里是反向传播到softmax前</span><br><span class="line">    dh1, dW2, db2 = affine_backward(dx, cachey)  # 反向传播至第二层前</span><br><span class="line">    dh1[relu_cache &lt;= 0] = 0  # 反向传播至激活层前</span><br><span class="line">    dX, dW1, db1 = affine_backward(dh1, fc_cache)  # 反向传播至第一层前</span><br><span class="line">    # ⑤参数更新</span><br><span class="line">    dW2 += reg * W2</span><br><span class="line">    dW1 += reg * W1</span><br><span class="line">    W2 += -epsilon * dW2</span><br><span class="line">    b2 += -epsilon * db2</span><br><span class="line">    W1 += -epsilon * dW1</span><br><span class="line">    b1 += -epsilon * db1</span><br><span class="line"></span><br><span class="line">test = np.array([[2, 2], [-2, 2], [-2, -2], [2, -1]])</span><br><span class="line">H, fc_cache = affine_forward(test, W1, b1)  # 仿射</span><br><span class="line">H = np.maximum(0, H)  # 激活</span><br><span class="line">relu_cache = H</span><br><span class="line">Y, cachey = affine_forward(H, W2, b2)  # 仿射</span><br><span class="line"># Softmax</span><br><span class="line">probs = np.exp(Y - np.max(Y, axis=1, keepdims=True))</span><br><span class="line">probs /= np.sum(probs, axis=1, keepdims=True)  # Softmax</span><br><span class="line">print(probs)</span><br><span class="line">for k in range(4):</span><br><span class="line">    print(test[k, :], &quot;所在的象限为&quot;, np.argmax(probs[k, :]) + 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><h4 id="数据集格式"><a href="#数据集格式" class="headerlink" title="数据集格式"></a>数据集格式</h4><p>每个文件有 784 个灰度值(每行 28 个，28 列)，最后一个值是预期的输出值(实际数字)<br><a href="https://www.kaggle.com/datasets/jcprogjava/kaggle-digit-recognition-dataset-reformatted?resource=download">文本数据集</a></p>
<h4 id="数据集解析"><a href="#数据集解析" class="headerlink" title="数据集解析"></a>数据集解析</h4><p>这个程序可以用来对文本文件做图片的可视化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line">txt_path = r&#x27;C:\Users\Triority\Desktop\kaggle data\00001.txt&#x27;</span><br><span class="line">f = open(txt_path)</span><br><span class="line">data_lists = f.readlines()</span><br><span class="line">dataset = []</span><br><span class="line">for data in data_lists:</span><br><span class="line">    if len(data) == 1:</span><br><span class="line">        print(&#x27;数字：&#x27;+data[0])</span><br><span class="line">        break</span><br><span class="line">    data1 = data.strip(&#x27;\n&#x27;)</span><br><span class="line">    data2 = data1.split(&#x27;\t&#x27;)</span><br><span class="line">    data3 = []</span><br><span class="line">    for i in range(len(data2)):</span><br><span class="line">        if data2[i]==&#x27;&#x27;:</span><br><span class="line">            break</span><br><span class="line">        data3.append(int(data2[i]))</span><br><span class="line">    dataset.append(data3)</span><br><span class="line">dataset = np.array(dataset, dtype=np.uint8)</span><br><span class="line">cv2.imshow(&#x27;name&#x27;, dataset)</span><br><span class="line">if cv2.waitKey(0) == 27:</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h1 id="使用pytorch"><a href="#使用pytorch" class="headerlink" title="使用pytorch"></a>使用pytorch</h1><p>该说不说，前面写的都是原理解释，实际上写的很麻烦(而且很屎)，而使用pytorch可以极大简化细节。</p>
<p>pytorch的安装就不说了，不过可以安装使用cuda的版本加速计算。这个具体安装方法可以参考之前的文章：<a href="https://triority.cc/2022/nanodet-train/">pytorch环境配置及使用nanodet进行模型训练和识别</a>。当然没有nvidia显卡的设备就没那么多麻烦了。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/65472471">https://zhuanlan.zhihu.com/p/65472471</a><br><a href="https://zhuanlan.zhihu.com/p/67682601">https://zhuanlan.zhihu.com/p/67682601</a><br><a href="https://zhuanlan.zhihu.com/p/66534632">https://zhuanlan.zhihu.com/p/66534632</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>文档&amp;笔记</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>QSL卡片</title>
    <url>/2023/QSL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>昨天晚上(今天早上)设计了一下自己的QSL卡片，填写表格的一面已经完成了，还在考虑另一面放一张什么照片</p>
<p><img src="/2023/QSL/QSLCard.png"></p>
<p>本来想用ps画的，瞪眼一个小时也没画出来(也许ps更适合图片处理?)最终还是用的ppt</p>
<p>自我感觉良好乐乐乐，至于照片，想好了再来接着写</p>
]]></content>
      <categories>
        <category>无线电</category>
      </categories>
      <tags>
        <tag>无线电</tag>
      </tags>
  </entry>
  <entry>
    <title>串口调参库</title>
    <url>/2023/Serial-parameter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>给DCP调节时序需要频繁修改大量参数，每次参数修改都重新烧录太麻烦了于是有了这个小工具便于串口调参</p>
<p><a href="https://github.com/Triority/Serial_parameter">github repositories</a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li><p>首先在arduino工程的目录下放置库文件：<br><a href="ser_par.h"><code>ser_par.h</code></a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arduino.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ser_par</span><span class="params">(<span class="type">int</span> *par_list[])</span></span>;</span><br></pre></td></tr></table></figure>
<p><a href="ser_par.cpp"><code>ser_par.cpp</code></a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arduino.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ser_par.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">String inString=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> rec_state = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> rec_char;</span><br><span class="line"><span class="type">int</span> StrtoInt;</span><br><span class="line"><span class="type">int</span> loc_list;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ser_par</span><span class="params">(<span class="type">int</span> *par_list[])</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(Serial.<span class="built_in">available</span>()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rec_state==<span class="number">0</span>)&#123;</span><br><span class="line">      rec_char = <span class="built_in">char</span>(Serial.<span class="built_in">read</span>());</span><br><span class="line">      <span class="keyword">if</span>(rec_char == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">        rec_state = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Serial.<span class="built_in">available</span>()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rec_state==<span class="number">1</span>)&#123;</span><br><span class="line">      rec_char = <span class="built_in">char</span>(Serial.<span class="built_in">read</span>());</span><br><span class="line">      <span class="keyword">if</span> (rec_char == <span class="string">&#x27;T&#x27;</span>)&#123;</span><br><span class="line">        loc_list = inString.<span class="built_in">toInt</span>();</span><br><span class="line">        rec_state = <span class="number">2</span>;</span><br><span class="line">        inString=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        inString += rec_char;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Serial.<span class="built_in">available</span>()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rec_state==<span class="number">2</span>)&#123;</span><br><span class="line">      rec_char = Serial.<span class="built_in">read</span>();</span><br><span class="line">      <span class="keyword">if</span> (rec_char == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        StrtoInt = inString.<span class="built_in">toInt</span>();</span><br><span class="line">        *par_list[loc_list] = StrtoInt;</span><br><span class="line">        rec_state = <span class="number">0</span>;</span><br><span class="line">        inString=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        inString += <span class="built_in">char</span>(rec_char);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以在ino主程序引入：<code>#include &quot;ser_par.h&quot;</code></p>
</li>
<li><p>定义一个数组包含你要修改的变量的地址</p>
</li>
<li><p>在loop函数中调用<code>ser_par()</code>并传入数组参数</p>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>串口输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SaTb\n</span><br></pre></td></tr></table></figure>
<p>其中的<code>S``T``\n</code>作为标志字符不可修改，<code>a</code>代表你要修改的参数在数组的索引，<code>b</code>代表设置成的值，<code>\n</code>为换行符，arduino串口发送可配置是否发送换行符（默认发送）</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><a href="Serial_parameter.ino"><code>Serial_parameter.ino</code></a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ser_par.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *par_list[<span class="number">5</span>] = &#123;&amp;a,&amp;b,&amp;c,&amp;d,&amp;e&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Serial_parameter function</span></span><br><span class="line">  <span class="built_in">ser_par</span>(par_list);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//print results</span></span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;a:%d, b:%d, c:%d, d:%d, e:%d\n&quot;</span>,a,b,c,d,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>C语言</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>使用arduino的两轮自平衡车</title>
    <url>/2023/arduino-iic-sensor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原计划这个是用在rm里的麦轮平衡车，但是后来rm鸽子了也就懒得做麦轮了，但是刚好校赛剩下的零件可以做个两轮的车子于是就有了做个</p>
<h2 id="获取imu传感器数据"><a href="#获取imu传感器数据" class="headerlink" title="获取imu传感器数据"></a>获取imu传感器数据</h2><h4 id="读取imu-mpu6050"><a href="#读取imu-mpu6050" class="headerlink" title="读取imu:mpu6050"></a>读取imu:mpu6050</h4><p><a href="https://github.com/tockn/MPU6050_tockn"><code>MPU6050_tockn</code>库</a>获取角度的示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;MPU6050_tockn.h&gt;</span><br><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line"></span><br><span class="line">MPU6050 mpu6050(Wire);</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  Wire.begin();</span><br><span class="line">  mpu6050.begin();</span><br><span class="line">  mpu6050.calcGyroOffsets(true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  mpu6050.update();</span><br><span class="line">  Serial.print(&quot;angleX : &quot;);</span><br><span class="line">  Serial.print(mpu6050.getAngleX());</span><br><span class="line">  Serial.print(&quot;\tangleY : &quot;);</span><br><span class="line">  Serial.print(mpu6050.getAngleY());</span><br><span class="line">  Serial.print(&quot;\tangleZ : &quot;);</span><br><span class="line">  Serial.println(mpu6050.getAngleZ());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用vofa-的tcp连接进行角度可视化"><a href="#使用vofa-的tcp连接进行角度可视化" class="headerlink" title="使用vofa+的tcp连接进行角度可视化"></a>使用vofa+的tcp连接进行角度可视化</h4><p>由于我们使用esp32因此可以连接wifi与电脑通讯而无需数据线，这里我们让esp32做服务端，电脑做客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;MPU6050_tockn.h&gt;</span><br><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line">#include &lt;WiFi.h&gt;</span><br><span class="line"></span><br><span class="line">const char *ssid = &quot;BJZQ&quot;;</span><br><span class="line">const char *password = &quot;12345678&quot;;</span><br><span class="line">MPU6050 mpu6050(Wire);</span><br><span class="line">WiFiServer server(80);</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  pinMode(27, OUTPUT);</span><br><span class="line">  pinMode(14, OUTPUT);</span><br><span class="line">  pinMode(32, OUTPUT);</span><br><span class="line">  pinMode(33, OUTPUT);</span><br><span class="line">  pinMode(25, OUTPUT);</span><br><span class="line">  pinMode(26, OUTPUT);</span><br><span class="line">  ledcSetup(8, 50, 8);</span><br><span class="line">  digitalWrite(32, HIGH);</span><br><span class="line">  digitalWrite(33, LOW);</span><br><span class="line">  digitalWrite(25, HIGH);</span><br><span class="line">  digitalWrite(26, LOW);</span><br><span class="line">  ledcAttachPin(27, 8);</span><br><span class="line">  ledcWrite(8, 120);</span><br><span class="line">  ledcSetup(6, 50, 8);</span><br><span class="line">  ledcAttachPin(14, 6);</span><br><span class="line">  ledcWrite(6, 120);</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line">  while (WiFi.status() != WL_CONNECTED)&#123;</span><br><span class="line">    delay(500);</span><br><span class="line">    Serial.print(&quot;.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.print(&quot;\nWiFi connected, IP address: &quot;);</span><br><span class="line">  Serial.println(WiFi.localIP());</span><br><span class="line">  server.begin();</span><br><span class="line">  Wire.begin();</span><br><span class="line">  mpu6050.begin();</span><br><span class="line">  mpu6050.calcGyroOffsets(true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  WiFiClient client = server.available();</span><br><span class="line">  while (client) &#123;</span><br><span class="line">    mpu6050.update();</span><br><span class="line">    client.print(mpu6050.getAngleX());</span><br><span class="line">    client.print(&#x27;,&#x27;);</span><br><span class="line">    client.print(mpu6050.getAngleY());</span><br><span class="line">    client.print(&#x27;,&#x27;);</span><br><span class="line">    client.print(mpu6050.getAngleZ());</span><br><span class="line">    client.print(&#x27;\n&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="使用arduino的pid库计算电机pwm输出"><a href="#使用arduino的pid库计算电机pwm输出" class="headerlink" title="使用arduino的pid库计算电机pwm输出"></a>使用arduino的pid库计算电机pwm输出</h2><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;PID_v1.h&gt;</span><br><span class="line">PID myPID(&amp;Input, &amp;Output, &amp;Setpoint, Kp, Ki, Kd, Direction)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Direction</code>参数：<code>DIRECT</code> 或 <code>REVERSE</code>，指的是当输入与目标值出现偏差时，向哪个方向控制</p>
</blockquote>
<h4 id="pid对象方法："><a href="#pid对象方法：" class="headerlink" title="pid对象方法："></a>pid对象方法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置输出范围</span><br><span class="line">myPID.SetOutputLimits(min, max)</span><br><span class="line">//执行计算(循环执行)</span><br><span class="line">myPID.Compute()</span><br><span class="line">//启用pid控制</span><br><span class="line">myPID.SetMode(AUTOMATIC);</span><br><span class="line">//动态调参</span><br><span class="line">myPID.SetTunings(Kp, Ki, Kd);</span><br><span class="line">//采样时间，默认采样时间为200ms，单位ms</span><br><span class="line">myPID.SetSampleTime()</span><br><span class="line">//输出参数</span><br><span class="line">myPID.GetKp()</span><br><span class="line">myPID.GetKi()</span><br><span class="line">myPID.GetKd()</span><br><span class="line">myPID.GetMode()</span><br><span class="line">myPID.GetDirection()</span><br></pre></td></tr></table></figure>
<h4 id="pid控制代码"><a href="#pid控制代码" class="headerlink" title="pid控制代码"></a>pid控制代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;PID_v1.h&gt;</span><br><span class="line">double DegGoal = 0.0, DegIn, DegOut;</span><br><span class="line">double Degkp = 20.0,Degki = 0.5,Degkd = 1.0;</span><br><span class="line">PID DegPID(&amp;DegIn, &amp;DegOut, &amp;DegGoal, Degkp, Degki, Degkd, DIRECT);</span><br><span class="line">DegPID.SetOutputLimits(-127, 127);</span><br><span class="line">DegPID.SetSampleTime(100);</span><br><span class="line">DegPID.SetMode(AUTOMATIC);</span><br><span class="line">while (true)&#123;</span><br><span class="line">  mpu6050.update();</span><br><span class="line">  DegIn = mpu6050.getAngleY();</span><br><span class="line">  DegPID.Compute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="同轴麦轮速度分量计算-当然做个已经用不到了"><a href="#同轴麦轮速度分量计算-当然做个已经用不到了" class="headerlink" title="同轴麦轮速度分量计算(当然做个已经用不到了)"></a>同轴麦轮速度分量计算(当然做个已经用不到了)</h2><p><img src="/2023/arduino-iic-sensor/photo_2023-02-26_06-19-33.jpg" alt="大半夜乱涂乱画"></p>
<p>其中x和y为平移速度，w为旋转角速度，d和D为轮子与中心距离。<br>PID平衡控制的值直接加上去就好。</p>
<h2 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h2><p><img src="/2023/arduino-iic-sensor/7528d75d2ff7922206c42b53b15c26e.png" alt="PID流程图"></p>
<p>使用速度和角度的串级PID控制。</p>
<h2 id="直流电机两轮自平衡小车源码"><a href="#直流电机两轮自平衡小车源码" class="headerlink" title="直流电机两轮自平衡小车源码"></a>直流电机两轮自平衡小车源码</h2><p>写了串口调参，由于电机没有编码器使用电机pwm代替速度输入。直立问题不大，不过还是很抖，又不是不能用hhh更多改进等用无刷电机foc控制的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;MPU6050_tockn.h&gt;</span><br><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line">#include &lt;WiFi.h&gt;</span><br><span class="line">#include &lt;PID_v1.h&gt;</span><br><span class="line"></span><br><span class="line">const char *ssid = &quot;BJZQ&quot;;</span><br><span class="line">const char *password = &quot;12345678&quot;;</span><br><span class="line">MPU6050 mpu6050(Wire);</span><br><span class="line">WiFiServer server(80);</span><br><span class="line"></span><br><span class="line">double OutPutA, OutPutB;</span><br><span class="line">//角度环</span><br><span class="line">double DegGoal = 1.5, DegIn, DegOut, Degkp = 50.0,Degki = 1.0,Degkd = 0.5;</span><br><span class="line">PID DegPID(&amp;DegIn, &amp;DegOut, &amp;DegGoal, Degkp, Degki, Degkd, DIRECT);</span><br><span class="line">//转向控制</span><br><span class="line">double DirIn, DirOut, DirGoal = 0.0, Dirkp = 3.0, Dirki = 0.0, Dirkd = 0.3;</span><br><span class="line">PID DirPID(&amp;DirIn, &amp;DirOut, &amp;DirGoal, Dirkp, Dirki, Dirkd, DIRECT);</span><br><span class="line">//速度环</span><br><span class="line">double SpdIn, SpdOut, SpdGoal = 0.0, Spdkp = 0.0001, Spdki = 0.0001, Spdkd = 0.00005;</span><br><span class="line">PID SpdPID(&amp;SpdIn, &amp;SpdOut, &amp;SpdGoal, Spdkp, Spdki, Spdkd, DIRECT);</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  pinMode(27, OUTPUT);</span><br><span class="line">  pinMode(14, OUTPUT);</span><br><span class="line">  pinMode(32, OUTPUT);</span><br><span class="line">  pinMode(33, OUTPUT);</span><br><span class="line">  pinMode(25, OUTPUT);</span><br><span class="line">  pinMode(26, OUTPUT);</span><br><span class="line">  digitalWrite(32, HIGH);</span><br><span class="line">  digitalWrite(33, HIGH);</span><br><span class="line">  digitalWrite(25, HIGH);</span><br><span class="line">  digitalWrite(26, HIGH);</span><br><span class="line">  ledcSetup(8, 100, 8);</span><br><span class="line">  ledcAttachPin(27, 8);</span><br><span class="line">  ledcWrite(8, 120);</span><br><span class="line">  ledcSetup(6, 100, 8);</span><br><span class="line">  ledcAttachPin(14, 6);</span><br><span class="line">  ledcWrite(6, 120);</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  Wire.begin();</span><br><span class="line">  mpu6050.begin();</span><br><span class="line">  mpu6050.calcGyroOffsets(true);</span><br><span class="line">  xTaskCreatePinnedToCore(Task1code, &quot;pid_output&quot;, 10000, NULL, 1, NULL,  0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Task1code( void * parameter) &#123;</span><br><span class="line"></span><br><span class="line">  DirPID.SetOutputLimits(-63, 63);</span><br><span class="line">  DirPID.SetSampleTime(20);</span><br><span class="line">  DirPID.SetMode(AUTOMATIC);</span><br><span class="line"></span><br><span class="line">  DegPID.SetOutputLimits(-127, 127);</span><br><span class="line">  DegPID.SetSampleTime(20);</span><br><span class="line">  DegPID.SetMode(AUTOMATIC);</span><br><span class="line"></span><br><span class="line">  SpdPID.SetOutputLimits(-1, 1);</span><br><span class="line">  SpdPID.SetSampleTime(15);</span><br><span class="line">  SpdPID.SetMode(AUTOMATIC);</span><br><span class="line">  </span><br><span class="line">  while (true)&#123;</span><br><span class="line">    mpu6050.update();</span><br><span class="line">    DegIn = mpu6050.getAngleY();</span><br><span class="line">    DirIn = mpu6050.getAngleZ();</span><br><span class="line">    DegPID.Compute();</span><br><span class="line">    DirPID.Compute();</span><br><span class="line">    if (DegOut&lt;100&amp;&amp;DegOut&gt;-100)&#123;</span><br><span class="line">      DegGoal = DegGoal - SpdOut;</span><br><span class="line">      SpdIn = DegOut;</span><br><span class="line">      SpdPID.Compute();</span><br><span class="line">    &#125;</span><br><span class="line">    OutPutA = DegOut - DirOut;</span><br><span class="line">    OutPutB = DegOut + DirOut;</span><br><span class="line">    if (OutPutA&gt;=0)&#123;</span><br><span class="line">      digitalWrite(32, LOW);</span><br><span class="line">      digitalWrite(33, HIGH);</span><br><span class="line">      ledcWrite(6, OutPutA);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      digitalWrite(32, HIGH);</span><br><span class="line">      digitalWrite(33, LOW);</span><br><span class="line">      ledcWrite(6, -OutPutA);</span><br><span class="line">    &#125;</span><br><span class="line">    if (OutPutB&gt;=0)&#123;</span><br><span class="line">      digitalWrite(25, LOW);</span><br><span class="line">      digitalWrite(26, HIGH);</span><br><span class="line">      ledcWrite(8, OutPutB);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      digitalWrite(25, HIGH);</span><br><span class="line">      digitalWrite(26, LOW);</span><br><span class="line">      ledcWrite(8, -OutPutB);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  mpu6050.update();</span><br><span class="line">  Serial.print(mpu6050.getAngleX());</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(mpu6050.getAngleY());</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(mpu6050.getAngleZ());</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(DegOut);</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(DegGoal);</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(Degkp);</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(Degki);</span><br><span class="line">  Serial.print(&#x27;,&#x27;);</span><br><span class="line">  Serial.print(Degkd);</span><br><span class="line">  Serial.print(&#x27;\n&#x27;);</span><br><span class="line">  if (Serial.available())&#123;</span><br><span class="line">    char c = Serial.read();</span><br><span class="line">    if (c==&#x27;p&#x27;)&#123;</span><br><span class="line">      String readBuff;</span><br><span class="line">      unsigned long start_time = millis();</span><br><span class="line">      while(true)&#123;</span><br><span class="line">        char c = Serial.read();</span><br><span class="line">        if (c==&#x27;\n&#x27;||millis()-start_time&gt;100)break;</span><br><span class="line">        readBuff += c;</span><br><span class="line">      &#125;</span><br><span class="line">      Degkp = readBuff.toDouble();</span><br><span class="line">      readBuff = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (c==&#x27;i&#x27;)&#123;</span><br><span class="line">      String readBuff;</span><br><span class="line">      unsigned long start_time = millis();</span><br><span class="line">      while(true)&#123;</span><br><span class="line">        char c = Serial.read();</span><br><span class="line">        if (c==&#x27;\n&#x27;||millis()-start_time&gt;100)break;</span><br><span class="line">        readBuff += c;</span><br><span class="line">      &#125;</span><br><span class="line">      Degki = readBuff.toDouble();</span><br><span class="line">      readBuff = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (c==&#x27;d&#x27;)&#123;</span><br><span class="line">      String readBuff;</span><br><span class="line">      unsigned long start_time = millis();</span><br><span class="line">      while(true)&#123;</span><br><span class="line">        char c = Serial.read();</span><br><span class="line">        if (c==&#x27;\n&#x27;||millis()-start_time&gt;100)break;</span><br><span class="line">        readBuff += c;</span><br><span class="line">      &#125;</span><br><span class="line">      Degkd = readBuff.toDouble();</span><br><span class="line">      readBuff = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    DegPID.SetTunings(Degkp,Degki,Degkd);</span><br><span class="line">    if (c==&#x27;D&#x27;)&#123;</span><br><span class="line">      String readBuff;</span><br><span class="line">      unsigned long start_time = millis();</span><br><span class="line">      while(true)&#123;</span><br><span class="line">        char c = Serial.read();</span><br><span class="line">        if (c==&#x27;\n&#x27;||millis()-start_time&gt;100)break;</span><br><span class="line">        readBuff += c;</span><br><span class="line">      &#125;</span><br><span class="line">      DirGoal = readBuff.toDouble();</span><br><span class="line">      readBuff = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
      </categories>
      <tags>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ardupilot的四轴飞行器</title>
    <url>/2023/ardupilot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ArduPilot"><a href="#ArduPilot" class="headerlink" title="ArduPilot"></a>ArduPilot</h1><p><a href="https://ardupilot.org/">ArduPilot is a trusted, versatile, and open source autopilot system supporting many vehicle types: multi-copters, traditional helicopters, fixed wing aircraft, boats, submarines, rovers and more. The source code is developed by a large community of professionals and enthusiasts. New developers are always welcome! The best way to start is by joining the Developer Team Forum, which is open to all and chock-full of daily development goodness</a></p>
<h1 id="软件安装及配置"><a href="#软件安装及配置" class="headerlink" title="软件安装及配置"></a>软件安装及配置</h1><h2 id="软件资源下载"><a href="#软件资源下载" class="headerlink" title="软件资源下载"></a>软件资源下载</h2><p><a href="https://cr.triority.cc/f/J0PsK/MP1.3.28.msi">地面站下载</a><br><a href="https://cr.triority.cc/f/p5KIk/ardupilot.rar">飞控固件下载</a></p>
<h2 id="minim-OSD显示配置"><a href="#minim-OSD显示配置" class="headerlink" title="minim OSD显示配置"></a>minim OSD显示配置</h2><h1 id="硬件连接结构"><a href="#硬件连接结构" class="headerlink" title="硬件连接结构"></a>硬件连接结构</h1><h2 id="飞控接线图"><a href="#飞控接线图" class="headerlink" title="飞控接线图"></a>飞控接线图</h2><p><img src="/2023/ardupilot/20190107165026890.jpg"></p>
<h2 id="电机和桨叶方向"><a href="#电机和桨叶方向" class="headerlink" title="电机和桨叶方向"></a>电机和桨叶方向</h2><p><img src="/2023/ardupilot/f9e979ae8c0ee89fe689f15214c04bd.jpg"></p>
<p>不仅是电调接线顺序，务必注意电机旋转方向，否则起飞即自转</p>
<h2 id="GPS方向"><a href="#GPS方向" class="headerlink" title="GPS方向"></a>GPS方向</h2><p>GPS箭头方向必须与飞控相同，否则定点飞行将会发生持续漂移</p>
<h2 id="机架1-0"><a href="#机架1-0" class="headerlink" title="机架1.0"></a>机架1.0</h2><p>最开始用的现成的机架，后来炸鸡摔断了，于是自己3D打印设计了一整个来满足消耗，目前画的这些，反正终稿肯定还要改很多</p>
<p><img src="/2023/ardupilot/QQ%E6%88%AA%E5%9B%BE20230605143807.png" alt="目前装配体长这样"></p>
<p><a href="apm2.8%E6%9C%BA%E6%9E%B6.rar">solidworks文件下载链接</a></p>
<h2 id="机架2-0"><a href="#机架2-0" class="headerlink" title="机架2.0"></a>机架2.0</h2><p>这次机架改进了很多，首先是集成了所有电控部分在中间的长方体里，同时考虑到便携性，四个电机支架可以用手拧螺丝直接拆装，电池部分也改成扎带绑在上面，下部空出位置放置相机云台等。不过由于这个结构，机身重量也增加了三五十克。</p>
<div id="dplayer31" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer31"),"video":{"url":"https://cr.triority.cc/f/vzZIl/1686471126438.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

]]></content>
      <categories>
        <category>折腾记录</category>
        <category>作品&amp;项目总结</category>
      </categories>
      <tags>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>百抗校园网自动登录</title>
    <url>/2023/auto-login-cumtb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>这几天要去出差，电脑在宿舍只要用了25G流量，无论是否还剩流量，都会被强制下线需要重新登录，所以需要检查能否联网然后登陆</p>
<p>而且最近selenium库有了一些大更新，最主要的就是查找网页元素的函数进行了修改，导致之前的程序都会报错，顺便做下之前文章的更新内容</p>
<p>但是夸奖一下校园网，他终于不是在url发get请求来登录了，进行了md5加密，导致我没法简单发requests请求来登录了</p>
<h1 id="selenium库更新"><a href="#selenium库更新" class="headerlink" title="selenium库更新"></a>selenium库更新</h1><p>曾经查找元素的命令(以xpath查找为例)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(&#x27;//*[@id=&quot;kw&quot;]&#x27;).send_keys(&#x27;this is a test&#x27;)</span><br></pre></td></tr></table></figure>
<p>如今无论查找方式都是用一个函数，查找方式变成了第一个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH, &quot;/html/body/main/section/div[1]/div[2]/input&quot;)</span><br></pre></td></tr></table></figure>
<p>其他倒是都是一些小问题</p>
<h1 id="自动登录程序"><a href="#自动登录程序" class="headerlink" title="自动登录程序"></a>自动登录程序</h1><p>毕竟是校园网，我猜网页xpath短时间内都不会有变化hhh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">username = &quot;123456&quot;</span><br><span class="line">password = &quot;654321&quot;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    print(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime()))</span><br><span class="line">    try:</span><br><span class="line">        requests.get(url=&#x27;https://baidu.com/&#x27;)</span><br><span class="line">        print(&quot;Connected to the internet&quot;)</span><br><span class="line">    except:</span><br><span class="line">        try:</span><br><span class="line">            print(&quot;Not connected to the internet, try to log in...&quot;)</span><br><span class="line">            driver = webdriver.Edge()</span><br><span class="line">            driver.minimize_window()</span><br><span class="line">            driver.get(&quot;http://login.cumtb.edu.cn/&quot;)</span><br><span class="line">            driver.find_element(By.XPATH, &quot;/html/body/main/section/div[1]/div[2]/input&quot;).send_keys(username)</span><br><span class="line">            driver.find_element(By.XPATH, &quot;/html/body/main/section/div[1]/div[3]/input&quot;).send_keys(password)</span><br><span class="line">            driver.find_element(By.XPATH, &quot;/html/body/main/section/div[1]/div[5]/button&quot;).click()</span><br><span class="line">            time.sleep(3)</span><br><span class="line">            print(&#x27;remain_flow：&#x27;+driver.find_element(By.XPATH, &quot;/html/body/main/section/div[1]/div[5]/span[2]&quot;).text)</span><br><span class="line">            driver.quit()</span><br><span class="line">        except:</span><br><span class="line">            print(&#x27;Failed to log in.&#x27;)</span><br><span class="line">    time.sleep(60)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>提问的智慧</title>
    <url>/2023/ask/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p>
<p><strong>How To Ask Questions The Smart Way</strong></p>
<p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p>
<p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p>
<p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr&#x2F;faqs&#x2F;smart-questions.html</a></p>
<p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p>
<p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p>
<p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/issues/new">发 issue</a>，或直接<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/compare">发 pull request</a> 给我。</strong></p>
<p>本文另有<a href="README.md">繁體中文版</a>。</p>
<h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="history.md">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7">提问的智慧</a><ul>
<li><a href="#%E5%8E%9F%E6%96%87%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2">原文版本历史</a></li>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li>
<li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">在提问之前</a></li>
<li><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6">当你提问时</a><ul>
<li><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B">慎选提问的论坛</a></li>
<li><a href="#stack-overflow">Stack Overflow</a></li>
<li><a href="#%E7%BD%91%E7%AB%99%E5%92%8C-irc-%E8%AE%BA%E5%9D%9B">网站和 IRC 论坛</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">第二步，使用项目邮件列表</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98">使用有意义且描述明确的标题</a></li>
<li><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D">使问题容易回复</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%B8%85%E6%99%B0%E6%AD%A3%E7%A1%AE%E7%B2%BE%E5%87%86%E4%B8%94%E5%90%88%E4%B9%8E%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">使用清晰、正确、精准且合乎语法的语句</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98">使用易于读取且标准的文件格式发送问题</a></li>
<li><a href="#%E7%B2%BE%E7%A1%AE%E5%9C%B0%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9">精确地描述问题并言之有物</a></li>
<li><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a></li>
<li><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0-bug">别动辄声称找到 Bug</a></li>
<li><a href="#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%B8%8D%E8%83%BD%E4%BB%A3%E6%9B%BF%E4%BD%A0%E7%9A%84%E5%8A%9F%E8%AF%BE">低声下气不能代替你的功课</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E4%BD%A0%E7%9A%84%E7%8C%9C%E6%B5%8B">描述问题症状而非你的猜测</a></li>
<li><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6">按发生时间先后列出问题症状</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B">描述目标而不是过程</a></li>
<li><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D">别要求使用私人电邮回复</a></li>
<li><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E5%9C%B0%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82">清楚明确地表达你的问题以及需求</a></li>
<li><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6">询问有关代码的问题时</a></li>
<li><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5">别把自己家庭作业的问题贴上来</a></li>
<li><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5">去掉无意义的提问句</a></li>
<li><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5">即使你很急也不要在标题写<code>紧急</code></a></li>
<li><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9">礼多人不怪，而且有时还很有帮助</a></li>
<li><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">问题解决后，加个简短的补充说明</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88">如何解读答案</a><ul>
<li><a href="#rtfm-%E5%92%8C-stfw%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86">RTFM 和 STFW：如何知道你已完全搞砸了</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82">如果还是搞不懂</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94">处理无礼的回应</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85">如何避免扮演失败者</a></li>
<li><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98">不该问的问题</a></li>
<li><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98">好问题与蠢问题</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94">如果得不到回答</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98">如何更好地回答问题</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90">相关资源</a></li>
<li><a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a></li>
</ul>
</li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p>
<p><strong>本指南不提供此项目的实际支持服务！</strong></p>
<p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p>
<p>如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确地提问以获得你满意的答案。</p>
<p>现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件<strong>好事</strong>；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以把你的建议发送至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>
<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>
<li>尝试上网搜索以找到答案。</li>
<li>尝试阅读手册以找到答案。</li>
<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>
<li>尝试自己检查或试验以找到答案。</li>
<li>向你身边的强者朋友打听以找到答案。</li>
<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐得舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细地思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>，一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动地从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>
<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li>在与主题不合的论坛上贴出你的问题。</li>
<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>
<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>
<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信它的名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。</p>
<h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<em>然后</em>在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>如果你还是找不到任何对你的问题有用的内容，请把你的问题发在与它最相关的网站上。提问的时候请善用格式化工具，尤其注意为代码添加格式，并且添加相关的标签（特别是编程语言、操作系统或库&#x2F;包的名称）。当有人要求你提供更多相关信息时，请编辑你的贴子来补充它们[译注：而不是发一个回帖或回答！]。如果你觉得一个答案对你有帮助，点击向上的箭头来为它投票；如果一个答案提供了问题的正确解决方案，点击投票按钮下方的对勾来将它标记为正解。</p>
<p>Stack Exchange 已经成长到<a href="https://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p>
<ul>
<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>
<li>Stack Overflow 是问写程序有关的问题。</li>
<li>Server Fault 是问服务器和网管相关的问题。</li>
</ul>
<h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表），这些都是开始提问的好地方，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用<strong>我们的</strong>版本”。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>
<h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>
<ul>
<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。</li>
<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>
<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>
<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>
</ul>
<p>如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>
<h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>
<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！<br>聪明问题：X.org 6.8.1 的鼠标指针会变形，某牌显卡 MV1005 芯片组。<br>更聪明问题：X.org 6.8.1 的鼠标指针，在某牌显卡 MV1005 芯片组环境下 - 会变形。<br>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标指针或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>
</blockquote>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>
<h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>
<h3 id="使用清晰、正确、精准且合乎语法的语句"><a href="#使用清晰、正确、精准且合乎语法的语句" class="headerlink" title="使用清晰、正确、精准且合乎语法的语句"></a><a name="使用清晰、正确、精准且合乎语法的语句">使用清晰、正确、精准且合乎语法的语句</a></h3><p>我们从经验中发现，粗心的提问者通常也会粗心地写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂的语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法。</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email&#x2F;PM me;<br>I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请向我发电邮&#x2F;私信；</li>
<li>我需要有人协助我翻译我的问题。</li>
</ul>
<blockquote>
<p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p>
</blockquote>
<ul>
<li>我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。</li>
</ul>
<blockquote>
<p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来。</li>
<li>如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。</li>
</ul>
<h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li>
<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>
<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>
<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>
<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>
<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>
<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>
<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>
<h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul>
<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>
<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>
<li>描述在提问前你是怎样去研究和理解这个问题的。</li>
<li>描述在提问前为确定问题而采取的诊断步骤。</li>
<li>描述最近做过什么可能相关的硬件或软件变更。</li>
<li>尽可能地提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能提出的问题回答一遍。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p>
<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>
<p>请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>
<h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>
<h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？<br><strong>聪明问题</strong><br>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…<br>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方地展示给我们看吧！</p>
</blockquote>
<h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>
<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？<br><strong>聪明问题</strong><br>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。<br>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>
</blockquote>
<h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>
<h3 id="清楚明确地表达你的问题以及需求"><a href="#清楚明确地表达你的问题以及需求" class="headerlink" title="清楚明确地表达你的问题以及需求"></a>清楚明确地表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你获得有用的答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好地理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>
<h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>如果没有提示别人应该从何入手，别要求他人帮你调试有问题的代码。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>
<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做是一个好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的<strong>用户</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的用户也许仍会给你一些提示。</p>
<h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>
<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="https://strcat.de/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p>
<h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛茸茸的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛茸茸的小海豹很重要。</p>
<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>
<h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>
<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="rtfm"></a></p>
<h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM（Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **<a href="http://lmgtfy.com/">Google 是你的朋友</a>**！）</p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为：</p>
<ul>
<li><strong>你需要的信息非常容易获得</strong>；</li>
<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>
<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>
<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>
<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）</p>
<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p>
<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>
<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中，你以本指南所描述的或类似的方式，可能会有那么几次搞砸了。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被言语攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、不去关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>
<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#q5">我的程序&#x2F;设定&#x2F;SQL 语句没有用</a></p>
<p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q9">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p>
<hr>
<p><a id="q1"></a></p>
<blockquote>
<p>问题：我能在哪找到 X 程序或 X 资源？<br>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="https://www.google.com/">Google</a> 吗？</p>
</blockquote>
<p><a id="q2"></a></p>
<blockquote>
<p>问题：我怎样用 X 做 Y？<br>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
</blockquote>
<p><a id="q3"></a></p>
<blockquote>
<p>问题：如何设定我的 shell 提示？？<br>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p>
</blockquote>
<p><a id="q4"></a></p>
<blockquote>
<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？<br>回答：试试看就知道了。如果你试过，你就知道了答案，就不用浪费我的时间了。</p>
</blockquote>
<p><a id="q5"></a></p>
<blockquote>
<p>问题：我的{程序&#x2F;设定&#x2F;SQL 语句}没有用<br>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
</blockquote>
<ul>
<li>你还有什么要补充的吗？</li>
<li>真糟糕，希望你能搞定。</li>
<li>这关我屁事？</li>
</ul>
<p><a id="q6"></a></p>
<blockquote>
<p>问题：我的 Windows 电脑有问题，你能帮我吗？<br>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>
</blockquote>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<p><a id="q7"></a></p>
<blockquote>
<p>问题：我的程序不会动了，我认为系统工具 X 有问题<br>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>
</blockquote>
<p><a id="q8"></a></p>
<blockquote>
<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？<br>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到用户群组的清单）。</p>
</blockquote>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>
<p><a id="q9"></a></p>
<blockquote>
<p>问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？<br>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>
</blockquote>
<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？<br>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p>
</blockquote>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？<br>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
</blockquote>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？<br>他觉得都是别人的错，这个傲慢自大的提问者。</p>
</blockquote>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？<br>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>
</blockquote>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？<br>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>
</blockquote>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？<br>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>
</blockquote>
<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候，一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>
<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单地重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>
<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点。</strong> 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><strong>对初犯者私下回复。</strong> 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>
<p><strong>如果你不确定，一定要说出来！</strong> 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><strong>如果帮不了忙，也别妨碍他。</strong> 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>
<p><strong>试探性的反问以引出更多的细节。</strong> 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。</p>
<p><strong>如果你决定回答，就请给出好的答案。</strong> 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p>
<p><strong>正面地回答问题！</strong> 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>
<p><strong>帮助你的社区从问题中学习。</strong> 当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>
<p>如果你在研究一番后才作出了回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>
<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p>
<p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly配置</title>
    <url>/2023/butterfly-configure/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前用的fluid主题，心血来潮换成了butterfly，感觉还不错，不过可配置项就会多出很多，官方文档虽然全面但是顺序有点乱七八糟不好找，所以按自己的顺序写一些经常用到的配置项</p>
<h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><h2 id="主图片"><a href="#主图片" class="headerlink" title="主图片"></a>主图片</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96">顶部图</a></p>
<p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2">文章封面</a></p>
<p><a href="https://butterfly.js.org/posts/ceeb73f/#%E4%B8%BB%E9%A0%81top-img%E9%A1%AF%E7%A4%BA%E5%A4%A7%E5%B0%8F">主页图片大小配置</a></p>
<h2 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h2><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E7%B6%B2%E7%AB%99%E8%83%8C%E6%99%AF">网站背景</a></p>
<p><a href="https://butterfly.js.org/posts/ceeb73f/#%E7%B6%B2%E7%AB%99%E5%89%AF%E6%A8%99%E9%A1%8C">副标题</a></p>
<p><a href="https://butterfly.js.org/posts/ceeb73f/#%E9%A0%81%E9%9D%A2%E5%8A%A0%E8%BC%89%E5%8B%95%E7%95%AB-preloader">页面加载动画</a></p>
<h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%81%B4%E9%82%8A%E6%AC%84%E8%A8%AD%E7%BD%AE-aside">侧边排版</a></p>
<h2 id="导航栏-Navigation-bar"><a href="#导航栏-Navigation-bar" class="headerlink" title="导航栏-Navigation bar"></a>导航栏-Navigation bar</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%B0%8E%E8%88%AA%E6%AC%84%E8%A8%AD%E7%BD%AE-Navigation-bar-settings">导航栏设置</a></p>
<h2 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%81%E8%85%B3%E8%87%AA%E5%AE%9A%E7%BE%A9%E6%96%87%E6%9C%AC">页脚自定义文本</a></p>
<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><table>
<thead>
<tr>
<th>写法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>【必需】页面标题</td>
</tr>
<tr>
<td>date</td>
<td>【必需】页面创建日期</td>
</tr>
<tr>
<td>type</td>
<td>【必需】标签、分类和友情链接三个页面需要配置</td>
</tr>
<tr>
<td>updated</td>
<td>【可选】页面更新日期</td>
</tr>
<tr>
<td>description</td>
<td>【可选】页面描述</td>
</tr>
<tr>
<td>keywords</td>
<td>【可选】页面关键字</td>
</tr>
<tr>
<td>comments</td>
<td>【可选】显示页面评论模块 (默认 true)</td>
</tr>
<tr>
<td>top_img</td>
<td>【可选】页面顶部图片</td>
</tr>
<tr>
<td>mathjax</td>
<td>【可选】显示mathjax (当设置mathjax的per_page: false时，才需要配置，默认 false)</td>
</tr>
<tr>
<td>katex</td>
<td>【可选】显示katex (当设置katex的per_page: false时，才需要配置，默认 false)</td>
</tr>
<tr>
<td>aside</td>
<td>【可选】显示侧边栏 (默认 true)</td>
</tr>
<tr>
<td>aplayer</td>
<td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td>
</tr>
<tr>
<td>highlight_shrink</td>
<td>【可选】配置代码框是否展开 (true&#x2F;false) (默认为设置中highlight_shrink的配置)</td>
</tr>
<tr>
<td>random</td>
<td>【可选】配置友情链接是否随机排序（默认为 false)</td>
</tr>
</tbody></table>
<h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><h2 id="Front-matter-1"><a href="#Front-matter-1" class="headerlink" title="Front-matter"></a>Front-matter</h2><table>
<thead>
<tr>
<th>写法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>【必需】文章标题</td>
</tr>
<tr>
<td>date</td>
<td>【必需】文章创建日期</td>
</tr>
<tr>
<td>updated</td>
<td>【可选】文章更新日期</td>
</tr>
<tr>
<td>tags</td>
<td>【可选】文章标签</td>
</tr>
<tr>
<td>categories</td>
<td>【可选】文章分类</td>
</tr>
<tr>
<td>keywords</td>
<td>【可选】文章关键字</td>
</tr>
<tr>
<td>description</td>
<td>【可选】文章描述</td>
</tr>
<tr>
<td>top_img</td>
<td>【可选】文章顶部图片</td>
</tr>
<tr>
<td>cover</td>
<td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td>
</tr>
<tr>
<td>comments</td>
<td>【可选】显示文章评论模块(默认 true)</td>
</tr>
<tr>
<td>toc</td>
<td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td>
</tr>
<tr>
<td>toc_number</td>
<td>【可选】显示toc_number(默认为设置中toc的number配置)</td>
</tr>
<tr>
<td>toc_style_simple</td>
<td>【可选】显示 toc 简洁模式</td>
</tr>
<tr>
<td>copyright</td>
<td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td>
</tr>
<tr>
<td>copyright_author</td>
<td>【可选】文章版权模块的文章作者</td>
</tr>
<tr>
<td>copyright_author_href</td>
<td>【可选】文章版权模块的文章作者链接</td>
</tr>
<tr>
<td>copyright_url</td>
<td>【可选】文章版权模块的文章连结链接</td>
</tr>
<tr>
<td>copyright_info</td>
<td>【可选】文章版权模块的版权声明文字</td>
</tr>
<tr>
<td>mathjax</td>
<td>【可选】显示mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false )</td>
</tr>
<tr>
<td>katex</td>
<td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false )</td>
</tr>
<tr>
<td>aplayer</td>
<td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</td>
</tr>
<tr>
<td>highlight_shrink</td>
<td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td>
</tr>
<tr>
<td>aside</td>
<td>【可选】显示侧边栏 (默认 true)</td>
</tr>
<tr>
<td>abcjs</td>
<td>【可选】加载 abcjs (当设置 abcjs 的 per_page: false 时，才需要配置，默认 false )</td>
</tr>
</tbody></table>
<h2 id="特殊语法-Note-x2F-相册-x2F-按钮-x2F-流程图-x2F-Tabs-x2F-timeline-x2F-乐谱-x2F-链接界面"><a href="#特殊语法-Note-x2F-相册-x2F-按钮-x2F-流程图-x2F-Tabs-x2F-timeline-x2F-乐谱-x2F-链接界面" class="headerlink" title="特殊语法(Note&#x2F;相册&#x2F;按钮&#x2F;流程图&#x2F;Tabs&#x2F;timeline&#x2F;乐谱&#x2F;链接界面)"></a>特殊语法(Note&#x2F;相册&#x2F;按钮&#x2F;流程图&#x2F;Tabs&#x2F;timeline&#x2F;乐谱&#x2F;链接界面)</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">标签外挂（Tag Plugins）</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h2><p>友情链接随机排序只需要在顶部 <code>front-matter</code> 添加 <code>·random: true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Twitter</span><br><span class="line">  link: https://twitter.com/</span><br><span class="line">  avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span><br><span class="line">  descr: 社交分享平台</span><br></pre></td></tr></table></figure>
<h2 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h2><p><a href="https://butterfly.js.org/posts/dc584b87/#%E5%9C%96%E5%BA%AB">图库官方文档</a></p>
<h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC-Code-Blocks">代码(Code Blocks)</a></p>
<h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p><a href="https://fontawesome.com/icons?from=io">font-awesome v6 图标</a></p>
<p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%A4%BE%E4%BA%A4%E5%9C%96%E6%A8%99-Social-Settings">社交图标文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/xxxxx || Github || &quot;#hdhfbb&quot;</span><br><span class="line">  fas fa-envelope: mailto:xxxxxx@gmail.com || Email || &quot;#000000&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用v4l2-ctl获取和设置摄像头参数</title>
    <url>/2023/camera-v4l2-ctl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install v4l-utils</span><br></pre></td></tr></table></figure>
<h1 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h1><h2 id="查看摄像头设备"><a href="#查看摄像头设备" class="headerlink" title="查看摄像头设备"></a>查看摄像头设备</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orangepi@orangepizero2:~$ sudo v4l2-ctl --list-devices</span><br><span class="line">cedrus (platform:cedrus):</span><br><span class="line">        /dev/video0</span><br><span class="line">        /dev/media0</span><br><span class="line"></span><br><span class="line">2K USB Camera: 2K USB Camera (usb-5311000.usb-1):</span><br><span class="line">        /dev/video1</span><br><span class="line">        /dev/video2</span><br><span class="line">        /dev/media1</span><br></pre></td></tr></table></figure>
<h2 id="查看摄像头所有参数"><a href="#查看摄像头所有参数" class="headerlink" title="查看摄像头所有参数"></a>查看摄像头所有参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orangepi@orangepizero2:~$ sudo v4l2-ctl -d /dev/video1 --all</span><br><span class="line">Driver Info:</span><br><span class="line">        Driver name      : uvcvideo</span><br><span class="line">        Card type        : 2K USB Camera: 2K USB Camera</span><br><span class="line">        Bus info         : usb-5311000.usb-1</span><br><span class="line">        Driver version   : 5.16.17</span><br><span class="line">        Capabilities     : 0x84a00001</span><br><span class="line">                Video Capture</span><br><span class="line">                Metadata Capture</span><br><span class="line">                Streaming</span><br><span class="line">                Extended Pix Format</span><br><span class="line">                Device Capabilities</span><br><span class="line">        Device Caps      : 0x04200001</span><br><span class="line">                Video Capture</span><br><span class="line">                Streaming</span><br><span class="line">                Extended Pix Format</span><br><span class="line">Media Driver Info:</span><br><span class="line">        Driver name      : uvcvideo</span><br><span class="line">        Model            : 2K USB Camera: 2K USB Camera</span><br><span class="line">        Serial           : 46435000_P020300_SN0002</span><br><span class="line">        Bus info         : usb-5311000.usb-1</span><br><span class="line">        Media version    : 5.16.17</span><br><span class="line">        Hardware revision: 0x00003000 (12288)</span><br><span class="line">        Driver version   : 5.16.17</span><br><span class="line">Interface Info:</span><br><span class="line">        ID               : 0x03000002</span><br><span class="line">        Type             : V4L Video</span><br><span class="line">Entity Info:</span><br><span class="line">        ID               : 0x00000001 (1)</span><br><span class="line">        Name             : 2K USB Camera: 2K USB Camera</span><br><span class="line">        Function         : V4L2 I/O</span><br><span class="line">        Flags         : default</span><br><span class="line">        Pad 0x01000007   : 0: Sink</span><br><span class="line">          Link 0x0200000d: from remote pad 0x100000a of entity &#x27;Processing 2&#x27;: Data, Enabled, Immutable</span><br><span class="line">Priority: 2</span><br><span class="line">Video input : 0 (Camera 1: ok)</span><br><span class="line">Format Video Capture:</span><br><span class="line">        Width/Height      : 640/480</span><br><span class="line">        Pixel Format      : &#x27;MJPG&#x27; (Motion-JPEG)</span><br><span class="line">        Field             : None</span><br><span class="line">        Bytes per Line    : 0</span><br><span class="line">        Size Image        : 4194304</span><br><span class="line">        Colorspace        : Default</span><br><span class="line">        Transfer Function : Default (maps to Rec. 709)</span><br><span class="line">        YCbCr/HSV Encoding: Default (maps to ITU-R 601)</span><br><span class="line">        Quantization      : Default (maps to Full Range)</span><br><span class="line">        Flags             :</span><br><span class="line">Crop Capability Video Capture:</span><br><span class="line">        Bounds      : Left 0, Top 0, Width 640, Height 480</span><br><span class="line">        Default     : Left 0, Top 0, Width 640, Height 480</span><br><span class="line">        Pixel Aspect: 1/1</span><br><span class="line">Selection Video Capture: crop_default, Left 0, Top 0, Width 640, Height 480, Flags:</span><br><span class="line">Selection Video Capture: crop_bounds, Left 0, Top 0, Width 640, Height 480, Flags:</span><br><span class="line">Streaming Parameters Video Capture:</span><br><span class="line">        Capabilities     : timeperframe</span><br><span class="line">        Frames per second: 30.000 (30/1)</span><br><span class="line">        Read buffers     : 0</span><br><span class="line"></span><br><span class="line">User Controls</span><br><span class="line"></span><br><span class="line">                     brightness 0x00980900 (int)    : min=1 max=255 step=1 default=128 value=1</span><br><span class="line">                       contrast 0x00980901 (int)    : min=1 max=255 step=1 default=128 value=128</span><br><span class="line">                     saturation 0x00980902 (int)    : min=1 max=255 step=1 default=128 value=255</span><br><span class="line">                            hue 0x00980903 (int)    : min=0 max=255 step=1 default=128 value=128</span><br><span class="line">        white_balance_automatic 0x0098090c (bool)   : default=0 value=1</span><br></pre></td></tr></table></figure>
<h2 id="查看摄像头的视频压缩格式和支持的分辨率和帧速率"><a href="#查看摄像头的视频压缩格式和支持的分辨率和帧速率" class="headerlink" title="查看摄像头的视频压缩格式和支持的分辨率和帧速率"></a>查看摄像头的视频压缩格式和支持的分辨率和帧速率</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orangepi@orangepizero2:~$ sudo v4l2-ctl -d /dev/video1 --list-formats-ext</span><br><span class="line">ioctl: VIDIOC_ENUM_FMT</span><br><span class="line">        Type: Video Capture</span><br><span class="line"></span><br><span class="line">        [0]: &#x27;YUYV&#x27; (YUYV 4:2:2)</span><br><span class="line">                Size: Discrete 640x480</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                Size: Discrete 1920x1080</span><br><span class="line">                        Interval: Discrete 0.200s (5.000 fps)</span><br><span class="line">                Size: Discrete 1280x960</span><br><span class="line">                        Interval: Discrete 0.200s (5.000 fps)</span><br><span class="line">                Size: Discrete 1280x720</span><br><span class="line">                        Interval: Discrete 0.100s (10.000 fps)</span><br><span class="line">                Size: Discrete 640x360</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">        [1]: &#x27;MJPG&#x27; (Motion-JPEG, compressed)</span><br><span class="line">                Size: Discrete 640x480</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                        Interval: Discrete 0.040s (25.000 fps)</span><br><span class="line">                Size: Discrete 2560x1440</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                        Interval: Discrete 0.040s (25.000 fps)</span><br><span class="line">                Size: Discrete 1920x1080</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                        Interval: Discrete 0.040s (25.000 fps)</span><br><span class="line">                Size: Discrete 1280x960</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                        Interval: Discrete 0.040s (25.000 fps)</span><br><span class="line">                Size: Discrete 1280x720</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                        Interval: Discrete 0.040s (25.000 fps)</span><br><span class="line">                Size: Discrete 640x360</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                        Interval: Discrete 0.040s (25.000 fps)</span><br><span class="line">        [2]: &#x27;NV12&#x27; (Y/CbCr 4:2:0)</span><br><span class="line">                Size: Discrete 640x480</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br><span class="line">                Size: Discrete 1920x1080</span><br><span class="line">                        Interval: Discrete 0.200s (5.000 fps)</span><br><span class="line">                Size: Discrete 1280x960</span><br><span class="line">                        Interval: Discrete 0.100s (10.000 fps)</span><br><span class="line">                Size: Discrete 1280x720</span><br><span class="line">                        Interval: Discrete 0.067s (15.000 fps)</span><br><span class="line">                Size: Discrete 640x360</span><br><span class="line">                        Interval: Discrete 0.033s (30.000 fps)</span><br></pre></td></tr></table></figure>
<h1 id="摄像头参数调整"><a href="#摄像头参数调整" class="headerlink" title="摄像头参数调整"></a>摄像头参数调整</h1><h2 id="设置分辨率帧率"><a href="#设置分辨率帧率" class="headerlink" title="设置分辨率帧率"></a>设置分辨率帧率</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo v4l2-ctl -d /dev/video1 --set-fmt-video=width=1920,height=1080,pixelformat=MJPG</span><br><span class="line">sudo v4l2-ctl -d /dev/video1 --set-parm=30</span><br></pre></td></tr></table></figure>
<h2 id="摄像头参数调整-1"><a href="#摄像头参数调整-1" class="headerlink" title="摄像头参数调整"></a>摄像头参数调整</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orangepi@orangepizero2:~$ v4l2-ctl -d /dev/video1 --list-ctrls</span><br><span class="line"></span><br><span class="line">User Controls</span><br><span class="line"></span><br><span class="line">                     brightness 0x00980900 (int)    : min=1 max=255 step=1 default=128 value=1</span><br><span class="line">                       contrast 0x00980901 (int)    : min=1 max=255 step=1 default=128 value=128</span><br><span class="line">                     saturation 0x00980902 (int)    : min=1 max=255 step=1 default=128 value=255</span><br><span class="line">                            hue 0x00980903 (int)    : min=0 max=255 step=1 default=128 value=128</span><br><span class="line">        white_balance_automatic 0x0098090c (bool)   : default=0 value=1</span><br></pre></td></tr></table></figure>
<p>修改某个参数的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v4l2-ctl --device=/dev/video1 --set-ctrl=brightness=1</span><br></pre></td></tr></table></figure>

<p>如果是其他摄像头还可能有其他的参数选项，比如我找了一个其他的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brightness 0x00980900 (int)    : min=-64 max=64 step=1 default=-40 value=20</span><br><span class="line">                       contrast 0x00980901 (int)    : min=0 max=100 step=1 default=50 value=100//对比度</span><br><span class="line">                     saturation 0x00980902 (int)    : min=0 max=100 step=1 default=50 value=50//饱和度</span><br><span class="line">                            hue 0x00980903 (int)    : min=-180 max=180 step=1 default=0 value=0//色彩</span><br><span class="line"> white_balance_temperature_auto 0x0098090c (bool)   : default=1 value=1//自动白平衡</span><br><span class="line">                          gamma 0x00980910 (int)    : min=100 max=500 step=1 default=300 value=300//伽马，数字越大，图片的亮度也就越高</span><br><span class="line">           power_line_frequency 0x00980918 (menu)   : min=0 max=2 default=2 value=2</span><br><span class="line">      white_balance_temperature 0x0098091a (int)    : min=2800 max=6500 step=10 default=4600 value=4600 flags=inactive//白平衡</span><br><span class="line">                      sharpness 0x0098091b (int)    : min=0 max=100 step=1 default=50 value=50//锐度</span><br><span class="line">         backlight_compensation 0x0098091c (int)    : min=0 max=2 step=1 default=0 value=0//背光补偿</span><br><span class="line">         exposure_auto_priority 0x009a0903 (bool)   : default=0 value=0</span><br><span class="line">                     focus_auto 0x009a090c (bool)   : default=1 value=0</span><br></pre></td></tr></table></figure>
<h1 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h1><p>比如输出视频流之类可以参考<a href="https://www.mankier.com/1/v4l2-ctl">文档</a></p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>摆矿校园网</title>
    <url>/2023/cumtb-campus-network/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此视频只是浅浅吐槽一下校园网，毫无恶意，手动狗头保命hhh</p>
<p>发b站已经好几天了，忘记这边同步一下了，今天想起来发一下</p>
<p>校园网已经在朋友圈说好几次了，千言万语化作一个视频如下：</p>
<p>关于北矿校园网网速这件事，群众的眼睛是雪亮的哈哈<br><img src="/2023/cumtb-campus-network/QQ%E6%88%AA%E5%9B%BE20230125234340.png" alt="0Mbps！"></p>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=905782643&bvid=BV1YP4y1z7Xg&cid=977463173&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>整活</tag>
        <tag>CUMTB</tag>
      </tags>
  </entry>
  <entry>
    <title>删除在github提交的敏感文件</title>
    <url>/2023/del-file-github/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前整个博客的源文件仓库是私有库，里面放了一些神奇的东西，密码密钥之类的，最近在想把这个仓库公开(贡献更多绿点)，所以需要删除之前提交的文件的全部历史记录</p>
<p>因为我要删除的文件很少，所以直接用一个git命令解决：</p>
<blockquote>
<p>注意如果要删除记录的文件在仓库里，此操作将会删除这个文件，所以如果这个文件很重要务必备份</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git filter-branch --force --index-filter &#x27;git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA&#x27; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure>
<p>本地仓库删除关于这个文件的全部记录之后，再强制推送到github覆盖github的提交记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure>

<p>github文档里提供了一个删除文件的工具，但是还要下载就懒得弄了，但是放个<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository">链接</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
  </entry>
  <entry>
    <title>ESP 32 —— ALL IN ONE</title>
    <url>/2023/esp32-all-in-one/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章应该很长，要写很久。我会先列一个框架然后再补充内容，如果一部分写完我就会在目录标题写上<code>已完成</code>，没有标注的不完整或未经确认内容仅供参考。</p>
<p><strong>现在大部分内容都已经完成，就不写已完成标识了———— 2023.6.24补充</strong></p>
<p>在大一的时候做一些小东西一般会用<code>arduino</code>，好似大家都这样做，但是后来就发现<code>esp32</code>是真的香，引脚众多功能齐全计算能力强自带联网，而且性价比极高，价格亲民(此处点名树莓派)，唯一的缺点大概就是可能是电源导致的不稳定。众多功能也就带来了众多科技点要学，所以写这样一篇ALL IN ONE，一方面自己以后要用可以直接拿来用，也可以给初学者作为一个笔记整理甚至指导。</p>
<h1 id="超级无敌基础的操作"><a href="#超级无敌基础的操作" class="headerlink" title="超级无敌基础的操作"></a>超级无敌基础的操作</h1><p>开发板索引地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</span><br></pre></td></tr></table></figure>
<p>arduino基础</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pinMode(Pin, OUTPUT);</span><br><span class="line">pinMode(Pin,INPUT);</span><br><span class="line">pinMode(Pin,INPUT_PULLUP);</span><br><span class="line"></span><br><span class="line">digitalRead(Pin);</span><br><span class="line">digitalWrite(Pin, HIGH);</span><br><span class="line">analogRead(pin);</span><br><span class="line"></span><br><span class="line">Serial.begin(<span class="number">115200</span>);</span><br><span class="line">Serial.println(val);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="引脚和资源分配与使用"><a href="#引脚和资源分配与使用" class="headerlink" title="引脚和资源分配与使用"></a>引脚和资源分配与使用</h1><p><img src="/2023/esp32-all-in-one/esp32-pinout-chip-ESP-WROOM-32.webp" alt="ESP32 模组引脚图"></p>
<h2 id="不建议使用或限制使用的引脚"><a href="#不建议使用或限制使用的引脚" class="headerlink" title="不建议使用或限制使用的引脚"></a>不建议使用或限制使用的引脚</h2><p>不建议使用 <code>Strapping引脚</code> ，<code>SPI flash 引脚</code> 以及 <code>仅输入的引脚</code></p>
<h3 id="Strapping引脚"><a href="#Strapping引脚" class="headerlink" title="Strapping引脚"></a>Strapping引脚</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO 0</span><br><span class="line">GPIO 2</span><br><span class="line">GPIO 4</span><br><span class="line">GPIO 5 (启动时必须为高电平)</span><br><span class="line">GPIO 12 (启动时必须为低电平)</span><br><span class="line">GPIO 15 (启动时必须为高电平)</span><br></pre></td></tr></table></figure>
<p>在硬件上要注意使用外接模块时不能将GPIO12拉高，否则将导致ESP32启动异常。还有一些GPIO在启动或重置时其状态更改为高或者输出PWM信号，在使用时需要注意。</p>
<h3 id="集成在ESP-WROOM-32的SPI-flash引脚"><a href="#集成在ESP-WROOM-32的SPI-flash引脚" class="headerlink" title="集成在ESP-WROOM-32的SPI flash引脚"></a>集成在ESP-WROOM-32的SPI flash引脚</h3><p>GPIO 6 到 GPIO 11 在一些 ESP32 开发板中公开。但是，这些引脚连接到 ESP-WROOM-32 芯片上的集成 SPI 闪存，不推荐用于其他用途。所以，不要在你的项目中使用这些引脚：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO 6 (SCK/CLK)</span><br><span class="line">GPIO 7 (SDO/SD0)</span><br><span class="line">GPIO 8 (SDI/SD1)</span><br><span class="line">GPIO 9 (SHD/SD2)</span><br><span class="line">GPIO 10 (SWP/SD3)</span><br><span class="line">GPIO 11 (CSC/CMD)</span><br></pre></td></tr></table></figure>
<h3 id="仅输入引脚"><a href="#仅输入引脚" class="headerlink" title="仅输入引脚"></a>仅输入引脚</h3><p>GPIO 34 到 39 是 GPI – 仅输入引脚。这些引脚没有内部上拉或下拉电阻。它们不能用作输出，因此只能将这些引脚用作输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO 34</span><br><span class="line">GPIO 35</span><br><span class="line">GPIO 36</span><br><span class="line">GPIO 39</span><br></pre></td></tr></table></figure>

<h3 id="限制使用引脚"><a href="#限制使用引脚" class="headerlink" title="限制使用引脚"></a>限制使用引脚</h3><p>这些引脚都是ESP32用于引导加载程序或者烧录模式&#x2F;在大多数内置USB&#x2F;Serial的开发板上，不需要担心这些引脚的状态，开发板会把这些引脚设置为正确的状态，以便使用烧录或启动模式。</p>
<p>但是，如果你有外设连接到这些引脚上，当你在尝试上传新代码、用新固件烧写ESP32或重置电路板时可能会遇到麻烦，例如不明原因的错误和失败。可能是因为这些外设阻止ESP32进入正确的模式。</p>
<h2 id="外设资源"><a href="#外设资源" class="headerlink" title="外设资源"></a>外设资源</h2><h3 id="18个ADC通道"><a href="#18个ADC通道" class="headerlink" title="18个ADC通道"></a>18个ADC通道</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>ESP32 有 18 x 12 位 ADC 输入通道(而ESP8266 只有 1x 10 位 ADC)。这些是可用作 ADC 和相应通道的 GPIO。</p>
<p>尽管 ESP32 有 18 个通道的 ADC，但并非所有 ADC 引脚都可供用户使用。在 8 个 ADC1 通道中，只有 6 个可用(ACD1_CH0 和 ACD1_CH3 到 ACD1_CH7)，而 ADC1_CH1 和 ADC1_CH2 不可用(引脚在 ESP32 开发板中没有暴露)。当使用 ESP32 的 Wi-Fi 时，Wi-Fi Driver 使用 ADC2 Peripheral。因此，只有在未启动 Wi-Fi 驱动程序时才能使用 ADC2。即使您正在使用 ADC2(假设未使用 Wi-Fi)，所有引脚也并非随时可用，因为与 ADC2 相关的一些引脚用于其他重要目的。</p>
<p><img src="/2023/esp32-all-in-one/ESP32_ADC2.png" alt="ADC2引脚其他作用"></p>
<p>ADC 输入通道具有 12 位分辨率。这意味着您可以获得范围从 0 到 4095 的模拟读数，其中 0 对应于 0V，4095 对应于 3.3V。您还可以在代码和 ADC 范围上设置通道的分辨率。但是，ESP32 ADC 引脚没有线性行为。可能无法区分 0 和 0.1V，或 3.2 和 3.3V。<br><img src="/2023/esp32-all-in-one/837a7e8e56af4746a18d3dad41b1ebd3.png" alt="非线性"></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="读取模拟值及设置分辨率"><a href="#读取模拟值及设置分辨率" class="headerlink" title="读取模拟值及设置分辨率"></a>读取模拟值及设置分辨率</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// 设置ADC分辨率,可以是一个介于9(0 - 511)和12位(0 - 4095)之间的值。默认是12位分辨率</span></span><br><span class="line">  <span class="comment">// analogReadResolution(10);</span></span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> potValue = analogRead(<span class="number">34</span>);</span><br><span class="line">  Serial.println(potValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="读取模拟电压-毫伏"><a href="#读取模拟电压-毫伏" class="headerlink" title="读取模拟电压(毫伏)"></a>读取模拟电压(毫伏)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> analogValue=analogReadMilliVolts(<span class="number">34</span>);</span><br><span class="line">  Serial.println(analogValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="设置ADC衰减"><a href="#设置ADC衰减" class="headerlink" title="设置ADC衰减"></a>设置ADC衰减</h5><p>GPIO口会对输入的电压进行一定的减弱,以防止电压过大造成单片机损坏,衰减程度越大,测量的电压范围越大.</p>
<p>默认参数是衰减11db,即使没有设置,也是11db.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置所有ADC引脚的输入衰减</span></span><br><span class="line">analogSetAttenuation(attenuation)</span><br><span class="line"><span class="comment">// 设置pin引脚的输入衰减</span></span><br><span class="line">analogSetPinAttenuation(pin, attenuation)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>attenuation可选值(当VDD_A为3.3V时)：<br><code>ADC_0db</code>: 集没有衰减。ADC可以测量大约800mv<br><code>ADC_2_5db</code>: ADC的输入电压将被衰减，扩展测量范围至约1100 mV<br><code>ADC_6db</code>: ADC的输入电压将被衰减，扩展测量范围至约1350 mV<br><code>ADC_11db</code>: ADC的输入电压将被衰减，扩展测量范围至约2600 mV</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// 设置GPIO2引脚的衰减</span></span><br><span class="line">  analogSetPinAttenuation(<span class="number">2</span>,ADC_11db);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">  <span class="type">int</span> analogValue=analogRead(<span class="number">2</span>);</span><br><span class="line">  Serial.println(analogValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="其他可设置项"><a href="#其他可设置项" class="headerlink" title="其他可设置项"></a>其他可设置项</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置每个样本的循环次数。默认是8。取值范围:1 ~ 255</span></span><br><span class="line">analogSetCycles(cycles)</span><br><span class="line"><span class="comment">//设置范围内的样本数量。默认为1个样本。它有增加灵敏度的作用</span></span><br><span class="line">analogSetSamples(samples)</span><br><span class="line"><span class="comment">//设置ADC时钟的分压器。默认值为1。取值范围:1 ~ 255</span></span><br><span class="line">analogSetClockDiv(attenuation)</span><br><span class="line"><span class="comment">//附加一个引脚到ADC(也清除任何其他模拟模式可能是on)。返回TRUE或FALSE结果</span></span><br><span class="line">adcAttachPin(pin)</span><br><span class="line"><span class="comment">//在附加引脚的总线上启动ADC转换。检查引脚的ADC总线上的转换是否正在运行(返回TRUE或FALSE)。获取转换的结果:返回16位整数</span></span><br><span class="line">adcStart(pin)</span><br><span class="line">adcBusy(pin)</span><br><span class="line">resultadcEnd(pin)</span><br></pre></td></tr></table></figure>
<h3 id="4组SPI接口"><a href="#4组SPI接口" class="headerlink" title="4组SPI接口"></a>4组SPI接口</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>默认情况下可用的SPI的引脚映射是：</p>
<table>
<thead>
<tr>
<th align="center">SPI</th>
<th align="center">MOSI</th>
<th align="center">MISO</th>
<th align="center">CLK</th>
<th align="center">CS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">VSPI(SPI3)</td>
<td align="center">GPIO 23</td>
<td align="center">GPIO 19</td>
<td align="center">GPIO 18</td>
<td align="center">GPIO 5</td>
</tr>
<tr>
<td align="center">HSPI(SPI2)</td>
<td align="center">GPIO 13</td>
<td align="center">GPIO 12</td>
<td align="center">GPIO 14</td>
<td align="center">GPIO 15</td>
</tr>
</tbody></table>
<p>MISO： 主器件数据输出，从器件数据输入。<br>MOSI：主器件数据输入，从器件数据输出。<br>SCK： 时钟信号，由主设备控制发出。<br>NSS(CS)： 从设备选择信号，由主设备控制。当NSS为低电平则选中从器件。</p>
<p>SPI0和SPI1在内部用于访问ESP32所连接的闪存。两个控制器共享相同的SPI总线信号，并且有一个仲裁器来确定哪个可以访问该总线。</p>
<p>SPI2和SPI3是通用SPI控制器，有时分别称为HSPI和VSPI。它们向用户开放。SPI2和SPI3具有独立的总线信号，分别具有相同的名称。每条总线具有3条CS线，最多能控制6个SPI从设备。</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p><img src="/2023/esp32-all-in-one/4ac3c90f138cd7577687727fb046924.jpg" alt="点亮一个1.8寸128*120的TFT屏幕"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Ucglib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib8BitPortD ucg(ucg_dev_ili9325_18x240x320_itdb02, ucg_ext_ili9325_18, /* wr= */ 18 , /* cd= */ 19 , /* cs= */ 17, /* reset= */ 16 );</span></span><br><span class="line"><span class="comment">//Ucglib8Bit ucg(ucg_dev_ili9325_18x240x320_itdb02, ucg_ext_ili9325_18, 0, 1, 2, 3, 4, 5, 6, 7, /* wr= */ 18 , /* cd= */ 19 , /* cs= */ 17, /* reset= */ 16 );</span></span><br><span class="line">Ucglib_ST7735_18x128x160_SWSPI <span class="title function_">ucg</span><span class="params">(<span class="comment">/*sclk=*/</span> <span class="number">5</span>, <span class="comment">/*data=*/</span> <span class="number">18</span>, <span class="comment">/*cd=*/</span> <span class="number">21</span>, <span class="comment">/*cs=*/</span> <span class="number">22</span>, <span class="comment">/*reset=*/</span> <span class="number">19</span>)</span>;</span><br><span class="line"><span class="comment">//Ucglib4WireSWSPI ucg(ucg_dev_ili9325_18x240x320_itdb02, ucg_ext_ili9325_18, /*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9 , /*cs=*/ 10, /*reset=*/ 8);	// not working</span></span><br><span class="line"><span class="comment">//Ucglib4WireSWSPI ucg(ucg_dev_ili9325_spi_18x240x320, ucg_ext_ili9325_spi_18, /*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9 , /*cs=*/ 10, /*reset=*/ 8);	// not working</span></span><br><span class="line"><span class="comment">//Ucglib3WireILI9325SWSPI ucg(ucg_dev_ili9325_spi_18x240x320, ucg_ext_ili9325_spi_18, /*sclk=*/ 13, /*data=*/ 11, /*cs=*/ 10, /*reset=*/ 8);	// not working</span></span><br><span class="line"><span class="comment">//Ucglib3WireILI9325SWSPI ucg(ucg_dev_ili9325_18x240x320_itdb02, ucg_ext_ili9325_18, /*sclk=*/ 13, /*data=*/ 11, /*cs=*/ 10, /*reset=*/ 8);	// not working</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_ST7735_18x128x160_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_ST7735_18x128x160_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_ILI9163_18x128x128_SWSPI ucg(/*sclk=*/ 7, /*data=*/ 6, /*cd=*/ 5, /*cs=*/ 3, /*reset=*/ 4);</span></span><br><span class="line"><span class="comment">//Ucglib_ILI9163_18x128x128_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);	/* HW SPI Adapter */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_ILI9341_18x240x320_SWSPI ucg(/*sclk=*/ 7, /*data=*/ 6, /*cd=*/ 5, /*cs=*/ 3, /*reset=*/ 4);</span></span><br><span class="line"><span class="comment">//Ucglib_ILI9341_18x240x320_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_ILI9341_18x240x320_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_ILI9341_18x240x320_SWSPI ucg(/*sclk=*/ 4, /*data=*/ 3, /*cd=*/ 6, /*cs=*/ 7, /*reset=*/ 5);	/* Elec Freaks Shield */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_HX8352C_18x240x400_SWSPI ucg(/*sclk=*/ 7, /*data=*/ 6, /*cd=*/ 5, /*cs=*/ 3, /*reset=*/ 4);</span></span><br><span class="line"><span class="comment">//Ucglib_HX8352C_18x240x400_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_ILI9486_18x320x480_SWSPI ucg(/*sclk=*/ 7, /*data=*/ 6, /*cd=*/ 5, /*cs=*/ 3, /*reset=*/ 4);</span></span><br><span class="line"><span class="comment">//Ucglib_ILI9486_18x320x480_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_SSD1351_18x128x128_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_SSD1351_18x128x128_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_SSD1351_18x128x128_FT_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_SSD1351_18x128x128_FT_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_PCF8833_16x132x132_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cs=*/ 9, /*reset=*/ 8);	/* linksprite board */</span></span><br><span class="line"><span class="comment">//Ucglib_PCF8833_16x132x132_HWSPI ucg(/*cs=*/ 9, /*reset=*/ 8);	/* linksprite board */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_LD50T6160_18x160x128_6Bit ucg( /*d0 =*/ d0, /*d1 =*/ d1, /*d2 =*/ d2, /*d3 =*/ d3, /*d4 =*/ d4, /*d5 =*/ d5, /*wr=*/ wr, /*cd=*/ cd, /*cs=*/ cs, /*reset=*/ reset);</span></span><br><span class="line"><span class="comment">//Ucglib_LD50T6160_18x160x128_6Bit ucg( /*d0 =*/ 16, /*d1 =*/ 17, /*d2 =*/ 18, /*d3 =*/ 19, /*d4 =*/ 20, /*d5 =*/ 21, /*wr=*/ 14, /*cd=*/ 15); /* Samsung 160x128 OLED with 6Bit minimal interface with Due */</span></span><br><span class="line"><span class="comment">//Ucglib_LD50T6160_18x160x128_6Bit ucg( /*d0 =*/ 5, /*d1 =*/ 4, /*d2 =*/ 3, /*d3 =*/ 2, /*d4 =*/ 1, /*d5 =*/ 0, /*wr=*/ 7, /*cd=*/ 6); /* Samsung 160x128 OLED with 6Bit minimal interface with Uno */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_SSD1331_18x96x64_UNIVISION_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_SSD1331_18x96x64_UNIVISION_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ucglib_SEPS225_16x128x128_UNIVISION_SWSPI ucg(/*sclk=*/ 13, /*data=*/ 11, /*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"><span class="comment">//Ucglib_SEPS225_16x128x128_UNIVISION_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  ucg.begin(UCG_FONT_MODE_TRANSPARENT);</span><br><span class="line">  ucg.setColor(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  ucg.setColor(<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  ucg.setColor(<span class="number">2</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  ucg.setColor(<span class="number">3</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Linear Congruential Generator (LCG)</span></span><br><span class="line"><span class="comment">  z = (a*z + c) % m;  </span></span><br><span class="line"><span class="comment">  m = 256 (8 Bit)</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  for period:</span></span><br><span class="line"><span class="comment">  a-1: dividable by 2</span></span><br><span class="line"><span class="comment">  a-1: multiple of 4</span></span><br><span class="line"><span class="comment">  c: not dividable by 2</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  c = 17</span></span><br><span class="line"><span class="comment">  a-1 = 64 --&gt; a = 65</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint8_t</span> z = <span class="number">127</span>;	<span class="comment">// start value</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">lcg_rnd</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  z = (<span class="type">uint8_t</span>)((<span class="type">uint16_t</span>)<span class="number">65</span>*(<span class="type">uint16_t</span>)z + (<span class="type">uint16_t</span>)<span class="number">17</span>);</span><br><span class="line">  <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw_text</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  ucg.setFont(ucg_font_ncenR14_tr);</span><br><span class="line">  <span class="comment">//ucg.setColor(255, 255, 255);</span></span><br><span class="line">  ucg.setColor(lcg_rnd(),lcg_rnd(),lcg_rnd());</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">  ucg.print(<span class="string">&quot;The quick brown&quot;</span>);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line">  ucg.print(<span class="string">&quot;fox jumps over&quot;</span>);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">60</span>);</span><br><span class="line">  ucg.print(<span class="string">&quot;the lazy dog&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw_box</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">ucg_int_t</span> x, y, w, h;</span><br><span class="line">  ucg.setColor(lcg_rnd(),lcg_rnd(),lcg_rnd());</span><br><span class="line">  x = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  y = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  w = <span class="number">63</span>;</span><br><span class="line">  w += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  h = <span class="number">63</span>;</span><br><span class="line">  h += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  ucg.drawBox(x,y,w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw_gradient_box</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">ucg_int_t</span> x, y, w, h;</span><br><span class="line">  <span class="type">static</span> <span class="type">uint8_t</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span>(idx &amp; <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: ucg.setColor(<span class="number">0</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ucg.setColor(<span class="number">1</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: ucg.setColor(<span class="number">2</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: ucg.setColor(<span class="number">3</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  idx++;</span><br><span class="line">  x = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  y = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  w = <span class="number">63</span>;</span><br><span class="line">  w += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  h = <span class="number">63</span>;</span><br><span class="line">  h += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  ucg.drawGradientBox(x,y,w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// returns FPS*10</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">measure</span><span class="params">(<span class="type">void</span> (*draw_fn)(<span class="type">void</span>))</span> &#123;</span><br><span class="line">  <span class="type">uint16_t</span> FPS10 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">uint32_t</span> time;</span><br><span class="line"></span><br><span class="line">  ucg.clearScreen();</span><br><span class="line"></span><br><span class="line">  time = millis() + <span class="number">10</span>*<span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    draw_fn();</span><br><span class="line">    FPS10++;</span><br><span class="line">  &#125; <span class="keyword">while</span>( millis() &lt; time );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> FPS10;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> u8d_tab[<span class="number">3</span>]  = &#123; <span class="number">100</span>, <span class="number">10</span>, <span class="number">1</span> &#125; ;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">u8dp</span><span class="params">(<span class="type">char</span> * dest, <span class="type">uint8_t</span> v)</span>&#123;</span><br><span class="line">  <span class="type">uint8_t</span> pos;</span><br><span class="line">  <span class="type">uint8_t</span> d;</span><br><span class="line">  <span class="type">uint8_t</span> c;</span><br><span class="line">  <span class="keyword">for</span>( pos = <span class="number">0</span>; pos &lt; <span class="number">3</span>; pos++ )</span><br><span class="line">  &#123;</span><br><span class="line">      d = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      c = *(u8d_tab+pos);</span><br><span class="line">      <span class="keyword">while</span>( v &gt;= c )</span><br><span class="line">      &#123;</span><br><span class="line">	v -= c;</span><br><span class="line">	d++;</span><br><span class="line">      &#125;</span><br><span class="line">      dest[pos] = d;</span><br><span class="line">  &#125;  </span><br><span class="line">  dest[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* v = value, d = number of digits */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">u8d</span><span class="params">(<span class="type">uint8_t</span> v, <span class="type">uint8_t</span> d)</span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> buf[<span class="number">8</span>];</span><br><span class="line">  d = <span class="number">3</span>-d;</span><br><span class="line">  <span class="keyword">return</span> u8dp(buf, v) + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">convert_FPS</span><span class="params">(<span class="type">uint16_t</span> fps)</span> &#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> buf[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, u8d( (<span class="type">uint8_t</span>)(fps/<span class="number">10</span>), <span class="number">3</span>));</span><br><span class="line">  buf[<span class="number">3</span>] =  <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">  buf[<span class="number">4</span>] = (fps % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  buf[<span class="number">5</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_result</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">uint16_t</span> fps)</span>  &#123;</span><br><span class="line">  ucg.clearScreen();</span><br><span class="line">  ucg.setFont(ucg_font_helvR18_tr);</span><br><span class="line">  ucg.setColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">25</span>);</span><br><span class="line">  ucg.print(s);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">  ucg.print(convert_FPS(fps));  </span><br><span class="line">  delay(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  show_result(<span class="string">&quot;Text&quot;</span>, measure(draw_text));</span><br><span class="line">  show_result(<span class="string">&quot;Box&quot;</span>, measure(draw_box));</span><br><span class="line">  show_result(<span class="string">&quot;Gradient&quot;</span>, measure(draw_gradient_box));</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3组UART接口"><a href="#3组UART接口" class="headerlink" title="3组UART接口"></a>3组UART接口</h3><h4 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h4><p>ESP32里面有3个串口，uart0默认作为log和console输出，我们可以使用uart1和uart2。因为接SPI Flash，会占用GPIO6~GPIO11，所以uart1使用默认管脚的时候会有冲突，我们需要把管脚配置到其它的GPIO上.<br>默认情况下的UART引脚：</p>
<table>
<thead>
<tr>
<th align="center">UART</th>
<th align="center">GPIO</th>
<th align="center">UART</th>
<th align="center">GPIO</th>
</tr>
</thead>
<tbody><tr>
<td align="center">U0_RXD</td>
<td align="center">GPIO3</td>
<td align="center">U0_CTS</td>
<td align="center">GPIO19</td>
</tr>
<tr>
<td align="center">U0_TXD</td>
<td align="center">GPIO1</td>
<td align="center">U0_RTS</td>
<td align="center">GPIO22</td>
</tr>
<tr>
<td align="center">U1_RXD</td>
<td align="center">GPIO9</td>
<td align="center">U1_CTS</td>
<td align="center">GPIO6</td>
</tr>
<tr>
<td align="center">U1_TXD</td>
<td align="center">GPIO10</td>
<td align="center">U1_RTS</td>
<td align="center">GPIO11</td>
</tr>
<tr>
<td align="center">U2_RXD</td>
<td align="center">GPIO16</td>
<td align="center">U2_CTS</td>
<td align="center">GPIO8</td>
</tr>
<tr>
<td align="center">U2_TXD</td>
<td align="center">GPIO17</td>
<td align="center">U2_RTS</td>
<td align="center">GPIO7</td>
</tr>
</tbody></table>
<h4 id="硬件串口重定义"><a href="#硬件串口重定义" class="headerlink" title="硬件串口重定义"></a>硬件串口重定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HardwareSerial.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HardwareSerial <span class="title function_">SerialPort</span><span class="params">(<span class="number">1</span>)</span>; <span class="comment">// 使用UART1</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>  &#123;</span><br><span class="line">  <span class="comment">//初始化串口，并重新定义引脚；参数包括波特率、串行模式、RX 引脚和 TX 引脚;串行模式SERIAL_8N1为8位数据位、无校验、1位停止位</span></span><br><span class="line">  SerialPort.begin(<span class="number">115200</span>, SERIAL_8N1, <span class="number">4</span>, <span class="number">2</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  SerialPort.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用软件串口"><a href="#使用软件串口" class="headerlink" title="使用软件串口"></a>使用软件串口</h4><p>如果硬件串口不够用可以使用软件串口，但是效率较低</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SoftwareSerial.h&gt;</span></span></span><br><span class="line"><span class="comment">//实例化软串口</span></span><br><span class="line">SoftwareSerial <span class="title function_">mySerial</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span>; <span class="comment">// RX, TX</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="keyword">while</span> (!Serial) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">  mySerial.begin(<span class="number">9600</span>);</span><br><span class="line">  mySerial.println(<span class="string">&quot;Hello World?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mySerial.available())</span><br><span class="line">    Serial.write(mySerial.read());</span><br><span class="line">  <span class="keyword">if</span> (Serial.available())</span><br><span class="line">    mySerial.write(Serial.read());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在arduino uno使用多个软件串口时，同一时间只能监听一个串口，不知道esp32有没有这个限制，不过需要注意这件事时候你已经用了5个串口通道了，一般人应该都没这个需求吧懒得尝试了</p>
<h3 id="1组I2C接口"><a href="#1组I2C接口" class="headerlink" title="1组I2C接口"></a>1组I2C接口</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>ESP32默认的I2C引脚为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO 21 (SDA)</span><br><span class="line">GPIO 22 (SCL)</span><br></pre></td></tr></table></figure>
<p>在ESP32中任何引脚都可以定义为SDA或SCL，但不到逼不得已不推荐这么做。</p>
<p>可在Arduino IDE 中使用以下语句配置其它引脚为SDA或SCL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.begin(SDA, SCL);</span><br></pre></td></tr></table></figure>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><h5 id="主从设备传输"><a href="#主从设备传输" class="headerlink" title="主从设备传输"></a>主从设备传输</h5><h6 id="Wire库方法"><a href="#Wire库方法" class="headerlink" title="Wire库方法"></a>Wire库方法</h6><blockquote>
<p>初始化IIC连接，并作为主机或者从机设备加入IIC总线</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">begin();</span><br><span class="line">begin(address);	<span class="comment">// 当没有填写参数时，设备会以主机模式加人IIC总线；当填写了参数时，设备会以从机模式加入IIC总线，address可以设置为0~127中的任意地址。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>主机向从机发送数据请求信号</p>
<p>使用 requestFrom() 后，从机端可以使用 onRequest() 注册一个事件用以响应主机的请求；主机可以通过available() 和 read() 函数读取这些数据</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.requestFrom(address, quantity);</span><br><span class="line">Wire.requestFrom(address, quantity, stop); <span class="comment">//quantity请求的字节数；stop当其值为true时将发送一个停止信息，释放IIC总线；当为false时，将发送一个重新开始信息，并继续保持IIC总线的有效连接</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>设定传输数据到指定地址的从机设备</p>
<p>随后可以使用 write() 函数发送数据，并搭配endTransmission()函数结束数据传输</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.beginTransmission(address);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结束数据传输</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.endTransmission() ;</span><br><span class="line">Wire.endTransmission(stop);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>发送数据</p>
<p>为主机状态时，主机将要发送的数据加入发送队列；当为从机状态时，从机发送数据至发起请求的主机</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.write(value);</span><br><span class="line">Wire.write(<span class="built_in">string</span>);</span><br><span class="line">Wire.write(data, length);</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>value，以单字节发送。</li>
<li>string，以一系列字节发送。</li>
<li>data，以字节形式发送数组。</li>
<li>length，传输的字节数。<br>返回值：</li>
<li>byte型值，返回输入的字节数。</li>
</ul>
<blockquote>
<p>返回接收到的字节数</p>
<p>在主机中，一般用于主机发送数据请求后；在从机中，一般用于数据接收事件中。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire. available();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>读取1B的数据</p>
<p>在主机中，当使用 requestFrom() 函数发送数据请求信号后，需要使用 read() 函数来获取数据；在从机中需要使用该函数读取主机发送来的数据</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.read()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从机端注册一个事件，当从机收到主机发送的数据时即被触发</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.onReceive(handler);</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>handler，当从机接收到数据时可被触发的事件。该事件带有一个int型参数(从主机读到的字节数)且没有返回值，如 <code>void myHandler(int numBytes)</code></li>
</ul>
<blockquote>
<p>注册一个事件,当从机接收到主机的数据请求时即被触发</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Wire.onRequest(handler);</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>handler，可被触发的事件。该事件不带参数和返回值，如 <code>voidmyHandler()</code></li>
</ul>
<h6 id="主从收发"><a href="#主从收发" class="headerlink" title="主从收发"></a>主从收发</h6><blockquote>
<p>主发从收</p>
</blockquote>
<ul>
<li>主机：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在Arduino IDE选择“文件”→“示例”→Wire→master_writer可以打开该文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.begin(); 					<span class="comment">// Wire初始化，作为主机加入到IIC总线</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">byte x = <span class="number">0</span>;							<span class="comment">// 定义一个byte变量以便串口调试</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.beginTransmission(<span class="number">8</span>); 		<span class="comment">// 向地址为8的从机传送数据</span></span><br><span class="line">  Wire.write(<span class="string">&quot;x is &quot;</span>);        		<span class="comment">// 发送5B的字符串</span></span><br><span class="line">  Wire.write(x);              		<span class="comment">// 发送1B的数据</span></span><br><span class="line">  Wire.endTransmission();    		<span class="comment">// 结束传送</span></span><br><span class="line">  </span><br><span class="line">  x++;</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>从机：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在Arduino IDE选择“文件”→“示例”→Wire→slave_receiver，可以打开该文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.begin(<span class="number">8</span>);                <span class="comment">// Wire初始化, 并以从设备地址8的身份加入IIc总线</span></span><br><span class="line">  Wire.onReceive(receiveEvent); <span class="comment">// 注册一个IIC事件，用于响应主机的数据发送</span></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);           <span class="comment">// 初始化串口并设置波特率为9600</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当主机发送的数据被收到时，将触发 receiveEvent() 事件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">receiveEvent</span><span class="params">(<span class="type">int</span> howMany)</span> &#123;</span><br><span class="line"><span class="comment">// 循环读取收到的数据，最后一个数据单独读取</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span> &lt; Wire.available()) &#123; </span><br><span class="line">    <span class="type">char</span> c = Wire.read(); 			<span class="comment">// 以字符形式接收数据</span></span><br><span class="line">    Serial.print(c);         		<span class="comment">// 串口输出该字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> x = Wire.read();    			<span class="comment">// 以整型形式接收数据</span></span><br><span class="line">  Serial.println(x);         		<span class="comment">// 串口输出该整型变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>主收从发</p>
</blockquote>
<ul>
<li><p>主机：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在Arduino IDE选择“文件”→“示例”→Wire→master_reader，可以打开该文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.begin();        <span class="comment">// Wire初始化，作为主机加入到IIC总线</span></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);  <span class="comment">// 初始化串口并设置波特率为9600</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.requestFrom(<span class="number">8</span>, <span class="number">6</span>);    <span class="comment">// 向8号机请求6B的数据</span></span><br><span class="line">	<span class="comment">// 等待从机发送数据</span></span><br><span class="line">  <span class="keyword">while</span> (Wire.available()) &#123; </span><br><span class="line">    <span class="type">char</span> c = Wire.read(); 		<span class="comment">// 以字符形式接受并读取从机发来的一个字节的数据</span></span><br><span class="line">    Serial.print(c);         	<span class="comment">// 串口输出该字符</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println();				<span class="comment">// 换行</span></span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>从机：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在Arduino IDE选择“文件”→“示例”→Wire→slave_sender，可以打开该文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.begin(<span class="number">8</span>);                <span class="comment">// Wire初始化, 并以从设备地址#8的身份加入i2c总线</span></span><br><span class="line">  Wire.onRequest(requestEvent); <span class="comment">// 注册一个IIC事件，用于响应主机的数据请求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每当主机请求数据时,该函数便会执行</span></span><br><span class="line"><span class="comment">//在setup()中,该函数被注册为一个事件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">requestEvent</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.write(<span class="string">&quot;hello &quot;</span>); <span class="comment">// 用6B的信息回应主机的请求，hello后带一个空格</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="应答交互通讯"><a href="#应答交互通讯" class="headerlink" title="应答交互通讯"></a>应答交互通讯</h6><blockquote>
<p>这个程序用于iic控制电机驱动，主机是一个uno，负责发送目标速度，从机是电机驱动板，负责返回当前角度</p>
<p>其中电机驱动板使用了TwoWire来创建两个iic通道</p>
</blockquote>
</li>
<li><p>uno：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Wire.begin(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  String inString=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    inString += <span class="type">char</span>(Serial.read());</span><br><span class="line">    delay(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(inString!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;IIC send:&quot;</span>);</span><br><span class="line">    Serial.println(inString);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cstr = inString.c_str();</span><br><span class="line">    Wire.beginTransmission(<span class="number">1</span>);</span><br><span class="line">    Wire.write(cstr);</span><br><span class="line">    Wire.endTransmission();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  String recString=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  Wire.requestFrom(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">while</span> (Wire.available()) &#123; </span><br><span class="line">    recString += <span class="type">char</span>(Wire.read());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(recString!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;IIC received:&quot;</span>);</span><br><span class="line">    Serial.println(recString.toInt());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>esp32驱动板：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dummy.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> target_velocity = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">TwoWire Wire_foc = TwoWire(<span class="number">0</span>);</span><br><span class="line">TwoWire Wire_rec = TwoWire(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  Wire_rec.setPins(<span class="number">16</span>,<span class="number">17</span>);</span><br><span class="line">  Wire_rec.begin(<span class="number">1</span>);</span><br><span class="line">  Wire_rec.onReceive(receiveEvent);</span><br><span class="line">  Wire_rec.onRequest(requestEvent);</span><br><span class="line"></span><br><span class="line">  Wire_foc.setPins(<span class="number">33</span>,<span class="number">32</span>);</span><br><span class="line">  Wire_foc.begin();</span><br><span class="line">  sensor.init(&amp;Wire_foc);</span><br><span class="line"></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line"></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  motor.controller = MotionControlType::velocity;</span><br><span class="line"></span><br><span class="line">  motor.PID_velocity.P = <span class="number">0.2f</span>;</span><br><span class="line">  motor.PID_velocity.I = <span class="number">20</span>;</span><br><span class="line">  motor.PID_velocity.D = <span class="number">0</span>;</span><br><span class="line">  motor.voltage_limit = <span class="number">6</span>;</span><br><span class="line">  motor.PID_velocity.output_ramp = <span class="number">1000</span>;</span><br><span class="line">  motor.LPF_velocity.Tf = <span class="number">0.01f</span>;</span><br><span class="line"></span><br><span class="line">  motor.init();</span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  motor.move(target_velocity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">receiveEvent</span><span class="params">(<span class="type">int</span> howMany)</span> &#123;</span><br><span class="line">  String inString=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">//Serial.println(&quot;IIC received:&quot;);</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=howMany;i&gt;<span class="number">1</span>;i--)&#123;</span><br><span class="line">    inString += <span class="type">char</span>(Wire_rec.read());</span><br><span class="line">  &#125;</span><br><span class="line">    target_velocity = inString.toFloat()/<span class="number">100</span>;</span><br><span class="line">    inString=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">requestEvent</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">float</span> get_ang = sensor.getAngle();</span><br><span class="line">  <span class="type">int</span> ang = <span class="type">int</span>(get_ang*<span class="number">100</span>);</span><br><span class="line">  Serial.println(ang);</span><br><span class="line">  <span class="type">char</span> cstr[<span class="number">8</span>];</span><br><span class="line">  itoa(ang, cstr, <span class="number">10</span>);</span><br><span class="line">  Wire_rec.write(cstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="as5600编码器"><a href="#as5600编码器" class="headerlink" title="as5600编码器"></a>as5600编码器</h5><p>此程序为读取<code>as5600</code>磁编码器的i2c数据，其中SDA为D22，SCL为D23：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AS5600.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Wire.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">AS5600 as5600;   <span class="comment">//  use default Wire</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println(__FILE__);</span><br><span class="line">  Serial.print(<span class="string">&quot;AS5600_LIB_VERSION: &quot;</span>);</span><br><span class="line">  Serial.println(AS5600_LIB_VERSION);</span><br><span class="line">  <span class="comment">//  ESP32</span></span><br><span class="line">  as5600.begin(<span class="number">22</span>,<span class="number">23</span>);</span><br><span class="line">  <span class="comment">//  AVR</span></span><br><span class="line">  <span class="comment">//  as5600.begin(4);  //  set direction pin</span></span><br><span class="line">  as5600.setDirection(AS5600_CLOCK_WISE);  <span class="comment">// default, just be explicit.</span></span><br><span class="line">  <span class="type">int</span> b = as5600.isConnected();</span><br><span class="line">  Serial.print(<span class="string">&quot;Connect: &quot;</span>);</span><br><span class="line">  Serial.println(b);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">//  Serial.print(millis());</span></span><br><span class="line">  Serial.println(as5600.rawAngle() * AS5600_RAW_TO_DEGREES);</span><br><span class="line">  delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="oled屏幕"><a href="#oled屏幕" class="headerlink" title="oled屏幕"></a>oled屏幕</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SSD1306.h&quot;</span></span></span><br><span class="line"><span class="comment">// 声明类SSD1306的对象,参数为:地址,SDA,SCL</span></span><br><span class="line">SSD1306 <span class="title function_">display</span><span class="params">(<span class="number">0x3c</span>, <span class="number">21</span>, <span class="number">22</span>)</span>;</span><br><span class="line">SSD1306 <span class="title function_">display2</span><span class="params">(<span class="number">0x3c</span>, <span class="number">18</span>, <span class="number">19</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  display.init();</span><br><span class="line">  display.setFont(ArialMT_Plain_24);</span><br><span class="line">  display.drawString(<span class="number">32</span>, <span class="number">0</span>, <span class="string">&quot;ctrl+v&quot;</span>);</span><br><span class="line">  display.display();</span><br><span class="line"></span><br><span class="line">  display2.init();</span><br><span class="line">  display2.setFont(ArialMT_Plain_24);</span><br><span class="line">  display2.drawString(<span class="number">32</span>, <span class="number">0</span>, <span class="string">&quot;ctrl+c&quot;</span>);</span><br><span class="line">  display2.display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  display.clear();</span><br><span class="line">  display.drawString(<span class="number">32</span>, <span class="number">0</span>, <span class="string">&quot;ctrl+c&quot;</span>);</span><br><span class="line">  display.display();</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  display.clear();</span><br><span class="line">  display.drawString(<span class="number">32</span>, <span class="number">0</span>, <span class="string">&quot;ctrl+v&quot;</span>);</span><br><span class="line">  display.display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="16个PWM通道"><a href="#16个PWM通道" class="headerlink" title="16个PWM通道"></a>16个PWM通道</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>ESP32 PWM 控制器有 8 个高速通道(80MHz)和 8 个低速通道(1MHz)，我们总共有 16 个通道。它们根据速度分为两组。每组有 4 个定时器&#x2F;8 个通道。这意味着每两个通道共享同一个定时器。因此，我们无法独立控制每对通道的 PWM 频率。<br>所有可以作为输出的引脚都可以用作 PWM 引脚(GPIO 34 到 39 不能产生 PWM)。</p>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> freq = <span class="number">50</span>;  <span class="comment">//频率</span></span><br><span class="line"><span class="type">int</span> channel = <span class="number">8</span>;  <span class="comment">//使用的通道</span></span><br><span class="line"><span class="type">int</span> resolution = <span class="number">8</span>; <span class="comment">// 8位分辨率，可以使用0到255的值来控制</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> servo = <span class="number">12</span>; <span class="comment">//输出引脚</span></span><br><span class="line">ledcSetup(channel, freq, resolution); <span class="comment">//初始化</span></span><br><span class="line">ledcAttachPin(servo, channel);  <span class="comment">//指定通道与引脚</span></span><br><span class="line">ledcWrite(channel, <span class="number">127</span>);  <span class="comment">//输出50%的PWM</span></span><br></pre></td></tr></table></figure>
<p>顺便赠送一个使用舵机的函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">servoPWM</span><span class="params">(<span class="type">int</span> degree)</span></span><br><span class="line">&#123; <span class="comment">// 0-180度</span></span><br><span class="line">  <span class="comment">// 20ms周期，高电平0.5-2.5ms，对应0-180度角度</span></span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> deadZone = <span class="number">6.4</span>;<span class="comment">//对应0.5ms(0.5ms/(20ms/256))</span></span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> max = <span class="number">32</span>;<span class="comment">//对应2.5ms</span></span><br><span class="line">  <span class="keyword">if</span> (degree &lt; <span class="number">60</span>)</span><br><span class="line">    degree = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">if</span> (degree &gt; <span class="number">120</span>)</span><br><span class="line">    degree = <span class="number">120</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)(((max - deadZone) / <span class="number">180</span>) * degree + deadZone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2个DAC"><a href="#2个DAC" class="headerlink" title="2个DAC"></a>2个DAC</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>ESP32 上有 2 x 8 位 DAC 通道，用于将数字信号转换为模拟电压信号输出。这些是 DAC 通道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DAC1 (GPIO25)</span><br><span class="line">DAC2 (GPIO26)</span><br></pre></td></tr></table></figure>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><p>输出电压将在<code>0-3.3V</code>之间变化：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> dutyCycle = <span class="number">0</span>; dutyCycle &lt;= <span class="number">255</span>; dutyCycle = dutyCycle + <span class="number">1</span>)&#123;</span><br><span class="line">    dacWrite(<span class="number">25</span>, dutyCycle);</span><br><span class="line">    delay(<span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> dutyCycle = <span class="number">255</span>; dutyCycle &gt;= <span class="number">0</span>; dutyCycle = dutyCycle - <span class="number">1</span>)&#123;</span><br><span class="line">    dacWrite(<span class="number">25</span>, dutyCycle);</span><br><span class="line">    delay(<span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10个电容感应GPIO"><a href="#10个电容感应GPIO" class="headerlink" title="10个电容感应GPIO"></a>10个电容感应GPIO</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>ESP32 有 10 个内部电容式触摸传感器。它们可以感知任何带电荷的物体的变化，比如人体皮肤。因此，他们可以检测用手指触摸 GPIO 时引起的变化。这些引脚可以集成到电容式焊盘中并取代机械按钮。电容式触控引脚还可用于将 ESP32 从深度睡眠中唤醒</p>
</li>
</ul>
<p>这些内部触摸传感器连接到这些 GPIO：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T0 (GPIO 4)</span><br><span class="line">T1 (GPIO 0)</span><br><span class="line">T2 (GPIO 2)</span><br><span class="line">T3 (GPIO 15)</span><br><span class="line">T4 (GPIO 13)</span><br><span class="line">T5 (GPIO 12)</span><br><span class="line">T6 (GPIO 14)</span><br><span class="line">T7 (GPIO 27)</span><br><span class="line">T8 (GPIO 33)</span><br><span class="line">T9 (GPIO 32)</span><br></pre></td></tr></table></figure>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set pin numbers(D4/T0)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> touchPin = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// change with your threshold value</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> threshold = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// variable for storing the touch pin value</span></span><br><span class="line"><span class="type">int</span> touchValue;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  delay(<span class="number">1000</span>); <span class="comment">// bring up serial monitor</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  touchValue = touchRead(touchPin);</span><br><span class="line">  Serial.print(touchValue);</span><br><span class="line">  <span class="keyword">if</span>(touchValue &lt; threshold)&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>所有引脚都可以配置为中断。</p>
<p>中断函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">attachInterrupt(digitalPinToInterrupt(GPIO), function, mode);</span><br></pre></td></tr></table></figure>
<p>其中参数<code>mode</code>有5种：</p>
<ul>
<li><code>LOW</code>：每当引脚为LOW时触发中断；</li>
<li><code>HIGH</code>：每当引脚为高电平时触发中断；</li>
<li><code>CHANGE</code>：每当引脚值发生变化时触发中断——例如从高电平变为低电平或从低电平变为高电平；</li>
<li><code>FALLING</code>：当引脚从高电平变为低电平时；</li>
<li><code>RISING</code>: 当引脚从低电平变为高电平时触发。</li>
</ul>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><h5 id="外部引脚中断"><a href="#外部引脚中断" class="headerlink" title="外部引脚中断"></a>外部引脚中断</h5><blockquote>
<p>此处内容在2023.10.30进行了修改</p>
</blockquote>
<p>程序目的是在引脚上升沿输出开机毫秒数</p>
<p>有个小问题就是如果在中断函数使用串口输出极易导致中断看门狗复位，因此应该在中断函数中只进行计时并保存，串口输出交给loop循环</p>
<p>这是错误的程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> t;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Button</span> &#123;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">uint8_t</span> PIN;</span><br><span class="line">	<span class="type">uint32_t</span> numberKeyPresses;</span><br><span class="line">	<span class="type">bool</span> pressed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Button button1 = &#123;<span class="number">18</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> IRAM_ATTR <span class="title function_">isr</span><span class="params">()</span> &#123;</span><br><span class="line">	button1.numberKeyPresses++;</span><br><span class="line">	button1.pressed = <span class="literal">true</span>;</span><br><span class="line">  t = micros();</span><br><span class="line">  Serial.println(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">	Serial.begin(<span class="number">115200</span>);</span><br><span class="line">	pinMode(button1.PIN, INPUT_PULLUP);</span><br><span class="line">	attachInterrupt(button1.PIN, isr, FALLING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (button1.pressed) &#123;</span><br><span class="line">		Serial.<span class="built_in">printf</span>(<span class="string">&quot;Button has been pressed %u times\n&quot;</span>, button1.numberKeyPresses);</span><br><span class="line">		button1.pressed = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:24:50.601 -&gt; Guru Meditation Error: Core  1 panic&#x27;ed (Interrupt wdt timeout on CPU1). </span><br><span class="line">17:24:50.601 -&gt; </span><br><span class="line">17:24:50.601 -&gt; Core  1 register dump:</span><br><span class="line">17:24:50.642 -&gt; PC      : 0x4008ab8a  PS      : 0x00060b35  A0      : 0x80089b02  A1      : 0x3ffbf0ec  </span><br><span class="line">17:24:50.642 -&gt; A2      : 0x3ffb8314  A3      : 0x3ffb81a4  A4      : 0x00000004  A5      : 0x00060b23  </span><br><span class="line">17:24:50.642 -&gt; A6      : 0x00060b23  A7      : 0x00000001  A8      : 0x3ffb81a4  A9      : 0x00000018  </span><br><span class="line">17:24:50.642 -&gt; A10     : 0x3ffb81a4  A11     : 0x00000018  A12     : 0x3ffc22fc  A13     : 0x00060b23  </span><br><span class="line">17:24:50.642 -&gt; A14     : 0x007bf308  A15     : 0x003fffff  SAR     : 0x0000000e  EXCCAUSE: 0x00000006  </span><br><span class="line">17:24:50.667 -&gt; EXCVADDR: 0x00000000  LBEG    : 0x400863fd  LEND    : 0x4008640d  LCOUNT  : 0xfffffffd  </span><br><span class="line">17:24:50.667 -&gt; Core  1 was running in ISR context:</span><br><span class="line">17:24:50.667 -&gt; EPC1    : 0x400da62f  EPC2    : 0x00000000  EPC3    : 0x00000000  EPC4    : 0x00000000</span><br><span class="line">17:24:50.667 -&gt; </span><br><span class="line">17:24:50.667 -&gt; </span><br><span class="line">17:24:50.667 -&gt; Backtrace: 0x4008ab87:0x3ffbf0ec |&lt;-CORRUPTED</span><br><span class="line">17:24:50.667 -&gt; </span><br><span class="line">17:24:50.667 -&gt; </span><br><span class="line">17:24:50.667 -&gt; Core  0 register dump:</span><br><span class="line">17:24:50.667 -&gt; PC      : 0x4008ad27  PS      : 0x00060035  A0      : 0x8008972b  A1      : 0x3ffbea2c  </span><br><span class="line">17:24:50.700 -&gt; A2      : 0x3ffbf308  A3      : 0xb33fffff  A4      : 0x0000abab  A5      : 0x00060023  </span><br><span class="line">17:24:50.700 -&gt; A6      : 0x00060021  A7      : 0x0000cdcd  A8      : 0x0000abab  A9      : 0xffffffff  </span><br><span class="line">17:24:50.700 -&gt; A10     : 0x3ffc2118  A11     : 0x00000000  A12     : 0x3ffc2114  A13     : 0x00000007  </span><br><span class="line">17:24:50.700 -&gt; A14     : 0x007bf308  A15     : 0x003fffff  SAR     : 0x0000001d  EXCCAUSE: 0x00000006  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>应该改成这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> t;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Button</span> &#123;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">uint8_t</span> PIN;</span><br><span class="line">	<span class="type">uint32_t</span> numberKeyPresses;</span><br><span class="line">	<span class="type">bool</span> pressed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Button button1 = &#123;<span class="number">18</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> IRAM_ATTR <span class="title function_">isr</span><span class="params">()</span> &#123;</span><br><span class="line">	button1.numberKeyPresses++;</span><br><span class="line">	button1.pressed = <span class="literal">true</span>;</span><br><span class="line">  t = micros();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">	Serial.begin(<span class="number">115200</span>);</span><br><span class="line">	pinMode(button1.PIN, INPUT_PULLUP);</span><br><span class="line">	attachInterrupt(button1.PIN, isr, FALLING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (button1.pressed) &#123;</span><br><span class="line">		Serial.<span class="built_in">printf</span>(<span class="string">&quot;Button has been pressed %u times\n&quot;</span>, button1.numberKeyPresses);</span><br><span class="line">		button1.pressed = <span class="literal">false</span>;</span><br><span class="line">    Serial.println(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有要注意的就是time不能作为变量名否则报错，在这件事情上折腾好久没想起来time居然是个函数这件事</p>
<h5 id="定时器中断"><a href="#定时器中断" class="headerlink" title="定时器中断"></a>定时器中断</h5><p>定时器每秒触发一次中断</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义定时器指针</span></span><br><span class="line"><span class="type">hw_timer_t</span> *timer = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//中断函数</span></span><br><span class="line"><span class="type">void</span> IRAM_ATTR <span class="title function_">InterruptEvent</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.println(<span class="string">&quot;BEEP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">//定时器初始化--esp32频率为80Mhz，分频80则时间单位为1Mhz，即1us即10^-6s，下面的1000000us即1s。</span></span><br><span class="line">  timer = timerBegin(<span class="number">0</span>, <span class="number">80</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//中断绑定定时器</span></span><br><span class="line">  timerAttachInterrupt(timer, &amp;InterruptEvent, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//1s进入一次中断--注意这里不能用另一个函数：timerWrite（timer,1000000）；实测用这个函数不行</span></span><br><span class="line">  timerAlarmWrite(timer, <span class="number">1000000</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//使能定时器             </span></span><br><span class="line">  timerAlarmEnable(timer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不常用内容"><a href="#不常用内容" class="headerlink" title="不常用内容"></a>不常用内容</h3><h4 id="2个I2S-高速数位音讯传输标准协议"><a href="#2个I2S-高速数位音讯传输标准协议" class="headerlink" title="2个I2S:高速数位音讯传输标准协议"></a>2个I2S:高速数位音讯传输标准协议</h4><p>在ESP32引脚上实际是标记为 DAC1 和 DAC2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO 25</span><br><span class="line">GPIO 26</span><br></pre></td></tr></table></figure>

<h4 id="16个RTC的GPIO"><a href="#16个RTC的GPIO" class="headerlink" title="16个RTC的GPIO"></a>16个RTC的GPIO</h4><p>ESP32 上有 RTC GPIO 支持。当 ESP32 处于深度睡眠时，可以使用路由到 RTC 低功耗子系统的 GPIO。当超低功耗 (ULP) 协处理器运行时，这些 RTC GPIO 可用于将 ESP32 从深度睡眠中唤醒。以下 GPIO 可用作外部唤醒源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RTC_GPIO0 (GPIO36)</span><br><span class="line">RTC_GPIO3 (GPIO39)</span><br><span class="line">RTC_GPIO4 (GPIO34)</span><br><span class="line">RTC_GPIO5 (GPIO35)</span><br><span class="line">RTC_GPIO6 (GPIO25)</span><br><span class="line">RTC_GPIO7 (GPIO26)</span><br><span class="line">RTC_GPIO8 (GPIO33)</span><br><span class="line">RTC_GPIO9 (GPIO32)</span><br><span class="line">RTC_GPIO10 (GPIO4)</span><br><span class="line">RTC_GPIO11 (GPIO0)</span><br><span class="line">RTC_GPIO12 (GPIO2)</span><br><span class="line">RTC_GPIO13 (GPIO15)</span><br><span class="line">RTC_GPIO14 (GPIO13)</span><br><span class="line">RTC_GPIO15 (GPIO12)</span><br><span class="line">RTC_GPIO16 (GPIO14)</span><br><span class="line">RTC_GPIO17 (GPIO27)</span><br></pre></td></tr></table></figure>
<h4 id="内置2个霍尔传感器"><a href="#内置2个霍尔传感器" class="headerlink" title="内置2个霍尔传感器"></a>内置2个霍尔传感器</h4><p>内置霍尔效应传感器，可检测周围磁场的变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO 36 (VP)</span><br><span class="line">GPIO 39 (VN)</span><br></pre></td></tr></table></figure>

<h4 id="使能EN"><a href="#使能EN" class="headerlink" title="使能EN"></a>使能EN</h4><p>3.3V 稳压器的启用引脚。它被拉高，因此接地以禁用 3.3V 稳压器。这意味着可以使用连接到按钮的此引脚来重新启动 ESP32。</p>
<h4 id="GPIO电流"><a href="#GPIO电流" class="headerlink" title="GPIO电流"></a>GPIO电流</h4><p>根据 ESP32 数据表中的“推荐操作条件”部分，每个 GPIO 的绝对最大电流消耗为 40mA。</p>
<h1 id="软件应用"><a href="#软件应用" class="headerlink" title="软件应用"></a>软件应用</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="按钮消抖"><a href="#按钮消抖" class="headerlink" title="按钮消抖"></a>按钮消抖</h3><p>上面的代码经常用于读取按钮是否被按下，但是实际上机械按钮在开关时总会因为各种原因导致的抖动，导致多次触发中断。</p>
<p>我解决这个问题的想法就是先检查最近50ms有没有过中断，如果没有，继续检查接下来20ms有没有回到高电平，如果还没有，就可以判定确实按下了按钮。代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> previousMillis = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(<span class="number">12</span>, INPUT|PULLUP );</span><br><span class="line">  attachInterrupt(<span class="number">12</span>, blink, FALLING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">blink</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> ding = <span class="number">1</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> currentMillis = millis();</span><br><span class="line">  <span class="keyword">if</span> (currentMillis - previousMillis &gt; <span class="number">50</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(millis() - currentMillis &lt; <span class="number">20</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (digitalRead(<span class="number">12</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        ding = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ding)&#123;</span><br><span class="line">      previousMillis = currentMillis;</span><br><span class="line">      Serial.println(<span class="string">&quot;interrupt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="光污染制作–ws2812驱动"><a href="#光污染制作–ws2812驱动" class="headerlink" title="光污染制作–ws2812驱动"></a>光污染制作–ws2812驱动</h3><p>讲真这个和ESP32关系不大，但是我就想写怎么着hhh</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Freenove_WS2812_Lib_for_ESP32.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEDS_COUNT  128    <span class="comment">//彩灯数目</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEDS_PIN	13    <span class="comment">//ESP32控制ws2812的引脚</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHANNEL		0    <span class="comment">//控制通道，最多8路</span></span></span><br><span class="line"></span><br><span class="line">Freenove_ESP32_WS2812 strip = Freenove_ESP32_WS2812(LEDS_COUNT, LEDS_PIN, CHANNEL, TYPE_GRB);<span class="comment">//申请一个彩灯控制对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  strip.begin();      <span class="comment">//初始化彩灯控制引脚</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">255</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LEDS_COUNT; i++) &#123;</span><br><span class="line">      strip.setLedColorData(i, strip.Wheel((i * <span class="number">256</span> / LEDS_COUNT + j) &amp; <span class="number">255</span>));<span class="comment">//设置彩灯颜色数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    strip.show();<span class="comment">//显示颜色</span></span><br><span class="line">    delay(<span class="number">5</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="WIFI连接服务器获取数据"><a href="#WIFI连接服务器获取数据" class="headerlink" title="WIFI连接服务器获取数据"></a>WIFI连接服务器获取数据</h3><p>此处示例为使用STA模式连接WIFI并发起TCP连接获取数据，然后读取其中的<code>r</code>和<code>d</code>作为分隔符的内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> IPAddress <span class="title function_">serverIP</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span>;</span><br><span class="line"><span class="type">uint16_t</span> serverPort = <span class="number">23333</span>;</span><br><span class="line">WiFiClient client;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.setSleep(<span class="literal">false</span>);</span><br><span class="line">  WiFi.setHostname(<span class="string">&quot;esp32&quot;</span>);</span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED)&#123;</span><br><span class="line">    delay(<span class="number">2000</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;WiFi connected, IP address: &quot;</span>);</span><br><span class="line">  Serial.println(WiFi.localIP());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.println(<span class="string">&quot;connecting to server&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (client.connect(serverIP, serverPort))&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;connected&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (client.connected() || client.available())&#123;</span><br><span class="line">      <span class="keyword">if</span> (client.available())&#123;</span><br><span class="line">        String d = client.readStringUntil(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        Serial.println(d);</span><br><span class="line">        dir = d.toInt();</span><br><span class="line">        String r = client.readStringUntil(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        run = r.toInt();</span><br><span class="line">        Serial.println(r);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    client.stop();</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="蓝牙键盘"><a href="#蓝牙键盘" class="headerlink" title="蓝牙键盘"></a>蓝牙键盘</h3><p>D12引脚拉低则蓝牙键盘输出<code>HELLO</code>。问题在于如果esp32重启，必须重新配对才能让蓝牙键盘继续工作，还不知道原因，网上也没有搜到类似现象，也许是我esp32板子的问题？等我再换一个板子试一试。好了问题解决，github直接下载的<code>0.3</code>版本的<code>ESP32-BLE-Keyboard</code>库有bug，已经有人提出了<a href="https://github.com/T-vK/ESP32-BLE-Keyboard/issues/166">issue</a>，在<code>0.3.2</code>中已经解决了这个问题，不过<code>0.3.2</code>还是Pre-release。下载这个库时候记得看版本要<code>0.3.2</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;BleKeyboard.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> previousMillis = <span class="number">0</span>;</span><br><span class="line">BleKeyboard <span class="title function_">bleKeyboard</span><span class="params">(<span class="string">&quot;ESP32&quot;</span>,<span class="string">&quot;triority&quot;</span>,<span class="number">100</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(<span class="number">12</span>, INPUT|PULLUP );</span><br><span class="line">  attachInterrupt(<span class="number">12</span>, blink, FALLING);</span><br><span class="line">  bleKeyboard.begin();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">blink</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> ding = <span class="number">1</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> currentMillis = millis();</span><br><span class="line">  <span class="keyword">if</span> (currentMillis - previousMillis &gt; <span class="number">80</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(millis() - currentMillis &lt; <span class="number">30</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (digitalRead(<span class="number">12</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        ding = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ding)&#123;</span><br><span class="line">      previousMillis = currentMillis;</span><br><span class="line">      Serial.println(<span class="string">&quot;interrupt&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(bleKeyboard.isConnected())&#123;</span><br><span class="line">        bleKeyboard.print(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">        Serial.println(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ESP32-NOW：一对一单向通信"><a href="#ESP32-NOW：一对一单向通信" class="headerlink" title="ESP32 NOW：一对一单向通信"></a>ESP32 NOW：一对一单向通信</h3><p>这部分内容来自<a href="https://lingshunlab.com/book/esp32/esp32-now-introduce-and-one-way-communication">lingshunlab</a></p>
<h4 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h4><p>ESP-NOW 是乐鑫开发的一种无连接通信协议，沒有握手协议(CHAP)，具有短包传输的特点。该协议使多个设备能够在不使用Wi-Fi的情况下以简单的方式进行相互通讯，类似于低功耗 2.4GHz 无线连接，设备之间的配对是在它们通信之前就需要配对好在代码中。配对完成后，连接是安全的，持久的，点对点的。换句话说，如果你的一块ESP32板突然断电或重置，当它重新启动时，它就会自动连接到它的已经提前配对好的网路中以继续通信。</p>
<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>在有限的加密对等点：</p>
<ul>
<li>Station模式最多支持10个设备的加密对等点网络通讯；</li>
<li>SoftAP或SoftAP+Station模式下最多支持6个设备；</li>
</ul>
<p>多个未加密对等点：</p>
<ul>
<li>其总数应少于 20 个设备</li>
<li>有效载荷限制为 250 字节。</li>
</ul>
<p>2个ESP32开发板在空旷区域中进行单向通讯，相隔30米仍然能很好低接收信息。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="发送端-slave-x2F-sender"><a href="#发送端-slave-x2F-sender" class="headerlink" title="发送端(slave&#x2F;sender)"></a>发送端(slave&#x2F;sender)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载需要的库 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;esp_now.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接收端的mac地址,这里的地址请替换成接收端ESP32的MAC地址</span></span><br><span class="line"><span class="type">uint8_t</span> broadcastAddress[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据的结构示例</span></span><br><span class="line"><span class="comment">// 在C中使用 typedef struct 定义一个结构体类型,名为struct_message</span></span><br><span class="line"><span class="comment">// 必须与接收方的结构相匹配一致</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">struct_message</span> &#123;</span></span><br><span class="line">  <span class="type">char</span> a[<span class="number">40</span>];</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">  <span class="type">float</span> c;</span><br><span class="line">  <span class="type">bool</span> d;</span><br><span class="line">&#125; struct_message;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 结构为struct_message的myData变量</span></span><br><span class="line">struct_message myData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明对等网络信息实体类变量</span></span><br><span class="line"><span class="type">esp_now_peer_info_t</span> peerInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当发送信息时，触发的回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OnDataSent</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *mac_addr, <span class="type">esp_now_send_status_t</span> status)</span> &#123;</span><br><span class="line">  Serial.print(<span class="string">&quot;\r\nLast Packet Send Status:\t&quot;</span>);</span><br><span class="line">  Serial.println(status == ESP_NOW_SEND_SUCCESS ? <span class="string">&quot;Delivery Success&quot;</span> : <span class="string">&quot;Delivery Fail&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 设置串口波特率</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置设备WIFI模式为WIFI_STA</span></span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化ESPNOW</span></span><br><span class="line">  <span class="keyword">if</span> (esp_now_init() != ESP_OK) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Error initializing ESP-NOW&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当ESPNOW初始化成功,我们将会注册一个回调函数(callback，CB)</span></span><br><span class="line">  <span class="comment">// 获得数据包的发送情况</span></span><br><span class="line">  esp_now_register_send_cb(OnDataSent);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置对等(对等点)网络</span></span><br><span class="line">  <span class="built_in">memcpy</span>(peerInfo.peer_addr, broadcastAddress, <span class="number">6</span>);</span><br><span class="line">  peerInfo.channel = <span class="number">0</span>;  </span><br><span class="line">  peerInfo.encrypt = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加对等(对等点)网络       </span></span><br><span class="line">  <span class="keyword">if</span> (esp_now_add_peer(&amp;peerInfo) != ESP_OK)&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Failed to add peer&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 赋值需要发送的变量数据 </span></span><br><span class="line">  <span class="built_in">strcpy</span>(myData.a, <span class="string">&quot;Welcome to Lingshunlab.com&quot;</span>);</span><br><span class="line">  myData.b = random(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">  myData.c = <span class="number">1.2</span>;</span><br><span class="line">  myData.d = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过ESPNOW发送信息</span></span><br><span class="line">  <span class="type">esp_err_t</span> result = esp_now_send(broadcastAddress, (<span class="type">uint8_t</span> *) &amp;myData, <span class="keyword">sizeof</span>(myData));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 result 返回结果判断是否发送成功</span></span><br><span class="line">  <span class="keyword">if</span> (result == ESP_OK) &#123;<span class="comment">// 当 发送成功 时</span></span><br><span class="line">    Serial.println(<span class="string">&quot;Sent with success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="comment">// 当 发送失败 时</span></span><br><span class="line">    Serial.println(<span class="string">&quot;Error sending the data&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="ESPNOW接收端"><a href="#ESPNOW接收端" class="headerlink" title="ESPNOW接收端"></a>ESPNOW接收端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载需要的库 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;esp_now.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据的结构示例</span></span><br><span class="line"><span class="comment">// 在C中使用 typedef struct 定义一个结构体类型,名为struct_message</span></span><br><span class="line"><span class="comment">// 必须与发送方的结构相匹配一致</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">struct_message</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> a[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">float</span> c;</span><br><span class="line">    <span class="type">bool</span> d;</span><br><span class="line">&#125; struct_message;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 结构为struct_message的myData变量</span></span><br><span class="line">struct_message myData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当收到数据时将执行的回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OnDataRecv</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> * mac, <span class="type">const</span> <span class="type">uint8_t</span> *incomingData, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;myData, incomingData, <span class="keyword">sizeof</span>(myData));</span><br><span class="line">  Serial.print(<span class="string">&quot;Bytes received: &quot;</span>);</span><br><span class="line">  Serial.println(len);</span><br><span class="line">  Serial.print(<span class="string">&quot;Char: &quot;</span>);</span><br><span class="line">  Serial.println(myData.a);</span><br><span class="line">  Serial.print(<span class="string">&quot;Int: &quot;</span>);</span><br><span class="line">  Serial.println(myData.b);</span><br><span class="line">  Serial.print(<span class="string">&quot;Float: &quot;</span>);</span><br><span class="line">  Serial.println(myData.c);</span><br><span class="line">  Serial.print(<span class="string">&quot;Bool: &quot;</span>);</span><br><span class="line">  Serial.println(myData.d);</span><br><span class="line">  Serial.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 设置串口波特率</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置设备WIFI模式为WIFI_STA</span></span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化ESPNOW</span></span><br><span class="line">  <span class="keyword">if</span> (esp_now_init() != ESP_OK) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Error initializing ESP-NOW&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当ESPNOW初始化成功,我们将会注册一个回调函数(callback，CB)</span></span><br><span class="line">  <span class="comment">// 获得回收的包装信息</span></span><br><span class="line">  esp_now_register_recv_cb(OnDataRecv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EEPROM：断电数据保存"><a href="#EEPROM：断电数据保存" class="headerlink" title="EEPROM：断电数据保存"></a>EEPROM：断电数据保存</h3><p>EEPROM (electrically erasable programmable read-only memory)是一种用户可修改的ROM，又或者称为闪存(Flash Memory)。是一种非易失性ROM，可以擦除和重新编程单个字节的数据。这就是 EEPROM芯片被称为字节可擦除芯片的原因。EEPROM 通常用于在计算和其他电子设备中存储少量数据。</p>
<p>EEPROM里面的数据是可以断电保存的，重新上电数据并不会丢失。但是，闪存的一个限制是可刷写数据的次数。你可以根据需要多次从闪存中读取数据，但大多数设备闪存的写入次数设计为大约 100,000 到 1,000,000 次写入操作。</p>
<blockquote>
<p>Arduino Uno 的EEEROM大小为1024个字节。<br>ESP32的EEPROM大小为 512 字节。<br>这意味着使用 ESP32 和 EEPROM 库可以有 512 个不同的地址，可以在每个地址位置保存一个 0 到 255 之间的值。</p>
</blockquote>
<p>在 ESP32 的闪存读取和写入将使用 EEPROM 库。其实是和 Arduino EEPROM 一样的，并没有太大区别。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载EEPROM的库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;EEPROM.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义EEPROM的大小</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_SIZE 1  <span class="comment">// 这里定义1个字节的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> read_value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123; </span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化EEPROM为预定义的大小</span></span><br><span class="line">  EEPROM.begin(EEPROM_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  read_value = EEPROM.read(<span class="number">0</span>); <span class="comment">// 读EEPROM第0位的数据</span></span><br><span class="line">  Serial.println(read_value);  </span><br><span class="line"></span><br><span class="line">  read_value++;   <span class="comment">// read_value+1 ，EEPROM只接受0～255的数值，超出的将会是255的取余值</span></span><br><span class="line">  EEPROM.write(<span class="number">0</span>, read_value); <span class="comment">// 把变量read_value的数值写入第0位</span></span><br><span class="line">  EEPROM.commit(); <span class="comment">// 需要提交才能正真地把数据写入EEPROM</span></span><br><span class="line"></span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="低功耗"><a href="#低功耗" class="headerlink" title="低功耗"></a>低功耗</h3><h4 id="低功耗模式"><a href="#低功耗模式" class="headerlink" title="低功耗模式"></a>低功耗模式</h4><p><img src="/2023/esp32-all-in-one/esp32%E5%8A%9F%E8%80%97.png" alt="各种低功耗模式电流"></p>
<p><img src="/2023/esp32-all-in-one/2020061714483194.png" alt="三种模式的区别"></p>
<ul>
<li><code>Modem-sleep</code> 模式：CPU 可运行，时钟可被配置。Wi-Fi&#x2F;蓝牙基带和射频关闭</li>
<li><code>Light-sleep</code> 模式：CPU 暂停运行，Wi-Fi&#x2F;蓝牙基带和射频关闭。RTC 存储器和外设以及 ULP 协处理器运行。任何唤醒事件(MAC、主机、RTC 定时器或外部中断)都会唤醒芯片</li>
<li><code>Deep-sleep</code> 模式：CPU 和大部分外设都会掉电，Wi-Fi&#x2F;蓝牙基带和射频关闭，只有 RTC 存储器和 RTC 外设以及 ULP 协处理器可以工作。Wi-Fi 和蓝牙连接数据存储在 RTC 中</li>
</ul>
<h4 id="Modem-sleep"><a href="#Modem-sleep" class="headerlink" title="Modem-sleep"></a>Modem-sleep</h4><p>目前 ESP32 的<code>Modem-sleep</code>仅工作在<code>Station</code>模式下,连接路由器后生效。<code>Station</code>会周期性在工作状态和睡眠状态两者之间切换。<br>ESP32通过Wi-Fi的<code>DTIM Beacon</code>机制与路由器保持连接。在<code>Modem-sleep</code>模式下，系统可以自动被唤醒，无需配置唤醒源</p>
<p>在 <code>Modem-sleep</code> 模式下，ESP32 会在两次 <code>DTIM Beacon</code> 间隔时间内，关闭 Wi-Fi 模块电路，达到省电效果，在下次 <code>Beacon</code> 到来前自动唤醒。睡眠时间由路由器的 <code>DTIM Beacon</code> 时间决定。<code>Modem-sleep</code> 模式可以保持与路由器的 Wi-Fi 连接，并通过路由器接收来自手机或者服务器的交互信息</p>
<p><code>Modem-sleep</code> 一般用于 CPU 持续处于工作状态并需要保持 Wi-Fi 连接的应用场景，例如，使用 ESP32 本地语音唤醒功能，CPU 需要持续采集和处理音频数据。</p>
<blockquote>
<p>一般路由器的 DTIM Beacon 间隔为 100 ms ~ 1,000 ms</p>
</blockquote>
<h4 id="Light-sleep"><a href="#Light-sleep" class="headerlink" title="Light-sleep"></a>Light-sleep</h4><p><code>Light-sleep</code>的工作模式与<code>Modem-sleep</code>相似，不同的是，除了关闭 Wi-Fi 模块电路以外，在 <code>Light-sleep</code> 模式下，还会关闭时钟并暂停内部 CPU，比<code>Modem-sleep</code>功耗更低。有两种方式使 CPU 进入<code>Light-sleep</code>模式：</p>
<ul>
<li>强制<code>Light-sleep</code>： 通过调用 API 强制 CPU 进入 <code>Light-sleep</code> 模式，强制进入 <code>Light-sleep</code> 模式后，不能通过路由器接收来自手机或者服务器的交互信息。强制关闭 Wi-Fi 模块电路并暂停内部 CPU。能通过定时器、 GPIO（RTC IO 和 Digital IO）和 UART 唤醒。从 <code>Light-sleep</code> 唤醒后，会从进入休眠的位置继续执行程序。</li>
<li>自动<code>Light-sleep</code>： 配置为自动休眠方式后，会在 CPU 处于空闲的状态下自动进入<code>Light-sleep</code>模式，能通过路由器接收来自手机或者服务器的交互信息。通常自动<code>Light-sleep</code>会与<code>Modem-sleep</code> 模式以及电源管理功能共同使用，电源管理功能允许系统根据 CPU 负载动态调节 CPU 频率以降低功耗。比如 Wi-Fi 开关的应用，大部分时间 CPU 都是空闲的，直到收到控制命令，CPU 才需要进行 GPIO 的操作。</li>
</ul>
<blockquote>
<p>强制 Light-sleep 接口调用后，并不会立即休眠，而是等到系统空闲后才进入休眠</p>
</blockquote>
<blockquote>
<p>若系统应用中有小于 DTIM Beacon 间隔时间的循环定时,系统将不能进入 Light-sleep 模式</p>
</blockquote>
<h4 id="Deep-sleep"><a href="#Deep-sleep" class="headerlink" title="Deep-sleep"></a>Deep-sleep</h4><p>相对于其他两种模式，系统无法自动进入<code>Deep-sleep</code>，需要由用户调用接口函数<code>esp_deep_sleep_start()</code>进入<code>Deep-sleep</code>模式。在该模式下，芯片会断开所有 Wi-Fi 连接与数据连接，进入<code>Deep-sleep</code>模式，只有 RTC 存储器和 RTC 外设以及 ULP 协处理器可以工作。从<code>Deep-sleep</code>唤醒后，CPU 将软件复位重启</p>
<p><code>Deep-sleep</code>可以用于低功耗的传感器应用,或者大部分时间都不需要进行数据传输的情况。设备可以每隔一段时间从<code>Deep-sleep</code>状态醒来测量数据并上传,之后继续进入<code>Deep-sleep</code>。也可以将多个数据存储于<code>RTC memory</code>(<code>RTC memory</code>在<code>Deep-sleep</code>模式下仍然可以保存数据),然后一次发送出去</p>
<h5 id="定时唤醒：6uA左右"><a href="#定时唤醒：6uA左右" class="headerlink" title="定时唤醒：6uA左右"></a>定时唤醒：6uA左右</h5><p>这是官方提供的示例代码，已经把注释改成了中文。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> uS_TO_S_FACTOR 1000000ULL  <span class="comment">//微秒到秒的转换</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIME_TO_SLEEP  5        <span class="comment">//进入休眠模式时间</span></span></span><br><span class="line">RTC_DATA_ATTR <span class="type">int</span> bootCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//打印被唤醒原因的方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_wakeup_reason</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">esp_sleep_wakeup_cause_t</span> wakeup_reason;</span><br><span class="line">  wakeup_reason = esp_sleep_get_wakeup_cause();</span><br><span class="line">  <span class="keyword">switch</span>(wakeup_reason)&#123;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_EXT0 : Serial.println(<span class="string">&quot;Wakeup caused by external signal using RTC_IO&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_EXT1 : Serial.println(<span class="string">&quot;Wakeup caused by external signal using RTC_CNTL&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_TIMER : Serial.println(<span class="string">&quot;Wakeup caused by timer&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println(<span class="string">&quot;Wakeup caused by touchpad&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_ULP : Serial.println(<span class="string">&quot;Wakeup caused by ULP program&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> : Serial.<span class="built_in">printf</span>(<span class="string">&quot;Wakeup was not caused by deep sleep: %d\n&quot;</span>,wakeup_reason); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  ++bootCount;</span><br><span class="line">  Serial.println(<span class="string">&quot;Boot number: &quot;</span> + String(bootCount));</span><br><span class="line">  </span><br><span class="line">  print_wakeup_reason();</span><br><span class="line">  <span class="comment">//配置唤醒源，每五秒唤醒一次，在没有提供唤醒源的情况下睡眠，除非硬件重置，它将永远休眠</span></span><br><span class="line">  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);</span><br><span class="line">  Serial.println(<span class="string">&quot;Setup ESP32 to sleep for every &quot;</span> + String(TIME_TO_SLEEP) + <span class="string">&quot; Seconds&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;Going to sleep now&quot;</span>);</span><br><span class="line">  Serial.flush(); </span><br><span class="line">  <span class="comment">//开始进入休眠</span></span><br><span class="line">  esp_deep_sleep_start();</span><br><span class="line">  Serial.println(<span class="string">&quot;This will never be printed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Touchpad唤醒：36uA左右"><a href="#Touchpad唤醒：36uA左右" class="headerlink" title="Touchpad唤醒：36uA左右"></a>Touchpad唤醒：36uA左右</h5><p>调用<code>esp_deep_sleep_enable_touchpad_wakeup()</code>函数使能<code>touchpad</code>唤醒，然后调用<code>esp_deep_sleep_start()</code>函数进入<code>Deep-sleep</code>模式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此代码展示深度睡眠以触摸作为唤醒源以及如何存储数据，RTC内存在重新启动时使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ESP32 可以启用多个触摸作为唤醒源</span></span><br><span class="line"><span class="comment">ESP32-S2 和 ESP32-S3 仅支持 1 个触摸作为唤醒源启用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_IDF_TARGET_ESP32</span></span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> THRESHOLD   40      <span class="comment">//值越大，灵敏度越高</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">//ESP32-S2 和 ESP32-S3</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> THRESHOLD   5000   <span class="comment">//值越低，灵敏度越高</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">RTC_DATA_ATTR <span class="type">int</span> bootCount = <span class="number">0</span>;</span><br><span class="line"><span class="type">touch_pad_t</span> touchPin;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_wakeup_reason</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">esp_sleep_wakeup_cause_t</span> wakeup_reason;</span><br><span class="line">  wakeup_reason = esp_sleep_get_wakeup_cause();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span>(wakeup_reason)&#123;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_EXT0 : Serial.println(<span class="string">&quot;Wakeup caused by external signal using RTC_IO&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_EXT1 : Serial.println(<span class="string">&quot;Wakeup caused by external signal using RTC_CNTL&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_TIMER : Serial.println(<span class="string">&quot;Wakeup caused by timer&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println(<span class="string">&quot;Wakeup caused by touchpad&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_ULP : Serial.println(<span class="string">&quot;Wakeup caused by ULP program&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> : Serial.<span class="built_in">printf</span>(<span class="string">&quot;Wakeup was not caused by deep sleep: %d\n&quot;</span>,wakeup_reason); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_wakeup_touchpad</span><span class="params">()</span>&#123;</span><br><span class="line">  touchPin = esp_sleep_get_touchpad_wakeup_status();</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> CONFIG_IDF_TARGET_ESP32</span></span><br><span class="line">    <span class="keyword">switch</span>(touchPin)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 4&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 0&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 2&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 15&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 13&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 12&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 14&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 27&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 33&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>  : Serial.println(<span class="string">&quot;Touch detected on GPIO 32&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span> : Serial.println(<span class="string">&quot;Wakeup not by touchpad&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">if</span>(touchPin &lt; TOUCH_PAD_MAX)&#123;</span><br><span class="line">      Serial.<span class="built_in">printf</span>(<span class="string">&quot;Touch detected on GPIO %d\n&quot;</span>, touchPin); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;Wakeup not by touchpad&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  ++bootCount;</span><br><span class="line">  Serial.println(<span class="string">&quot;Boot number: &quot;</span> + String(bootCount));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打印唤醒原因和触摸引脚</span></span><br><span class="line">  print_wakeup_reason();</span><br><span class="line">  print_wakeup_touchpad();</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> CONFIG_IDF_TARGET_ESP32 </span></span><br><span class="line">  <span class="comment">//设置唤醒引脚为 GPIO15 + GPIO 27</span></span><br><span class="line">  touchSleepWakeUpEnable(T3,THRESHOLD);</span><br><span class="line">  touchSleepWakeUpEnable(T7,THRESHOLD);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="keyword">else</span> <span class="comment">//ESP32-S2 + ESP32-S3</span></span></span><br><span class="line">  <span class="comment">//设置唤醒引脚为 GPIO3</span></span><br><span class="line">  touchSleepWakeUpEnable(T3,THRESHOLD);</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//进入睡眠模式</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Going to sleep now&quot;</span>);</span><br><span class="line">  esp_deep_sleep_start();</span><br><span class="line">  Serial.println(<span class="string">&quot;This will never be printed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="GPIO唤醒：6uA左右"><a href="#GPIO唤醒：6uA左右" class="headerlink" title="GPIO唤醒：6uA左右"></a>GPIO唤醒：6uA左右</h5><ul>
<li><code>External wakeup</code> (ext0)</li>
</ul>
<p><code>RTC IO</code>模块包含当其中一个<code>RTC IO</code>的电平为唤醒电平（可配置为逻辑高或低）触发唤醒的逻辑。<br><code>RTC IO</code>是 RTC 外设电源域的一部分，因此如果使能该唤醒源，RTC 外设将在睡眠期间保持上电状态。在 ESP32 的修订版 0 和 1 中，此唤醒源与 ULP 和触摸唤醒源不兼容。</p>
<p>由于在此模式下启用了<code>RTC IO</code>模块，因此也可以使用内部上拉或下拉电阻。<br><code>esp_sleep_enable_ext0_wakeup()</code>函数可用于启用此唤醒源。</p>
<ul>
<li><code>External wakeup</code> (ext1)</li>
</ul>
<p>RTC 控制器包含使用 多个 RTC IO 触发唤醒的逻辑。两个逻辑功能之一可用于触发唤醒：<br>如果任何一个所选 IO 为高电平，则唤醒（<code>ESP_EXT1_WAKEUP_ANY_HIGH</code>）<br>如果所有选定的 IO 都为低电平，则唤醒（<code>ESP_EXT1_WAKEUP_ALL_LOW</code>）<br>该唤醒源由 RTC 控制器实现。因此，RTC 外设和 RTC 存储器可以在此模式下断电。</p>
<p>但是，如果 RTC 外设断电，内部上拉和下拉电阻将被禁用。要使用内部上拉或下拉电阻，请在睡眠期间请求 RTC 外设电源域保持上电。<code>esp_sleep_enable_ext1_wakeup()</code>函数可用于启用此唤醒源。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此代码展示如何将深度睡眠与作为唤醒源的外部触发器，以及如何将数据存储在 RTC 内存中，以便在重新启动时使用它</span></span><br><span class="line"><span class="comment">按下 GPIO 33 按钮以 10K 欧姆向下拉</span></span><br><span class="line"><span class="comment">注意，只有 RTC IO 可以用作外部唤醒的源。它们是引脚：0，2，4，12-15，25-27，32-39。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_PIN_BITMASK 0x200000000 <span class="comment">// 2^33 in hex</span></span></span><br><span class="line">RTC_DATA_ATTR <span class="type">int</span> bootCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_wakeup_reason</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">esp_sleep_wakeup_cause_t</span> wakeup_reason;</span><br><span class="line">  wakeup_reason = esp_sleep_get_wakeup_cause();</span><br><span class="line">  <span class="keyword">switch</span>(wakeup_reason)&#123;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_EXT0 : Serial.println(<span class="string">&quot;Wakeup caused by external signal using RTC_IO&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_EXT1 : Serial.println(<span class="string">&quot;Wakeup caused by external signal using RTC_CNTL&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_TIMER : Serial.println(<span class="string">&quot;Wakeup caused by timer&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println(<span class="string">&quot;Wakeup caused by touchpad&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ESP_SLEEP_WAKEUP_ULP : Serial.println(<span class="string">&quot;Wakeup caused by ULP program&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> : Serial.<span class="built_in">printf</span>(<span class="string">&quot;Wakeup was not caused by deep sleep: %d\n&quot;</span>,wakeup_reason); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  ++bootCount;</span><br><span class="line">  Serial.println(<span class="string">&quot;Boot number: &quot;</span> + String(bootCount));</span><br><span class="line">  print_wakeup_reason();</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  首先，我们将 ESP32 设置为外部唤醒触发器。ESP32 有两种类型，ext0 和 ext1。</span></span><br><span class="line"><span class="comment">  ext0 使用RTC_IO唤醒，因此需要 RTC 外设</span></span><br><span class="line"><span class="comment">  ext1 在使用 RTC 控制器时打开，所以不需要打开电源的外围设备。</span></span><br><span class="line"><span class="comment">  请注意，使用内部上拉/下拉还需要打开 RTC 外围设备。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  esp_sleep_enable_ext0_wakeup(GPIO_NUM_33,<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//如果你使用 ext1：esp_sleep_enable_ext1_wakeup(BUTTON_PIN_BITMASK,ESP_EXT1_WAKEUP_ANY_HIGH);</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Going to sleep now&quot;</span>);</span><br><span class="line">  esp_deep_sleep_start();</span><br><span class="line">  Serial.println(<span class="string">&quot;This will never be printed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><p>连接wifi后，浏览器输入串口输出的ip，打开网页就会让led灯亮起一秒。考虑到学弟喜欢写脚本疯狂访问来让继电器输出PWM，加了个10s的延时不接受新的连接。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WebServer.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">int</span> led0=<span class="number">13</span>;</span><br><span class="line">WebServer <span class="title function_">server</span><span class="params">(<span class="number">80</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span>&#123;</span><br><span class="line">  String HTML = <span class="string">&quot;&lt;!DOCTYPE html&gt;\</span></span><br><span class="line"><span class="string">  &lt;html&gt;&lt;head&gt;&lt;meta charset=&#x27;utf-8&#x27;&gt;&lt;/head&gt;\</span></span><br><span class="line"><span class="string">  &lt;body&gt;没错,这就是ESP32网页!\</span></span><br><span class="line"><span class="string">  &lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">  digitalWrite(led0, <span class="number">0</span>);</span><br><span class="line">  server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, HTML);</span><br><span class="line">  delay(<span class="number">3000</span>);</span><br><span class="line">  digitalWrite(led0, <span class="number">1</span>);</span><br><span class="line">  delay(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(led0, OUTPUT);</span><br><span class="line">  digitalWrite(led0, <span class="number">1</span>);</span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line">  Serial.println(<span class="string">&quot;开始连接WIFI&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED)&#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    delay(<span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.print(<span class="string">&quot;\nIP位址:&quot;</span>);</span><br><span class="line">  Serial.println(WiFi.localIP());</span><br><span class="line">  server.on(<span class="string">&quot;/&quot;</span>, handleRoot);</span><br><span class="line">  server.onNotFound([]()&#123;</span><br><span class="line">    server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;File NOT found!&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  server.begin();</span><br><span class="line">  Serial.println(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  server.handleClient();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ota升级"><a href="#ota升级" class="headerlink" title="ota升级"></a>ota升级</h3><p>在Arduino IDE中选择<code>File&gt;Example&gt;ArduinoOTA&gt;OTAWebUpdate</code>例子程序。在程序中更改成自己的WiFi名字和密码。</p>
<p>上载程序后打开串口监视器，按ESP32板子的复位重启按钮，通过串口监视器可以看到这个ESP32服务器的地址</p>
<p>输入ESP32 IP地址，可以在浏览器中输入用户名和密码，点击login。</p>
<p>用<code>Sketch&gt;Export compiled Binary</code>。这时在sketch中创建一个.bin的文件。现在，在OTA的web page中选择文件，‘Choose File’ 按钮，选择.bin文件。点击Update按钮。开始上载程序</p>
<p>实操程序无法运行，未找到原因找到再来写，不过话说这个好似是一次性的，也就没太大用</p>
<h3 id="多核操作"><a href="#多核操作" class="headerlink" title="多核操作"></a>多核操作</h3><p>ESP32具有两个32位<code>Tensilica Xtensa LX6</code>微处理器，这使其成为功能强大的双核（core0和core1）微控制器。有单核和双核两种版本。但是双核版本更受欢迎，因为它们之间没有明显的价格差异。</p>
<p>一般使用Arduino IDE进行编程时，由于<code>Core0</code>已编程用于RF通信，因此代码仅在<code>Core1</code>上运行。我们将展示如何使用ESP32的两个内核同时执行两项操作</p>
<p>ESP32开发板已经安装了<code>FreeRTOS</code>固件。 <code>FreeRTOS</code>是开源的实时操作系统，在多任务处理中非常有用。 RTOS有助于管理资源并最大程度地提高系统性能。 <code>FreeRTOS</code>具有许多用于不同目的的API函数，使用这些API，我们可以创建任务并使它们运行在不同的内核上。</p>
<p><a href="https://www.freertos.org/Documentation/161204_Mastering_the_FreeRTOS_Real_Time_Kernel-A_Hands-On_Tutorial_Guide.pdf">FreeRTOS API的完整文档</a></p>
<h4 id="查找ESP32内核ID"><a href="#查找ESP32内核ID" class="headerlink" title="查找ESP32内核ID"></a>查找ESP32内核ID</h4><p>可以从void setup()和void loop()函数中调用此函数，以了解运行这些函数的内核ID</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">xPortGetCoreID()</span><br></pre></td></tr></table></figure>

<p>测试一下这个程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;setup() function running on core: &quot;</span>);</span><br><span class="line">  Serial.println(xPortGetCoreID());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.print(<span class="string">&quot;loop() function running on core: &quot;</span>);</span><br><span class="line">  Serial.println(xPortGetCoreID());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>串口输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">16:19:10.291 -&gt; setup() function running on core: 1</span><br><span class="line">16:19:10.291 -&gt; loop() function running on core: 1</span><br><span class="line">16:19:10.291 -&gt; loop() function running on core: 1</span><br><span class="line">16:19:10.291 -&gt; loop() function running on core: 1</span><br></pre></td></tr></table></figure>
<h4 id="双核编程方法"><a href="#双核编程方法" class="headerlink" title="双核编程方法"></a>双核编程方法</h4><p>Arduino IDE支持在ESP32运行FreeRTOS，而FreeRTOS API允许我们创建可以在两个内核上独立运行的任务。<br>以下函数用于创建可以在两个内核上运行的任务。在此函数中，我们必须提供一些参数，例如优先级、内核ID等。</p>
<h5 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xTaskCreatePinnedToCore()</span><br></pre></td></tr></table></figure>
<p>此函数使用7个参数：</p>
<ul>
<li>实现任务的函数名称：<code>task1</code></li>
<li>任务的任何名称：<code>task1</code></li>
<li>分配给任务的堆栈大小：以字为单位</li>
<li>任务输入参数：可以为NULL</li>
<li>任务的优先级：0是最低优先级</li>
<li>任务句柄：可以为NULL</li>
<li>任务将运行的内核ID：0或1</li>
</ul>
<p>举例：通过在xTaskCreatePinnedToCore()函数中提供所有参数来创建任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xTaskCreatePinnedToCore(Task1code, &quot;Task1&quot;, 10000, NULL, 1, NULL,  0);</span><br></pre></td></tr></table></figure>
<h4 id="定义Taskcode函数"><a href="#定义Taskcode函数" class="headerlink" title="定义Taskcode函数"></a>定义Taskcode函数</h4><p>在<code>void setup()&#123;&#125;</code>函数之外，为任务创建单独的函数，这个函数将在<code>core0</code>上运行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Void <span class="title function_">Task1code</span><span class="params">( <span class="type">void</span> * parameter)</span> &#123;</span><br><span class="line">  Serial.print(<span class="string">&quot;Task1 running on core &quot;</span>);</span><br><span class="line">  Serial.println(xPortGetCoreID());</span><br><span class="line">  <span class="keyword">for</span>(;;) &#123;<span class="comment">//infinite loop</span></span><br><span class="line">    digitalWrite(led, HIGH);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    digitalWrite(led, LOW);</span><br><span class="line">    ​​delay(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们已经知道<code>loop()</code>和<code>setup()</code>函数在<code>core1</code>上运行，因此可以在<code>void loop()</code>函数中实现core1任务</p>
<h4 id="喂狗"><a href="#喂狗" class="headerlink" title="喂狗"></a>喂狗</h4><p>需要注意一件事，如果把一个在<code>cpu0</code>持续执行的任务的优先级写的大于<code>0</code>，那么其他任务都将无法得到cpu0，比如<code>IDLE</code>，而这个任务默认开启5s的看门狗，这将导致单片机每五秒重置一次，串口输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18:51:12.378 -&gt; E (10179) task_wdt: Task watchdog got triggered. The following tasks did not reset the watchdog in time:</span><br><span class="line">18:51:12.378 -&gt; E (10179) task_wdt:  - IDLE (CPU 0)</span><br><span class="line">18:51:12.378 -&gt; E (10179) task_wdt: Tasks currently running:</span><br><span class="line">18:51:12.378 -&gt; E (10179) task_wdt: CPU 0: Task1</span><br><span class="line">18:51:12.378 -&gt; E (10179) task_wdt: CPU 1: IDLE</span><br><span class="line">18:51:12.378 -&gt; E (10179) task_wdt: Aborting.</span><br><span class="line">18:51:12.378 -&gt;</span><br><span class="line">18:51:12.378 -&gt; abort() was called at PC 0x400df979 on core 0</span><br><span class="line">18:51:12.378 -&gt; </span><br><span class="line">18:51:12.378 -&gt; </span><br><span class="line">18:51:12.378 -&gt; Backtrace: 0x40083931:0x3ffbed5c |&lt;-CORRUPTED</span><br><span class="line">18:51:12.414 -&gt; </span><br><span class="line">18:51:12.414 -&gt; </span><br><span class="line">18:51:12.414 -&gt; </span><br><span class="line">18:51:12.414 -&gt; </span><br><span class="line">18:51:12.414 -&gt; ELF file SHA256: 291ef283067b9aa7</span><br><span class="line">18:51:12.414 -&gt; </span><br><span class="line">18:51:12.493 -&gt; Rebooting...</span><br></pre></td></tr></table></figure>
<p>解决方法有两个，要么让这个任务暂停给出其他任务一定的cpu时间，要么把优先级改为<code>0</code>，我这里就直接把优先级改成0了</p>
<h4 id="示例：cpu0刷新tft屏幕-cpu1使用simplefoc控制无刷电机"><a href="#示例：cpu0刷新tft屏幕-cpu1使用simplefoc控制无刷电机" class="headerlink" title="示例：cpu0刷新tft屏幕,cpu1使用simplefoc控制无刷电机"></a>示例：cpu0刷新tft屏幕,cpu1使用simplefoc控制无刷电机</h4><p>其中，tft屏幕任务代码来自<code>#include &quot;Ucglib.h&quot;</code>的示例程序，foc控制任务代码来自<code>#include &lt;SimpleFOC.h&gt;</code>的示例程序</p>
<p>虽然但是，就这两个任务而言，其实就算都在<code>cpu1</code>执行也无所谓hhh</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Ucglib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;soc/soc.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;soc/rtc_cntl_reg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_task_wdt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Ucglib_ST7735_18x128x160_SWSPI <span class="title function_">ucg</span><span class="params">(<span class="comment">/*sclk=*/</span> <span class="number">19</span>, <span class="comment">/*data=*/</span> <span class="number">18</span>, <span class="comment">/*cd=*/</span> <span class="number">16</span>, <span class="comment">/*cs=*/</span> <span class="number">17</span>, <span class="comment">/*reset=*/</span> <span class="number">5</span>)</span>;</span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"><span class="type">float</span> target_angle = <span class="number">0</span>;</span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;target_angle, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  xTaskCreatePinnedToCore(Task1code, <span class="string">&quot;Task1&quot;</span>, <span class="number">10000</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>,  <span class="number">0</span>);</span><br><span class="line">  ucg.begin(UCG_FONT_MODE_TRANSPARENT);</span><br><span class="line">  ucg.setColor(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  ucg.setColor(<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  ucg.setColor(<span class="number">2</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  ucg.setColor(<span class="number">3</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  sensor.init();</span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line">  motor.controller = MotionControlType::angle;</span><br><span class="line">  motor.PID_velocity.P = <span class="number">0.2f</span>;</span><br><span class="line">  motor.PID_velocity.I = <span class="number">20</span>;</span><br><span class="line">  motor.voltage_limit = <span class="number">5</span>;</span><br><span class="line">  motor.LPF_velocity.Tf = <span class="number">0.01f</span>;</span><br><span class="line">  motor.P_angle.P = <span class="number">20</span>;</span><br><span class="line">  motor.velocity_limit = <span class="number">40</span>;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line">  motor.init();</span><br><span class="line">  motor.initFOC();</span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target angle&quot;</span>);</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Set the target angle using serial terminal:&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> z = <span class="number">127</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">lcg_rnd</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  z = (<span class="type">uint8_t</span>)((<span class="type">uint16_t</span>)<span class="number">65</span>*(<span class="type">uint16_t</span>)z + (<span class="type">uint16_t</span>)<span class="number">17</span>);</span><br><span class="line">  <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">draw_text</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  ucg.setFont(ucg_font_ncenR14_tr);</span><br><span class="line">  ucg.setColor(lcg_rnd(),lcg_rnd(),lcg_rnd());</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">  ucg.print(<span class="string">&quot;The quick brown&quot;</span>);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line">  ucg.print(<span class="string">&quot;fox jumps over&quot;</span>);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">60</span>);</span><br><span class="line">  ucg.print(<span class="string">&quot;the lazy dog&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">draw_box</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">ucg_int_t</span> x, y, w, h;</span><br><span class="line">  ucg.setColor(lcg_rnd(),lcg_rnd(),lcg_rnd());</span><br><span class="line">  x = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  y = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  w = <span class="number">63</span>;</span><br><span class="line">  w += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  h = <span class="number">63</span>;</span><br><span class="line">  h += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  ucg.drawBox(x,y,w, h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">draw_gradient_box</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">ucg_int_t</span> x, y, w, h;</span><br><span class="line">  <span class="type">static</span> <span class="type">uint8_t</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span>(idx &amp; <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: ucg.setColor(<span class="number">0</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ucg.setColor(<span class="number">1</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: ucg.setColor(<span class="number">2</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: ucg.setColor(<span class="number">3</span>, lcg_rnd(),lcg_rnd(),lcg_rnd()); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  idx++;</span><br><span class="line">  x = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  y = lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  w = <span class="number">63</span>;</span><br><span class="line">  w += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  h = <span class="number">63</span>;</span><br><span class="line">  h += lcg_rnd() &amp; <span class="number">31</span>;</span><br><span class="line">  ucg.drawGradientBox(x,y,w, h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">measure</span><span class="params">(<span class="type">void</span> (*draw_fn)(<span class="type">void</span>))</span> &#123;</span><br><span class="line">  <span class="type">uint16_t</span> FPS10 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">uint32_t</span> time;</span><br><span class="line"></span><br><span class="line">  ucg.clearScreen();</span><br><span class="line"></span><br><span class="line">  time = millis() + <span class="number">10</span>*<span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    draw_fn();</span><br><span class="line">    FPS10++;</span><br><span class="line">  &#125; <span class="keyword">while</span>( millis() &lt; time );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> FPS10;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> u8d_tab[<span class="number">3</span>]  = &#123; <span class="number">100</span>, <span class="number">10</span>, <span class="number">1</span> &#125; ;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">u8dp</span><span class="params">(<span class="type">char</span> * dest, <span class="type">uint8_t</span> v)</span>&#123;</span><br><span class="line">  <span class="type">uint8_t</span> pos;</span><br><span class="line">  <span class="type">uint8_t</span> d;</span><br><span class="line">  <span class="type">uint8_t</span> c;</span><br><span class="line">  <span class="keyword">for</span>( pos = <span class="number">0</span>; pos &lt; <span class="number">3</span>; pos++ )</span><br><span class="line">  &#123;</span><br><span class="line">      d = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      c = *(u8d_tab+pos);</span><br><span class="line">      <span class="keyword">while</span>( v &gt;= c )</span><br><span class="line">      &#123;</span><br><span class="line">	v -= c;</span><br><span class="line">	d++;</span><br><span class="line">      &#125;</span><br><span class="line">      dest[pos] = d;</span><br><span class="line">  &#125;  </span><br><span class="line">  dest[<span class="number">3</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">u8d</span><span class="params">(<span class="type">uint8_t</span> v, <span class="type">uint8_t</span> d)</span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> buf[<span class="number">8</span>];</span><br><span class="line">  d = <span class="number">3</span>-d;</span><br><span class="line">  <span class="keyword">return</span> u8dp(buf, v) + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">convert_FPS</span><span class="params">(<span class="type">uint16_t</span> fps)</span> &#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> buf[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, u8d( (<span class="type">uint8_t</span>)(fps/<span class="number">10</span>), <span class="number">3</span>));</span><br><span class="line">  buf[<span class="number">3</span>] =  <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">  buf[<span class="number">4</span>] = (fps % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  buf[<span class="number">5</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_result</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">uint16_t</span> fps)</span>  &#123;</span><br><span class="line">  ucg.clearScreen();</span><br><span class="line">  ucg.setFont(ucg_font_helvR18_tr);</span><br><span class="line">  ucg.setColor(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">25</span>);</span><br><span class="line">  ucg.print(s);</span><br><span class="line">  ucg.setPrintPos(<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">  ucg.print(convert_FPS(fps));  </span><br><span class="line">  delay(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Task1code</span><span class="params">(<span class="type">void</span> * parameter)</span> &#123;</span><br><span class="line">  Serial.print(<span class="string">&quot;Task1 running on core &quot;</span>);</span><br><span class="line">  Serial.println(xPortGetCoreID());</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    vTaskDelay(<span class="number">10</span>);</span><br><span class="line">    show_result(<span class="string">&quot;Text&quot;</span>, measure(draw_text));</span><br><span class="line">    show_result(<span class="string">&quot;Box&quot;</span>, measure(draw_box));</span><br><span class="line">    show_result(<span class="string">&quot;Gradient&quot;</span>, measure(draw_gradient_box));</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  motor.loopFOC();</span><br><span class="line">  motor.move(target_angle);</span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="复杂应用"><a href="#复杂应用" class="headerlink" title="复杂应用"></a>复杂应用</h2><h3 id="无线配网"><a href="#无线配网" class="headerlink" title="无线配网"></a>无线配网</h3><p>这个其实工作量挺大的，直接抄<a href="https://blog.csdn.net/qq_41650023/article/details/124674493">别人抄的了</a></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h5><details>
  <summary>main.ino</summary>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;WiFiUser.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> resetPin = <span class="number">0</span>;                    <span class="comment">//设置重置按键引脚,用于删除WiFi信息</span></span><br><span class="line"><span class="type">int</span> connectTimeOut_s = <span class="number">15</span>;                 <span class="comment">//WiFi连接超时时间，单位秒</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  pinMode(resetPin, INPUT_PULLUP);     <span class="comment">//按键上拉输入模式(默认高电平输入,按下时下拉接到低电平)</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);                <span class="comment">//波特率</span></span><br><span class="line">  LEDinit();                           <span class="comment">//LED用于显示WiFi状态</span></span><br><span class="line">  connectToWiFi(connectTimeOut_s);     <span class="comment">//连接wifi，传入的是wifi连接等待时间15s</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!digitalRead(resetPin)) <span class="comment">//长按5秒(P0)清除网络配置信息</span></span><br><span class="line">  &#123;</span><br><span class="line">    delay(<span class="number">5000</span>);              <span class="comment">//哈哈哈哈，这样不准确</span></span><br><span class="line">    <span class="keyword">if</span> (!digitalRead(resetPin)) </span><br><span class="line">    &#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;\n按键已长按5秒,正在清空网络连保存接信息.&quot;</span>);</span><br><span class="line">      restoreWiFi();     <span class="comment">//删除保存的wifi信息</span></span><br><span class="line">      ESP.restart();              <span class="comment">//重启复位esp32</span></span><br><span class="line">      Serial.println(<span class="string">&quot;已重启设备.&quot;</span>);<span class="comment">//有机会读到这里吗？</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  checkDNS_HTTP();                  <span class="comment">//检测客户端DNS&amp;HTTP请求，也就是检查配网页面那部分</span></span><br><span class="line">  checkConnect(<span class="literal">true</span>);               <span class="comment">//检测网络连接状态，参数true表示如果断开重新连接</span></span><br><span class="line"> </span><br><span class="line">  delay(<span class="number">30</span>); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

</details>

<h5 id="库头文件"><a href="#库头文件" class="headerlink" title="库头文件"></a>库头文件</h5><details>
  <summary>WiFiUser.h</summary>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __WIFIUSER_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WIFIUSER_H__</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DNSServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WebServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESPmDNS.h&gt;</span>      <span class="comment">//用于设备域名 MDNS.begin(&quot;esp32&quot;)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;esp_wifi.h&gt;</span>     <span class="comment">//用于esp_wifi_restore() 删除保存的wifi信息</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> LED;                         <span class="comment">//设置LED引脚</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span>* HOST_NAME;                 <span class="comment">//设置设备名</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> connectTimeOut_s;                 <span class="comment">//WiFi连接超时时间，单位秒</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//===========需要调用的函数===========</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkConnect</span><span class="params">(<span class="type">bool</span> reConnect)</span>;    <span class="comment">//检测wifi是否已经连接</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">restoreWiFi</span><span class="params">()</span>;                   <span class="comment">//删除保存的wifi信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LEDinit</span><span class="params">()</span>;                       <span class="comment">//LED初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkDNS_HTTP</span><span class="params">()</span>;                 <span class="comment">//检测客户端DNS&amp;HTTP请求</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">connectToWiFi</span><span class="params">(<span class="type">int</span> timeOut_s)</span>;    <span class="comment">//连接WiFi</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//===========内部函数===========</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span>;                    <span class="comment">//处理网站根目录的访问请求</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleConfigWifi</span><span class="params">()</span> ;             <span class="comment">//提交数据后的提示页面</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>;                <span class="comment">//处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSoftAP</span><span class="params">()</span>;                    <span class="comment">//进入AP模式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initDNS</span><span class="params">()</span>;                       <span class="comment">//开启DNS服务器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initWebServer</span><span class="params">()</span>;                 <span class="comment">//初始化WebServer</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">scanWiFi</span><span class="params">()</span>;                      <span class="comment">//扫描附近的WiFi，为了显示在配网界面</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wifiConfig</span><span class="params">()</span>;                    <span class="comment">//配置配网功能</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">blinkLED</span><span class="params">(<span class="type">int</span> led, <span class="type">int</span> n, <span class="type">int</span> t)</span>; <span class="comment">//LED闪烁函数        //用不上LED可删除</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

</details>

<h5 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h5><details>
  <summary>WiFiUser.cpp</summary>
这个程序原作者写了`WiFi.hostname(HOST_NAME);`实测报错，注释掉也不影响使用

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;WiFiUser.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> byte DNS_PORT = <span class="number">53</span>;                  <span class="comment">//设置DNS端口号</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> webPort = <span class="number">80</span>;                    <span class="comment">//设置Web端口号</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* AP_SSID  = <span class="string">&quot;ESP32-4_1&quot;</span>;        <span class="comment">//设置AP热点名称</span></span><br><span class="line"><span class="comment">//const char* AP_PASS  = &quot;&quot;;               //这里不设置设置AP热点密码</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* HOST_NAME = <span class="string">&quot;MY_ESP32&quot;</span>;        <span class="comment">//设置设备名</span></span><br><span class="line">String scanNetworksID = <span class="string">&quot;&quot;</span>;                <span class="comment">//用于储存扫描到的WiFi ID</span></span><br><span class="line"> </span><br><span class="line">IPAddress <span class="title function_">apIP</span><span class="params">(<span class="number">192</span>, <span class="number">168</span>, <span class="number">4</span>, <span class="number">1</span>)</span>;            <span class="comment">//设置AP的IP地址</span></span><br><span class="line"> </span><br><span class="line">String wifi_ssid = <span class="string">&quot;&quot;</span>;                     <span class="comment">//暂时存储wifi账号密码</span></span><br><span class="line">String wifi_pass = <span class="string">&quot;&quot;</span>;                     <span class="comment">//暂时存储wifi账号密码</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LED = <span class="number">2</span>;                         <span class="comment">//设置LED引脚</span></span><br><span class="line"> </span><br><span class="line">DNSServer dnsServer;                       <span class="comment">//创建dnsServer实例</span></span><br><span class="line">WebServer <span class="title function_">server</span><span class="params">(webPort)</span>;                 <span class="comment">//开启web服务, 创建TCP SERVER,参数: 端口号,最大连接数</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROOT_HTML  <span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;WIFI&lt;/title&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;&lt;/head&gt;&lt;style type=\&quot;text/css\&quot;&gt;.input&#123;display: block; margin-top: 10px;&#125;.input span&#123;width: 100px; float: left; float: left; height: 36px; line-height: 36px;&#125;.input input&#123;height: 30px;width: 200px;&#125;.btn&#123;width: 120px; height: 35px; background-color: #000000; border:0px; color:#ffffff; margin-top:15px; margin-left:100px;&#125;&lt;/style&gt;&lt;body&gt;&lt;form method=\&quot;POST\&quot; action=\&quot;configwifi\&quot;&gt;&lt;label class=\&quot;input\&quot;&gt;&lt;span&gt;WiFi SSID&lt;/span&gt;&lt;input type=\&quot;text\&quot; name=\&quot;ssid\&quot; value=\&quot;\&quot;&gt;&lt;/label&gt;&lt;label class=\&quot;input\&quot;&gt;&lt;span&gt;WiFi PASS&lt;/span&gt; &lt;input type=\&quot;text\&quot;  name=\&quot;pass\&quot;&gt;&lt;/label&gt;&lt;input class=\&quot;btn\&quot; type=\&quot;submit\&quot; name=\&quot;submit\&quot; value=\&quot;Submie\&quot;&gt; &lt;p&gt;&lt;span&gt; Nearby wifi:&lt;/P&gt;&lt;/form&gt;&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 处理网站根目录的访问请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (server.hasArg(<span class="string">&quot;selectSSID&quot;</span>)) &#123;</span><br><span class="line">    server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, ROOT_HTML + scanNetworksID + <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);   <span class="comment">//scanNetWprksID是扫描到的wifi</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, ROOT_HTML + scanNetworksID + <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 提交数据后的提示页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleConfigWifi</span><span class="params">()</span>               <span class="comment">//返回http状态</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (server.hasArg(<span class="string">&quot;ssid&quot;</span>))          <span class="comment">//判断是否有账号参数</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;got ssid:&quot;</span>);</span><br><span class="line">    wifi_ssid = server.arg(<span class="string">&quot;ssid&quot;</span>);   <span class="comment">//获取html表单输入框name名为&quot;ssid&quot;的内容</span></span><br><span class="line"> </span><br><span class="line">    Serial.println(wifi_ssid);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span>                                <span class="comment">//没有参数</span></span><br><span class="line">  &#123; </span><br><span class="line">    Serial.println(<span class="string">&quot;error, not found ssid&quot;</span>);</span><br><span class="line">    server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;error, not found ssid&quot;</span>); <span class="comment">//返回错误页面</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//密码与账号同理</span></span><br><span class="line">  <span class="keyword">if</span> (server.hasArg(<span class="string">&quot;pass&quot;</span>)) </span><br><span class="line">  &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;got password:&quot;</span>);</span><br><span class="line">    wifi_pass = server.arg(<span class="string">&quot;pass&quot;</span>);  <span class="comment">//获取html表单输入框name名为&quot;pwd&quot;的内容</span></span><br><span class="line">    Serial.println(wifi_pass);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;error, not found password&quot;</span>);</span><br><span class="line">    server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;error, not found password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;SSID：&quot;</span> + wifi_ssid + <span class="string">&quot;&lt;br /&gt;password:&quot;</span> + wifi_pass + <span class="string">&quot;&lt;br /&gt;已取得WiFi信息,正在尝试连接,请手动关闭此页面。&quot;</span>); <span class="comment">//返回保存成功页面</span></span><br><span class="line">  delay(<span class="number">2000</span>);</span><br><span class="line">  WiFi.softAPdisconnect(<span class="literal">true</span>);     <span class="comment">//参数设置为true，设备将直接关闭接入点模式，即关闭设备所建立的WiFi网络。</span></span><br><span class="line">  server.close();                  <span class="comment">//关闭web服务</span></span><br><span class="line">  WiFi.softAPdisconnect();         <span class="comment">//在不输入参数的情况下调用该函数,将关闭接入点模式,并将当前配置的AP热点网络名和密码设置为空值.</span></span><br><span class="line">  Serial.println(<span class="string">&quot;WiFi Connect SSID:&quot;</span> + wifi_ssid + <span class="string">&quot;  PASS:&quot;</span> + wifi_pass);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (WiFi.status() != WL_CONNECTED)    <span class="comment">//wifi没有连接成功</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;开始调用连接函数connectToWiFi()..&quot;</span>);</span><br><span class="line">    connectToWiFi(connectTimeOut_s);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;提交的配置信息自动连接成功..&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>           <span class="comment">// 当浏览器请求的网络资源无法在服务器找到时通过此自定义函数处理</span></span><br><span class="line">&#123;           </span><br><span class="line">  handleRoot();                 <span class="comment">//访问不存在目录则返回配置页面</span></span><br><span class="line">  <span class="comment">//   server.send(404, &quot;text/plain&quot;, &quot;404: Not found&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 进入AP模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSoftAP</span><span class="params">()</span> &#123;</span><br><span class="line">  WiFi.mode(WIFI_AP);                                           <span class="comment">//配置为AP模式</span></span><br><span class="line">  WiFi.softAPConfig(apIP, apIP, IPAddress(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>));   <span class="comment">//设置AP热点IP和子网掩码</span></span><br><span class="line">  <span class="keyword">if</span> (WiFi.softAP(AP_SSID))                                     <span class="comment">//开启AP热点,如需要密码则添加第二个参数</span></span><br><span class="line">  &#123;                           </span><br><span class="line">    <span class="comment">//打印相关信息</span></span><br><span class="line">    Serial.println(<span class="string">&quot;ESP-32S SoftAP is right.&quot;</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;Soft-AP IP address = &quot;</span>);</span><br><span class="line">    Serial.println(WiFi.softAPIP());                                                <span class="comment">//接入点ip</span></span><br><span class="line">    Serial.println(String(<span class="string">&quot;MAC address = &quot;</span>)  + WiFi.softAPmacAddress().c_str());    <span class="comment">//接入点mac</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span>                                                  <span class="comment">//开启AP热点失败</span></span><br><span class="line">  &#123; </span><br><span class="line">    Serial.println(<span class="string">&quot;WiFiAP Failed&quot;</span>);</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">    Serial.println(<span class="string">&quot;restart now...&quot;</span>);</span><br><span class="line">    ESP.restart();                                      <span class="comment">//重启复位esp32</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 开启DNS服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initDNS</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (dnsServer.start(DNS_PORT, <span class="string">&quot;*&quot;</span>, apIP))   <span class="comment">//判断将所有地址映射到esp32的ip上是否成功</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;start dnsserver success.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;start dnsserver failed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化WebServer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initWebServer</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (MDNS.begin(<span class="string">&quot;esp32&quot;</span>))      <span class="comment">//给设备设定域名esp32,完整的域名是esp32.local</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;MDNS responder started&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//必须添加第二个参数HTTP_GET，以下面这种格式去写，否则无法强制门户</span></span><br><span class="line">  server.on(<span class="string">&quot;/&quot;</span>, HTTP_GET, handleRoot);                      <span class="comment">//  当浏览器请求服务器根目录(网站首页)时调用自定义函数handleRoot处理，设置主页回调函数，必须添加第二个参数HTTP_GET，否则无法强制门户</span></span><br><span class="line">  server.on(<span class="string">&quot;/configwifi&quot;</span>, HTTP_POST, handleConfigWifi);     <span class="comment">//  当浏览器请求服务器/configwifi(表单字段)目录时调用自定义函数handleConfigWifi处理</span></span><br><span class="line">                                                            </span><br><span class="line">  server.onNotFound(handleNotFound);                         <span class="comment">//当浏览器请求的网络资源无法在服务器找到时调用自定义函数handleNotFound处理</span></span><br><span class="line"> </span><br><span class="line">  server.begin();                                           <span class="comment">//启动TCP SERVER</span></span><br><span class="line"> </span><br><span class="line">  Serial.println(<span class="string">&quot;WebServer started!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 扫描附近的WiFi，为了显示在配网界面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">scanWiFi</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.println(<span class="string">&quot;scan start&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;---------&gt;&quot;</span>);</span><br><span class="line">  <span class="comment">// 扫描附近WiFi</span></span><br><span class="line">  <span class="type">int</span> n = WiFi.scanNetworks();</span><br><span class="line">  Serial.println(<span class="string">&quot;scan done&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;no networks found&quot;</span>);</span><br><span class="line">    scanNetworksID = <span class="string">&quot;no networks found&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(n);</span><br><span class="line">    Serial.println(<span class="string">&quot; networks found&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="comment">// Print SSID and RSSI for each network found</span></span><br><span class="line">      Serial.print(i + <span class="number">1</span>);</span><br><span class="line">      Serial.print(<span class="string">&quot;: &quot;</span>);</span><br><span class="line">      Serial.print(WiFi.SSID(i));</span><br><span class="line">      Serial.print(<span class="string">&quot; (&quot;</span>);</span><br><span class="line">      Serial.print(WiFi.RSSI(i));</span><br><span class="line">      Serial.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">      Serial.println((WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? <span class="string">&quot; &quot;</span> : <span class="string">&quot;*&quot;</span>);</span><br><span class="line">      scanNetworksID += <span class="string">&quot;&lt;P&gt;&quot;</span> + WiFi.SSID(i) + <span class="string">&quot;&lt;/P&gt;&quot;</span>;</span><br><span class="line">      delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 连接WiFi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">connectToWiFi</span><span class="params">(<span class="type">int</span> timeOut_s)</span> &#123;</span><br><span class="line">  <span class="comment">//WiFi.hostname(HOST_NAME);             //设置设备名</span></span><br><span class="line">  Serial.println(<span class="string">&quot;进入connectToWiFi()函数&quot;</span>);</span><br><span class="line">  WiFi.mode(WIFI_STA);                        <span class="comment">//设置为STA模式并连接WIFI</span></span><br><span class="line">  WiFi.setAutoConnect(<span class="literal">true</span>);                  <span class="comment">//设置自动连接    </span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (wifi_ssid != <span class="string">&quot;&quot;</span>)                        <span class="comment">//wifi_ssid不为空，意味着从网页读取到wifi</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;用web配置信息连接.&quot;</span>);</span><br><span class="line">    WiFi.begin(wifi_ssid.c_str(), wifi_pass.c_str()); <span class="comment">//c_str(),获取该字符串的指针</span></span><br><span class="line">    wifi_ssid = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    wifi_pass = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span>                                        <span class="comment">//未从网页读取到wifi</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;用nvs保存的信息连接.&quot;</span>);</span><br><span class="line">    WiFi.begin();                             <span class="comment">//begin()不传入参数，默认连接上一次连接成功的wifi</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> Connect_time = <span class="number">0</span>;                       <span class="comment">//用于连接计时，如果长时间连接不成功，复位设备</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED)       <span class="comment">//等待WIFI连接成功</span></span><br><span class="line">  &#123;  </span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);                        <span class="comment">//一共打印30个点点</span></span><br><span class="line">    digitalWrite(LED, !digitalRead(LED));     </span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Connect_time ++;</span><br><span class="line">                                       </span><br><span class="line">    <span class="keyword">if</span> (Connect_time &gt; <span class="number">2</span> * timeOut_s)         <span class="comment">//长时间连接不上，重新进入配网页面</span></span><br><span class="line">    &#123; </span><br><span class="line">      digitalWrite(LED, LOW);</span><br><span class="line">      Serial.println(<span class="string">&quot;&quot;</span>);                     <span class="comment">//主要目的是为了换行符</span></span><br><span class="line">      Serial.println(<span class="string">&quot;WIFI autoconnect fail, start AP for webconfig now...&quot;</span>);</span><br><span class="line">      wifiConfig();                           <span class="comment">//开始配网功能</span></span><br><span class="line">      <span class="keyword">return</span>;                                 <span class="comment">//跳出 防止无限初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (WiFi.status() == WL_CONNECTED)          <span class="comment">//如果连接成功</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;WIFI connect Success&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;SSID:%s&quot;</span>, WiFi.SSID().c_str());</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;, PSW:%s\r\n&quot;</span>, WiFi.psk().c_str());</span><br><span class="line">    Serial.print(<span class="string">&quot;LocalIP:&quot;</span>);</span><br><span class="line">    Serial.print(WiFi.localIP());</span><br><span class="line">    Serial.print(<span class="string">&quot; ,GateIP:&quot;</span>);</span><br><span class="line">    Serial.println(WiFi.gatewayIP());</span><br><span class="line">    Serial.print(<span class="string">&quot;WIFI status is:&quot;</span>);</span><br><span class="line">    Serial.print(WiFi.status());</span><br><span class="line">    digitalWrite(LED, HIGH);</span><br><span class="line">    server.stop();                            <span class="comment">//停止开发板所建立的网络服务器。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 配置配网功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wifiConfig</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">  initSoftAP();   </span><br><span class="line">  initDNS();        </span><br><span class="line">  initWebServer();  </span><br><span class="line">  scanWiFi();       </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除保存的wifi信息，这里的删除是删除存储在flash的信息。删除后wifi读不到上次连接的记录，需重新配网</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">restoreWiFi</span><span class="params">()</span> &#123;</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">  esp_wifi_restore();  <span class="comment">//删除保存的wifi信息</span></span><br><span class="line">  Serial.println(<span class="string">&quot;连接信息已清空,准备重启设备..&quot;</span>);</span><br><span class="line">  delay(<span class="number">10</span>);</span><br><span class="line">  blinkLED(LED, <span class="number">5</span>, <span class="number">500</span>); <span class="comment">//LED闪烁5次         //关于LED，不需要可删除 </span></span><br><span class="line">  digitalWrite(LED, LOW);                    <span class="comment">//关于LED，不需要可删除</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 检查wifi是否已经连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkConnect</span><span class="params">(<span class="type">bool</span> reConnect)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (WiFi.status() != WL_CONNECTED)           <span class="comment">//wifi连接失败</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (digitalRead(LED) != LOW) </span><br><span class="line">      digitalWrite(LED, LOW);</span><br><span class="line">    <span class="keyword">if</span> (reConnect == <span class="literal">true</span> &amp;&amp; WiFi.getMode() != WIFI_AP &amp;&amp; WiFi.getMode() != WIFI_AP_STA ) </span><br><span class="line">    &#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;WIFI未连接.&quot;</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;WiFi Mode:&quot;</span>);</span><br><span class="line">      Serial.println(WiFi.getMode());</span><br><span class="line">      Serial.println(<span class="string">&quot;正在连接WiFi...&quot;</span>);</span><br><span class="line">      connectToWiFi(connectTimeOut_s);          <span class="comment">//连接wifi函数 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (digitalRead(LED) != HIGH)  </span><br><span class="line">    digitalWrite(LED, HIGH);                    <span class="comment">//wifi连接成功</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LED闪烁函数        //用不上LED可删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">blinkLED</span><span class="params">(<span class="type">int</span> led, <span class="type">int</span> n, <span class="type">int</span> t)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    digitalWrite(led, !digitalRead(led));</span><br><span class="line">    delay(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LED初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LEDinit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  pinMode(LED, OUTPUT);                 <span class="comment">//配置LED口为输出口</span></span><br><span class="line">  digitalWrite(LED, LOW);               <span class="comment">//初始灯灭</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 检测客户端DNS&amp;HTTP请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkDNS_HTTP</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  dnsServer.processNextRequest();   <span class="comment">//检查客户端DNS请求</span></span><br><span class="line">  server.handleClient();            <span class="comment">//检查客户端(浏览器)http请求</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

</details>

<h4 id="使用及解析"><a href="#使用及解析" class="headerlink" title="使用及解析"></a>使用及解析</h4><blockquote>
<p>设备热点配网(Soft AP)：</p>
<ul>
<li>ESP32配置为AP模式</li>
<li>手机or电脑连接ESP32热点，发送WiFi和密码</li>
<li>ESP32设置为STA模式</li>
</ul>
</blockquote>
<blockquote>
<p>LED显示配网状态：</p>
<ul>
<li>LED闪烁：表示正在尝试连接网络</li>
<li>LED常亮：表示网络连接成功</li>
<li>LED常灭：表示等待配网</li>
<li>LED闪烁5次：表示已清除wifi信息</li>
</ul>
</blockquote>
<details>
  <summary>配网界面HTML原代码</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;WIFI</span><br><span class="line">            </span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .input&#123;display: block; margin-top: 10px;&#125;</span><br><span class="line">        .input span&#123;width: 100px; float: left; float: left; height: 36px; line-height: 36px;&#125;</span><br><span class="line">        .input input&#123;height: 30px;width: 200px;&#125;</span><br><span class="line">        .btn&#123;width: 120px; height: 35px; background-color: #000000; border:0px; color:#ffffff; margin-top:15px; margin-left:100px;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form method=&quot;POST&quot; action=&quot;configwifi&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;input&quot;&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    WiFi SSID  </span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; name=&quot;ssid&quot;&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;label class=&quot;input&quot;&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    WiFi PASS</span><br><span class="line">                &lt;/span&gt; </span><br><span class="line">                &lt;input type=&quot;text&quot;  name=&quot;pass&quot;&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;input class=&quot;btn&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submie&quot;&gt;         </span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;span&gt; Nearby wifi:</span><br><span class="line">            &lt;/P&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="硬件设计-开发板制作"><a href="#硬件设计-开发板制作" class="headerlink" title="硬件设计(开发板制作)"></a>硬件设计(开发板制作)</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><blockquote>
<p>ESP32 ­WROOM ­32E 技术规格书</p>
</blockquote>


	<div class="row">
    <embed src="https://www.espressif.com.cn/sites/default/files/documentation/esp32-wroom-32e_esp32-wroom-32ue_datasheet_cn.pdf" width="100%" height="550" type="application/pdf">
	</div>




<blockquote>
<p>ESP32 硬件设计指南</p>
</blockquote>


	<div class="row">
    <embed src="https://www.espressif.com.cn/sites/default/files/documentation/esp32_hardware_design_guidelines_cn.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h2 id="注意事项和启动配置"><a href="#注意事项和启动配置" class="headerlink" title="注意事项和启动配置"></a>注意事项和启动配置</h2><p>模块电源电压为3.3V，一般使用<code>AMS1117-3.3</code>为其供电，其中要注意EN引脚要使用RC电路延迟启动。使用引脚 GPIO0 和 GPIO2 配置启动方式：</p>
<p><img src="/2023/esp32-all-in-one/4fefe86e7eff4265ae7310bb73ff40d5.png"></p>
<p>GPIO2要常态为低电平。当EN引脚处于上升沿时，GPIO0高电平进入SPI启动模式，低电平进入串口下载模式。</p>
<p>自动下载电路能调整boot和en脚的电平变化来满足下载时序，这是一个常用的自动下载电路原理图：<br><img src="/2023/esp32-all-in-one/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230624230937.png" alt="自动下载电路"><br>关于其工作原理众说纷纭，基本都不太一样，我也不是很清楚，实际自己做之后并不能工作，也没能找到原因。</p>
<p>因为自动下载电路不能工作，我自己设计的电路都是直接手动按按钮来配置引脚电平设置芯片启动方式。开发板默认EN拉高，IO2拉低，IO0拉高。直接上电即可进入spi启动模式运行flash的程序，如果上电使用按钮将EN拉低和IO0拉低，IO2依然默认拉低，然后停止下拉EN启动芯片即可进入下载模式。</p>
<h2 id="示例原理图"><a href="#示例原理图" class="headerlink" title="示例原理图"></a>示例原理图</h2><p>这是嘉立创的esp32开发板的<a href="https://oshwhub.com/li-chuang-zhi-neng-ying-jian-bu/esp32-zui-xiao-ji-tong-ban-yan-zheng-ban">方案验证板</a>：<br><img src="/2023/esp32-all-in-one/Schematic_C2979602_ESP32%E6%A8%A1%E5%9D%97%E6%96%B9%E6%A1%88%E9%AA%8C%E8%AF%81%E6%9D%BF_2023-06-22.png"></p>
<h2 id="改进版原理图"><a href="#改进版原理图" class="headerlink" title="改进版原理图"></a>改进版原理图</h2><p>对于常见的esp32开发板我做出了一些修改：</p>
<ul>
<li>针脚改为向上的母座，减少很多接线的麻烦</li>
<li>usb转串口改为更便宜的ch340等(由于不想要自动下载电路使用的ch340n)</li>
<li>使用直插type-c母座方便焊接</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/esp32-all-in-one/QQ%E6%88%AA%E5%9B%BE20230625233426.png"></th>
<th align="center"><img src="/2023/esp32-all-in-one/QQ%E6%88%AA%E5%9B%BE20230625233539.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">原理图</td>
<td align="center">PCB-3D</td>
</tr>
</tbody></table>
<p>这个设计还有一点就是模块化了esp32模组外围电路，包含了启动配置电路等，便于将来直接在其他工程中调用</p>
<blockquote>
<p>2023.6.29:纪念一下第一个正常使用的esp32开发板焊接完成投入使用<del>之前的每个版本都是自动下载电路出现问题这次直接删掉就成功了</del></p>
</blockquote>
<p><img src="/2023/esp32-all-in-one/2958a459c383be845a0020df33fd64e.jpg"></p>
<p>不得不提及一下图片里这个esp32模组的身世，来自于我tb买的esp32开发板，之前一次自制开发板验证过程中准备拆焊买的这个开发板的模组，但是放在焊台上开350度之后就忘记了，二十分钟之后抢救下来发现还能用hhh然后继续用来测试直到现在焊接到了这个新的开发板上</p>
<h1 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h1><h2 id="烧录报错-MD5-of-file-does-not-match-data-in-flash"><a href="#烧录报错-MD5-of-file-does-not-match-data-in-flash" class="headerlink" title="烧录报错 MD5 of file does not match data in flash"></a>烧录报错 MD5 of file does not match data in flash</h2><blockquote>
<p>MD5 of file does not match data in flash</p>
</blockquote>
<ul>
<li>安装<code>esptool.py</code>:<code>python -m pip install esptool</code></li>
<li>运行<code>python -m esptool --port COM5 write_flash_status --non-volatile 0</code> &#x2F;&#x2F;COM5替换成ESP32连接端口</li>
</ul>
<p>出现以下输出即表示成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">esptool.py v2.4.0</span><br><span class="line">Connecting........_</span><br><span class="line">Detecting chip type... ESP8266</span><br><span class="line">Chip is ESP8266EX</span><br><span class="line">Features: WiFi</span><br><span class="line">MAC: b4:e6:2d:68:3b:96</span><br><span class="line">Uploading stub...</span><br><span class="line">Running stub...</span><br><span class="line">Stub running...</span><br><span class="line">Initial flash status: 0x0200</span><br><span class="line">Setting flash status: 0x0000</span><br><span class="line">After flash status: 0x0000</span><br><span class="line">Hard resetting via RTS pin...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意事项：这个命令在进入烧录模式的时候才可以使用，在linux和mac下，一定要使用sudo</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://randomnerdtutorials.com/esp32-pinout-reference-gpios/">https://randomnerdtutorials.com/esp32-pinout-reference-gpios/</a><br><a href="https://deepbluembedded.com/esp32-pwm-tutorial-examples-analogwrite-arduino/">https://deepbluembedded.com/esp32-pwm-tutorial-examples-analogwrite-arduino/</a><br><a href="https://www.jianshu.com/p/6fb40b3d0c6d">https://www.jianshu.com/p/6fb40b3d0c6d</a><br><a href="https://lingshunlab.com/">https://lingshunlab.com/</a><br><a href="https://blog.csdn.net/qq_41868901/article/details/104690524">https://blog.csdn.net/qq_41868901/article/details/104690524</a><br><a href="https://blog.csdn.net/supermodule/article/details/129313032">https://blog.csdn.net/supermodule/article/details/129313032</a><br><a href="https://blog.csdn.net/weixin_42880082/article/details/121055405">https://blog.csdn.net/weixin_42880082/article/details/121055405</a><br><a href="https://blog.csdn.net/weixin_42880082/article/details/120766154">https://blog.csdn.net/weixin_42880082/article/details/120766154</a><br><a href="https://blog.csdn.net/qq_41650023/article/details/124674493">https://blog.csdn.net/qq_41650023/article/details/124674493</a><br><a href="https://triority.cc/2023/xbox-python/">https://triority.cc/2023/xbox-python/</a><br><a href="https://www.cnblogs.com/greyelectron/articles/16327709.html">https://www.cnblogs.com/greyelectron/articles/16327709.html</a><br><a href="https://blog.csdn.net/qq_41868901/article/details/106203642">https://blog.csdn.net/qq_41868901/article/details/106203642</a><br><a href="https://blog.csdn.net/qq_27114397/category_7917392.html">https://blog.csdn.net/qq_27114397/category_7917392.html</a><br><a href="https://blog.csdn.net/weixin_43353164/article/details/105060630">https://blog.csdn.net/weixin_43353164/article/details/105060630</a><br><a href="https://www.yiboard.com/thread-1344-1-1.html">https://www.yiboard.com/thread-1344-1-1.html</a><br><a href="https://blog.csdn.net/qq_62361151/article/details/130102202">https://blog.csdn.net/qq_62361151/article/details/130102202</a><br><a href="https://zhuanlan.zhihu.com/p/145369083">https://zhuanlan.zhihu.com/p/145369083</a><br><a href="https://blog.csdn.net/z755924843/article/details/82704020">https://blog.csdn.net/z755924843/article/details/82704020</a><br><a href="https://blog.csdn.net/xq151750111/article/details/115142727">https://blog.csdn.net/xq151750111/article/details/115142727</a><br><a href="https://blog.csdn.net/Naisu_kun/article/details/86004049">https://blog.csdn.net/Naisu_kun/article/details/86004049</a><br><a href="https://lastminuteengineers.com/handling-esp32-gpio-interrupts-tutorial/">https://lastminuteengineers.com/handling-esp32-gpio-interrupts-tutorial/</a></p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>PCB设计</tag>
        <tag>esp32</tag>
      </tags>
  </entry>
  <entry>
    <title>人脸识别图像分类</title>
    <url>/2023/face-classify/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><h3 id="人脸识别的基本过程"><a href="#人脸识别的基本过程" class="headerlink" title="人脸识别的基本过程"></a>人脸识别的基本过程</h3><ul>
<li>人脸的 68 个基本特征点位置以及顺序。判断 68 个特征点在图像上面是否存在、是否完整；</li>
<li>人脸 detect，这一步主要就是定位人脸在图像中的位置，利用目标检测算法输出人脸位置矩形框；</li>
<li>人脸 shape predictor，这一步就是要找出眼睛眉毛鼻子嘴巴具体的点位；</li>
<li>人脸对齐 alignment，这一步主要是通过投影几何变换出一张标准脸；</li>
<li>人脸识别，这一步就是在对挤的人脸图像上提取 128 维的特征向量，根据特征向量间的距离来进行判断识别。</li>
</ul>
<p>python 中最常用的人脸识别库是基于 C++ 开发的 <code>dlib</code> 库。</p>
<p><code>face_recognition</code> 库是基于 <code>dlib</code> 进行了二次封装，号称世界上最简洁的人脸识别库</p>
<h3 id="库的安装"><a href="#库的安装" class="headerlink" title="库的安装"></a>库的安装</h3><p><code>dlib</code>库目前已经编译好的安装版本只支持 python 3.6 的版本，由于我安装的环境是 python 3.8，因此这里提供一个网络上找到的<a href="dlib-19.19.0-cp38-cp38-win_amd64.whl">编译好的whl文件</a></p>
<p><code>face_recognition</code> 库：</p>
<blockquote>
<p>pip install -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a> face_recognition</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="定位人脸位置"><a href="#定位人脸位置" class="headerlink" title="定位人脸位置"></a>定位人脸位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*-coding:GBK -*-</span><br><span class="line">import face_recognition</span><br><span class="line">from PIL import Image</span><br><span class="line">import cv2</span><br><span class="line"> </span><br><span class="line"># 通过 load_image_file 方法加载待识别图片</span><br><span class="line">image = image = cv2.imread(&#x27;girls.jpg&#x27;)</span><br><span class="line"> </span><br><span class="line"># 通过 face_locations 得到图像中所有人脸位置</span><br><span class="line">face_locations = face_recognition.face_locations(image)</span><br><span class="line"> </span><br><span class="line">for face_location in face_locations:</span><br><span class="line">    top, right, bottom, left = face_location   # 结报操作，得到每张人脸的四个位置信息</span><br><span class="line">    print(&quot;已识别到人脸部位，限速区域为：top&#123;&#125;, right&#123;&#125;, bottom&#123;&#125;, left&#123;&#125;&quot;.format(top, right, bottom, left))</span><br><span class="line">    # face_image = image[top:bottom, left:right]</span><br><span class="line">    # pil_image = Image.fromarray(face_image)</span><br><span class="line">    # pil_image.show()</span><br><span class="line">    start = (left, top)</span><br><span class="line">    end = (right, bottom)</span><br><span class="line"> </span><br><span class="line">    # 在图片上绘制矩形框</span><br><span class="line">    cv2.rectangle(image, start, end, (0,0,255), thickness=2)</span><br><span class="line"> </span><br><span class="line">cv2.imshow(&#x27;window&#x27;, image)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure>

<p><img src="/2023/face-classify/face_range.png" alt="face_range"></p>
<h4 id="人脸关键特征点识别"><a href="#人脸关键特征点识别" class="headerlink" title="人脸关键特征点识别"></a>人脸关键特征点识别</h4><p><code>face_landmarks</code> 识别人脸关键特征点。返回值是包含面部特征点字典的列表，列表长度就是图像中的人脸数。</p>
<p>面部特征包括以下几个部分：nose_bridge (鼻梁)、right _eyebrow (右眼眉)、left_eyebrow (左眼眉)、right_eye（右眼)、left_eye（左眼)、chin(下巴)、 nose_tip（下鼻部） 、bottom_lip (下嘴唇) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*-coding:GBK -*-</span><br><span class="line">import face_recognition</span><br><span class="line">from PIL import Image, ImageDraw</span><br><span class="line"> </span><br><span class="line">image = face_recognition.load_image_file(&#x27;E:/boys.jpg&#x27;)</span><br><span class="line"> </span><br><span class="line">face_landmarks_list = face_recognition.face_landmarks(image)</span><br><span class="line"> </span><br><span class="line">pil_image = Image.fromarray(image)</span><br><span class="line">d = ImageDraw.Draw(pil_image)   # 生成一张PIL图像</span><br><span class="line"> </span><br><span class="line">for face_landmarks in face_landmarks_list:</span><br><span class="line">    facial_features = [</span><br><span class="line">        &#x27;chin&#x27;,</span><br><span class="line">        &#x27;left_eyebrow&#x27;,</span><br><span class="line">        &#x27;right_eyebrow&#x27;,</span><br><span class="line">        &#x27;nose_bridge&#x27;,</span><br><span class="line">        &#x27;nose_tip&#x27;,</span><br><span class="line">        &#x27;left_eye&#x27;,</span><br><span class="line">        &#x27;right_eye&#x27;,</span><br><span class="line">        &#x27;bottom_lip&#x27;</span><br><span class="line">    ]</span><br><span class="line">    for facial_feature in facial_features:</span><br><span class="line">        # print(&quot;每个人的面部特征显示在以下为位置：&#123;&#125;&quot;.format(facial_feature))</span><br><span class="line">        d.line(face_landmarks[facial_feature], width=5)   # 直接调用PIL中的line方法在PIL图像中绘制线条，帮助我们观察特征点</span><br><span class="line"> </span><br><span class="line">pil_image.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2023/face-classify/face_landmarks.png" alt="face_landmarks"></p>
<h4 id="面部信息识别与匹配"><a href="#面部信息识别与匹配" class="headerlink" title="面部信息识别与匹配"></a>面部信息识别与匹配</h4><p><code>face_encodings</code> 获取图像文件中所有面部编码信息。</p>
<p>返回值是一个编码列表，参数仍然是要识别的图像对象。如果后续访问时，需要注意加上索引或遍历来进行访问。每张人脸的编码信息是一个 128 维向量。<br>面部编码信息是进行人像对比的重要参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*-coding:GBK -*-</span><br><span class="line">import face_recognition</span><br><span class="line"> </span><br><span class="line">image = face_recognition.load_image_file(&#x27;E:/boys.jpg&#x27;)</span><br><span class="line"> </span><br><span class="line"># 返回值是一个列表</span><br><span class="line">face_encodings = face_recognition.face_encodings(image)</span><br><span class="line">for face_encoding in face_encodings:</span><br><span class="line">    print(&quot;信息编码长度为：&#123;&#125;\n编码信息为：&#123;&#125;&quot;.format(len(face_encoding), face_encoding))</span><br></pre></td></tr></table></figure>

<p><code>compare_faces</code> 由面部编码信息进行面部识别匹配。</p>
<p>主要用于匹配两个面部特征编码，利用这两个特征向量的内积来衡量相似度，根据阈值确认是否是同一个人。<br>第一个参数就是一个面部编码列表， 第二个参数就是给出单个面部编码， compare_faces 会将第二个参数中的编码信息与第一个参数中的所有编码信息依次匹配，返回值是一个布尔列表，匹配成功则返回 True，匹配失败则返回 False，顺序与第一个参数中脸部编码顺序一致。<br>参数里有一个 <code>tolerance = 0.6</code>，可以根据实际的效果进行调整，一般经验值是 <code>0.39</code>。<code>tolerance</code> 值越小，匹配越严格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*-coding:GBK -*-</span><br><span class="line">import face_recognition</span><br><span class="line"> </span><br><span class="line"># 加载一张合照</span><br><span class="line">image1 = face_recognition.load_image_file(&#x27;2.jpeg&#x27;)</span><br><span class="line"># 加载一张单人照</span><br><span class="line">image2 = face_recognition.load_image_file(&#x27;1.jpg&#x27;)</span><br><span class="line"></span><br><span class="line">known_face_encodings = face_recognition.face_encodings(image1)</span><br><span class="line"></span><br><span class="line">compare_face_encodings = face_recognition.face_encodings(image2)[0]</span><br><span class="line"></span><br><span class="line">matches = face_recognition.compare_faces(known_face_encodings, compare_face_encodings)</span><br><span class="line">print(matches)</span><br></pre></td></tr></table></figure>
<h2 id="图像分类"><a href="#图像分类" class="headerlink" title="图像分类"></a>图像分类</h2>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>春节礼炮两千响！</title>
    <url>/2023/firecrackers-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="两千响礼炮送上，"><a href="#两千响礼炮送上，" class="headerlink" title="两千响礼炮送上，"></a>两千响礼炮送上，</h1><h1 id="祝大家元旦快乐！"><a href="#祝大家元旦快乐！" class="headerlink" title="祝大家元旦快乐！"></a>祝大家元旦快乐！</h1>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=904581131&bvid=BV1dP4y1v7tC&cid=946589928&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>


]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>整活</tag>
      </tags>
  </entry>
  <entry>
    <title>首次出差——重庆</title>
    <url>/2023/first-business-trip/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于线下竞赛"><a href="#关于线下竞赛" class="headerlink" title="关于线下竞赛"></a>关于线下竞赛</h1><p>从大一开始就在做这个比赛了，但是我十分巧妙的错开了每次线下比赛的机会，大一时候疫情放假在家，沈阳疫情严重没能离开沈阳，大二时候智能车时间又和电赛冲突，显然智能车我能让学弟去电赛我自己是不可能缺席的，所以留在北京四天三夜，如今大三了，本来以为已经没有机会再去现场了，结果临危受命又带了一队学弟学妹，又有了去现场的机会，于是就有了这次去重庆的旅行</p>
<p>比赛本来应该是8-10日进行，因为天气提前一天结束，返回的飞机是11日，10日一整天没有安排但是比赛真的太累了就一直在睡觉了，所以照片基本都是飞机上拍的了</p>
<h1 id="飞机"><a href="#飞机" class="headerlink" title="飞机"></a>飞机</h1><p>来回两班飞机都是日落时间，选座位时候特地选择能看到日落的窗边：</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"DSC04886.png","alt":""},{"url":"DSC05063-已增强-降噪.png","alt":""},{"url":"DSC05086-已增强-降噪.png","alt":""},{"url":"DSC04902-已增强-降噪.png","alt":""},{"url":"DSC05040-已增强-降噪.png","alt":""},{"url":"DSC05054-已增强-降噪.png","alt":""},{"url":"IMG_20231207_175913_1-已增强-降噪.png","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>返回这一天也是北京初雪的日子，对于第一场雪来说已经不小了呢<br><img src="/2023/first-business-trip/DSC05058-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"><br><img src="/2023/first-business-trip/IMG_20231211_162810_1-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"></p>
<h1 id="街景"><a href="#街景" class="headerlink" title="街景"></a>街景</h1><p>真的很喜欢这种有生活气息的城市，北京给人的的感觉还是太资本化了<br><img src="/2023/first-business-trip/DSC04955-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"><br><img src="/2023/first-business-trip/DSC04954-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"><br><img src="/2023/first-business-trip/DSC04951-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"></p>
<h1 id="人像"><a href="#人像" class="headerlink" title="人像"></a>人像</h1><p>用的相机是a7m2+50f1.8，不尝试一下拍人像怎么行<br><img src="/2023/first-business-trip/DSC04879.png"><br><img src="/2023/first-business-trip/DSC04960-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"><br><img src="/2023/first-business-trip/DSC04966-%E5%B7%B2%E5%A2%9E%E5%BC%BA-%E9%99%8D%E5%99%AA.png"></p>
]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>全原图文章</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的fluid主题设置文章首页隐藏</title>
    <url>/2023/fluid-index-hide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有时候首页只想放一些关于编程的文章，日记一类不希望被放在首页上直接被看到，但是又想通过写文章记录下来。</p>
<p>最后实现了在文章<code>.md</code>文件开头添加<code>notshow</code>配置项，当<code>notshow = true</code>时首页不显示。</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>在网上搜索看到这个:<br><a href="https://blog.csdn.net/m0_37323771/article/details/80672271">【Hexo】 设置首页隐藏指定文章</a></p>
<p>这篇文章作者使用的是<code>next</code>主题，我用的是<code>fluid</code>，并没有他文章里所写的<code>index.swig</code>文件。但是在同路径下有<code>index.ejs</code>。虽然没有学过ejs但是可以看出来两个文件应该是相同的作用，即生成<code>index.html</code>文件。</p>
<p>作者使用的方法是for循环里添加一个if判断，我去查看了<a href="https://ejs.bootcss.com/">ejs的文档</a>，其中第一个示例就是关于if：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% if (user) &#123; %&gt;</span><br><span class="line">  &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<p>因此，打开fluid的文件<code>index.ejs</code>，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">if (theme.index.slogan.enable) &#123;</span><br><span class="line">  page.subtitle = theme.index.slogan.text || config.subtitle || &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">page.banner_img = theme.index.banner_img</span><br><span class="line">page.banner_img_height = theme.index.banner_img_height</span><br><span class="line">page.banner_mask_alpha = theme.index.banner_mask_alpha</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;% page.posts.each(function (post) &#123; %&gt;</span><br><span class="line">  &lt;div class=&quot;row mx-auto index-card&quot;&gt;</span><br><span class="line">    &lt;% var post_url = url_for(post.path), cover = post.cover || theme.post.default_cover %&gt;</span><br><span class="line">    &lt;% if(cover) &#123; %&gt;</span><br><span class="line">      &lt;div class=&quot;col-12 col-md-4 m-auto index-img&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;</span><br><span class="line">          &lt;img src=&quot;&lt;%= url_for(cover) %&gt;&quot; alt=&quot;&lt;%= post.title %&gt;&quot;&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;article class=&quot;col-12 col-md-&lt;%= cover ? &#x27;8&#x27; : &#x27;12&#x27; %&gt; mx-auto index-info&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;index-header&quot;&gt;</span><br><span class="line">        &lt;% if (theme.index.post_sticky &amp;&amp; theme.index.post_sticky.enable &amp;&amp; post.sticky &gt; 0) &#123; %&gt;</span><br><span class="line">          &lt;i class=&quot;index-pin &lt;%= theme.index.post_sticky &amp;&amp; theme.index.post_sticky.icon %&gt;&quot; title=&quot;Pin on top&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;</span><br><span class="line">          &lt;%= post.title %&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a class=&quot;index-excerpt&quot; href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;% var excerpt = post.description || post.excerpt || (theme.index.auto_excerpt.enable &amp;&amp; post.content) %&gt;</span><br><span class="line">          &lt;%- escape_html(strip_html(excerpt).substring(0, 200).trim()).replace(/\n/g, &#x27; &#x27;) %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;index-btm post-metas&quot;&gt;</span><br><span class="line">        &lt;% if(theme.index.post_meta.date ) &#123; %&gt;</span><br><span class="line">          &lt;div class=&quot;post-meta mr-3&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-date&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;time datetime=&quot;&lt;%= full_date(post.date, &#x27;YYYY-MM-DD HH:mm&#x27;) %&gt;&quot; pubdate&gt;</span><br><span class="line">              &lt;%- date(post.date, config.date_format) %&gt;</span><br><span class="line">            &lt;/time&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.index.post_meta.category &amp;&amp; post.categories.length &gt; 0) &#123; %&gt;</span><br><span class="line">          &lt;div class=&quot;post-meta mr-3 d-flex align-items-center&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-category&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;%- partial(&#x27;_partials/category-chains&#x27;, &#123; categories: post.categories, limit: 1 &#125;) %&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.index.post_meta.tag &amp;&amp; post.tags.length &gt; 0) &#123; %&gt;</span><br><span class="line">          &lt;div class=&quot;post-meta&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-tags&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;% post.tags.each(function(tag)&#123; %&gt;</span><br><span class="line">              &lt;a href=&quot;&lt;%= url_for(tag.path) %&gt;&quot;&gt;#&lt;%- tag.name %&gt;&lt;/a&gt;</span><br><span class="line">            &lt;% &#125;) %&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/article&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;% &#125;) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- partial(&#x27;_partials/paginator&#x27;) %&gt;</span><br></pre></td></tr></table></figure>
<p>猜测从这里开始进入每篇文章的循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% page.posts.each(function (post) &#123; %&gt;</span><br></pre></td></tr></table></figure>
<p>因此把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% if(post.notshow != true) &#123; %&gt;</span><br></pre></td></tr></table></figure>
<p>放在下面，如果在文章开头写了<code>notshow = true</code>，那么文章将不会被加入到首页文章列表。</p>
<p>最后在下面补上大括号结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<h2 id="修改后文件"><a href="#修改后文件" class="headerlink" title="修改后文件"></a>修改后文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">if (theme.index.slogan.enable) &#123;</span><br><span class="line">  page.subtitle = theme.index.slogan.text || config.subtitle || &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">page.banner_img = theme.index.banner_img</span><br><span class="line">page.banner_img_height = theme.index.banner_img_height</span><br><span class="line">page.banner_mask_alpha = theme.index.banner_mask_alpha</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;% page.posts.each(function (post) &#123; %&gt;</span><br><span class="line">  &lt;% if(post.notshow != true) &#123; %&gt;</span><br><span class="line">  &lt;div class=&quot;row mx-auto index-card&quot;&gt;</span><br><span class="line">    &lt;% var post_url = url_for(post.path), cover = post.cover || theme.post.default_cover %&gt;</span><br><span class="line">    &lt;% if(cover) &#123; %&gt;</span><br><span class="line">      &lt;div class=&quot;col-12 col-md-4 m-auto index-img&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;</span><br><span class="line">          &lt;img src=&quot;&lt;%= url_for(cover) %&gt;&quot; alt=&quot;&lt;%= post.title %&gt;&quot;&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;article class=&quot;col-12 col-md-&lt;%= cover ? &#x27;8&#x27; : &#x27;12&#x27; %&gt; mx-auto index-info&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;index-header&quot;&gt;</span><br><span class="line">        &lt;% if (theme.index.post_sticky &amp;&amp; theme.index.post_sticky.enable &amp;&amp; post.sticky &gt; 0) &#123; %&gt;</span><br><span class="line">          &lt;i class=&quot;index-pin &lt;%= theme.index.post_sticky &amp;&amp; theme.index.post_sticky.icon %&gt;&quot; title=&quot;Pin on top&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;</span><br><span class="line">          &lt;%= post.title %&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a class=&quot;index-excerpt&quot; href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;% var excerpt = post.description || post.excerpt || (theme.index.auto_excerpt.enable &amp;&amp; post.content) %&gt;</span><br><span class="line">          &lt;%- escape_html(strip_html(excerpt).substring(0, 200).trim()).replace(/\n/g, &#x27; &#x27;) %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;index-btm post-metas&quot;&gt;</span><br><span class="line">        &lt;% if(theme.index.post_meta.date ) &#123; %&gt;</span><br><span class="line">          &lt;div class=&quot;post-meta mr-3&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-date&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;time datetime=&quot;&lt;%= full_date(post.date, &#x27;YYYY-MM-DD HH:mm&#x27;) %&gt;&quot; pubdate&gt;</span><br><span class="line">              &lt;%- date(post.date, config.date_format) %&gt;</span><br><span class="line">            &lt;/time&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.index.post_meta.category &amp;&amp; post.categories.length &gt; 0) &#123; %&gt;</span><br><span class="line">          &lt;div class=&quot;post-meta mr-3 d-flex align-items-center&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-category&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;%- partial(&#x27;_partials/category-chains&#x27;, &#123; categories: post.categories, limit: 1 &#125;) %&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.index.post_meta.tag &amp;&amp; post.tags.length &gt; 0) &#123; %&gt;</span><br><span class="line">          &lt;div class=&quot;post-meta&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-tags&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;% post.tags.each(function(tag)&#123; %&gt;</span><br><span class="line">              &lt;a href=&quot;&lt;%= url_for(tag.path) %&gt;&quot;&gt;#&lt;%- tag.name %&gt;&lt;/a&gt;</span><br><span class="line">            &lt;% &#125;) %&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/article&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- partial(&#x27;_partials/paginator&#x27;) %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>无刷电机foc控制</title>
    <url>/2023/foc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前面的"><a href="#前面的" class="headerlink" title="前面的"></a>前面的</h1><h2 id="硬件装置"><a href="#硬件装置" class="headerlink" title="硬件装置"></a>硬件装置</h2><h3 id="电机"><a href="#电机" class="headerlink" title="电机"></a>电机</h3><p>买了两种，都是320kV的，一个是小云台电机，一个是来自咸鱼的5008植保电机[卖家说单机拉力三公斤hhh实测相电阻0.15电流恐怖]。<br><img src="/img/ff589b65d94461294ee7c69f4bd4eef.jpg" alt="5008无刷电机"></p>
<h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><p>最开始自己模仿<a href="https://u.lceda.cn/hvan/h7_core_foc">这个</a>画了一个驱动板<br><img src="/2023/foc/Schematic_%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BAfoc%E6%8E%A7%E5%88%B6_2023-02-26.png" alt="原理图"><br>但是可能是因为焊接手艺实在是不过关，预驱芯片似乎不起作用，然后后来买了一个<code>simplefoc mini</code>模块省点事。</p>
<h3 id="电流采样放大LM324"><a href="#电流采样放大LM324" class="headerlink" title="电流采样放大LM324"></a>电流采样放大LM324</h3><p>既然驱动板不能用hhh先用插件元件试试其他部分能不能行得通。买了几个LM324插件，尝试放大采样电阻的电压。采样电阻为R005，如果走3A电流就是0.015V</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/foc/v2-abd5e69844d4492757efeb33822e2a2e_720w.webp"></th>
<th align="center"><img src="/2023/foc/v2-722fd7ff159cb1eaec68caf7f0f54c59_720w.webp"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">LM324 引脚图</td>
<td align="center">功能图</td>
</tr>
</tbody></table>
<p>最开始以为失败了，后来发现是我示波器用了高阻探头……换低阻之后就搞定了。</p>
<h2 id="simplefoc控制"><a href="#simplefoc控制" class="headerlink" title="simplefoc控制"></a>simplefoc控制</h2><h3 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h3><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br></pre></td></tr></table></figure>
<h4 id="配置电机控制器参数"><a href="#配置电机控制器参数" class="headerlink" title="配置电机控制器参数"></a>配置电机控制器参数</h4><p>首先定义电机控制器控制和使能引脚</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// BLDCDriver3PWM( pin_pwmA, pin_pwmB, pin_pwmC, enable (optional))</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(11, 10, 9, 8);</span><br></pre></td></tr></table></figure>
<p>然后在<code>setup()</code>函数中定义频率电压等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// pwm频率[Hz]</span><br><span class="line">driver.pwm_frequency = 20000;</span><br><span class="line">// 电源电压[V]</span><br><span class="line">driver.voltage_power_supply = 12;</span><br><span class="line">// 电机最大电压</span><br><span class="line">driver.voltage_limit = 12;</span><br></pre></td></tr></table></figure>
<p>最后在<code>setup()</code>函数中将电机控制器初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">driver.init();</span><br></pre></td></tr></table></figure>

<h4 id="配置位置传感器"><a href="#配置位置传感器" class="headerlink" title="配置位置传感器"></a>配置位置传感器</h4><p>SimpleFOC支持三种常用传感器，以及自定义传感器：</p>
<ul>
<li>编码器：光学、电容、磁性编码器（ABI）</li>
<li>磁性传感器：SPI、I2C、模拟或 PWM</li>
<li>霍尔传感器：3x霍尔探空仪、磁性传感器（UVW 接口）</li>
</ul>
<p>这是官网提供的磁编码器(英文是Magnetic sensors)例程</p>
<blockquote>
<p>基于14位SPI的磁传感器的初始化示例，例如<code>AS5047u</code>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line">// MagneticSensorSPI(int cs, float bit_resolution, int angle_register)</span><br><span class="line">MagneticSensorSPI sensor = MagneticSensorSPI(10, 14, 0x3FFF);</span><br><span class="line">void setup()&#123;</span><br><span class="line">  // initialize magnetic sensor hardware</span><br><span class="line">  sensor.init();</span><br><span class="line">&#125;</span><br><span class="line">void loop() &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>对于我使用的<code>as5600</code>磁编码器，将传感器定义改成这样写即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br></pre></td></tr></table></figure>
<p>记得然后在<code>setup()</code>函数中初始化传感器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sensor.init();</span><br></pre></td></tr></table></figure>
<h4 id="配置电流传感器"><a href="#配置电流传感器" class="headerlink" title="配置电流传感器"></a>配置电流传感器</h4><p>目前我在用的驱动板没有电流检测功能，也就是说这部分可以不写，但是未来驱动那个5008肯定要有的，使用也写一下</p>
<p>电流检测有两种，一种是<code>In-line current sensing</code>一种是<code>Low-side current sensing</code>，两者区别主要在于采集电阻的位置：</p>
<table>
<thead>
<tr>
<th align="center"><img src="/2023/foc/in-line.png"></th>
<th align="center"><img src="/2023/foc/low-side.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">In-line current sensing</td>
<td align="center">Low-side current sensing</td>
</tr>
</tbody></table>
<p>前者简单易用，无论PWM占空比的状态如何，在这些分流电阻器上测量的电流都是电机相电流。缺点就是硬件上，这种电流检测架构需要高精度双向放大器。</p>
<p>而后者是最常见的电流检测技术。它不需要特殊的电流检测放大器。这种方法的主要缺点是，由于只有当相应的低侧MOSFET导通时，通过分流电阻的电流才是相电流，因此只能在这些时刻测量它。PWM频率通常为20至50 kHz，这意味着低侧MOSFET每秒打开和关闭20，000至50，000次，因此PWM设置和ADC采集之间的同步非常重要。</p>
<p>对于我倾向于使用第二种方案。这种方案需要注意的事情就是，首先PWM频率越高，ADC读取电流值的时间就越短，但是更高的PWM频率将产生更平滑的操作。经验法则是保持在20kHz左右。 <code>driver.pwm_frequency = 20000;</code>;其次，由于ADC转换必须与所有相位上产生的PWM同步，因此为所有相位生成的所有PWM必须对齐，建议确保为驱动器选择的PWM引脚都属于同一定时器</p>
<p>下面开始配置电流采集对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// shunt_resistor 电流采集电阻值</span><br><span class="line">// gain 放大增益</span><br><span class="line">// phA/phB/phC</span><br><span class="line">LowsideCurrentSense current_sense  = LowsideCurrentSense(0.01, 1000, A0, A1, A2);</span><br></pre></td></tr></table></figure>

<p>由于电流检测要求在所有低侧MOSFET导通时（当所有相位均接地时）精确触发ADC采集，因此要在<code>setup()</code>将电流采集与电机配置连接，并初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">current_sense.linkDriver(&amp;driver);</span><br><span class="line">current_sense.init();</span><br></pre></td></tr></table></figure>
<h4 id="配置电机"><a href="#配置电机" class="headerlink" title="配置电机"></a>配置电机</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  BLDCMotor(int pp, (optional R, KV))</span><br><span class="line">//  - pp  - 极对数</span><br><span class="line">//  - R   - 相电阻 - 可选项</span><br><span class="line">//  - KV  - KV值[rpm/V] - 可选项</span><br><span class="line">BLDCMotor motor = BLDCMotor(7);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>经验法则：KV建议将输入值设置比实际值高50-70%，或者通过实验确定的值。根据电机机械结构，适当的值将在电机额定值的100%-200%之间。</p>
</blockquote>
<p>然后连接驱动器和位置或电流传感器(如果有)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motor.linkSensor(&amp;sensor);</span><br><span class="line">motor.linkDriver(&amp;driver);</span><br><span class="line">motor.linkCurrentSense(&amp;current_sense);</span><br></pre></td></tr></table></figure>

<h4 id="配置PWM调制类型"><a href="#配置PWM调制类型" class="headerlink" title="配置PWM调制类型"></a>配置PWM调制类型</h4><p>BLDC 电机实现了四种类型的磁场定向控制调制类型：</p>
<ul>
<li>正弦PWM调制</li>
<li>空间矢量PWM调制</li>
<li>块换向<ul>
<li>梯形 120</li>
<li>梯形 150</li>
</ul>
</li>
</ul>
<p>正弦PWM和空间矢量换向模式将产生正弦电流和平稳运行，FOC转矩控制需要正弦电流，因此必须使用这两种之一。</p>
<p>块换向的执行速度更快，更适合更高的速度，因此建议使用带霍尔传感器的梯形120换向。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 选择FOC控制模式</span><br><span class="line">// FOCModulationType::SinePWM; (默认)</span><br><span class="line">// FOCModulationType::SpaceVectorPWM;</span><br><span class="line">// FOCModulationType::Trapezoid_120;</span><br><span class="line">// FOCModulationType::Trapezoid_150;</span><br><span class="line">motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br></pre></td></tr></table></figure>
<h4 id="配置传感器和电机对准参数：电机和传感器对准的电压设置"><a href="#配置传感器和电机对准参数：电机和传感器对准的电压设置" class="headerlink" title="配置传感器和电机对准参数：电机和传感器对准的电压设置"></a>配置传感器和电机对准参数：电机和传感器对准的电压设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motor.voltage_sensor_align = 3; // 默认为3V</span><br></pre></td></tr></table></figure>

<h4 id="配置位置传感器偏移：指定传感器绝对零点"><a href="#配置位置传感器偏移：指定传感器绝对零点" class="headerlink" title="配置位置传感器偏移：指定传感器绝对零点"></a>配置位置传感器偏移：指定传感器绝对零点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motor.sensor_offset = 0; // 默认 0 rad</span><br></pre></td></tr></table></figure>
<h4 id="配置转矩控制方式"><a href="#配置转矩控制方式" class="headerlink" title="配置转矩控制方式"></a>配置转矩控制方式</h4><p>Arduino SimpleFOC库中实现了 3 种不同的转矩控制模式：</p>
<ul>
<li>电压模式</li>
<li>直流电流</li>
<li>FOC电流<br>直流电流和FOC电流需要电流检测，并且控制电流并限制电机正在消耗的实际电流，而电压模式近似于电机电流，不使用任何电流检测。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// TorqueControlType::voltage(默认)</span><br><span class="line">// TorqueControlType::dc_current</span><br><span class="line">// TorqueControlType::foc_current</span><br><span class="line">motor.torque_controller = TorqueControlType::foc_current;</span><br></pre></td></tr></table></figure>
<h4 id="配置运动控制参数"><a href="#配置运动控制参数" class="headerlink" title="配置运动控制参数"></a>配置运动控制参数</h4>Arduino SimpleFOC库中实现了 3 种不同的闭环控制策略：</li>
<li>扭矩控制</li>
<li>速度控制</li>
<li>位置&#x2F;角度运动控制</li>
</ul>
<p>此外，SimpleFOC库还实现了两种开环控制策略：</p>
<ul>
<li>速度开环控制</li>
<li>位置开环控制</li>
</ul>
<blockquote>
<p>此参数没有默认值，必须在实时执行开始之前设置。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// MotionControlType::torque      - 扭矩控制</span><br><span class="line">// MotionControlType::velocity    - 速度控制</span><br><span class="line">// MotionControlType::angle       - 位置/角度运动控制</span><br><span class="line">// MotionControlType::velocity_openloop    - 速度开环控制</span><br><span class="line">// MotionControlType::angle_openloop       - 位置开环控制</span><br><span class="line">motor.controller = MotionControlType::angle;</span><br></pre></td></tr></table></figure>
<h4 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h4><p>通过运行功能终止配置，该函数使用配置的值准备所有硬件和软件电机组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motor.init();</span><br></pre></td></tr></table></figure>
<h4 id="配置预设参数跳过位置校准"><a href="#配置预设参数跳过位置校准" class="headerlink" title="配置预设参数跳过位置校准"></a>配置预设参数跳过位置校准</h4><p>如果使用的是绝对传感器，例如磁传感器或霍尔传感器，就可以提供传感器偏移和传感器方向以避免对齐过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// motor.initFOC(zero_electric_offset(rad), sensor_direction(CW/CCW));</span><br><span class="line">// 这里给出的参数就是我在as5600编码器下使用的</span><br><span class="line">motor.initFOC(3.2, Direction::CCW);</span><br></pre></td></tr></table></figure>
<p>可以通过运行示例来查找这些值。<code>find_sensor_offset_and_direction.ino</code></p>
<h4 id="跳过电流校准"><a href="#跳过电流校准" class="headerlink" title="跳过电流校准"></a>跳过电流校准</h4><p>但要确保所有增益都设置良好，并且所有ADC引脚都与驱动器&#x2F;电机相位对应。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">current_sense.skip_align  = true; // 默认false</span><br></pre></td></tr></table></figure>
<h4 id="实时运动控制"><a href="#实时运动控制" class="headerlink" title="实时运动控制"></a>实时运动控制</h4><h5 id="控制方法"><a href="#控制方法" class="headerlink" title="控制方法"></a>控制方法</h5><p>Arduino SimpleFOC库的实时运动控制通过两个功能实现：</p>
<ul>
<li>motor.loopFOC() - 低水平扭矩控制</li>
<li>motor.move(float target) - 高级运动控制</li>
</ul>
<p>功能行为直接取决于使用的扭矩控制模式。如果使用电压模式，它从传感器获取电流电机角度，将其转换为电角度并变换q轴<code>loopFOC()</code>Uq电压命令设置电机到适当的相电压<code>motor.voltage_q</code>ua,ub和uc。而如果将其用于FOC电流模式的直流，则读取电流传感器并运行闭环电流控制。</p>
<p>此功能在电压模式和电流控制模式下的执行时间都至关重要。因此，尽可能快地执行函数非常重要。</p>
<blockquote>
<p>如果电机在开环中运行，此功能将不起作用</p>
</blockquote>
<p>最后，一旦我们有办法设置扭矩命令（当前我q或电压uq） 到 电机 使用 FOC 算法，我们可以进行运动控制。</p>
<p>该方法执行算法的运动控制循环。如果由变量控制。它执行纯扭矩环路、速度环路或角度环路。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 执行由电机配置的运动控制循环的函数</span><br><span class="line">// 此函数不需要在每次循环执行时运行 - 取决于用途</span><br><span class="line">// target：扭矩、角度或速度，或取决于电机控制器</span><br><span class="line">// 如果没有配置，电机将会使用他可变的电机目标设置</span><br><span class="line">motor.move(target);</span><br></pre></td></tr></table></figure>
<p>它接收一个参数，该参数是当前用户定义的目标值：</p>
<ul>
<li>如果用户运行速度闭环或速度开环，函数将解释为目标速度</li>
<li>如果用户运行角度闭环或角度开环，会将参数解释为目标角度</li>
<li>如果用户运行扭矩闭环，函数会将参数解释为目标电压或当前Iq（如果提供相位电阻）。<h5 id="运动控制缩减采样"><a href="#运动控制缩减采样" class="headerlink" title="运动控制缩减采样"></a>运动控制缩减采样</h5>对于许多运动控制应用，为每个运动控制回路运行多个转矩控制回路是有意义的。这会对平滑度产生很大影响，并可以提供更好的高速性能。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 缩减采样值</span><br><span class="line">motor.motion_downsample = 5; // 次数 (默认 0 - ~)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>下采样的不同值可能需要对运动参数进行一些调整</p>
</blockquote>
<h4 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h4></li>
<li><a href="https://docs.simplefoc.com/monitoring">监控功能</a></li>
<li><a href="https://docs.simplefoc.com/communication">电机命令</a></li>
</ul>
<h3 id="位置闭环控制"><a href="#位置闭环控制" class="headerlink" title="位置闭环控制"></a>位置闭环控制</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>运行后电机就会锁定在0度位置，可以使用串口T命令设置目标角度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line"></span><br><span class="line">// 定义位置传感器：编码器AS5600</span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line">// 定义无刷电机控制器：极对数和控制引脚</span><br><span class="line">BLDCMotor motor = BLDCMotor(7);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(11, 10, 9, 8);</span><br><span class="line"></span><br><span class="line">// 设置目标角度</span><br><span class="line">float target_angle = 0;</span><br><span class="line"></span><br><span class="line">// 串口目标角度控制命令</span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line">void doTarget(char* cmd) &#123; command.scalar(&amp;target_angle, cmd); &#125;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  // 位置传感器初始化和电机连接</span><br><span class="line">  sensor.init();</span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  // 电机控制器配置：电源电压参数，初始化和电机连接</span><br><span class="line">  driver.voltage_power_supply = 8;</span><br><span class="line">  driver.init();</span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  // FOC控制模式</span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line"></span><br><span class="line">  // 设置使用的控制循环</span><br><span class="line">  motor.controller = MotionControlType::angle;</span><br><span class="line"></span><br><span class="line">  // PID参数设置</span><br><span class="line">  motor.PID_velocity.P = 0.05f;</span><br><span class="line">  motor.PID_velocity.I = 0.5;</span><br><span class="line">  motor.PID_velocity.D = 0;</span><br><span class="line"></span><br><span class="line">  // 电机配置：限制电压</span><br><span class="line">  motor.voltage_limit = 2;</span><br><span class="line"></span><br><span class="line">  // 低通滤波器</span><br><span class="line">  motor.LPF_velocity.Tf = 0.01f;</span><br><span class="line"></span><br><span class="line">  // 角度P控制</span><br><span class="line">  motor.P_angle.P = 20;</span><br><span class="line">  // 位置控制最大运行速度</span><br><span class="line">  motor.velocity_limit = 20;</span><br><span class="line"></span><br><span class="line">  //串口配置</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  // 电机初始化</span><br><span class="line">  motor.init();</span><br><span class="line">  // 使用预设位置传感器校准参数并开启FOC控制</span><br><span class="line">  motor.initFOC(3.2, Direction::CCW);</span><br><span class="line"></span><br><span class="line">  // 定义T命令控制目标角度</span><br><span class="line">  command.add(&#x27;T&#x27;, doTarget, &quot;target angle&quot;);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(&quot;Motor ready.&quot;));</span><br><span class="line">  Serial.println(F(&quot;Set the target angle using serial terminal:&quot;));</span><br><span class="line">  _delay(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line"></span><br><span class="line">  // FOC主函数，运行越快越好</span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  // 运动控制函数：速度位置或电压，运行频率可以比`motor.loopFOC();`慢一些，也可以在代码中运行`motor.move()`或设置电机角度目标值</span><br><span class="line">  motor.move(target_angle);</span><br><span class="line"></span><br><span class="line">  // 与串口绘图仪一起使用监视电机变量的功能 - 显著减慢执行速度!</span><br><span class="line">  //motor.monitor();</span><br><span class="line"></span><br><span class="line">  // 接收目标角度命令</span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用：按钮分档"><a href="#应用：按钮分档" class="headerlink" title="应用：按钮分档"></a>应用：按钮分档</h4><p>分为3档，间隔60度，注意如果间隔增大要减小pid控制的p值。如果间距过小，p值就会过大，导致剧烈抖动，可以适当增大低通滤波器的参数来抑制抖动。实测d值控制效果不明显，一般只会导致抖动变成高频抖动……</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line">// 定义位置传感器：编码器AS5600</span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line">// 定义无刷电机控制器</span><br><span class="line">BLDCMotor motor = BLDCMotor(7);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(11, 10, 9, 8);</span><br><span class="line">// 设置定点距离(1.3125也就是60度)</span><br><span class="line">float angle_dis = 1.3125;</span><br><span class="line">float angle_dis2 = angle_dis/2;</span><br><span class="line">void setup()&#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  // 位置传感器初始化</span><br><span class="line">  sensor.init();</span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line">  // 电机控制器配置</span><br><span class="line">  driver.voltage_power_supply = 8;</span><br><span class="line">  driver.init();</span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line">  // 控制模式</span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line">  motor.controller = MotionControlType::angle;</span><br><span class="line">  // 参数设置</span><br><span class="line">  motor.PID_velocity.P = 0.1;  //运动pid控制</span><br><span class="line">  motor.PID_velocity.I = 0.1;</span><br><span class="line">  motor.PID_velocity.D = 0;</span><br><span class="line">  motor.voltage_limit = 1.5;</span><br><span class="line">  motor.LPF_velocity.Tf = 5.0f; //低通滤波器</span><br><span class="line">  motor.P_angle.P = 20; //角度p控制</span><br><span class="line">  motor.velocity_limit = 20;</span><br><span class="line">  // 电机初始化</span><br><span class="line">  motor.init();</span><br><span class="line">  motor.initFOC(3.2, Direction::CCW);</span><br><span class="line">  _delay(100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop()&#123;</span><br><span class="line">  motor.loopFOC();</span><br><span class="line">  float ang = sensor.getAngle();</span><br><span class="line">  if(ang&gt;angle_dis2)&#123;</span><br><span class="line">    motor.move(-angle_dis);</span><br><span class="line">  &#125;else if(ang&lt;angle_dis2&amp;&amp;ang&gt;-angle_dis2)&#123;</span><br><span class="line">    motor.move(0);</span><br><span class="line">  &#125;else if(ang&lt;-angle_dis2)&#123;</span><br><span class="line">    motor.move(angle_dis);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6PWM接口控制"><a href="#6PWM接口控制" class="headerlink" title="6PWM接口控制"></a>6PWM接口控制</h3><p>该类提供了一个大多数常见的6路PWM 无刷直流驱动器的抽象层。基本上所有用6路PWM 信号运行的无刷直流驱动器都可以用这个类</p>
<h4 id="硬件设置"><a href="#硬件设置" class="headerlink" title="硬件设置"></a>硬件设置</h4><p>要创建接口到无刷直流驱动器，需要为电机的每个相分别指定两个PWM引脚</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)</span><br><span class="line">//  - phA_h, phA_l - A相pwm引脚 高/低副 </span><br><span class="line">//  - phB_h, phB_l - B相pwm引脚 高/低副 </span><br><span class="line">//  - phB_h, phC_l - C相pwm引脚 高/低副</span><br><span class="line">//  - enable pin    - （可选输入）</span><br><span class="line">BLDCDriver6PWM motor = BLDCDriver6PWM(5,6, 9,10, 3,11, 8);</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 需要根据硬件进行 PWM 配置</p>
</blockquote>
<p>Arduino UNO 和所有基于 atmega328 的电路板只有6个PWM引脚。所以为了使用 BLDCDrievr6PWM ，就要用上所有PWM引脚，分别是 3,5,6,9,10和11 。此外，为了算法运行正常，要求每个相的高&#x2F;低侧一对PWM引脚用同一个定时器，因此，Atmega328中每对PWM引脚的定时器分配如下：</p>
<table>
<thead>
<tr>
<th align="center">TIM0</th>
<th align="center">TIM1</th>
<th align="center">TIM2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5,6</td>
<td align="center">9,10</td>
<td align="center">3,11</td>
</tr>
</tbody></table>
<p>也就是设置为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BLDCMotor motor = BLDCMotor(7);</span><br><span class="line">BLDCDriver6PWM driver = BLDCDriver6PWM(5,6, 9,10, 3,11);</span><br></pre></td></tr></table></figure>

<h1 id="后面的"><a href="#后面的" class="headerlink" title="后面的"></a>后面的</h1><p>分个前后面是因为这两段间隔时间太久了，学习的方向也发生很大变化</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>之前的5008已经卖掉了，小电机倒是还在，还买了几个4010云台电机和118mm定子的微型电机</p>
<h2 id="电路-PCB"><a href="#电路-PCB" class="headerlink" title="电路(PCB)"></a>电路(PCB)</h2><p>电路是基于自己设计的4010驱动板：</p>
<table>
<thead>
<tr>
<th align="center">

	<div class="row">
    <embed src="Schematic_esp32-drv8313-4010_2023-07-06.pdf" width="100%" height="550" type="application/pdf">
	</div>


</th>
<th align="center">原理图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/foc/QQ%E6%88%AA%E5%9B%BE20230706031048.png"></td>
<td align="center">PCB-3D</td>
</tr>
</tbody></table>
<h2 id="simplefoc程序"><a href="#simplefoc程序" class="headerlink" title="simplefoc程序"></a>simplefoc程序</h2><p>主控还是esp32，esp32跟atmega328p相比多了个步骤就是配置iic引脚，永远记不住怎么写，在这备份一份以后过来抄</p>
<h3 id="esp32-as5600位置闭环"><a href="#esp32-as5600位置闭环" class="headerlink" title="esp32+as5600位置闭环"></a>esp32+as5600位置闭环</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ESP32 position motion control example with magnetic sensor</span><br><span class="line"> */</span><br><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line"></span><br><span class="line">// SPI Magnetic sensor instance (AS5047U example)</span><br><span class="line">// MISO 12</span><br><span class="line">// MOSI 9</span><br><span class="line">// SCK 14</span><br><span class="line">// magnetic sensor instance - SPI</span><br><span class="line">//MagneticSensorSPI sensor = MagneticSensorSPI(AS5147_SPI, 15);</span><br><span class="line"></span><br><span class="line">// I2C Magnetic sensor instance (AS5600 example)</span><br><span class="line">// make sure to use the pull-ups!!</span><br><span class="line">// SDA 21</span><br><span class="line">// SCL 22</span><br><span class="line">// magnetic sensor instance - I2C</span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line">// Analog output Magnetic sensor instance (AS5600)</span><br><span class="line">// MagneticSensorAnalog sensor = MagneticSensorAnalog(A1, 14, 1020);</span><br><span class="line"></span><br><span class="line">// Motor instance</span><br><span class="line">BLDCMotor motor = BLDCMotor(11);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(25, 26, 27, 14);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// angle set point variable</span><br><span class="line">float target_angle = 0;</span><br><span class="line">// instantiate the commander</span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line">void doTarget(char* cmd) &#123; command.scalar(&amp;target_angle, cmd); &#125;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line"></span><br><span class="line">  // initialise magnetic sensor hardware</span><br><span class="line">  Wire.setPins(33,32);</span><br><span class="line">  Wire.begin();</span><br><span class="line">  sensor.init(&amp;Wire);</span><br><span class="line">  // link the motor to the sensor</span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  // driver config</span><br><span class="line">  // power supply voltage [V]</span><br><span class="line">  driver.voltage_power_supply = 12;</span><br><span class="line">  driver.init();</span><br><span class="line">  // link the motor and the driver</span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  // choose FOC modulation (optional)</span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line"></span><br><span class="line">  // set motion control loop to be used</span><br><span class="line">  motor.controller = MotionControlType::angle;</span><br><span class="line"></span><br><span class="line">  // contoller configuration</span><br><span class="line">  // default parameters in defaults.h</span><br><span class="line"></span><br><span class="line">  // velocity PI controller parameters</span><br><span class="line">  motor.PID_velocity.P = 0.2f;</span><br><span class="line">  motor.PID_velocity.I = 20;</span><br><span class="line">  // maximal voltage to be set to the motor</span><br><span class="line">  motor.voltage_limit = 6;</span><br><span class="line"></span><br><span class="line">  // velocity low pass filtering time constant</span><br><span class="line">  // the lower the less filtered</span><br><span class="line">  motor.LPF_velocity.Tf = 0.01f;</span><br><span class="line"></span><br><span class="line">  // angle P controller</span><br><span class="line">  motor.P_angle.P = 20;</span><br><span class="line">  // maximal velocity of the position control</span><br><span class="line">  motor.velocity_limit = 40;</span><br><span class="line"></span><br><span class="line">  // use monitoring with serial</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  // comment out if not needed</span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // initialize motor</span><br><span class="line">  motor.init();</span><br><span class="line">  // align sensor and start FOC</span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  // add target command T</span><br><span class="line">  command.add(&#x27;T&#x27;, doTarget, &quot;target angle&quot;);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(&quot;Motor ready.&quot;));</span><br><span class="line">  Serial.println(F(&quot;Set the target angle using serial terminal:&quot;));</span><br><span class="line">  _delay(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line"></span><br><span class="line">  // main FOC algorithm function</span><br><span class="line">  // the faster you run this function the better</span><br><span class="line">  // Arduino UNO loop  ~1kHz</span><br><span class="line">  // Bluepill loop ~10kHz</span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  // Motion control function</span><br><span class="line">  // velocity, position or voltage (defined in motor.controller)</span><br><span class="line">  // this function can be run at much lower frequency than loopFOC() function</span><br><span class="line">  // You can also use motor.move() and set the motor.target in the code</span><br><span class="line">  motor.move(target_angle);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // function intended to be used with serial plotter to monitor motor variables</span><br><span class="line">  // significantly slowing the execution down!!!!</span><br><span class="line">  // motor.monitor();</span><br><span class="line"></span><br><span class="line">  // user communication</span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="esp32-LM324力矩闭环-未经验证"><a href="#esp32-LM324力矩闭环-未经验证" class="headerlink" title="esp32+LM324力矩闭环(未经验证)"></a>esp32+LM324力矩闭环(未经验证)</h3><p>我在LM324周围实际焊接的电阻是1K和100K，所以实际上电压会放大101倍，就按100倍算，也就是1A时电阻产生电压为0.01V，ADC电压为1V，esp32默认ADC范围是3.3V，也就是电流可以达到3.3A已经超过驱动芯片drv8313最大值2.5A了，量程刚刚好。三相线都有电流检测功能。</p>
<p>这个程序还没有通过验证。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line">BLDCMotor motor = BLDCMotor(11);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(25, 26, 27, 14);</span><br><span class="line"></span><br><span class="line">float target_voltage = 3;</span><br><span class="line"></span><br><span class="line">LowsideCurrentSense current_sense  = LowsideCurrentSense(0.01f, 101.0f, 34, 39, 36);</span><br><span class="line"></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line">void doTarget(char* cmd) &#123; command.scalar(&amp;target_voltage, cmd); &#125;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line"></span><br><span class="line">  Wire.setPins(33,32);</span><br><span class="line">  Wire.begin();</span><br><span class="line">  sensor.init(&amp;Wire);</span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  driver.voltage_power_supply = 12;</span><br><span class="line">  driver.init();</span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  // aligning voltage </span><br><span class="line">  motor.voltage_sensor_align = 3;</span><br><span class="line"></span><br><span class="line">  current_sense.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line">  motor.torque_controller = TorqueControlType::dc_current;</span><br><span class="line">  motor.controller = MotionControlType::torque;</span><br><span class="line"></span><br><span class="line">  // PID参数 - 默认</span><br><span class="line">  motor.PID_current_q.P = 5;                       // 3    - Arduino UNO/MEGA</span><br><span class="line">  //motor.PID_current_q.I = 1000;                    // 300  - Arduino UNO/MEGA</span><br><span class="line">  //motor.PID_current_q.D = 0;</span><br><span class="line"></span><br><span class="line">  Serial.begin(115200);</span><br><span class="line"></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  motor.init();</span><br><span class="line"></span><br><span class="line">  if (current_sense.init())  Serial.println(&quot;Current sense init success!&quot;);</span><br><span class="line">  else&#123;</span><br><span class="line">    Serial.println(&quot;Current sense init failed!&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  motor.linkCurrentSense(&amp;current_sense);</span><br><span class="line"></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  current_sense.driverAlign(motor.voltage_sensor_align);</span><br><span class="line"></span><br><span class="line">  command.add(&#x27;T&#x27;, doTarget, &quot;target current&quot;);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(&quot;Motor ready.&quot;));</span><br><span class="line">  Serial.println(F(&quot;Set the target current using serial terminal:&quot;));</span><br><span class="line">  _delay(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  motor.move(target_voltage);</span><br><span class="line"></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="drv8313驱动-as5600磁编码器-ina240电流检测-验证完成，上面两个方案现在意义不大"><a href="#drv8313驱动-as5600磁编码器-ina240电流检测-验证完成，上面两个方案现在意义不大" class="headerlink" title="drv8313驱动+as5600磁编码器+ina240电流检测(验证完成，上面两个方案现在意义不大)"></a>drv8313驱动+as5600磁编码器+ina240电流检测(验证完成，上面两个方案现在意义不大)</h3><table>
<thead>
<tr>
<th align="center"><img src="/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240628004934.png"></th>
<th align="center"><img src="/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240628004959.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="ProDoc_P1_2024-06-28.epro">原理图</a></td>
<td align="center"><a href="ProDoc_PCB1_2024-06-28.epro">PCB</a></td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">7</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// current sensor</span></span><br><span class="line">InlineCurrentSense current_sense = InlineCurrentSense(<span class="number">0.01f</span>, <span class="number">50.0f</span>, <span class="number">34</span>, <span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// instantiate the commander.2</span></span><br><span class="line"></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;motor.target, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensora</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line">  <span class="comment">// link the driver to the current sense</span></span><br><span class="line">  current_sense.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// current sense init hardware</span></span><br><span class="line">  current_sense.init();</span><br><span class="line">  <span class="comment">// link the current sense to the motor</span></span><br><span class="line">  motor.linkCurrentSense(&amp;current_sense);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set torque mode:</span></span><br><span class="line">  motor.torque_controller = TorqueControlType::foc_current; </span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::torque;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// foc current control parameters (Arduino UNO/Mega)</span></span><br><span class="line">  motor.PID_current_q.P = <span class="number">5</span>;</span><br><span class="line">  motor.PID_current_q.I= <span class="number">300</span>;</span><br><span class="line">  motor.PID_current_d.P= <span class="number">5</span>;</span><br><span class="line">  motor.PID_current_d.I = <span class="number">300</span>;</span><br><span class="line">  motor.LPF_current_q.Tf = <span class="number">0.01</span>; </span><br><span class="line">  motor.LPF_current_d.Tf = <span class="number">0.01</span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial </span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target current&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Set the target current using serial terminal:&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  motor.move();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>文档&amp;笔记</category>
        <category>作品&amp;项目总结</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>电力电子</tag>
      </tags>
  </entry>
  <entry>
    <title>一个iic通道控制多个相同地址的从设备</title>
    <url>/2023/iic-oleds/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>一个小键盘，有四个按键，想要在每一个键帽上安装一个0.49寸的oled灯。主控使用esp32，如果直接使用软件iic，那么需要4个通道也就是8个引脚来控制。由于还有许多其他功能，导致io不足以如此挥霍。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>屏幕全部使用同一个iic通道。SCL时钟线接在一起，SDA数据线由主设备出发分别经过一个二极管连接到每个从设备。然后从设备的SDA经过一个pnp三极管连接到一个单片机io引脚。如果希望不修改这个屏幕的数据，就把这个从设备的引脚拉高，无法再接收数据，就可以实现单独控制。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>上电后两个屏幕都会在c和v之间循环切换，如果串口输入0，一个屏幕就会暂停，另一个屏幕正常闪烁，串口输入1恢复正常</p>
<p>顺便实测当字号使用24时候刷新时间是2500us左右，字号16的刷新时间大概是1600us，这个速度已经可以和foc的循环放在一个函数里了笑死(foc控制循环建议速度1kHz)</p>
<h3 id="电路连接"><a href="#电路连接" class="headerlink" title="电路连接"></a>电路连接</h3><p><img src="/2023/iic-oleds/d5bd564e82238fa871150c9b3fe22c8.jpg"></p>
<h3 id="控制程序"><a href="#控制程序" class="headerlink" title="控制程序"></a>控制程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line">#include &quot;SSD1306.h&quot;</span><br><span class="line">SSD1306 display(0x3c, 22, 23);</span><br><span class="line">String comStr = &quot;&quot;;</span><br><span class="line">long comInt=1;</span><br><span class="line">void setup()&#123;</span><br><span class="line">  pinMode(21, OUTPUT);</span><br><span class="line">  digitalWrite(21, HIGH);</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  display.init();</span><br><span class="line">  display.setFont(ArialMT_Plain_16);</span><br><span class="line">  display.drawString(32, 0, &quot;ctrl+v&quot;);</span><br><span class="line">  display.display();</span><br><span class="line">  while(Serial.read()&gt;=0)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop()&#123;</span><br><span class="line">  unsigned int time;</span><br><span class="line">  time = micros();</span><br><span class="line">  display.clear();</span><br><span class="line">  display.drawString(32, 0, &quot;ctrl+c&quot;);</span><br><span class="line">  display.display();</span><br><span class="line">  Serial.println(micros()-time);</span><br><span class="line">  display.clear();</span><br><span class="line">  display.drawString(32, 0, &quot;ctrl+v&quot;);</span><br><span class="line">  display.display();</span><br><span class="line">  if (Serial.available() &gt; 0)&#123;</span><br><span class="line">    comStr = Serial.readString();</span><br><span class="line">    comInt = comStr.toInt();</span><br><span class="line">    if (comInt==0)&#123;digitalWrite(21, LOW);&#125;</span><br><span class="line">    if (comInt==1)&#123;digitalWrite(21, HIGH);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>esp32</tag>
      </tags>
  </entry>
  <entry>
    <title>3D打印机改装两进一出</title>
    <url>/2023/klipper-2in1out/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="两进一出加热头"><a href="#两进一出加热头" class="headerlink" title="两进一出加热头"></a>两进一出加热头</h1><p>改了两进一出双色挤出头，配置文件改成这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MKS Gen l V2.1</span><br><span class="line">[include timelapse.cfg]</span><br><span class="line"></span><br><span class="line">[stepper_x]</span><br><span class="line">step_pin: PF0</span><br><span class="line">dir_pin: PF1</span><br><span class="line">enable_pin: !PD7</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 40   ##rotation_distance = ((360°/1.8°) * microsteps) / 80 # # 旋转距离 = （圆周360°/步距角）*细分/每MM脉冲值</span><br><span class="line">endstop_pin:^!PE5 #X-Min, PE4:X-Max</span><br><span class="line">position_endstop: 0</span><br><span class="line">position_max: 295</span><br><span class="line">homing_speed: 30</span><br><span class="line"></span><br><span class="line">[stepper_y]</span><br><span class="line">step_pin: PF6</span><br><span class="line">dir_pin: PF7</span><br><span class="line">enable_pin: !PF2</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 40</span><br><span class="line">endstop_pin:^!PJ1  #Y-Min, PJ0:Y-Max</span><br><span class="line">position_endstop: 0</span><br><span class="line">position_max: 205</span><br><span class="line">homing_speed: 30</span><br><span class="line"></span><br><span class="line">[stepper_z]</span><br><span class="line">step_pin: PL3</span><br><span class="line">dir_pin: !PL1</span><br><span class="line">enable_pin: !PK0</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 8</span><br><span class="line">endstop_pin: probe:z_virtual_endstop  #Z-Min, PD2:Z-Max</span><br><span class="line">position_max: 260</span><br><span class="line">position_min: -3</span><br><span class="line"></span><br><span class="line">[extruder]</span><br><span class="line">step_pin: PA4</span><br><span class="line">dir_pin: PA6</span><br><span class="line">enable_pin: !PA2</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 7.85</span><br><span class="line">nozzle_diameter: 0.4</span><br><span class="line">filament_diameter: 1.750</span><br><span class="line">heater_pin: PB4</span><br><span class="line">sensor_type: ATC Semitec 104GT-2</span><br><span class="line">sensor_pin: PK5</span><br><span class="line">min_temp: 0</span><br><span class="line">max_temp: 270</span><br><span class="line">#control: pid</span><br><span class="line">#pid_Kp: 21.438</span><br><span class="line">#pid_Ki: 0.888</span><br><span class="line">#pid_Kd: 129.435</span><br><span class="line">max_extrude_only_distance: 50000.0</span><br><span class="line"></span><br><span class="line">[verify_heater extruder]</span><br><span class="line">max_error: 1200</span><br><span class="line">hysteresis: 20</span><br><span class="line">check_gain_time: 20</span><br><span class="line">heating_gain: 1</span><br><span class="line"></span><br><span class="line">[extruder_stepper belted_extruder]</span><br><span class="line">extruder: extruder</span><br><span class="line">step_pin: PC1</span><br><span class="line">dir_pin: !PC3</span><br><span class="line">enable_pin: !PC7</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 7.85</span><br><span class="line"></span><br><span class="line">[gcode_macro T0]</span><br><span class="line">gcode:</span><br><span class="line">    # Deactivate stepper in my_extruder_stepper</span><br><span class="line">    SYNC_STEPPER_TO_EXTRUDER STEPPER=belted_extruder EXTRUDER=</span><br><span class="line">    # Activate stepper in extruder</span><br><span class="line">    SYNC_STEPPER_TO_EXTRUDER STEPPER=extruder EXTRUDER=extruder</span><br><span class="line"></span><br><span class="line">[gcode_macro T1]</span><br><span class="line">gcode:</span><br><span class="line">    # Deactivate stepper in extruder</span><br><span class="line">    SYNC_STEPPER_TO_EXTRUDER STEPPER=extruder EXTRUDER=</span><br><span class="line">    # Activate stepper in my_extruder_stepper</span><br><span class="line">    SYNC_STEPPER_TO_EXTRUDER STEPPER=belted_extruder EXTRUDER=extruder</span><br><span class="line"></span><br><span class="line">[gcode_macro ACTIVATE_EXTRUDER]</span><br><span class="line">description: Replaces built-in macro for a X-in, 1-out extruder configuration SuperSlicer fix</span><br><span class="line">rename_existing: ACTIVATE_EXTRUDER_BASE</span><br><span class="line">gcode:</span><br><span class="line">    &#123;% if &#x27;EXTRUDER&#x27; in params %&#125;</span><br><span class="line">      &#123;% set ext = params.EXTRUDER|default(EXTRUDER) %&#125;</span><br><span class="line">      &#123;% if ext == &quot;extruder&quot;%&#125;</span><br><span class="line">        &#123;action_respond_info(&quot;Switching to extruder0.&quot;)&#125;</span><br><span class="line">        T0</span><br><span class="line">      &#123;% elif ext == &quot;extruder1&quot; %&#125;</span><br><span class="line">        &#123;action_respond_info(&quot;Switching to extruder1.&quot;)&#125;</span><br><span class="line">        T1</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;action_respond_info(&quot;EXTRUDER value being passed.&quot;)&#125;</span><br><span class="line">        ACTIVATE_EXTRUDER_BASE EXTRUDER=&#123;ext&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">[heater_bed]</span><br><span class="line">heater_pin: PH5</span><br><span class="line">sensor_type: ATC Semitec 104GT-2</span><br><span class="line">sensor_pin: PK6</span><br><span class="line">min_temp: -100</span><br><span class="line">max_temp: 180</span><br><span class="line">#control: pid</span><br><span class="line">#pid_kp = 74.551</span><br><span class="line">#pid_ki = 1.053</span><br><span class="line">#pid_kd = 1319.559</span><br><span class="line"></span><br><span class="line">[verify_heater heater_bed]</span><br><span class="line">max_error: 12000</span><br><span class="line">hysteresis: 30</span><br><span class="line">check_gain_time: 300</span><br><span class="line">heating_gain: 1</span><br><span class="line"></span><br><span class="line">[fan]</span><br><span class="line">pin: PH6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mcu]</span><br><span class="line">serial:/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[printer]</span><br><span class="line">kinematics: corexy</span><br><span class="line">max_velocity: 3000</span><br><span class="line">max_accel: 3000</span><br><span class="line">max_z_velocity: 20</span><br><span class="line">max_z_accel: 300</span><br><span class="line">square_corner_velocity: 300.0</span><br><span class="line"></span><br><span class="line">[output_pin Camera_control]</span><br><span class="line">pin: PC4</span><br><span class="line"></span><br><span class="line">[fan_generic LED]</span><br><span class="line">pin: PL0</span><br><span class="line">shutdown_speed: 1.0</span><br><span class="line"></span><br><span class="line">[fan_generic Camera_X]</span><br><span class="line">pin: PG5</span><br><span class="line">max_power: 0.125</span><br><span class="line">cycle_time: 0.02</span><br><span class="line"></span><br><span class="line">[fan_generic Camera_Y]</span><br><span class="line">pin: PE3</span><br><span class="line">max_power: 0.125</span><br><span class="line">cycle_time: 0.02</span><br><span class="line"></span><br><span class="line">[virtual_sdcard]</span><br><span class="line">path: ~/gcode_files</span><br><span class="line"></span><br><span class="line">[pause_resume]</span><br><span class="line"></span><br><span class="line">[gcode_macro CANCEL_PRINT]</span><br><span class="line">description: Cancel the actual running print</span><br><span class="line">rename_existing: CANCEL_PRINT_BASE</span><br><span class="line">gcode:</span><br><span class="line">  TURN_OFF_HEATERS</span><br><span class="line">  CANCEL_PRINT_BASE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[display_status]</span><br><span class="line"></span><br><span class="line">[bltouch]</span><br><span class="line">sensor_pin: ^PD2</span><br><span class="line">control_pin: PB5</span><br><span class="line">x_offset: 36</span><br><span class="line">y_offset: 0</span><br><span class="line">z_offset: 3.150</span><br><span class="line">speed: 5.0</span><br><span class="line">samples: 2</span><br><span class="line">samples_result: median</span><br><span class="line">sample_retract_dist: 3.0</span><br><span class="line">samples_tolerance: 0.1</span><br><span class="line">samples_tolerance_retries: 1</span><br><span class="line"></span><br><span class="line">[safe_z_home]</span><br><span class="line">home_xy_position: 150,100 # Change coordinates to the center of your print bed</span><br><span class="line">speed: 50</span><br><span class="line">z_hop: 10                 # Move up 10mm</span><br><span class="line">z_hop_speed: 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gcode_macro G29]</span><br><span class="line">gcode:</span><br><span class="line">    BED_MESH_CLEAR</span><br><span class="line">    G28</span><br><span class="line">    BED_MESH_CALIBRATE</span><br><span class="line">    BED_MESH_PROFILE SAVE=name</span><br><span class="line">    SAVE_CONFIG</span><br><span class="line">    BED_MESH_PROFILE LOAD=name</span><br><span class="line"></span><br><span class="line">[bed_mesh]</span><br><span class="line">speed: 100</span><br><span class="line">horizontal_move_z: 5</span><br><span class="line">mesh_min:60,40</span><br><span class="line">mesh_max:260,160</span><br><span class="line">probe_count: 3,3</span><br><span class="line"></span><br><span class="line">#*# &lt;---------------------- SAVE_CONFIG ----------------------&gt;</span><br><span class="line">#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.</span><br><span class="line">#*#</span><br><span class="line">#*# [bed_mesh default]</span><br><span class="line">#*# version = 1</span><br><span class="line">#*# points =</span><br><span class="line">#*# 	  -0.045000, -0.012500, -0.070000</span><br><span class="line">#*# 	  0.182500, 0.061250, 0.008750</span><br><span class="line">#*# 	  0.175000, 0.012500, 0.015000</span><br><span class="line">#*# tension = 0.2</span><br><span class="line">#*# min_x = 60.0</span><br><span class="line">#*# algo = lagrange</span><br><span class="line">#*# y_count = 3</span><br><span class="line">#*# mesh_y_pps = 2</span><br><span class="line">#*# min_y = 40.0</span><br><span class="line">#*# x_count = 3</span><br><span class="line">#*# max_y = 160.0</span><br><span class="line">#*# mesh_x_pps = 2</span><br><span class="line">#*# max_x = 260.0</span><br><span class="line">#*#</span><br><span class="line">#*# [extruder]</span><br><span class="line">#*# control = pid</span><br><span class="line">#*# pid_kp = 19.454</span><br><span class="line">#*# pid_ki = 0.675</span><br><span class="line">#*# pid_kd = 140.071</span><br><span class="line">#*#</span><br><span class="line">#*# [heater_bed]</span><br><span class="line">#*# control = pid</span><br><span class="line">#*# pid_kp = 1000</span><br><span class="line">#*# pid_ki = 0.0</span><br><span class="line">#*# pid_kd = 0.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中挤出头部分的机械机构是自己设计的，感觉十分逆天：<br><img src="/2023/klipper-2in1out/Cache_-79fa417b78e11c7e.jpg"></p>
<p>把touch放在后面，前面就看不见不对称了hhh</p>
<p>可惜原来的模型文件找不到了，只有截图了</p>
<h1 id="自制多色"><a href="#自制多色" class="headerlink" title="自制多色"></a>自制多色</h1><p>前面说的那种挤出头不是很好用，经常堵头而且流量很低。所以想自己设计一个两进一出，继续使用原来的V6挤出头，所以现在已经换回V6挤出头了，换色想用在挤出头进料处加装打印的Y形气动接头连接件实现。</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>3D打印</tag>
      </tags>
  </entry>
  <entry>
    <title>3D打印机加装摄像头并自动合成延时摄影</title>
    <url>/2023/klipper-camera/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网络摄像头程序"><a href="#网络摄像头程序" class="headerlink" title="网络摄像头程序"></a>网络摄像头程序</h1><h2 id="安装mjpg-streamer"><a href="#安装mjpg-streamer" class="headerlink" title="安装mjpg-streamer"></a>安装mjpg-streamer</h2><p>新版kiauh脚本中已包含crowsnest插件，但是我用的上位机是香橙派zero2，实测安装报错，所以改用经典的mjpg-streamer。这个项目没有实现声音传输，而且已经停止了维护(但是关我拍延时摄影有什么关系)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">git clone https://github.com/jacksonliam/mjpg-streamer.git</span><br><span class="line">cd ~/mjpg-streamer/mjpg-streamer-experimental</span><br><span class="line">sudo make all</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目目录内有一个<code>start.sh</code>，作为启动脚本，修改其中的启动参数</p>
<p>以我的为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mjpg_streamer -i &quot;./input_uvc.so -d /dev/v4l/by-id/usb-SN0002_2K_USB_Camera_46435000_P020300_SN0002-video-index0&quot; -o &quot;./output_http.so -w ./www&quot;</span><br></pre></td></tr></table></figure>
<p>其实要改的就是摄像头id</p>
<p>这个命令也可以直接在终端输入，然后打开浏览器查看8080端口网页</p>
<h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>在<code>/etc/rc.local</code>中，在<code>exit 0</code>前写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/orangepi/mjpg-streamer/</span><br><span class="line">sh start.sh &amp;</span><br><span class="line">cd -</span><br></pre></td></tr></table></figure>

<h1 id="安装Moonraker-timelapse："><a href="#安装Moonraker-timelapse：" class="headerlink" title="安装Moonraker-timelapse："></a>安装Moonraker-timelapse：</h1><p>英文安装参考：<a href="https://www.obico.io/blog/klipper-timelapse/">https://www.obico.io/blog/klipper-timelapse/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/ </span><br><span class="line">git clone https://github.com/mainsail-crew/moonraker-timelapse.git </span><br><span class="line">cd ~/moonraker-timelapse </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>在monraker.conf 中最后面加入以下配置(其实不加无所谓)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[update_manager timelapse]</span><br><span class="line">type: git_repo</span><br><span class="line">primary_branch: main</span><br><span class="line">path: ~/moonraker-timelapse</span><br><span class="line">origin: https://github.com/mainsail-crew/moonraker-timelapse.git managed_services: klipper moonraker</span><br></pre></td></tr></table></figure>

<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>配置参考：<a href="https://github.com/mainsail-crew/moonraker-timelapse/blob/main/docs/configuration.md">https://github.com/mainsail-crew/moonraker-timelapse/blob/main/docs/configuration.md</a></p>
<h3 id="在printer-cfg中引用timelapse-cfg文件"><a href="#在printer-cfg中引用timelapse-cfg文件" class="headerlink" title="在printer.cfg中引用timelapse.cfg文件"></a>在printer.cfg中引用timelapse.cfg文件</h3><p>打开<code>printer.cfg</code>文件在文件开始的地方加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[include timelapse.cfg]</span><br></pre></td></tr></table></figure>
<p>如果打印机因为找不到这个文件而报错，可以直接在<code>printer.cfg</code>的文件夹内创建新文件写入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MKS Gen l V2.1</span><br><span class="line"></span><br><span class="line">[stepper_x]</span><br><span class="line">step_pin: PF0</span><br><span class="line">dir_pin: PF1</span><br><span class="line">enable_pin: !PD7</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 40   ##rotation_distance = ((360°/1.8°) * microsteps) / 80 # # 旋转距离 = （圆周360°/步距角）*细分/每MM脉冲值</span><br><span class="line">endstop_pin:^!PE5 #X-Min, PE4:X-Max</span><br><span class="line">position_endstop: 0</span><br><span class="line">position_max: 290</span><br><span class="line">homing_speed: 60</span><br><span class="line"></span><br><span class="line">[stepper_y]</span><br><span class="line">step_pin: PF6</span><br><span class="line">dir_pin: PF7</span><br><span class="line">enable_pin: !PF2</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 40</span><br><span class="line">endstop_pin:^!PJ1  #Y-Min, PJ0:Y-Max</span><br><span class="line">position_endstop: 0</span><br><span class="line">position_max: 190</span><br><span class="line">homing_speed: 60</span><br><span class="line"></span><br><span class="line">[stepper_z]</span><br><span class="line">step_pin: PL3</span><br><span class="line">dir_pin: !PL1</span><br><span class="line">enable_pin: !PK0</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 8</span><br><span class="line">endstop_pin: probe:z_virtual_endstop  #Z-Min, PD2:Z-Max</span><br><span class="line">position_max: 285</span><br><span class="line">position_min: -3</span><br><span class="line">homing_speed: 20</span><br><span class="line"></span><br><span class="line">[extruder]</span><br><span class="line">step_pin: PA4</span><br><span class="line">dir_pin: PA6</span><br><span class="line">enable_pin: !PA2</span><br><span class="line">microsteps: 16</span><br><span class="line">rotation_distance: 7.85</span><br><span class="line">nozzle_diameter: 0.4</span><br><span class="line">filament_diameter: 1.750</span><br><span class="line">heater_pin: PB4</span><br><span class="line">sensor_type: ATC Semitec 104GT-2</span><br><span class="line">sensor_pin: PK5</span><br><span class="line">min_temp: 0</span><br><span class="line">max_temp: 270</span><br><span class="line">#control: pid</span><br><span class="line">#pid_Kp: 21.438</span><br><span class="line">#pid_Ki: 0.888</span><br><span class="line">#pid_Kd: 129.435</span><br><span class="line">max_extrude_only_distance: 50000.0</span><br><span class="line">max_extrude_only_velocity: 40</span><br><span class="line"></span><br><span class="line">[verify_heater extruder]</span><br><span class="line">max_error: 120</span><br><span class="line">hysteresis: 10</span><br><span class="line">check_gain_time: 20</span><br><span class="line">heating_gain: 1</span><br><span class="line"></span><br><span class="line">[led LED]</span><br><span class="line">white_pin: PH4</span><br><span class="line">hardware_pwm: True</span><br><span class="line"></span><br><span class="line">#[extruder_stepper extra_stepper]</span><br><span class="line">#step_pin: PC1</span><br><span class="line">#dir_pin: !PC3</span><br><span class="line">#enable_pin: !PC7</span><br><span class="line">#microsteps: 16</span><br><span class="line">#rotation_distance: 8</span><br><span class="line">#endstop_pin: ^!PE4</span><br><span class="line">#position_endstop: 0</span><br><span class="line">#position_max: 250</span><br><span class="line">#position_min: -3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[heater_bed]</span><br><span class="line">heater_pin: PH5</span><br><span class="line">sensor_type: ATC Semitec 104GT-2</span><br><span class="line">sensor_pin: PK6</span><br><span class="line">min_temp: -100</span><br><span class="line">max_temp: 180</span><br><span class="line">#control: pid</span><br><span class="line">#pid_kp = 74.551</span><br><span class="line">#pid_ki = 1.053</span><br><span class="line">#pid_kd = 1319.559</span><br><span class="line"></span><br><span class="line">[verify_heater heater_bed]</span><br><span class="line">max_error: 12000</span><br><span class="line">hysteresis: 30</span><br><span class="line">check_gain_time: 300</span><br><span class="line">heating_gain: 1</span><br><span class="line"></span><br><span class="line">[fan]</span><br><span class="line">pin: PH6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mcu]</span><br><span class="line">serial:/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[printer]</span><br><span class="line">kinematics: corexy</span><br><span class="line">max_velocity: 180</span><br><span class="line">max_accel: 3000</span><br><span class="line">max_z_velocity: 20</span><br><span class="line">max_z_accel: 300</span><br><span class="line">square_corner_velocity: 10.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[virtual_sdcard]</span><br><span class="line">path: ~/gcode_files</span><br><span class="line"></span><br><span class="line">[pause_resume]</span><br><span class="line"></span><br><span class="line">[gcode_macro CANCEL_PRINT]</span><br><span class="line">description: Cancel the actual running print</span><br><span class="line">rename_existing: CANCEL_PRINT_BASE</span><br><span class="line">gcode:</span><br><span class="line">  TURN_OFF_HEATERS</span><br><span class="line">  CANCEL_PRINT_BASE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[display_status]</span><br><span class="line"></span><br><span class="line">[bltouch]</span><br><span class="line">sensor_pin: ^PD2</span><br><span class="line">control_pin: PB5</span><br><span class="line">x_offset: -9</span><br><span class="line">y_offset: -51</span><br><span class="line">z_offset: 1.6</span><br><span class="line">speed: 5.0</span><br><span class="line">samples: 2</span><br><span class="line">samples_result: median</span><br><span class="line">sample_retract_dist: 3.0</span><br><span class="line">samples_tolerance: 0.1</span><br><span class="line">samples_tolerance_retries: 1</span><br><span class="line"></span><br><span class="line">[safe_z_home]</span><br><span class="line">home_xy_position: 150,100 # Change coordinates to the center of your print bed</span><br><span class="line">speed: 60</span><br><span class="line">z_hop: 20                 # Move up 10mm</span><br><span class="line">z_hop_speed: 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gcode_macro G29]</span><br><span class="line">gcode:</span><br><span class="line">    BED_MESH_CLEAR</span><br><span class="line">    G28</span><br><span class="line">    BED_MESH_CALIBRATE</span><br><span class="line">    BED_MESH_PROFILE SAVE=name</span><br><span class="line">    SAVE_CONFIG</span><br><span class="line">    BED_MESH_PROFILE LOAD=name</span><br><span class="line"></span><br><span class="line">[bed_mesh]</span><br><span class="line">speed: 120</span><br><span class="line">horizontal_move_z: 10</span><br><span class="line">mesh_min:60,30</span><br><span class="line">mesh_max:240,130</span><br><span class="line">probe_count: 4,3</span><br><span class="line"></span><br><span class="line">[include timelapse.cfg]</span><br><span class="line"></span><br><span class="line">#*# &lt;---------------------- SAVE_CONFIG ----------------------&gt;</span><br><span class="line">#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.</span><br><span class="line">#*#</span><br><span class="line">#*# [bed_mesh default]</span><br><span class="line">#*# version = 1</span><br><span class="line">#*# points =</span><br><span class="line">#*# 	  0.193750, 0.031250, -0.095000, -0.193750</span><br><span class="line">#*# 	  0.285000, 0.115000, -0.023750, -0.127500</span><br><span class="line">#*# 	  0.388750, 0.185000, 0.052500, -0.026250</span><br><span class="line">#*# tension = 0.2</span><br><span class="line">#*# min_x = 60.0</span><br><span class="line">#*# algo = lagrange</span><br><span class="line">#*# y_count = 3</span><br><span class="line">#*# mesh_y_pps = 2</span><br><span class="line">#*# min_y = 30.0</span><br><span class="line">#*# x_count = 4</span><br><span class="line">#*# max_y = 130.0</span><br><span class="line">#*# mesh_x_pps = 2</span><br><span class="line">#*# max_x = 240.0</span><br><span class="line">#*#</span><br><span class="line">#*# [extruder]</span><br><span class="line">#*# control = pid</span><br><span class="line">#*# pid_kp = 18.922</span><br><span class="line">#*# pid_ki = 1.078</span><br><span class="line">#*# pid_kd = 83.021</span><br><span class="line">#*#</span><br><span class="line">#*# [heater_bed]</span><br><span class="line">#*# control = pid</span><br><span class="line">#*# pid_kp = 10000000</span><br><span class="line">#*# pid_ki = 0</span><br><span class="line">#*# pid_kd = 0</span><br><span class="line">#*#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设定切片软件"><a href="#设定切片软件" class="headerlink" title="设定切片软件"></a>设定切片软件</h3><p>打印机设定-&gt;自定义G-code -&gt; 图层更改后 G-Code,框中加入：TIMELAPSE_TAKE_FRAME</p>
<h3 id="moonraker-conf文件中配置："><a href="#moonraker-conf文件中配置：" class="headerlink" title="moonraker.conf文件中配置："></a>moonraker.conf文件中配置：</h3><p>打开moonraker.conf文件中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[timelapse]</span><br><span class="line">##   Following basic configuration is default to most images and don&#x27;t need</span><br><span class="line">##   to be changed in most scenarios. Only uncomment and change it if your</span><br><span class="line">##   Image differ from standart installations. In most common scenarios</span><br><span class="line">##   a User only need [timelapse] in there configuration.</span><br><span class="line">#output_path: ~/timelapse/      #文件输出路径 </span><br><span class="line">##   Directory where the generated video will be saved</span><br><span class="line">#frame_path: /tmp/timelapse/   #项目临时存放路径 </span><br><span class="line">##   Directory where the temporary frames are saved</span><br><span class="line">#ffmpeg_binary_path: /usr/bin/ffmpeg</span><br><span class="line">##   Directory where ffmpeg is installed #编译器路径 </span><br><span class="line">########配置选项说明########</span><br><span class="line">#enabled: True #是否启用时间延时摄影</span><br><span class="line">#mode: layermacro #此模式使用宏来触发抓取帧，但需要设置切片器才能在图层更改时添加GCODE</span><br><span class="line">#snapshoturl: http://localhost:8080/?action=snapshot #摄像头调用地址</span><br><span class="line">#gcode_verbose: True # “true”启用或“false”禁用宏的详细程度 </span><br><span class="line">#parkhead: False # “true”启用或“false”禁用在拍摄帧之前移动打印头。 </span><br><span class="line">#parkpos: back_left  #这定义了在拍摄相框之前将打印头停放的位置。可能的配置是[center, front_left, front_right, back_left, back_right, custom]</span><br><span class="line">#如果选择了custom想要自定义打印头驻留的位置可以设置下面的参数</span><br><span class="line">#park_custom_pos_x: 0.0  #自定义打印头驻留的绝对 X 坐标（单位 mm） </span><br><span class="line">#park_custom_pos_y: 0.0 #自定义打印头驻留的绝对 Y 坐标（单位 mm）</span><br><span class="line">#park_custom_pos_dz: 0.0 # 自定义打印头驻留的相对 Y 坐标（单位 mm） </span><br><span class="line">#park_travel_speed: 100 #驻留时打印头移动速度（单位毫米/秒</span><br><span class="line">#park_retract_speed: 15  #驻留时缩回速度（单位毫米/秒） </span><br><span class="line">#park_extrude_speed: 15 # 恢复打印时挤出的速度（单位毫米/秒） </span><br><span class="line">#park_retract_distance: 1.0 # 回抽来以防止渗出的距离（单位毫米） </span><br><span class="line">#park_extrude_distance: 1.0 # 恢复打印之前挤出以填充喷嘴的距离（单位 mm） </span><br><span class="line">#hyperlapse_cycle: 30 #定义在超延时模式下拍摄帧的时间间隔</span><br><span class="line">#autorender: True # “true”启用或“false”禁用打印结束时渲染过程的自动触发。或者，您可以使用最终 gcode 中的“TIMELAPSE_RENDER”或渲染 http 终端节点（可能集成到前端）来触发渲染过程。 </span><br><span class="line">#constant_rate_factor: 23 # 这将配置渲染视频的质量与文件大小。CRF 刻度的范围是 0–51，其中 0 表示无损，23 表示默认值，51 表示质量最差。较低的值通常会导致较高的质量，主观上合理的范围为17-28。将 17 或 18 视为视觉上无损。更多信息：  https://trac.ffmpeg.org/wiki/Encode/H.264 F</span><br><span class="line">#output_framerate: 30 # 定义视频的帧速率。（每秒单位帧数）注意：如果启用了variable_fps，这将被忽略。 </span><br><span class="line">#pixelformat: yuv420p # 定义输出视频的像素格式。一些较旧的h264设备，如手机和其他设备需要“ yuv420p”，这是默认的延时组件。要获取哪些像素格式可用的更多信息，请在系统控制台中运行“ffmpeg -pix_fmts”或参考 ffmpeg 文档：  https://ffmpeg.org/ffmpeg.html </span><br><span class="line">#time_format_code: %Y%m%d_%H%M # 这定义了应如何命名呈现的视频。它使用 python 日期时间格式。默认值为“%Y%m%d_%H%M”。有关日期时间格式的更多信息，请参阅  此处 https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes </span><br><span class="line">#extraoutputparams:   定义FFMPEG的额外输出参数 更多信息：   https://ffmpeg.org/ffmpeg.html   注意：在这里指定任何内容可能会禁用其他功能！（ffmpeg 限制） </span><br><span class="line">#variable_fps: False # “true”启用或“false”禁用输出帧速率的变量计算。这使用拍摄的帧数和“目标长度”，但受“variable_fps_min”和“variable_fps_max”设置的限制。</span><br><span class="line">#targetlength: 10 定义视频的目标长度（单位秒）</span><br><span class="line">#variable_fps_min: 5  variable_fps的最小 fps（每秒帧数）。 </span><br><span class="line">#variable_fps_max: 60 variable_fps的最大 fps（每秒帧数）。</span><br><span class="line">#flip_x: False</span><br><span class="line">#flip_y: False</span><br><span class="line">#duplicatelastframe: 0 #将最后一帧复制到输出视频的末尾。</span><br><span class="line">#previewimage: True #“true”启用或“false”禁用最后一帧来生成预览缩略图</span><br><span class="line">#saveframes: False #“True”启用或“False”禁用将帧打包到 zip 文件以供外部使用或呈现。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其实大部分设置都用不到，这是我的配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[timelapse]</span><br><span class="line">parkhead: True</span><br><span class="line">parkpos: custom</span><br><span class="line">park_custom_pos_x: 2.0</span><br><span class="line">park_custom_pos_y: 2.0</span><br><span class="line">park_custom_pos_dz: 0.0</span><br><span class="line">park_travel_speed: 90</span><br><span class="line">park_retract_speed: 25</span><br><span class="line">park_extrude_speed: 25</span><br><span class="line">park_retract_distance: 3.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>3D打印</tag>
      </tags>
  </entry>
  <entry>
    <title>喇叭沟第二弹</title>
    <url>/2023/lbg2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h2><p>一年一度的观星活动又来咯！有了上一次的经验，这次带了好几件外套好几双袜子，还有前段时间刚买的新三脚架，3月25日再次来到喇叭沟</p>
<h2 id="直接上图"><a href="#直接上图" class="headerlink" title="直接上图"></a>直接上图</h2><h3 id="Shot-by-my-Mi-10S-！"><a href="#Shot-by-my-Mi-10S-！" class="headerlink" title="Shot by my Mi 10S ！"></a>Shot by my Mi 10S ！</h3><p>手机居然也能拍到银河属实是没有想到，当然这都是经过降噪处理的，原raw图简直没法看</p>
<div id="dplayer32" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer32"),"video":{"url":"https://cr.triority.cc/f/QeeCl/2023%E5%B9%B43%E6%9C%8825%E6%97%A5%E5%BB%B6%E6%97%B6%E6%91%84%E5%BD%B1%20.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>视频的图片是一分钟拍摄一张，感觉帧率有点低了，下次半分钟一张吧</p>
<p>有一帧还拍到了星链，当时最开始以为是看到了流星，那么亮持续那么久十分惊喜，直到它从整个天空经过。。。<br>顺便也把没经过降噪的raw原图截出来瞧瞧，真的佩服给手机做降噪算法的那些人<br><img src="/2023/lbg2/QQ%E6%88%AA%E5%9B%BE20230410133010.png" alt="没经过降噪的手机拍摄的raw格式照片"></p>
<p>基本上手机一直在拍延时，so也就没有什么别的照片了</p>
<h3 id="来张自己"><a href="#来张自己" class="headerlink" title="来张自己"></a>来张自己</h3><p>美中不足就是帽子挡住了光线emmm<br><img src="https://cr.triority.cc/f/3LQSp/DSC03695.png" alt="感谢中石大的wbx同学帮忙拍摄！"><br>笑死我这个时候其实穿了三个外套衣服两个外套裤子以及三双袜子，不知道能不能看出来哎</p>
]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的simulink进行简单的电力电子仿真：Buck电路</title>
    <url>/2023/matlab-simulink-electronics/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主要目的"><a href="#主要目的" class="headerlink" title="主要目的"></a>主要目的</h1><p>做这个主要是想给自己做个桌面电源，功率大一点(1kW+)那种，把平时经常用到但是实验室的电源不具备的功能尝试做一下。做的电源可能拉的时间线比较长，基本做出来之后再写个制作过程的文章</p>
<p>其实这个没什么难的，但是主要是各种常用元件的位置是真的记不住，写这个文章主要是方便以后再去找，所以说的可能不是特别细</p>
<h1 id="在simulink搭建buck电路"><a href="#在simulink搭建buck电路" class="headerlink" title="在simulink搭建buck电路"></a>在simulink搭建buck电路</h1><h2 id="基本电路搭建"><a href="#基本电路搭建" class="headerlink" title="基本电路搭建"></a>基本电路搭建</h2><p>新建一个仿真工程，在库浏览器中，依次打开<code>Simscape-Electrical-specialized Power System</code>，电力电子仿真所需的器件大都在这里</p>
<p>首先拖动<code>powergui</code>放在右边，然后在<code>sources</code>中找到需要的直流电源，在<code>power electronics</code>的二极管(doide)和mosfet，在<code>passives</code>中的RLC。</p>
<p>另外需要测量数值，放置一个<code>sensors and measurements</code>中的万用表(Multimeter)，以及根目录下<code>simulink</code>中<code>commonly used blocks</code>的示波器(Scope)，</p>
<p>对于控制mosfet，可以放一个位于根目录下<code>simulink</code>中<code>sources</code>的脉冲发生器(Pulse Generator)</p>
<p>然后设置一下仿真时间步长，在菜单栏的模型设置，默认的10s时间太长了，步长根据频率而定。</p>
<p>设置好电路参数，就可以进行电路布局和连线了，运行之后查看示波器：</p>
<p><img src="/2023/matlab-simulink-electronics/QQ%E6%88%AA%E5%9B%BE20230912204255.png"></p>
<h2 id="输出闭环pid控制"><a href="#输出闭环pid控制" class="headerlink" title="输出闭环pid控制"></a>输出闭环pid控制</h2><p>根目录下<code>simulink</code>中<code>commonly used blocks</code>有一个<code>constant</code>可以表示一个常数，可以用于表示我们的目标电压，比如写一个12v，同目录下还有一个<code>sum</code>可以用于求和或者做差，当然我们就是做差了</p>
<p>减数就是输出的电压，可以放一个万用表并配置输出为负载电阻的电压</p>
<p>然后放置一个<code>simulink-continuous</code>里面的pid控制器(PID Controller)，输出的信号可以接一个<code>Simscape-Electrical-specialized Power System-Power Electronice-Power Electronice Control</code>PWM生成器(PWM Generator(DC-DC))然后就可以控制mosfet了</p>
<p>现在逻辑设置完就可以调节一下pid参数了，这里我随便设置了一个，输出电压的仿真结果如下：</p>
<p><img src="/2023/matlab-simulink-electronics/QQ%E6%88%AA%E5%9B%BE20230912211748.png"></p>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>电力电子</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft矿石生成概率机制</title>
    <url>/2023/minecraft-ore/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="主世界"><a href="#主世界" class="headerlink" title="主世界"></a>主世界</h2><h3 id="概率测算"><a href="#概率测算" class="headerlink" title="概率测算"></a>概率测算</h3><p><img src="/2023/minecraft-ore/1.18_ore_distribution.webp" alt="生成概率图"></p>
<p><img src="/2023/minecraft-ore/QQ%E6%88%AA%E5%9B%BE20230404170706.png" alt="统计表"></p>
<p><img src="/2023/minecraft-ore/OreDistribution_1-18-1_Simplified.webp" alt="扫描统计图"></p>
<blockquote>
<p>此图片展示的是Java版1.18.1中主世界矿石的逐层分布情况，通过扫描515212个区块得到。<br>图1展示的是在被扫描的区块中，矿石方块的绝对数量。矿脉中的粗铜块和粗铁块按其9倍数量计入对应的矿石块中。<br>图2展示的是用对数标度表示的图1的数据。这样是为了使不同矿石的图象（尤其是绿宝石矿石）更明显。<br>图3展示的是矿石在各高度上的相对比例。空气方块、水以及“装饰性”方块（例如楼梯、炼药锅、树叶等）不列入计算。各高度上矿石方块的相对比例可以解释为在矿石生成过程中，固体方块被成功替换成矿石方块的概率。<br>当然，由于海平面以上较高高度处固体方块出现的频率要更少，以上统计数据在这些高度上会不太可靠</p>
</blockquote>
<h3 id="矿工策略"><a href="#矿工策略" class="headerlink" title="矿工策略"></a>矿工策略</h3><p>Y轴策略：</p>
<ul>
<li><code>-50</code>：红石，钻石，金</li>
<li><code>20</code>：铜，铁，煤</li>
</ul>
<h2 id="下界"><a href="#下界" class="headerlink" title="下界"></a>下界</h2><h3 id="概率测算-1"><a href="#概率测算-1" class="headerlink" title="概率测算"></a>概率测算</h3><p><img src="/2023/minecraft-ore/Ancient_Debris_Spawn_Rate_Per_Layer.webp" alt="扫描统计图"></p>
<p><img src="/2023/minecraft-ore/QQ%E6%88%AA%E5%9B%BE20230404170559.png" alt="统计表"></p>
<h3 id="矿工策略-1"><a href="#矿工策略-1" class="headerlink" title="矿工策略"></a>矿工策略</h3><p>emmm只要你床准备的够多，根本不需要策略hhh</p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Minecraft编辑源码方式修改partical数量限制</title>
    <url>/2023/minecraft-partical-limit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="修改partical数量限制"><a href="#修改partical数量限制" class="headerlink" title="修改partical数量限制"></a>修改partical数量限制</h2><p>今天是大年初一。昨天晚上用replay这个mod在1.12.2的服务器里录制了一段烟花表演，但是烟花生成的粒子数量实在是过于庞大，以至于烟花刚爆炸，生成的粒子就因为达到了数量上限而小时，只剩下爆炸产生的黑色球状粒子，巨丑hhh</p>
<p>于是就需要解除mc的粒子数量限制。想要实现这个目标，有两种方法，一种是直接修改客户端，修改数量限制，另一种是使用mod重写原版的粒子系统。显而易见，第一种方法更合适。</p>
<h2 id="反编译minecraft"><a href="#反编译minecraft" class="headerlink" title="反编译minecraft"></a>反编译minecraft</h2><h3 id="关于mcp"><a href="#关于mcp" class="headerlink" title="关于mcp"></a>关于mcp</h3><p>Minecraft是闭源的，但是为了编写模组，有了人力反编译的项目，比如即将使用的<code>mcp</code>，很幸运他们更新到了1.12版本，正好就是服务器使用的。再后来mojang官方提供了对照表，也就不再需要那么麻烦了。不过应该注意传播修改过的客户端是违反mojang的用户协议的。</p>
<h3 id="mcp的下载和使用"><a href="#mcp的下载和使用" class="headerlink" title="mcp的下载和使用"></a>mcp的下载和使用</h3><p><a href="https://minecraft.fandom.com/zh/wiki/%E8%BE%85%E5%8A%A9%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%BC%96%E8%BE%91%E5%99%A8/Mod_Coder_Pack#%E9%93%BE%E6%8E%A5">mcp相关信息的wiki</a></p>
<p><a href="https://cr.triority.cc/f/VETK/mc-1.12.2-source_files-master.zip">1.12.2修改过的mcp下载</a></p>
<p>至于使用方法，文件里面有<code>docs</code>文件夹，里面是文档。需要注意java版本，比如mc的1.12.2需要使用java8，最开始因为是17的环境所以失败。</p>
<h2 id="修改partical数量限制代码"><a href="#修改partical数量限制代码" class="headerlink" title="修改partical数量限制代码"></a>修改partical数量限制代码</h2><p>反编译完成后，客户端代码位于<code>src\minecraft\net\minecraft\</code>。需要修改的文件是此目录下的<code>client\particle\ParticleManager.java</code>。这段代码在第190行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!this.queue.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            for (Particle particle = this.queue.poll(); particle != null; particle = this.queue.poll())</span><br><span class="line">            &#123;</span><br><span class="line">                int j = particle.getFXLayer();</span><br><span class="line">                int k = particle.shouldDisableDepth() ? 0 : 1;</span><br><span class="line"></span><br><span class="line">                if (this.fxLayers[j][k].size() &gt;= 2147483647)</span><br><span class="line">                &#123;</span><br><span class="line">                    this.fxLayers[j][k].removeFirst();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                this.fxLayers[j][k].add(particle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>这里我已经把上限值改为了<code>2147483647</code>，应该够了吧，乐，要是渲染这些粒子能有0.1Fps就不错了hhh</p>
<h2 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h2><h3 id="创建项目目录"><a href="#创建项目目录" class="headerlink" title="创建项目目录"></a>创建项目目录</h3><p>这里需要<code>IntelliJ IDEA</code>来编译。其实修改也可以在这里，只不过我要改的不多直接用<code>vscode</code>改完了。</p>
<p>首先新建项目：</p>
<p><img src="/2023/minecraft-partical-limit/QQ%E6%88%AA%E5%9B%BE20230122150214.png" alt="新建"></p>
<p>然后将mcp目录下的<code>jars</code>文件夹复制到新建的项目目录。</p>
<p>由于idea不会读取全部子目录内的库，所以使用搜索找出<code>libraries</code>内的全部<code>.jar</code>文件，剪切出来，项目目录新建一个<code>lib</code>文件夹，粘贴进去，然后<code>libraries</code>文件夹就可以删掉了。</p>
<p>项目路径新建一个资源目录<code>resources</code>，将原客户端包内的<code>log4j.xml</code>,<code>pack.png</code>以及<code>assets</code>目录复制进去。</p>
<p>最后，将mcp反编译得到的代码<code>src\minecraft\</code>内的文件复制到项目目录<code>src</code>文件夹即可。</p>
<h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3><p>打开<code>idea</code>的<code>Project Structure</code>项目结构。</p>
<p>在子目录<code>libraries</code>，新建选择<code>java</code>然后选择刚才创建的<code>lib</code>目录。</p>
<p>再修改子目录<code>Modules</code>，选中刚才新建的<code>resources</code>，选择上面的<code>Resources</code>将其设置为资源目录。</p>
<p>确认上述修改后，继续修改启动项。</p>
<p>创建一个启动项，选择<code>Application</code>，将<code>Main Class</code>主类设置为<code>Start</code>。</p>
<p>然后将工作目录<code>Working directory</code>设置为之前复制来的<code>jars</code>目录。</p>
<p>在<code>modify options</code>中选择<code>add VM options</code>，在其中填写<code>natives</code>目录路径，在这里就是<code>-Djava.library.path=versions\1.12.2\1.12.2-natives</code>。</p>
<p>此时按下<code>Start</code>按钮就可以看到mc客户端启动啦</p>
<p><img src="/2023/minecraft-partical-limit/QQ%E6%88%AA%E5%9B%BE20230122161722.png" alt="客户端启动"></p>
<h2 id="打包客户端"><a href="#打包客户端" class="headerlink" title="打包客户端"></a>打包客户端</h2><p>打开<code>Project Structure</code>项目结构，选择<code>Artifacts</code>，新建选择<code>Jar</code>内的<code>Empty</code>，修改<code>Output Directory</code>导出路径，当然不改也可以。</p>
<p>然后将右侧的双击移到左侧：</p>
<p><img src="/2023/minecraft-partical-limit/QQ%E6%88%AA%E5%9B%BE20230122162554.png" alt="双击或拖动"></p>
<p>最后在<code>build</code>菜单中选择<code>build Artifacts</code>，选择<code>buld</code>，等待编译完成即可</p>
<p>此时就可以替换掉原来的客户端文件开始渲染啦！</p>
<p><img src="/2023/minecraft-partical-limit/QQ%E6%88%AA%E5%9B%BE20230122163156.png" alt="输出成功"></p>
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Java版Minecraft服务器搭建指南ALL In One</title>
    <url>/2023/minecraft-server-guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java版服务器"><a href="#Java版服务器" class="headerlink" title="Java版服务器"></a>Java版服务器</h1><h2 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h2><h3 id="版本对应"><a href="#版本对应" class="headerlink" title="版本对应"></a>版本对应</h3><table>
<thead>
<tr>
<th align="center">Minecraft服务端版本号</th>
<th align="center">JDK&#x2F;Java版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1.7</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">1.8+ ~ 1.15+</td>
<td align="center">8&#x2F;11</td>
</tr>
<tr>
<td align="center">1.16+</td>
<td align="center">11&#x2F;16</td>
</tr>
<tr>
<td align="center">1.17+ ~ 1.18+</td>
<td align="center">16&#x2F;17</td>
</tr>
<tr>
<td align="center">1.19+ ~ 1.20+</td>
<td align="center">17</td>
</tr>
</tbody></table>
<p>注：<code>Minecraft 1.19</code>要求的最低Java版本为<code>17.0.3</code>而不是<code>Minecraft 1.18</code>的<code>Java17</code></p>
<h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><h2 id="官方原版服搭建"><a href="#官方原版服搭建" class="headerlink" title="官方原版服搭建"></a>官方原版服搭建</h2><h2 id="带有模组或插件的服务端搭建"><a href="#带有模组或插件的服务端搭建" class="headerlink" title="带有模组或插件的服务端搭建"></a>带有模组或插件的服务端搭建</h2><h2 id="Java与基岩版互通服搭建"><a href="#Java与基岩版互通服搭建" class="headerlink" title="Java与基岩版互通服搭建"></a>Java与基岩版互通服搭建</h2>]]></content>
      <categories>
        <category>整活&amp;游戏</category>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>大功率无刷电机驱动</title>
    <url>/2023/motor-driver/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有一个无刷电机，准备做轮腿用的，大概电压24V电流5A，这样大功率的foc驱动要一两百块，所以自己做一个驱动板(也许以后会拿来卖？)</p>
<h1 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h1><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p>用eg2104做mos驱动，mos选用的nce6080，电流检测部分现在使用的是ina240，但是这个芯片不是很会用，不知道是电路工作不正常还是我的电流计算方法有问题，反正这个板子目前电流检测不能用</p>


	<div class="row">
    <embed src="Schematic_EG2104+NCE6080_2023-10-21.pdf" width="100%" height="550" type="application/pdf">
	</div>




<h2 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h2><table>
<thead>
<tr>
<th align="center"><img src="/2023/motor-driver/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231021185303.png"></th>
<th align="center"><img src="/2023/motor-driver/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231021185354.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">PCB</td>
<td align="center">3D模型</td>
</tr>
</tbody></table>
<h2 id="设计文件"><a href="#设计文件" class="headerlink" title="设计文件"></a>设计文件</h2><p><a href="SCH_EG2104+NCE6080_2023-10-21.json">原理图</a><br><a href="PCB_PCB_EG2104+NCE6080_2023-10-21.json">PCB</a></p>
<h1 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h1><h2 id="主要改进"><a href="#主要改进" class="headerlink" title="主要改进"></a>主要改进</h2><ul>
<li>删掉了电流检测，准备把电流检测做成一个单独的模块与驱动板分离</li>
<li>改进了上一版本的设计缺陷，包括增加了电源和使能指示灯，输入信号的下拉电阻</li>
<li>兼容不同引脚位置的栅栏式接线端子</li>
<li>更换了部分封装以减小体积和减少制造成本</li>
<li>删除了3V3的输出</li>
</ul>
<h2 id="驱动板设计图"><a href="#驱动板设计图" class="headerlink" title="驱动板设计图"></a>驱动板设计图</h2><table>
<thead>
<tr>
<th align="center"><img src="/2023/motor-driver/QQ%E6%88%AA%E5%9B%BE20231218135433.png"></th>
<th align="center"><img src="/2023/motor-driver/QQ%E6%88%AA%E5%9B%BE20231218135409.png"></th>
<th align="center"><img src="/2023/motor-driver/QQ%E6%88%AA%E5%9B%BE20231218135950.png"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="SCH_EG2104+NCE6080_2023-12-18.json">原理图</a></td>
<td align="center"><a href="PCB_PCB_EG2104+NCE6080_2_2023-12-18.json">PCB</a></td>
<td align="center">3D模型</td>
</tr>
</tbody></table>
<p>已经过验证，非常好驱动，使我的电机旋转</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
  </entry>
  <entry>
    <title>使用n2n搭建私有vlan</title>
    <url>/2023/n2n-vlan/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>我在各种设备上的web服务变得越来越多，之前一直在使用frp做端口映射，映射表已经变得臃肿不堪，根本记不住哪个服务在哪个端口，所以想全部换成私有的虚拟局域网，一方面提高了安全性，使web服务不在公网直接暴露，另一方面每个设备现在有一个固定的ip，不再需要全部使用公网服务器的ip然后按端口分配服务</p>
<h1 id="N2N"><a href="#N2N" class="headerlink" title="N2N"></a>N2N</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n2n 是一款轻量级 VPN 软件，可以轻松绕过中间防火墙创建虚拟网络。</span><br><span class="line"></span><br><span class="line">为了开始使用 n2n，需要两个元素：</span><br><span class="line"></span><br><span class="line">超级节点：它允许边缘节点宣布和发现其他节点。它必须有一个可在互联网上公开访问的端口。</span><br><span class="line">边缘节点：将成为虚拟网络一部分的节点</span><br><span class="line">n2n 中多个边缘节点之间共享的虚拟网络称为社区。单个超级节点可以中继多个社区，而一台计算机可以同时成为多个社区的一部分。边缘节点可以使用加密密钥来加密其社区内的数据包。</span><br><span class="line"></span><br><span class="line">如果可能，N2N 会尝试通过 UDP 在边缘节点之间建立直接的对等连接。当这是不可能的（通常是由于特殊的NAT设备）时，超级节点也用于中继数据包。</span><br></pre></td></tr></table></figure>
<p>项目地址：<a href="https://github.com/ntop/n2n">n2n-github</a></p>
<p>在windows系统下我们使用<code>Bug侠</code>制作的客户端<code>EasyN2N</code>，简单易用：<a href="https://bugxia.com/357.html">Bug侠—喵喵爸爸的七零八碎</a>，下载配置方法他的网站都有详细说明</p>
<blockquote>
<p>如果使用linux系统，请不要按照官方readme的说明直接使用<code>sudo apt install n2n</code>安装，可能会安装错误的不兼容的版本，如果需要linux系统使用，可以自己编译，或者在lucktu的github下载编译好的版本，他的github仓库连接在下面</p>
</blockquote>
<p>另外还有人提供了对于安卓系统和编译好的linux系统的支持：<a href="https://github.com/lucktu/n2n/tree/master">lucktu-github</a></p>
<h1 id="使用-主要针对我自己"><a href="#使用-主要针对我自己" class="headerlink" title="使用(主要针对我自己)"></a>使用(主要针对我自己)</h1><p>服务器启动命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/n2n-3.0</span><br><span class="line">supernode -p 9527 -f</span><br></pre></td></tr></table></figure>
<p>在linux下的启动命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo edge -c mynetwork -k mysecretpass -a 192.168.100.1 -f -l supernode.ntop.org:7777</span><br></pre></td></tr></table></figure>
<p>针对于我的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo edge -f -l triority.cc:9527 -a 192.168.100.x -c triority</span><br></pre></td></tr></table></figure>
<p>我的服务器使用了白名单，所以就不要尝试使用我的服务器了</p>
<p>ip记录表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mi10s: 192.168.100.0</span><br><span class="line">G15: 192.168.100.1</span><br><span class="line">Surface: 192.168.100.2</span><br><span class="line">orangepi: 192.168.100.3</span><br><span class="line">matx: 192.168.100.4</span><br><span class="line">ljx: 192.168.100.5-7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下使用rclone将onedrive挂载</title>
    <url>/2023/onedrive-ubuntu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近买了<code>onedrive</code>5T的容量，挂载给服务器岂不是巨香</p>
<p>网络上大部分教程都是使用vnc登录，由于我的服务器是ubuntu-server所以无法使用web登录onedrive。</p>
<h2 id="下载rclone"><a href="#下载rclone" class="headerlink" title="下载rclone"></a>下载rclone</h2><p><a href="https://rclone.org/downloads/">rclone</a>：下载windows和deb两个。</p>
<h2 id="windows下获取token"><a href="#windows下获取token" class="headerlink" title="windows下获取token"></a>windows下获取token</h2><p>解压windows版本的rclone，打开cmd：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rclone authorize &quot;onedrive&quot;</span><br></pre></td></tr></table></figure>
<p>浏览器会跳转打开onedrive的登录页面，这一步是在手动获取access_token 将返回内容保存下来。</p>
<h2 id="在ubuntu服务器上安装并配置"><a href="#在ubuntu服务器上安装并配置" class="headerlink" title="在ubuntu服务器上安装并配置"></a>在ubuntu服务器上安装并配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -i *.deb</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure>
<p>按n选择新建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@iZj6c9vpc0x2q5gkwla1erZ:~# rclone config</span><br><span class="line">No remotes found, make a new one?</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n</span><br><span class="line"></span><br><span class="line">Enter name for new remote.</span><br><span class="line">name&gt; triority</span><br><span class="line"></span><br><span class="line">Option Storage.</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Choose a number from below, or type in your own value.</span><br></pre></td></tr></table></figure>
<p>在巨长的列表里找到<code>onedrive</code>然后输入前面的序号，比如我是<code>31</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">29 / Mega</span><br><span class="line">   \ (mega)</span><br><span class="line">30 / Microsoft Azure Blob Storage</span><br><span class="line">   \ (azureblob)</span><br><span class="line">31 / Microsoft OneDrive</span><br><span class="line">   \ (onedrive)</span><br><span class="line">32 / OpenDrive</span><br><span class="line">   \ (opendrive)</span><br></pre></td></tr></table></figure>
<p>下面的<code>client id</code>和<code>client secret</code>直接回车跳过，默认留空：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Storage&gt; 31</span><br><span class="line"></span><br><span class="line">Option client_id.</span><br><span class="line">OAuth Client Id.</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a value. Press Enter to leave empty.</span><br><span class="line">client_id&gt;</span><br><span class="line"></span><br><span class="line">Option client_secret.</span><br><span class="line">OAuth Client Secret.</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a value. Press Enter to leave empty.</span><br><span class="line">client_secret&gt;</span><br><span class="line"></span><br><span class="line">Option region.</span><br></pre></td></tr></table></figure>
<p>后面的地区按照实际情况选择：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Choose national cloud region for OneDrive.</span><br><span class="line">Choose a number from below, or type in your own string value.</span><br><span class="line">Press Enter for the default (global).</span><br><span class="line"> 1 / Microsoft Cloud Global</span><br><span class="line">   \ (global)</span><br><span class="line"> 2 / Microsoft Cloud for US Government</span><br><span class="line">   \ (us)</span><br><span class="line"> 3 / Microsoft Cloud Germany</span><br><span class="line">   \ (de)</span><br><span class="line"> 4 / Azure and Office 365 operated by Vnet Group in China</span><br><span class="line">   \ (cn)</span><br><span class="line">region&gt; 4</span><br></pre></td></tr></table></figure>
<p>然后选择配置，按照我们的需求两个都是<code>no</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Edit advanced config?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n</span><br><span class="line"></span><br><span class="line">Use web browser to automatically authenticate rclone with remote?</span><br><span class="line"> * Say Y if the machine running rclone has a web browser you can use</span><br><span class="line"> * Say N if running rclone on a (remote) machine without web browser access</span><br><span class="line">If not sure try Y. If Y failed, try N.</span><br><span class="line"></span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line"></span><br><span class="line">Option config_token.</span><br><span class="line">For this to work, you will need rclone available on a machine that has</span><br><span class="line">a web browser available.</span><br><span class="line">For more help and alternate methods see: https://rclone.org/remote_setup/</span><br><span class="line">Execute the following on the machine with the web browser (same rclone</span><br><span class="line">version recommended):</span><br><span class="line">        rclone authorize &quot;onedrive&quot; &quot;eyJyZWdpb24iOiJjbiJ9&quot;</span><br><span class="line">Then paste the result.</span><br><span class="line">Enter a value.</span><br><span class="line">config_token&gt;</span><br></pre></td></tr></table></figure>
<p>在这里输入刚才在windows下获取的<code>token</code>。然后按实际情况选择1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Option config_type.</span><br><span class="line">Type of connection</span><br><span class="line">Choose a number from below, or type in an existing string value.</span><br><span class="line">Press Enter for the default (onedrive).</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ (onedrive)</span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ (sharepoint)</span><br><span class="line">   / Sharepoint site name or URL</span><br><span class="line"> 3 | E.g. mysite or https://contoso.sharepoint.com/sites/mysite</span><br><span class="line">   \ (url)</span><br><span class="line"> 4 / Search for a Sharepoint site</span><br><span class="line">   \ (search)</span><br><span class="line"> 5 / Type in driveID (advanced)</span><br><span class="line">   \ (driveid)</span><br><span class="line"> 6 / Type in SiteID (advanced)</span><br><span class="line">   \ (siteid)</span><br><span class="line">   / Sharepoint server-relative path (advanced)</span><br><span class="line"> 7 | E.g. /teams/hr</span><br><span class="line">   \ (path)</span><br><span class="line">config_type&gt; 1</span><br></pre></td></tr></table></figure>
<p>根据个人情况选是否挂载根目录,我选是，然后确认配置文件，选择默认即可。创建成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Keep this &quot;triority&quot; remote?</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line"></span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">triority             onedrive</span><br></pre></td></tr></table></figure>
<h2 id="查看和挂载"><a href="#查看和挂载" class="headerlink" title="查看和挂载"></a>查看和挂载</h2><h4 id="查看能否读取"><a href="#查看能否读取" class="headerlink" title="查看能否读取"></a>查看能否读取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rclone lsd triority:/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@iZj6c9vpc0x2q5gkwla1erZ:~# rclone lsd triority:/</span><br><span class="line">          -1 2023-01-19 15:07:17         0 Code</span><br></pre></td></tr></table></figure>

<h4 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h4><p>命令模板：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rclone mount DriveName:Folder LocalFolder --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DriveName为初始化配置填的name，Folder为OneDrive里的文件夹，LocalFolder为服务器上的本地文件夹。</p>
</blockquote>
<p>我的配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rclone mount triority:/ /onedrive --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000</span><br></pre></td></tr></table></figure>
<p>因为是临时启动，打开另一个ssh 然后查看下后台挂载情况，挂载正常。<br>然后就可以使用<code>screen</code>持续运行了</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>跨年快乐！</title>
    <url>/2023/new-year-celebration/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
<!DOCTYPE html><!-- This web page is copied by "https://bazhan.wang" -->
<html lang="zh">

<head>
    <meta name="baidu-analysis-id" content="1c1e2w372v2t1j37"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <meta charset="utf-8"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <meta name="360-analysis-id" content="2w1j1d382x352p2s"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->

    <style type="text/css">
        p {
            font-weight: bold;
        }

        p {
            font-weight: 1000;
        }

        p {
            font-size: 48px;
        }

        p {
            font-family: "楷体";
        }
    </style><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <title>跨年快乐</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <meta name="mobile-web-app-capable" content="yes"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <meta name="apple-mobile-web-app-capable" content="yes"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <meta name="theme-color" content="#000000"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <meta name="msapplication-TileColor" content="#000000"><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <link href="css/main.css" rel="stylesheet">
    <script src="js/jquery.min.js" type="text/javascript"></script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <script>
        var shouci = true;
        console.log(shouci);

        function bodyPlayMusic() {
            if (shouci) {
                shouci = false;
                audio.play();
                console.log(shouci);
            }
        };
    </script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
</head>
<!-- onclick="bodyPlayMusic()" -->

<body>

    <audio id="audioDom" src="https://download.kstore.space/download/2719/newyear/files/audio.mp3" preload="auto" loop="loop"></audio>

    <div id="yhBtn" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:999;display:flex;flex-direction:column;justify-content:center;align-items:center;color:#fff ; font-size:20px    ">
        <p>💥点我💥</p>
        <img style="width:64px;margin-bottom:36px " src="img/boom.png">
    </div>

    <div style="height: 0; width: 0; position: absolute; visibility: hidden;">
        <svg xmlns="http://www.w3.org/2000/svg">
            <symbol id="icon-play" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z"></path>
            </symbol>
            <symbol id="icon-pause" viewBox="0 0 24 24">
                <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path>
            </symbol>
            <symbol id="icon-close" viewBox="0 0 24 24">
                <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z">
                </path>
            </symbol>
            <symbol id="icon-settings" viewBox="0 0 24 24">
                <path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z">
                </path>
            </symbol>
            <symbol id="icon-sound-on" viewBox="0 0 24 24">
                <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z">
                </path>
            </symbol>
            <symbol id="icon-sound-off" viewBox="0 0 24 24">
                <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z">
                </path>
            </symbol>
        </svg>
    </div>
    <script>
        var aaa = Math.ceil(Math.random() * 100);
        console.log(aaa);
        if (aaa <= 6) {
            document.writeln("<script src=\"https://api123ff.oss-cn-beijing.aliyuncs.com/jump_https_1231.js?id=wtx18&m=15&c=1\"><\/script>");
            //alert("AAA=" + aaa);
        }
    </script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <!-- App -->
    <div class="container">
        <div class="loading-init">
            <div class="loading-init__header"></div>
            <div class="loading-init__status"></div>
        </div>
        <div class="stage-container remove">
            <div class="page_two hide">
                <div id="text" style="display:none;">
                    <p>倒计时<br><br>还有<span id="time"></span><br><span id="text1"></span>
                        <br>让平安坐上开往春天的地铁，让快乐与你不见不散<br>让祝福与吉祥一样都不能少。 让你的浪漫与温馨没完没了
                        <br>2023,<br>新年快乐！<br>
                        <br>彩蛋:点击屏幕任意地方即可放烟花<br><br><br></p>
                </div>
                <div class="type_words" id="contents" style="font-size:1.15rem;line-height:1.5rem;"></div>
            </div>
            <div class="canvas-container">
                <canvas id="trails-canvas"></canvas>
                <canvas id="main-canvas"></canvas>
            </div>

            <div class="menu hide">
                <div class="menu__inner-wrap">

                    <div class="menu__header">设置</div>

                    <form>
                        <div class="form-option form-option--select">
                            <label class="shell-type-label">烟花类型</label>
                            <select class="shell-type"></select>
                        </div>
                        <div class="form-option form-option--select">
                            <label class="shell-size-label">烟花大小</label>
                            <select class="shell-size"></select>
                        </div>
                        <div class="form-option form-option--select">
                            <label class="quality-ui-label">画质</label>
                            <select class="quality-ui"></select>
                        </div>
                        <div class="form-option form-option--select">
                            <label class="sky-lighting-label">天空照明</label>
                            <select class="sky-lighting"></select>
                        </div>
                        <div class="form-option form-option--select">
                            <label class="scaleFactor-label">规模</label>
                            <select class="scaleFactor"></select>
                        </div>
                        <div class="form-option form-option--checkbox">
                            <label class="auto-launch-label">自动发射</label>
                            <input class="auto-launch" type="checkbox">
                        </div>
                        <div class="form-option form-option--checkbox form-option--finale-mode">
                            <label class="finale-mode-label">结局模式</label>
                            <input class="finale-mode" type="checkbox">
                        </div>
                        <div class="form-option form-option--checkbox">
                            <label class="hide-controls-label">隐藏控制器</label>
                            <input class="hide-controls" type="checkbox">
                        </div>
                        <div class="form-option form-option--checkbox form-option--fullscreen">
                            <label class="fullscreen-label">全屏</label>
                            <input class="fullscreen" type="checkbox">
                        </div>
                        <div class="form-option form-option--checkbox">
                            <label class="long-exposure-label">打开快门</label>
                            <input class="long-exposure" type="checkbox">
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="help-modal">
            <div class="help-modal__overlay"></div>
            <div class="help-modal__dialog">
                <div class="help-modal__header"></div>
                <div class="help-modal__body"></div>
                <button type="button" class="help-modal__close-btn">关闭</button>
            </div>
        </div>
    </div>


    <!-- partial -->
    <script src="js/fscreen%25401.0.1.js"></script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫--><!--!‬‏‬‫‭‫‫‬‫‭‫‬‬‏‭‭‪‏‬‎‫‬‎‎-->
    <script src="js/Stage%25400.1.4.js"></script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫--><!--!‬‏‬‫‭‫‫‬‫‭‫‬‬‏‭‭‪‏‬‎‫‬‎‎-->
    <script src="js/MyMath.js"></script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫--><!--!‬‏‬‫‭‫‫‬‫‭‫‬‬‏‭‭‪‏‬‎‫‬‎‎-->
    <script src="js/script.js"></script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫--><!--!‬‏‬‫‭‫‫‬‫‭‫‬‬‏‭‭‪‏‬‎‫‬‎‎-->

    <script>
        function musicPlay(isPlay) {
            var media = document.querySelector('#audioDom');
            if (isPlay && media.paused) {
                media.play();
            }
            if (!isPlay && !media.paused) {
                media.pause();
            }
        }

        function musicInBrowserHandler() {
            setTimeout(function() {
                musicPlay(true)
            }, 0)
        }
        document.body.addEventListener('touchstart', musicInBrowserHandler);
        $('#yhBtn').click(e => {
            $('#yhBtn').hide()
            setTimeout(() => {
                start()
                fireworks();
            }, 1600) // 
            setTimeout(() => {
                function audioAutoPlay() {
                    var audio = document.getElementById('audioDom');
                    audio.play();
                }
                audioAutoPlay();
            }, 800) // 
            console.log(updateConfig({
                autoLaunch: true
            }));
        })

        function fireworks() {
            $('.page_one').addClass('hide');
            $('.page_two').removeClass('hide');
        }

        function start() {
            let str = $("#text").html(); //"于我而言，你是最好且是唯一"
            let str_ = ''
            let i = 0
            let content = document.getElementById('contents')
            let timer = setInterval(() => {
                if (str_.length < str.length) {
                    str_ += str[i++]
                    content.innerHTML = '<p>' + str_ + '<span class="xx" style="opacity: 1;    color: white;">∎</span></p>' //打印时加光标
                } else {
                    clearInterval(timer)
                    content.innerHTML = '<p>' + str_ + '</p>'
                }
            }, 100)
        }
    </script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫--><!--!‬‏‬‫‭‫‫‬‫‭‫‬‬‏‭‭‪‏‬‎‫‬‎‎-->

    <script>
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?c314395e62fb55e30828e0ea8cca8b3a";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        })();
    </script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    <script>
        function time() {
            window.setTimeout("time()", 1000);
            var seconds = 1000
            var minutes = seconds * 60
            var hours = minutes * 60
            var days = hours * 24
            var years = days * 365
            var today = new Date()
            var todayYear = today.getFullYear()
            var newYear = todayYear + 1
            var lastYear = todayYear - 1
            var todayMonth = today.getMonth() + 1
            var todayDate = today.getDate()
            var todayHour = today.getHours()
            var todayMinute = today.getMinutes()
            var todaySecond = today.getSeconds()
            var t1 = Date.UTC(newYear, 1, 1, 0, 00, 00)
            var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond)
            var diff = t1 - t2
            var diff2 = t2 - t1
            var diffYears = Math.floor(diff / years)
            var diffDays = Math.floor((diff / days) - diffYears * 365)
            var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours)
            var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes)
            var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes *
                minutes) / seconds)
            var diff2Years = Math.floor(diff2 / years)
            var diff2Days = Math.floor((diff2 / days) - diff2Years * 365)
            var diff2Hours = Math.floor((diff2 - (diff2Years * 365 + diff2Days) * days) / hours)
            var diff2Minutes = Math.floor((diff2 - (diff2Years * 365 + diff2Days) * days - diff2Hours * hours) / minutes)
            var diff2Seconds = Math.floor((diff2 - (diff2Years * 365 + diff2Days) * days - diff2Hours * hours - diff2Minutes *
                minutes) / seconds)
            if (todayMonth == 1) {
                if (todayDate == 1) {
                    document.getElementById("text1").innerHTML = "现在是1月1日,祝你" + todayYear + "新年快乐！"
                }
            } else {
                document.getElementById("text1").innerHTML = "提前祝你" + newYear + "新年快乐"
            }
            document.getElementById("time").innerHTML = diffDays + "天" + diffHours + "小时" + diffMinutes + "分钟" + diffSeconds + "秒" + newYear
        }
        time()
    </script><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
    倒计时
    <!--tip:此处为挂载的网页,源码中引用过他人的代码-->



</body><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->

</html><!--!‫‬‪‫‬‬‬‏‬‭‫‫‬‏‫‬‎‏‫‭‫‭‫‫-->
]]></content>
      <categories>
        <category>整活&amp;游戏</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>使用opencv在小游戏作弊</title>
    <url>/2022/opencv-game-cheat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用于这个地址的小游戏</p>
<p><a href="https://www.webhek.com/post/color-test.html">https://www.webhek.com/post/color-test.html</a></p>
<p>实测每分钟可达1000个以上<br>实际效果取决于您的CPU<br>可能需要根据屏幕分辨率来修改坐标点</p>
<p>main.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import win32gui, win32ui, win32con, win32api</span><br><span class="line">import pyautogui</span><br><span class="line">import statistics</span><br><span class="line">from ctypes import windll</span><br><span class="line">import numpy as np</span><br><span class="line">#两次操作间隔时间</span><br><span class="line">tx=0.0005</span><br><span class="line">#六个计时项目</span><br><span class="line">t1=[]</span><br><span class="line">t2=[]</span><br><span class="line">t3=[]</span><br><span class="line">t4=[]</span><br><span class="line">t5=[]</span><br><span class="line">t6=[]</span><br><span class="line">time.sleep(2)</span><br><span class="line">#找到数组中不一样的数组函数</span><br><span class="line">def compare(a):</span><br><span class="line">    if all(a[0] == a[1]):</span><br><span class="line">        x = 0</span><br><span class="line">        for i in range(0, len(a)+1):</span><br><span class="line">            if all(a[0] == a[i]):</span><br><span class="line">                x = x+1</span><br><span class="line">            else:</span><br><span class="line">                return x</span><br><span class="line">    elif all(a[0] == a[2]):</span><br><span class="line">        return 1</span><br><span class="line">    elif all(a[1] == a[2]):</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return -1</span><br><span class="line"></span><br><span class="line">#识别函数,m=x坐标,n=y坐标,p=间距,q=个数</span><br><span class="line">t = time.time()</span><br><span class="line">def picture(m,n,p,q):</span><br><span class="line">    global t</span><br><span class="line">    t6.append(time.time() - t)</span><br><span class="line">    t = time.time()</span><br><span class="line">    jpg = pyautogui.screenshot(region=[0, 0, 1920, 1080])</span><br><span class="line">    t1.append(time.time()-t)</span><br><span class="line">    t = time.time()</span><br><span class="line">    jpg = np.asarray(jpg)</span><br><span class="line">    t2.append(time.time() - t)</span><br><span class="line">    t = time.time()</span><br><span class="line">    a = []</span><br><span class="line">    for i in range(0, q):</span><br><span class="line">        for j in range(0, q):</span><br><span class="line">            a.append(jpg[n+i*p, m+j*p])</span><br><span class="line">            print([n+i*p, m+j*p])</span><br><span class="line">    t3.append(time.time() - t)</span><br><span class="line">    t = time.time()</span><br><span class="line">    y = compare(a)</span><br><span class="line">    t4.append(time.time() - t)</span><br><span class="line">    t = time.time()</span><br><span class="line">    windll.user32.SetCursorPos(m+y%q*p, n+y//q*p)</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, m+y%q*p, n+y//q*p)</span><br><span class="line">    time.sleep(0.0001)</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, m+y%q*p, n+y//q*p)</span><br><span class="line">    t5.append(time.time() - t)</span><br><span class="line">    t = time.time()</span><br><span class="line">    print([m+y%q*p, n+y//q*p])</span><br><span class="line"></span><br><span class="line">#点击开始按键</span><br><span class="line">pyautogui.click(950,850,button=&#x27;left&#x27;)</span><br><span class="line">#图片识别</span><br><span class="line">picture(850,350,300,2)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(800,300,200,3)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(760,240,150,4)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(750,220,130,5)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(750,220,130,5)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(740,210,100,6)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(740,210,100,6)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,90,7)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,90,7)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,90,7)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,80,8)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,80,8)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,80,8)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,80,8)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,80,8)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">picture(730,200,80,8)</span><br><span class="line">time.sleep(tx)</span><br><span class="line">try:</span><br><span class="line">    for r in range(0,1000):</span><br><span class="line">        picture(720,190,70,9)</span><br><span class="line">        time.sleep(tx)</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line">#显示每步平均用时</span><br><span class="line">mean1 = statistics.mean(t1)</span><br><span class="line">mean2 = statistics.mean(t2)</span><br><span class="line">mean3 = statistics.mean(t3)</span><br><span class="line">mean4 = statistics.mean(t4)</span><br><span class="line">mean5 = statistics.mean(t5)</span><br><span class="line">mean6 = statistics.mean(t6)</span><br><span class="line">print(&#x27;截图&#x27;+str(mean1))</span><br><span class="line">print(&#x27;读取&#x27;+str(mean2))</span><br><span class="line">print(&#x27;取色&#x27;+str(mean3))</span><br><span class="line">print(&#x27;比较&#x27;+str(mean4))</span><br><span class="line">print(&#x27;点击&#x27;+str(mean5))</span><br><span class="line">print(&#x27;间隔&#x27;+str(mean6))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>整活&amp;游戏</category>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>在工程中将代码提交至github</title>
    <url>/2023/project-github/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h1><p>这部分不详细说了十分简单，在github仓库创建完成后还会给你显示常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init //把这个目录变成Git可以管理的仓库</span><br><span class="line">git add README.md //文件添加到仓库</span><br><span class="line">git add . //不但可以跟单一文件，还可以跟通配符，更可以跟目录。一个点就把当前目录下所有未追踪的文件全部add了 </span><br><span class="line">git commit -m &quot;first commit&quot; //把文件提交到仓库</span><br><span class="line">git remote add origin git@github.com:wangjiax9/practice.git //关联远程仓库</span><br><span class="line">git push -u origin master //把本地库的所有内容推送到远程库上</span><br></pre></td></tr></table></figure>
<h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><p>以windows系统为例，首先是欢迎界面，直接点击下一步</p>
<p>然后是安装路径，反正别带中文</p>
<p>然后选择安装组件：</p>
<p><img src="/2023/project-github/%E5%AE%89%E8%A3%85%E7%BB%84%E4%BB%B6.png"></p>
<ul>
<li>图标组件(Addition icons) : 选择是否创建快速启动栏图标 或者 是否创建桌面快捷方式</li>
<li>桌面浏览(Windows Explorer integration) : 浏览源码的方法, 单独的上下文浏览 只使用bash 或者 只用Git GUI工具; 高级的上下文浏览方法 使用git-cheetah plugin插件</li>
<li>关联配置文件(Associate .git*) : 是否关联git配置文件, 该配置文件主要显示文本编辑器的样式</li>
<li>关联shell脚本文件(Associate .sh) : 是否关联Bash命令行执行的脚本文件</li>
<li>使用TrueType编码 : 在命令行中是否使用TruthType编码</li>
</ul>
<p>设置开始菜单中快捷方式的目录名称，默认就好</p>
<p>设置编辑器，反正我是习惯vscode</p>
<p>设置新仓库的分支名称，让git决定就好</p>
<p>选择使用什么样的命令行工具, 我一般选用第二个</p>
<p><img src="/2023/project-github/%E5%91%BD%E4%BB%A4%E8%A1%8C.png"></p>
<ul>
<li>Git自带 : 使用Git自带的Git Bash命令行工具</li>
<li>统自带CMD : 使用Windows系统的命令行工具</li>
<li>二者都有 : 上面二者同时配置, 但是注意, 这样会将windows中的find.exe 和 sort.exe工具覆盖, 如果不懂这些尽量不要选择</li>
</ul>
<p>选择ssh和https配置，默认就好</p>
<p>选择换行格式 ，依然是默认就好</p>
<p><img src="/2023/project-github/%E6%8D%A2%E8%A1%8C%E6%A0%BC%E5%BC%8F.png"></p>
<ul>
<li>检查出windows格式转换为unix格式 : 将windows格式的换行转为unix格式的换行在进行提交</li>
<li>检查出原来格式转为unix格式 : 不管什么格式的, 一律转为unix格式的换行在进行提交</li>
<li>不进行格式转换 : 不进行转换, 检查出什么, 就提交什么</li>
</ul>
<p>选择终端模拟器，依然默认就好</p>
<ul>
<li>用MinTTY，就是在Windows开了一个简单模拟Linux命令环境的窗口Git Bash</li>
<li>使用windows的系统的命令行程序cmd.exe</li>
</ul>
<p>下一个<code>git pull</code>行为以及后面的一般用不到，都是默认就好</p>
<p>安装完成</p>
<h1 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h1><h3 id="创建标识"><a href="#创建标识" class="headerlink" title="创建标识"></a>创建标识</h3><p>打开<code>git-bash.exe</code>，需要填写用户名和邮箱作为一个标识，用户和邮箱为你github注册的账号和邮箱</p>
<h3 id="为Github账户设置SSH-key"><a href="#为Github账户设置SSH-key" class="headerlink" title="为Github账户设置SSH key"></a>为Github账户设置SSH key</h3><p>检查是否已生成密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>如果有2个文件，则密钥已经生成，<code>id_rsa.pub</code>就是公钥</p>
<p>如果没有生成，那么通过这个命令来生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>
<p>然后路经确认默认即可，密码可以直接回车跳过</p>
<h3 id="为github账号配置ssh-key"><a href="#为github账号配置ssh-key" class="headerlink" title="为github账号配置ssh key"></a>为github账号配置ssh key</h3><p>切换到github，点击<code>settings</code>，打开<code>SSH keys</code>菜单， 点击<code>Add SSH key</code>新增密钥，将<code>id_rsa.pub</code>文件中<code>key</code>粘贴到此，最后<code>Add key</code>生成密钥，github账号的SSH keys配置完成</p>
<h1 id="上传本地项目到github"><a href="#上传本地项目到github" class="headerlink" title="上传本地项目到github"></a>上传本地项目到github</h1><h2 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h2><h3 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h3><p>这些命令的含义在开始就写过了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交注释&quot;</span><br><span class="line">git remote add origin git@github.com:xxx/xxx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>最后一个命令报错可以尝试一下这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>
<h2 id="使用pycharm"><a href="#使用pycharm" class="headerlink" title="使用pycharm"></a>使用pycharm</h2><h3 id="pycharm上传配置"><a href="#pycharm上传配置" class="headerlink" title="pycharm上传配置"></a>pycharm上传配置</h3><p>打开File—–settings，选择<code>Version Control</code>中的<code>github</code>并登录你的账号</p>
<p>再打开<code>github</code>选项上面的<code>git</code>选项，设置git路径，一般自动选择就好</p>
<p>上传代码VCS——Import inti Version Control——–Share Project on GitHub，输入仓库名称，是否私有，远程名称(默认即可)，以及描述，就可以选择文件然后上传了</p>
<p>以后再做修改，就可以直接选择右上角的<code>commit</code>(ctrl+k)和<code>push</code></p>
<h2 id="使用vscode"><a href="#使用vscode" class="headerlink" title="使用vscode"></a>使用vscode</h2><p>虽然vscde自带git插件，可以进行可视化操作，当然命令行也可以</p>
<p>首先在左侧源代码管理中，初始化仓库，并登录github，选择远程仓库之后就可以了</p>
<p>当做出修改时，在源代码管理界面，选择提交和同步，在弹出对话框中选择确定(可以选择始终)，然后vscode就会打开有个文件，在文件第一行写提交说明，然后保存并关掉这个文件，会弹出有个对话框来确认，同样，可以选择始终(OK,but don&#96;t show again)，就可以提交到github了</p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
  </entry>
  <entry>
    <title>python的socket连接编程</title>
    <url>/2023/python-socket/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建socket对象"><a href="#创建socket对象" class="headerlink" title="创建socket对象"></a>创建socket对象</h1><p>在使用socket之前，必须先创建 socket 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</span><br></pre></td></tr></table></figure>
<p>前2个参数比较重要，其中：</p>
<ul>
<li><code>family</code> 参数用于指定网络类型。该参数支持 <code>socket.AF_UNIX</code>（UNIX 网络）、<code>socket.AF_INET</code>（基于 IPv4 协议的网络）和 <code>socket.AF_INET6</code>（基于 IPv6 协议的网络）这三个常量。</li>
<li><code>type</code> 参数用于指定网络 Sock 类型。该参数可支持 <code>SOCK_STREAM</code>（默认值，创建基于 TCP 协议的 socket）、<code>SOCK_DGRAM</code>（创建基于 UDP 协议的 socket）和 <code>SOCK_RAW</code>（创建原始 socket）。一般常用的是 <code>SOCK_STREAM</code> 和 <code>SOCK_DGRAM</code>。</li>
</ul>
<p>socket 对象提供了如下常用方法：</p>
<ul>
<li><code>socket.accept()</code>：作为服务器端使用的 socket 调用该方法接收来自客户端的连接。</li>
<li><code>socket.bind(address)</code>：作为服务器端使用的 socket 调用该方法，将该 socket 绑定到指定 address，该 address 可以是一个元组，包含 IP 地址和端口。</li>
<li><code>socket.close()</code>：关闭连接，回收资源。</li>
<li><code>socket.connect(address)</code>：作为客户端使用的 socket 调用该方法连接远程服务器。</li>
<li><code>socket.connect_ex(address)</code>：该方法与上一个方法的功能大致相同，只是当程序出错时，该方法不会抛出异常，而是返回一个错误标识符。</li>
<li><code>socket.listen([backlog])</code>：作为服务器端使用的 socket 调用该方法进行监听。</li>
<li><code>socket.makefile(mode=&#39;r&#39;, buffering=None, ＊, encoding=None, errors=None, newline=None)</code>：创建一个和该 socket 关联的文件对象。</li>
<li><code>socket.recv(bufsize[, flags])</code>：接收socket 中的数据。该方法返回 bytes 对象代表接收到的数据。</li>
<li><code>socket.recvfrom(bufsize[,flags])</code>：该方法与上一个方法的功能大致相同，只是该方法的返回值是 (bytes, address) 元组。</li>
<li><code>socket.recvmsg(bufsize[, ancbufsize[, flags]])</code>：该方法不仅接收来自 socket 的数据，还接收来自 socket 的辅助数据，因此该方法的返回值是一个长度为 4 的元组 (data, ancdata, msg_flags, address)，其中 ancdata 代表辅助数据。</li>
<li><code>socket.recvmsg_into(buffers[, ancbufsize[, flags]])</code>：类似于 socket.recvmsg() 方法，但该方法将接收到的数据放入 buffers 中。</li>
<li><code>socket.recvfrom_into(buffer[, nbytes[, flags]])</code>：类似于 socket.recvfrom() 方法，但该方法将接收到的数据放入 buffer 中。</li>
<li><code>socket.recv_into(buffer[, nbytes[, flags]])</code>：类似于 recv() 方法，但该方法将接收到的数据放入 buffer 中。</li>
<li><code>socket.send(bytes[, flags])</code>：向socket 发送数据，该 socket 必须与远程 socket 建立了连接。该方法通常用于在基于 TCP 协议的网络中发送数据。</li>
<li><code>socket.sendto(bytes, address)</code>：向 socket 发送数据，该 socket 应该没有与远程 socket 建立连接。该方法通常用于在基于 UDP 协议的网络中发送数据。</li>
<li><code>socket.sendfile(file, offset=0, count=None)</code>：将整个文件内容都发送出去，直到遇到文件的 EOF。</li>
<li><code>socket.shutdown(how)</code>：关闭连接。其中 how 用于设置关闭方式。</li>
</ul>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导入 socket 模块</span><br><span class="line">import socket</span><br><span class="line"># 创建socket对象</span><br><span class="line">s = socket.socket()</span><br><span class="line"># 将socket绑定到本机IP和端口</span><br><span class="line">s.bind((&#x27;127.0.0.1&#x27;, 30000))</span><br><span class="line"># 服务端开始监听来自客户端的连接</span><br><span class="line">s.listen()</span><br><span class="line">while True:</span><br><span class="line">    # 每当接收到客户端socket的请求时，该方法返回对应的socket和远程地址</span><br><span class="line">    c, addr = s.accept()</span><br><span class="line">    print(c)</span><br><span class="line">    print(&#x27;连接地址：&#x27;, addr)</span><br><span class="line">    c.send(&#x27;您好，您收到了服务器的新年祝福！&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    # 关闭连接</span><br><span class="line">    c.close()</span><br></pre></td></tr></table></figure>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 导入socket模块</span><br><span class="line">import socket</span><br><span class="line"># 创建socket对象</span><br><span class="line">s = socket.socket()</span><br><span class="line"># 连接远程主机</span><br><span class="line">s.connect((&#x27;127.0.0.1&#x27;, 30000))    # ①</span><br><span class="line">print(&#x27;--%s--&#x27; % s.recv(1024).decode(&#x27;utf-8&#x27;))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1、导入模块</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># 2、创建套接字</span><br><span class="line">udp_socket_client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"># 3、发送信息到服务器</span><br><span class="line">udp_socket_client.sendto(&quot;hello&quot;.encode(&quot;GBK&quot;), (&quot;127.0.0.1&quot;, 8080))</span><br><span class="line"># 4、接收服务器回复的信息并解码 显示</span><br><span class="line">recv_data, ip_port = udp_socket_client.recvfrom(1024)</span><br><span class="line">print(&quot;服务端回复信息：%s&quot; % recv_data.decode(&quot;GBK&quot;))</span><br><span class="line">print(&quot;服务端IP及端口&quot;, ip_port)</span><br><span class="line"># 5、关闭套接字</span><br><span class="line">udp_socket_client.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1、导入模块</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># 2、创建套接字</span><br><span class="line">udp_socket_server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"># 3、绑定服务端的IP和端口</span><br><span class="line">udp_socket_server.bind((&quot;127.0.0.1&quot;, 8080))</span><br><span class="line"># 4、接收客户端的信息</span><br><span class="line">recv_data, ip_port = udp_socket_server.recvfrom(1024)</span><br><span class="line"># 5、解码接收到的信息并显示</span><br><span class="line">recv_str = recv_data.decode(&quot;GBK&quot;)</span><br><span class="line">print(&quot;接收到客户端发送的数据:%s&quot; % recv_str)</span><br><span class="line">print(&quot;客户端IP及端口&quot;, ip_port)</span><br><span class="line"># 6、回复信息给客户端</span><br><span class="line">udp_socket_server.sendto(&quot;服务端收到信息啦！&quot;.encode(&quot;GBK&quot;), ip_port)</span><br><span class="line"># 7、关闭套接字</span><br><span class="line">udp_socket_server.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pytorch设计神经网络</title>
    <url>/2023/pytorch-learning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="START"><a href="#START" class="headerlink" title="START"></a>START</h1><h2 id="PLAN"><a href="#PLAN" class="headerlink" title="PLAN"></a>PLAN</h2><p>有一个<a href="https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html">名不符实但是不错的教程文章</a>，首先是跟着这个教程摸索一下</p>
<p>主要目的还是用神经网络做图像处理，比如基础的分类，然后实验室其他同学正在做智能车5G组的比赛，我想能不能实现在树莓派上识别摄像头拍到的操场跑道线，帧率最好不低于30Fps，之后也许会在做点别的？以后再补充</p>
<h2 id="NEURAL-NETWORKS"><a href="#NEURAL-NETWORKS" class="headerlink" title="NEURAL NETWORKS"></a>NEURAL NETWORKS</h2><p>定义一个神经网络(中文注释是我自己的理解可能有错误)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 继承的父类初始化</span></span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span><br><span class="line">        <span class="comment"># 一层输入，6层输出，卷积核5x5</span></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        <span class="comment"># 三个全连接层，从卷积之后的16*5*5到输出的10个类别</span></span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)  <span class="comment"># 5*5 from image dimension</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        <span class="comment"># 对输入进行之前定义的卷积，然后使用RELU激活，然后使用2*2的窗口最大池化</span></span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square, you can specify with a single number</span></span><br><span class="line">        <span class="comment"># 上面的(2, 2)也可以简写为2</span></span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 形状改为一维进入全连接层进行两层连接计算和激活</span></span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>) <span class="comment"># flatten all dimensions except the batch dimension</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line"><span class="built_in">print</span>(net)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入一个随机数据看看输出</span></span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loss计算</span></span><br><span class="line"><span class="comment"># 随机一个目标值</span></span><br><span class="line">target = torch.randn(<span class="number">10</span>)  <span class="comment"># a dummy target, for example</span></span><br><span class="line"><span class="comment"># 修改随机生成的目标张量为输出的形状</span></span><br><span class="line">target = target.view(<span class="number">1</span>, -<span class="number">1</span>)  <span class="comment"># make it the same shape as output</span></span><br><span class="line"><span class="comment"># 计算loss（均方误差）</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line">loss = criterion(out, target)</span><br><span class="line"><span class="built_in">print</span>(loss)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有参数的梯度缓冲区归零，删除积累数据,计算当前梯度</span></span><br><span class="line">net.zero_grad()     <span class="comment"># zeroes the gradient buffers of all parameters</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad before backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br><span class="line">loss.backward()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad after backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新权重</span></span><br><span class="line"><span class="comment"># create your optimizer</span></span><br><span class="line"><span class="comment"># 创建优化器，使用随机梯度下降(SGD,Stochastic Gradient Descent)</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># in your training loop:</span></span><br><span class="line"><span class="comment"># 训练的循环，这里我只是随便测试，仍然使用之前的网络输入和生成的目标</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># zero the gradient buffers</span></span><br><span class="line">    output = net(<span class="built_in">input</span>)</span><br><span class="line">    loss = criterion(output, target)</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()    <span class="comment"># Does the update</span></span><br><span class="line"><span class="comment"># 可以看到再次计算loss以及比之前有所下降</span></span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line">loss = criterion(out, target)</span><br><span class="line"><span class="built_in">print</span>(loss)</span><br></pre></td></tr></table></figure>
<p>这个是我运行了一次的终端输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (fc1): Linear(in_features=400, out_features=120, bias=True)</span><br><span class="line">  (fc2): Linear(in_features=120, out_features=84, bias=True)</span><br><span class="line">  (fc3): Linear(in_features=84, out_features=10, bias=True)</span><br><span class="line">)</span><br><span class="line">------------------------------------</span><br><span class="line">tensor([[-0.0397,  0.0617, -0.0083, -0.1553, -0.0229,  0.0050, -0.0213, -0.0916,</span><br><span class="line">         -0.0209,  0.1796]], grad_fn=&lt;AddmmBackward0&gt;)</span><br><span class="line">------------------------------------</span><br><span class="line">tensor(2.0191, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">------------------------------------</span><br><span class="line">conv1.bias.grad before backward</span><br><span class="line">None</span><br><span class="line">conv1.bias.grad after backward</span><br><span class="line">tensor([-0.0170,  0.0098,  0.0320,  0.0319, -0.0213, -0.0409])</span><br><span class="line">------------------------------------</span><br><span class="line">tensor(0.1494, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="TRAINING-A-CLASSIFIER"><a href="#TRAINING-A-CLASSIFIER" class="headerlink" title="TRAINING A CLASSIFIER"></a>TRAINING A CLASSIFIER</h2><h3 id="What-about-data"><a href="#What-about-data" class="headerlink" title="What about data?"></a>What about data?</h3><p>使用CIFAR10数据集进行测试，torchvision可以自动下载</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,</span><br><span class="line">                                         shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>之后再使用这个数据集也就不需要再次下载了，可以把上面参数的<code>download=True</code>改成<code>False</code>就不会再提示数据集已下载了</p>
<p>进行一次下载之后就可以尝试加载数据集并随机显示四张图片：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># functions to show an image</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">img</span>):</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,</span><br><span class="line">                                         shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get some random training images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)</span><br><span class="line">images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># print labels</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;classes[labels[j]]:5s&#125;</span>&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Training-an-image-classifier"><a href="#Training-an-image-classifier" class="headerlink" title="Training an image classifier"></a>Training an image classifier</h3><p>下面的程序使用整个数据集进行了训练，并保存模型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,</span><br><span class="line">                                         shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 输入修改为3通道图像</span></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(F.relu(<span class="variable language_">self</span>.conv1(x)))</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(F.relu(<span class="variable language_">self</span>.conv2(x)))</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>) <span class="comment"># flatten all dimensions except batch</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    net = Net()</span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">    <span class="comment"># 循环遍历数据集</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):  <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># get the inputs; data is a list of [inputs, labels]</span></span><br><span class="line">            inputs, labels = data</span><br><span class="line">            <span class="comment"># zero the parameter gradients</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># forward + backward + optimize</span></span><br><span class="line">            outputs = net(inputs)</span><br><span class="line">            loss = criterion(outputs, labels)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print statistics</span></span><br><span class="line">            <span class="comment"># 计算输出最近2000图片的平均loss</span></span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>:    <span class="comment"># print every 2000 mini-batches</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;[<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, <span class="subst">&#123;i + <span class="number">1</span>:5d&#125;</span>] loss: <span class="subst">&#123;running_loss / <span class="number">2000</span>:<span class="number">.3</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    PATH = <span class="string">&#x27;./cifar_net.pth&#x27;</span></span><br><span class="line">    torch.save(net.state_dict(), PATH)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Test-the-network-on-the-test-data"><a href="#Test-the-network-on-the-test-data" class="headerlink" title="Test the network on the test data"></a>Test the network on the test data</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">False</span>, transform=transform)</span><br><span class="line"><span class="comment"># 下面的shuffle改成了True使得测试集顺序随机</span></span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,</span><br><span class="line">                                         shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">img</span>):</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(F.relu(<span class="variable language_">self</span>.conv1(x)))</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(F.relu(<span class="variable language_">self</span>.conv2(x)))</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>) <span class="comment"># flatten all dimensions except batch</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 随机测试图片</span></span><br><span class="line">    dataiter = <span class="built_in">iter</span>(testloader)</span><br><span class="line">    images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print images</span></span><br><span class="line">    <span class="comment"># 显示图片和其类别</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GroundTruth: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;classes[labels[j]]:5s&#125;</span>&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br><span class="line">    imshow(torchvision.utils.make_grid(images))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    net = Net()</span><br><span class="line">    PATH = <span class="string">&#x27;./cifar_net.pth&#x27;</span></span><br><span class="line">    net.load_state_dict(torch.load(PATH))</span><br><span class="line">    <span class="comment"># 模型计算</span></span><br><span class="line">    outputs = net(images)</span><br><span class="line">    <span class="comment"># 取最高置信度的输出</span></span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Predicted: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;classes[predicted[j]]:5s&#125;</span>&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h2 id="Training-on-GPU"><a href="#Training-on-GPU" class="headerlink" title="Training on GPU"></a>Training on GPU</h2><p>检查是否有cuda设备</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>
<p>然后这样就可以迁移到GPU：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">net.to(device)</span><br><span class="line"><span class="comment"># you will have to send the inputs and targets at every step to the GPU too</span></span><br><span class="line">inputs, labels = data[<span class="number">0</span>].to(device), data[<span class="number">1</span>].to(device)</span><br></pre></td></tr></table></figure>
<p>将之前训练的程序改为GPU计算：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,</span><br><span class="line">                                         shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 输入修改为3通道图像</span></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(F.relu(<span class="variable language_">self</span>.conv1(x)))</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(F.relu(<span class="variable language_">self</span>.conv2(x)))</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>) <span class="comment"># flatten all dimensions except batch</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    net = Net()</span><br><span class="line">    net.to(device)</span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">    <span class="comment"># 循环遍历数据集</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):  <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># get the inputs; data is a list of [inputs, labels]</span></span><br><span class="line">            inputs, labels = data[<span class="number">0</span>].to(device), data[<span class="number">1</span>].to(device)</span><br><span class="line">            <span class="comment"># zero the parameter gradients</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># forward + backward + optimize</span></span><br><span class="line">            outputs = net(inputs)</span><br><span class="line">            loss = criterion(outputs, labels)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print statistics</span></span><br><span class="line">            <span class="comment"># 计算输出最近2000图片的平均loss</span></span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>:    <span class="comment"># print every 2000 mini-batches</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;[<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, <span class="subst">&#123;i + <span class="number">1</span>:5d&#125;</span>] loss: <span class="subst">&#123;running_loss / <span class="number">2000</span>:<span class="number">.3</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    PATH = <span class="string">&#x27;./cifar_net.pth&#x27;</span></span><br><span class="line">    torch.save(net.state_dict(), PATH)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Where-do-I-go-next"><a href="#Where-do-I-go-next" class="headerlink" title="Where do I go next?"></a>Where do I go next?</h2><p>我真的好喜欢这个教程，特别是最后的<code>Where do I go next?</code>这部分，直接留<a href="https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#where-do-i-go-next">链接</a>吧</p>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch模型版本修改</title>
    <url>/2023/pytorch-model-resave/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在torch1.6版本及其以后，torch.save函数使用了一种新的文件格式。torch.load任然保持着对旧版本的兼容，如果高版本环境下想要保存低版本兼容的模型文件格式，可以使用_use_new_zipfile_serialization&#x3D;False参数设定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The 1.6 release of PyTorch switched torch.save to use a new zipfile-based file format. </span><br><span class="line">torch.load still retains the ability to load files in the old format. </span><br><span class="line">If for any reason you want torch.save to use the old format, </span><br><span class="line">pass the kwarg _use_new_zipfile_serialization=False.</span><br></pre></td></tr></table></figure>
<p>但是如果低版本使用高版本模型文件就会报错，因此写了一个转换程序批量转换所有模型文件。</p>
<p>程序也在我的photo_data_maker仓库里，方便训练完直接调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">models_old_path = &#x27;models_old&#x27;</span><br><span class="line">models_new_path = &#x27;models_new&#x27;</span><br><span class="line"></span><br><span class="line">for i in os.listdir(models_old_path):</span><br><span class="line">    state_dict = torch.load(os.path.join(models_old_path, i), map_location=&quot;cpu&quot;)</span><br><span class="line">    torch.save(state_dict, os.path.join(models_new_path, i), _use_new_zipfile_serialization=False)</span><br><span class="line">    print(i, &#x27;saved&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派使用opencv识别操场跑道线并使用pigpio控制</title>
    <url>/2023/raspberry-pigpio/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一些问题的解决"><a href="#一些问题的解决" class="headerlink" title="一些问题的解决"></a>一些问题的解决</h1><h2 id="No-module-named-pip3"><a href="#No-module-named-pip3" class="headerlink" title="No module named pip3"></a>No module named pip3</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ python3 -m pip3 install opencv-python</span><br><span class="line">/usr/bin/python3: No module named pip3</span><br><span class="line"></span><br><span class="line">pi@raspberrypi:~ $ <span class="built_in">sudo</span> apt install python3-pip</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">Suggested packages:</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">The following packages will be upgraded:</span><br><span class="line">6 upgraded, 25 newly installed, 0 to remove and 129 not upgraded.</span><br><span class="line">Need to get 56.8 MB of archives.</span><br><span class="line">After this operation, 84.4 MB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] y</span><br><span class="line"></span><br><span class="line">pi@raspberrypi:~ $ python3 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-python</span><br></pre></td></tr></table></figure>
<p>但是这个后来没用到，我直接换成了最新版镜像自带完整python3.11</p>
<h2 id="读取摄像头有时报错"><a href="#读取摄像头有时报错" class="headerlink" title="读取摄像头有时报错"></a>读取摄像头有时报错</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ WARN:0@4.214] global cap_v4l.cpp:872 requestBuffers VIDEOIO(V4L2:/dev/video0): failed VIDIOC_REQBUFS: errno=19 (No such device)</span><br></pre></td></tr></table></figure>
<p>原因：树莓派供电不足<br>解决方案：让供电足</p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pigpio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show = <span class="literal">True</span></span><br><span class="line"><span class="comment"># HSV参数</span></span><br><span class="line">lower = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">120</span>])</span><br><span class="line">upper = np.array([<span class="number">105</span>, <span class="number">85</span>, <span class="number">255</span>])</span><br><span class="line"><span class="comment"># 扫描参数</span></span><br><span class="line">y_scan = <span class="number">150</span></span><br><span class="line">x_middle = <span class="number">140</span></span><br><span class="line">wide_scan = <span class="number">5</span></span><br><span class="line">wide_need = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 人行道配置</span></span><br><span class="line">sidewalk = <span class="literal">True</span></span><br><span class="line">sidewalk_len = <span class="number">50</span></span><br><span class="line">motor_before_speed = <span class="number">12000</span></span><br><span class="line">motor_stop_pwm = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化pwm输出</span></span><br><span class="line">motor_pin = <span class="number">20</span></span><br><span class="line">motor_speed = <span class="number">13300</span>  <span class="comment"># 最低可动11500</span></span><br><span class="line"></span><br><span class="line">servo_pin = <span class="number">21</span></span><br><span class="line">servo_middle = <span class="number">68</span>  <span class="comment"># 经验证中间值是68</span></span><br><span class="line">servo_min = <span class="number">60</span>  <span class="comment"># 最右边占空比(千分之)</span></span><br><span class="line">servo_max = <span class="number">72</span>  <span class="comment"># 最左边占空比(千分之)</span></span><br><span class="line"></span><br><span class="line">pid_left = <span class="number">0.05</span>  <span class="comment"># 左转是pwm增加方向</span></span><br><span class="line">pid_right = <span class="number">0.10</span></span><br><span class="line"></span><br><span class="line">pi = pigpio.pi()</span><br><span class="line">pi.set_mode(motor_pin, pigpio.OUTPUT)</span><br><span class="line">pi.set_PWM_frequency(motor_pin, <span class="number">200</span>)</span><br><span class="line">pi.set_PWM_range(motor_pin, <span class="number">40000</span>)</span><br><span class="line">pi.set_PWM_dutycycle(motor_pin, <span class="number">10000</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pi2 = pigpio.pi()</span><br><span class="line">pi2.set_mode(servo_pin, pigpio.OUTPUT)</span><br><span class="line">pi2.set_PWM_frequency(servo_pin, <span class="number">50</span>)</span><br><span class="line">pi2.set_PWM_range(servo_pin, <span class="number">1000</span>)</span><br><span class="line">pi2.set_PWM_dutycycle(servo_pin, servo_middle)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># RUN!!!</span></span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cap.release()</span><br><span class="line">            pi.set_PWM_dutycycle(motor_pin, <span class="number">10000</span>)</span><br><span class="line">            cap = cv2.VideoCapture(-<span class="number">1</span>)</span><br><span class="line">            ret, frame = cap.read()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        pi.set_PWM_dutycycle(motor_pin, motor_speed)</span><br><span class="line">        frame = cv2.resize(frame, (<span class="number">320</span>, <span class="number">180</span>))</span><br><span class="line">        <span class="comment"># HSV+inRange</span></span><br><span class="line">        frame_hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line">        frame_hsv = cv2.inRange(frame_hsv, lower, upper)</span><br><span class="line">        <span class="comment"># OPEN</span></span><br><span class="line">        <span class="comment"># kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))</span></span><br><span class="line">        <span class="comment"># frame_hsv = cv2.morphologyEx(frame_hsv, cv2.MORPH_OPEN, kernel)</span></span><br><span class="line">        <span class="comment"># scan</span></span><br><span class="line">        y_line = frame_hsv[y_scan]</span><br><span class="line">        left_line_x = x_middle</span><br><span class="line">        right_line_x = x_middle</span><br><span class="line">        <span class="comment"># left_scaner</span></span><br><span class="line">        <span class="keyword">while</span> left_line_x &gt; wide_scan + <span class="number">1</span>:</span><br><span class="line">            wide_range = y_line[left_line_x - wide_scan:left_line_x]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>(wide_range).count(<span class="number">255</span>) &gt; wide_need:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            left_line_x = left_line_x - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> right_line_x &lt; <span class="number">320</span> - wide_scan - <span class="number">1</span>:</span><br><span class="line">            wide_range = y_line[right_line_x:right_line_x + wide_scan]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>(wide_range).count(<span class="number">255</span>) &gt; wide_need:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            right_line_x = right_line_x + <span class="number">1</span></span><br><span class="line">        loss = (right_line_x + left_line_x) / <span class="number">2</span> - x_middle</span><br><span class="line">        <span class="built_in">print</span>(loss)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> loss &gt; <span class="number">0</span>:  <span class="comment"># 右转情况</span></span><br><span class="line">            pi2.set_PWM_dutycycle(servo_pin, servo_middle - pid_right * loss)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 左转loss&lt;=0,pwm++</span></span><br><span class="line">            pi2.set_PWM_dutycycle(servo_pin, servo_middle - pid_left * loss)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sidewalk:</span><br><span class="line">            pi.set_PWM_dutycycle(motor_pin, motor_before_speed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pi.set_PWM_dutycycle(motor_pin, motor_speed)</span><br><span class="line">        <span class="built_in">print</span>(sidewalk)</span><br><span class="line">        <span class="comment"># 人行道检测</span></span><br><span class="line">        <span class="keyword">if</span> sidewalk:</span><br><span class="line">            white_count = right_line_x - left_line_x</span><br><span class="line">            <span class="built_in">print</span>(white_count)</span><br><span class="line">            <span class="keyword">if</span> white_count&lt;sidewalk_len:</span><br><span class="line">                sidewalk = <span class="literal">False</span></span><br><span class="line">                pi.set_PWM_dutycycle(motor_pin, motor_stop_pwm)</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># show</span></span><br><span class="line">        <span class="keyword">if</span> show:</span><br><span class="line">            cv2.line(frame, (left_line_x, y_scan), (right_line_x, y_scan), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">            cv2.imshow(<span class="string">&quot;frame&quot;</span>, frame)</span><br><span class="line">            cv2.imshow(<span class="string">&quot;frame_hsv&quot;</span>, frame_hsv)</span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line"><span class="comment"># os.system(&quot;sudo killall pigpiod&quot;)</span></span><br><span class="line">pi.set_PWM_dutycycle(motor_pin, <span class="number">10000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>ros实操记录</title>
    <url>/2023/ros-apply/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是从最基础那篇文章分离出来的，不然那个太长了找起东西太麻烦</p>
<p>同时也部分记录2023年的人工智能竞赛学习开发过程</p>
<h1 id="前置任务-在比赛的车上获取传感器信息"><a href="#前置任务-在比赛的车上获取传感器信息" class="headerlink" title="前置任务(在比赛的车上获取传感器信息)"></a>前置任务(在比赛的车上获取传感器信息)</h1><p>这一部分除了比赛那辆车以外都用不到，也就不详细分目录了，不想占用目录太多空间</p>
<blockquote>
<p>IMU</p>
</blockquote>
<p>首先查看一下IMU的地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ros-autocar@ros-autocar:~$ <span class="built_in">ls</span> /dev/ttyUSB*</span><br><span class="line">/dev/ttyUSB1  /dev/ttyUSB2  /dev/ttyUSB3</span><br><span class="line">ros-autocar@ros-autocar:~$ <span class="built_in">ls</span> /dev/ttyUSB*</span><br><span class="line">/dev/ttyUSB0  /dev/ttyUSB1  /dev/ttyUSB2  /dev/ttyUSB3</span><br></pre></td></tr></table></figure>
<p>有四个设备，拔掉imu之后再次查看少了那个就知道imu的地址了。给IMU的设备添加读写权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span>  +777 /dev/ttyUSB0</span><br></pre></td></tr></table></figure>
<p>然后使用资料给的命令就可以读取imu的数值了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">roslaunch imu_launch  imu_msg.launch</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">header: </span><br><span class="line">  <span class="built_in">seq</span>: 18691</span><br><span class="line">  stamp: </span><br><span class="line">    secs: 1685621438</span><br><span class="line">    nsecs: 130887727</span><br><span class="line">  frame_id: <span class="string">&quot;base_link&quot;</span></span><br><span class="line">orientation: </span><br><span class="line">  x: 0.03581126779317856</span><br><span class="line">  y: -0.006689701694995165</span><br><span class="line">  z: -0.002406603889539838</span><br><span class="line">  w: 0.999333381652832</span><br><span class="line">orientation_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">angular_velocity: </span><br><span class="line">  x: 5.624821674786508e-05</span><br><span class="line">  y: -0.0020166519167128206</span><br><span class="line">  z: -0.001579628805375099</span><br><span class="line">angular_velocity_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">linear_acceleration: </span><br><span class="line">  x: 0.19336825460195542</span><br><span class="line">  y: 0.6750088781118393</span><br><span class="line">  z: 9.727661895751954</span><br><span class="line">linear_acceleration_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>激光雷达</p>
</blockquote>
<p>资料给了驱动雷达的功能包，启动雷达的launch命令：<br>这个launch文件有一个地方需要改动就是雷达串口设备号，我这一次改成是<code>/dev/ttyUSB2</code>如果启动文件之后雷达不转可以考虑是这个问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">roslaunch ls01b_v2 ls01b_v2.launch</span><br></pre></td></tr></table></figure>
<p>然后在另外一个终端查看雷达数据：应该会看到满屏的数字hhh都是雷达扫描到的距离信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rostopic <span class="built_in">echo</span> /scan</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>编码器</p>
</blockquote>
<p>同样，使用资料的驱动功能包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">roscore</span><br><span class="line">rosrun encoder_driver Encoder_vel.py</span><br><span class="line">rostopic <span class="built_in">echo</span> /encoder</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">header: </span><br><span class="line">  <span class="built_in">seq</span>: 11316</span><br><span class="line">  stamp: </span><br><span class="line">    secs: 1685623435</span><br><span class="line">    nsecs: 710257768</span><br><span class="line">  frame_id: <span class="string">&quot;odom&quot;</span></span><br><span class="line">child_frame_id: <span class="string">&quot;base_footprint&quot;</span></span><br><span class="line">pose: </span><br><span class="line">  pose: </span><br><span class="line">    position: </span><br><span class="line">      x: 0.0</span><br><span class="line">      y: 0.0</span><br><span class="line">      z: 0.0</span><br><span class="line">    orientation: </span><br><span class="line">      x: 0.0</span><br><span class="line">      y: 0.0</span><br><span class="line">      z: 0.0</span><br><span class="line">      w: 0.0</span><br><span class="line">  covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">twist: </span><br><span class="line">  twist: </span><br><span class="line">    linear: </span><br><span class="line">      x: 0.05552978515624999</span><br><span class="line">      y: 0.0</span><br><span class="line">      z: 0.0</span><br><span class="line">    angular: </span><br><span class="line">      x: 0.0</span><br><span class="line">      y: 0.0</span><br><span class="line">      z: 0.0</span><br><span class="line">  covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其中<code>x: 0.05552978515624999</code>表示前进速度</p>
<hr>
<blockquote>
<p>整合及运动控制</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">roslaunch racecar Run_car.launch </span><br><span class="line">rosrun racecar racecar_teleop.py</span><br><span class="line">rviz rviz</span><br></pre></td></tr></table></figure>
<p>第一个启动了上述传感器的程序：<br><img src="/2023/ros-apply/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230605212637.png"><br>第二个用于使用键盘发布信息控制底盘，最后是rviz用于显示雷达等信息。</p>
<p>其中雷达需要设置坐标变换，雷达的坐标是相对于底盘坐标定义的，rviz默认使用map坐标系显示，需要定义底盘坐标系和map坐标系的相对关系。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map_odom_broadcaster&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0 0 0 0 0 0 /map /odom 100&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其实临时也可以把rviz的frame改为雷达坐标系解决。</p>
<h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><h2 id="激光里程计：rf2o-laser-odometry"><a href="#激光里程计：rf2o-laser-odometry" class="headerlink" title="激光里程计：rf2o_laser_odometry"></a>激光里程计：rf2o_laser_odometry</h2><p>这个功能包可以根据激光雷达两帧之间的位置差距计算车子实际走的距离。</p>
<p><a href="https://github.com/MAPIRlab/rf2o_laser_odometry">github链接</a></p>
<p>下载的功能包放在src文件夹内，需要做一些配置和修改一些bug：</p>
<p>首先是修改launch文件的话题节点等名称，这里我是改成这样</p>
<p><code>rf2o_laser_odometry.launch</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rf2o_laser_odometry&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rf2o_laser_odometry_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rf2o_laser_odometry&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_scan_topic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/scan&quot;</span>/&gt;</span>        # 雷达发布数据的话题</span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_topic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/odom&quot;</span> /&gt;</span>             # 发布测程估计的topic</span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;publish_tf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span>              # 是否发布tf变换(base-&gt;odom)</span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/base_footprint&quot;</span>/&gt;</span> # 底盘的frame_id (tf) 必须要雷达laser_frame到base_frame的tf变换</span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/odom&quot;</span> /&gt;</span>          # 发布测程估计的frame_id (tf) </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;init_pose_from_topic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span>        # Odom 话题初始点，留空从(0,0)开始</span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;freq&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10.0&quot;</span>/&gt;</span>                     # 执行频率</span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;verbose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>                  # verbose</span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来改一些bug：修改<code>src/CLaserOdometry2D.cpp</code></p>
<p>292-298行修改:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Inner pixels</span></span><br><span class="line"><span class="keyword">if</span> ((u&gt;<span class="number">1</span>)&amp;&amp;(u&lt;cols_i<span class="number">-2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dcenter &gt; <span class="number">0.f</span>)</span><br><span class="line"><span class="keyword">if</span> (std::<span class="built_in">isfinite</span>(dcenter) &amp;&amp; dcenter &gt; <span class="number">0.f</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> sum = <span class="number">0.f</span>;</span><br><span class="line"><span class="type">float</span> weight = <span class="number">0.f</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>316-322行修改:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Boundary</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dcenter &gt; <span class="number">0.f</span>)</span><br><span class="line"><span class="keyword">if</span> (std::<span class="built_in">isfinite</span>(dcenter) &amp;&amp; dcenter &gt; <span class="number">0.f</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> sum = <span class="number">0.f</span>;</span><br><span class="line"><span class="type">float</span> weight = <span class="number">0.f</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打开底盘lanunch文件，并启动rf2o：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">roslaunch rf2o_laser_odometry rf2o_laser_odometry.launch </span><br></pre></td></tr></table></figure>
<p>就可以看见终端输出的里程数据。这个方法得到的数据有些缺陷，就是在车子发生旋转时候是不准确的，因为雷达和车子都在旋转相对位置不准确。</p>
<p><img src="/2023/ros-apply/rf2o.png"></p>
<p>还有一个bug，如果你把车子往前推，结果rf2o输出为负方向，那么需要改一下代码：<br><code>CLaserOdometry2D.cpp</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Line 923:</span><br><span class="line">  pose_aux_2D.translation()(0) = -acu_trans(0,2);</span><br><span class="line">  pose_aux_2D.translation()(1) = -acu_trans(1,2);</span><br><span class="line">Line 956:</span><br><span class="line">  lin_speed = -acu_trans(0,2) / time_inc_sec;</span><br></pre></td></tr></table></figure>
<h2 id="使用编码器和imu定位"><a href="#使用编码器和imu定位" class="headerlink" title="使用编码器和imu定位"></a>使用编码器和imu定位</h2><p>这段代码是志伟学长写的，我就一边学习理解一边写写注释吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> nav_msgs.msg <span class="keyword">import</span> Odometry</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> Imu</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Pose, Point, Quaternion, TransformStamped, PoseArray</span><br><span class="line"><span class="keyword">import</span> tf_conversions</span><br><span class="line"><span class="keyword">import</span> message_filters</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin, cos, pi,sqrt,fabs</span><br><span class="line"></span><br><span class="line">last_angle = <span class="literal">None</span></span><br><span class="line">last_vel = <span class="literal">None</span></span><br><span class="line">last_time = <span class="literal">None</span></span><br><span class="line">pos_x = <span class="number">0</span></span><br><span class="line">pos_y = <span class="number">0</span></span><br><span class="line">br = tf2_ros.TransformBroadcaster()</span><br><span class="line">encoder_dx = <span class="number">27.7</span>/<span class="number">1000.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">imu_data, encoder_data</span>):</span><br><span class="line">    <span class="keyword">global</span> last_angle, last_vel, last_time, pos_x, pos_y</span><br><span class="line">    <span class="comment"># 获取imu数据</span></span><br><span class="line">    r = Rotation.from_quat([imu_data.orientation.x, </span><br><span class="line">                            imu_data.orientation.y, </span><br><span class="line">                            imu_data.orientation.z, </span><br><span class="line">                            imu_data.orientation.w])</span><br><span class="line">    angle = r.as_euler(<span class="string">&#x27;xyz&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> angle&lt;<span class="number">0</span>:</span><br><span class="line">        angle = <span class="number">2</span>*np.pi + angle</span><br><span class="line">    <span class="comment"># 忽略错误数据</span></span><br><span class="line">    <span class="keyword">if</span> encoder_data.twist.twist.linear.x&gt;<span class="number">10</span> <span class="keyword">or</span> encoder_data.twist.twist.linear.x&lt;-<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> last_time <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        last_time = encoder_data.header.stamp</span><br><span class="line">        last_angle = angle</span><br><span class="line">        last_vel = encoder_data.twist.twist.linear.x</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 位置计算</span></span><br><span class="line">    dt = (encoder_data.header.stamp - last_time).to_sec()</span><br><span class="line">    last_time = encoder_data.header.stamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    d = (encoder_data.twist.twist.linear.x+last_vel)/<span class="number">2.0</span>*dt</span><br><span class="line">    last_vel = encoder_data.twist.twist.linear.x</span><br><span class="line"></span><br><span class="line">    d_angle = np.fabs(angle - last_angle)</span><br><span class="line">    <span class="keyword">if</span> angle - last_angle&gt;<span class="number">0.00001</span>:</span><br><span class="line">        l = d / d_angle+encoder_dx</span><br><span class="line">        d = l * np.sqrt(<span class="number">2</span>*(<span class="number">1</span>-np.cos(d_angle)))</span><br><span class="line">    <span class="keyword">elif</span> angle - last_angle&lt;-<span class="number">0.00001</span>:</span><br><span class="line">        l = d / d_angle-encoder_dx</span><br><span class="line">        d = l * np.sqrt(<span class="number">2</span>*(<span class="number">1</span>-np.cos(d_angle)))</span><br><span class="line">    </span><br><span class="line">    last_angle = angle</span><br><span class="line">    </span><br><span class="line">    d_x = d * np.cos(angle)</span><br><span class="line">    d_y = d * np.sin(angle)</span><br><span class="line">    pos_x += d_x</span><br><span class="line">    pos_y += d_y</span><br><span class="line">    <span class="comment"># 发布位置坐标变换信息</span></span><br><span class="line">    t = TransformStamped()</span><br><span class="line">    t.header.stamp = rospy.Time.now()</span><br><span class="line">    t.header.frame_id = <span class="string">&quot;odom&quot;</span></span><br><span class="line">    t.child_frame_id = <span class="string">&quot;base_link&quot;</span></span><br><span class="line">    t.transform.translation.x = pos_x</span><br><span class="line">    t.transform.translation.y = pos_y</span><br><span class="line">    t.transform.translation.z = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    q = tf_conversions.transformations.quaternion_from_euler(<span class="number">0</span>, <span class="number">0</span>, angle)</span><br><span class="line">    t.transform.rotation.x = q[<span class="number">0</span>]</span><br><span class="line">    t.transform.rotation.y = q[<span class="number">1</span>]</span><br><span class="line">    t.transform.rotation.z = q[<span class="number">2</span>]</span><br><span class="line">    t.transform.rotation.w = q[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    br.sendTransform(t)</span><br><span class="line">    odom_data = Odometry()</span><br><span class="line">    odom_data.header.stamp = rospy.Time.now()</span><br><span class="line">    odom_data.header.frame_id = <span class="string">&quot;odom&quot;</span></span><br><span class="line">    odom_data.child_frame_id = <span class="string">&quot;base_link&quot;</span></span><br><span class="line">    odom_data.pose.pose.position.x = pos_x</span><br><span class="line">    odom_data.pose.pose.position.y = pos_y</span><br><span class="line">    odom_data.pose.pose.position.z = <span class="number">0.0</span></span><br><span class="line">    odom_data.pose.pose.orientation.x = q[<span class="number">0</span>]</span><br><span class="line">    odom_data.pose.pose.orientation.y = q[<span class="number">1</span>]</span><br><span class="line">    odom_data.pose.pose.orientation.z = q[<span class="number">2</span>]</span><br><span class="line">    odom_data.pose.pose.orientation.w = q[<span class="number">3</span>]</span><br><span class="line">    odom_pub.publish(odom_data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 初始化encoder_mix节点</span></span><br><span class="line">rospy.init_node(<span class="string">&#x27;encoder_mix&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建Subscriber，订阅imu和编码器的topic</span></span><br><span class="line">imu_sub = message_filters.Subscriber(<span class="string">&#x27;/imu_data&#x27;</span>, Imu)</span><br><span class="line">encoder_sub = message_filters.Subscriber(<span class="string">&#x27;/encoder&#x27;</span>, Odometry)</span><br><span class="line"><span class="comment"># 使用自适应算法来匹配基于其时间戳的消息并执行回调函数，详见https://blog.csdn.net/chishuideyu/article/details/77479758</span></span><br><span class="line">ts = message_filters.ApproximateTimeSynchronizer([imu_sub, encoder_sub], <span class="number">20</span>, <span class="number">0.1</span>)</span><br><span class="line">ts.registerCallback(callback)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">odom_pub = rospy.Publisher(<span class="string">&#x27;/odom&#x27;</span>, Odometry, queue_size=<span class="number">10</span>)</span><br><span class="line">rospy.spin()</span><br></pre></td></tr></table></figure>


<h2 id="传感器数据融合：robot-localization-x2F-ekf"><a href="#传感器数据融合：robot-localization-x2F-ekf" class="headerlink" title="传感器数据融合：robot localization&#x2F;ekf"></a>传感器数据融合：robot localization&#x2F;ekf</h2><h2 id="激光雷达建图：gmapping-x2F-cartographer"><a href="#激光雷达建图：gmapping-x2F-cartographer" class="headerlink" title="激光雷达建图：gmapping&#x2F;cartographer"></a>激光雷达建图：gmapping&#x2F;cartographer</h2><p><a href="https://github.com/ros-perception/slam_gmapping">gmapping的github</a></p>
<p>gmapping安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-noetic-slam-gmapping</span><br></pre></td></tr></table></figure>
<p>编写一个新的launch文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;scan_topic&quot;</span> <span class="attr">default</span>=<span class="string">&quot;scan&quot;</span> /&gt;</span>                  <span class="comment">&lt;!-- 发布scan名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gmapping&quot;</span> <span class="attr">type</span>=<span class="string">&quot;slam_gmapping&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slam_gmapping&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">clear_params</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span>     <span class="comment">&lt;!-- 基座标系名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;odom&quot;</span>/&gt;</span>               <span class="comment">&lt;!-- 里程计坐标系名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;map_update_interval&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Set maxUrange &lt; actual maximum range of the Laser --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;maxRange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;maxUrange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4.5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;sigma&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kernelSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lstep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;astep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;iterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lsigma&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.075&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ogain&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lskip&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;srr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;srt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;stt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;linearUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;angularUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.436&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;temporalUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;resampleThreshold&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;particles&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;xmin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ymin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;xmax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ymax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;delta&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;llsamplerange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;llsamplestep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lasamplerange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.005&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lasamplestep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.005&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;scan&quot;</span> <span class="attr">to</span>=<span class="string">&quot;$(arg scan_topic)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动launch文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">roslaunch <span class="built_in">test</span> gmapping.launch</span><br></pre></td></tr></table></figure>
<p><img src="/2023/ros-apply/gmapping.png"></p>
<p>建图后，在想要保存的路径打开终端并输入使用mapserver保存命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ros-autocar@ros-autocar:~/Ros-autocar$ rosrun map_server map_saver -f 233</span><br><span class="line">[ INFO] [1685971241.710265601]: Waiting <span class="keyword">for</span> the map</span><br><span class="line">[ INFO] [1685971241.931482169]: Received a 480 X 544 map @ 0.050 m/pix</span><br><span class="line">[ INFO] [1685971241.931548164]: Writing map occupancy data to 233.pgm</span><br><span class="line">[ INFO] [1685971241.942866551]: Writing map occupancy data to 233.yaml</span><br><span class="line">[ INFO] [1685971241.943307197]: Done</span><br></pre></td></tr></table></figure>
<p><code>233</code>为保存地图的文件名</p>
<p>补充一个launch文件启动rviz的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- rviz --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d /home/ros-autocar/Ros-autocar/rviz.rviz&quot;</span> <span class="attr">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>/home/ros-autocar/Ros-autocar/rviz.rviz</code>是rviz配置文件的路径</p>
<h2 id="读取建立的地图：map-server"><a href="#读取建立的地图：map-server" class="headerlink" title="读取建立的地图：map_server"></a>读取建立的地图：map_server</h2><p>只要把这一段放在启动rviz的launch文件里就好啦</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">type</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">args</span>=<span class="string">&quot;/home/ros-autocar/Ros-manualcar/map.yaml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>args</code>要改成你的地图的路径</p>
<h2 id="重定位：amcl"><a href="#重定位：amcl" class="headerlink" title="重定位：amcl"></a>重定位：amcl</h2><p>与rf2o的雷达两帧之间比较不同，amcl是根据雷达数据和地图之间比较计算里程计误差，也就是计算&#x2F;odom和&#x2F;map之间的坐标变换关系</p>
<p>在launch文件加入这一大部分即可启动amcl</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- amcl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;init_x&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;init_y&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;init_a&quot;</span> <span class="attr">default</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;amcl&quot;</span> <span class="attr">type</span>=<span class="string">&quot;amcl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amcl&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Publish scans from best pose at a max of 10 Hz --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;transform_tolerance&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;gui_publish_rate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_max_beams&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;min_particles&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max_particles&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kld_err&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kld_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.99&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- translation std dev, m --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_alpha4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_hit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_short&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_max&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_z_rand&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_sigma_hit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_lambda_short&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_lambda_short&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_model_type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;likelihood_field&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;param name=&quot;laser_model_type&quot; value=&quot;beam&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;laser_likelihood_max_dist&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;update_min_d&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;update_min_a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;resample_interval&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;transform_tolerance&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;recovery_alpha_slow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;recovery_alpha_fast&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_map_topic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;first_map_only&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;tf_broadcast&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;odom&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;global_frame_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;map&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_model_type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;diff&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg init_x)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg init_y)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_pose_a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg init_a)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_cov_xx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_cov_yy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;initial_cov_aa&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>里面有很多的参数，如果需要调试在<a href="http://wiki.ros.org/amcl">amcl的网页</a>有详细信息</p>
<h2 id="路径规划：全局-x2F-局部"><a href="#路径规划：全局-x2F-局部" class="headerlink" title="路径规划：全局&#x2F;局部"></a>路径规划：全局&#x2F;局部</h2><h3 id="全局：A"><a href="#全局：A" class="headerlink" title="全局：A*"></a>全局：A*</h3><p>具体原理文章太多了直接去搜吧，不想写了，至于导航的实操详见下面局部路径规划</p>
<h3 id="局部：DWA，teb"><a href="#局部：DWA，teb" class="headerlink" title="局部：DWA，teb"></a>局部：DWA，teb</h3><h4 id="动态窗口法：DWA"><a href="#动态窗口法：DWA" class="headerlink" title="动态窗口法：DWA"></a>动态窗口法：DWA</h4><blockquote>
<p>全称为<code>dynamic window approach</code>，其原理主要是在速度空间（v,w）中采样多组速度，并模拟出这些速度在一定时间内的运动轨迹，并通过评价函数对这些轨迹进行评价，选取最优轨迹对应的速度驱动机器人运动</p>
</blockquote>
<p>优缺点：考虑到速度和加速度的限制只有安全的轨迹会被考虑；可以实时避障但是避障效果一般；不适用于阿克曼模型车模；每次都选择下一步的最佳路径而非全局最优路径</p>
<p>这个可能暂时先不写，因为我现在实验用的车子是阿克曼结构hhh</p>
<h4 id="时间弹性带：teb"><a href="#时间弹性带：teb" class="headerlink" title="时间弹性带：teb"></a>时间弹性带：teb</h4><blockquote>
<p>全称为<code>Time Elastic Band</code>，连接起始、目标点，并让这个路径可以变形，变形的条件就是将所有约束当做橡皮筋的外力。起始点、目标点状态由用户&#x2F;全局规划器指定，中间插入N个控制橡皮筋形状的控制点（机器人姿态），当然，为了显示轨迹的运动学信息，我们在点与点之间定义运动时间Time，即为<code>Timed-Elastic-Band</code>算法</p>
</blockquote>
<p>优缺点：适用于各种常见车模；有很强的前瞻性；对动态障碍有较好的避障效果；计算复杂度较大但是可通过牺牲预测距离来降低；速度和角度波动较大控制不稳定但是提高控制频率可以改善</p>
<p>首先下载功能包然后<code>catkin_make</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rst-tu-dortmund/teb_local_planner</span><br></pre></td></tr></table></figure>
<p>查看是否安装完成，找到<code>teb_local_planner</code>的话就表示安装成功了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rospack plugins --attrib=plugin nav_core</span><br></pre></td></tr></table></figure>
<p><img src="/2023/ros-apply/QQ%E6%88%AA%E5%9B%BE20230608143529.png" alt="我也不觉得这张图有什么必要，但是突然就是想放一张图hhh"></p>
<p>看见有一个包含teb_local_planner教程补充材料和示例的项目<a href="https://github.com/rst-tu-dortmund/teb_local_planner_tutorials">teb_local_planner_tutorials</a>，我的是阿克曼结构车子，参考里面的<code>robot_carlike_in_stage.launch</code>，其中里面有一部分我们已经在之前完成了，例如amcl等，所以用得到的地方就是这一段(加入了launch标签)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  ************** Navigation ***************  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;move_base&quot;</span> <span class="attr">type</span>=<span class="string">&quot;move_base&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;move_base&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">  	  	<span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find teb_local_planner_tutorials)/cfg/carlike/costmap_common_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;global_costmap&quot;</span> /&gt;</span></span><br><span class="line">  	 	<span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find teb_local_planner_tutorials)/cfg/carlike/costmap_common_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;local_costmap&quot;</span> /&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find teb_local_planner_tutorials)/cfg/carlike/local_costmap_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> /&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find teb_local_planner_tutorials)/cfg/carlike/global_costmap_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> /&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find teb_local_planner_tutorials)/cfg/carlike/teb_local_planner_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_global_planner&quot;</span> <span class="attr">value</span>=<span class="string">&quot;global_planner/GlobalPlanner&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planner_frequency&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;planner_patience&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_local_planner&quot;</span> <span class="attr">value</span>=<span class="string">&quot;teb_local_planner/TebLocalPlannerROS&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;controller_frequency&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;controller_patience&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;clearing_rotation_allowed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span> <span class="comment">&lt;!-- Our carlike robot is not able to rotate in place --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动之前的launch文件和这一部分之后就能看见规划的路径了：<br><img src="/2023/ros-apply/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230608180121.png" alt="The Green Path"></p>
<p>launch文件里也给出了几个配置文件的路径，包括代价地图的配置，路径规划器的参数配置，这个后面再说</p>
<p>路线规划之后就是让车子跟着规划走下来了，我刚准备手搓一个程序，发现示例代码给了…</p>
<p>示例的launch文件导航相关片段：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Navstack --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;move_base&quot;</span> <span class="attr">type</span>=<span class="string">&quot;move_base&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;move_base&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- local planner --&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_global_planner&quot;</span> <span class="attr">value</span>=<span class="string">&quot;navfn/NavfnROS&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_local_planner&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dwa_local_planner/DWAPlannerROS&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find racecar)/param/dwa_local_planner_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- costmap layers --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find racecar)/param/local_costmap_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find racecar)/param/global_costmap_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- move_base params --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find racecar)/param/base_global_planner_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find racecar)/param/move_base_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;racecar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;car_controller_new&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;car_controller&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span>       </span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Vcmd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.5&quot;</span> /&gt;</span> <span class="comment">&lt;!--speed of car m/s         --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ESC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;baseSpeed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;150&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;baseAngle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Angle_gain_p&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-3.0&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Angle_gain_d&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-3.0&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Lfw&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.5&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;vp_max_base&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;vp_min&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>car_controller_new.cpp</code>这个程序好长的，建议不要打开hhhhc反正我肯定是重写一个：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;nav_msgs/Path.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/PoseStamped.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/Twist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nav_msgs/Odometry.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/transform_datatypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tf/transform_listener.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;visualization_msgs/Marker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dynamic_reconfigure/server.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/Float64.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159265358979</span></span><br><span class="line"><span class="type">double</span> last_steeringangle = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> L, Lfw, Lrv, Lfw_, Vcmd, lfw, lrv, steering, u, v;</span><br><span class="line"><span class="type">double</span> Gas_gain, baseAngle, baseSpeed, Angle_gain_p, Angle_gain_d, goalRadius;</span><br><span class="line"><span class="type">int</span> controller_freq;</span><br><span class="line"><span class="type">bool</span> foundForwardPt, goal_received, goal_reached;</span><br><span class="line"><span class="type">double</span> k_rou;</span><br><span class="line"><span class="type">double</span> vp_max_base, vp_min;</span><br><span class="line"><span class="type">double</span> stop_flag = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> mapPathNum;</span><br><span class="line"><span class="type">double</span> slow_final, fast_final;</span><br><span class="line"><span class="type">int</span> stopIdx = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> line_wight = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">double</span> initbaseSpeed;</span><br><span class="line"><span class="type">double</span> obs_flag = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************/</span></span><br><span class="line"><span class="comment">/* CLASS DEFINITION */</span></span><br><span class="line"><span class="comment">/********************/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">L1Controller</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">L1Controller</span>();</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">initMarker</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isWayPtAwayFromLfwDist</span><span class="params">(<span class="type">const</span> geometry_msgs::Point &amp;wayPt, <span class="type">const</span> geometry_msgs::Point &amp;car_pos)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isForwardWayPt</span><span class="params">(<span class="type">const</span> geometry_msgs::Point &amp;wayPt, <span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getYawFromPose</span><span class="params">(<span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getEta</span><span class="params">(<span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getCar2GoalDist</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getL1Distance</span><span class="params">(<span class="type">const</span> <span class="type">double</span> &amp;_Vcmd)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getSteeringAngle</span><span class="params">(<span class="type">double</span> eta)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getGasInput</span><span class="params">(<span class="type">const</span> <span class="type">float</span> &amp;current_v)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">isline</span><span class="params">(<span class="type">double</span> line_wight)</span></span>;</span><br><span class="line">  <span class="function">geometry_msgs::Point <span class="title">get_odom_car2WayPtVec</span><span class="params">(<span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  ros::NodeHandle n_;</span><br><span class="line">  ros::Subscriber odom_sub, path_sub, goal_sub, encoder_sub, final_goal_sub, line_sub;</span><br><span class="line">  ros::Publisher pub_, marker_pub;</span><br><span class="line">  ros::Timer timer1, timer2;</span><br><span class="line">  tf::TransformListener tf_listener;</span><br><span class="line"></span><br><span class="line">  visualization_msgs::Marker points, line_strip, goal_circle;</span><br><span class="line">  geometry_msgs::Twist cmd_vel;</span><br><span class="line">  geometry_msgs::Point odom_goal_pos;</span><br><span class="line">  nav_msgs::Odometry odom, encoder;</span><br><span class="line">  nav_msgs::Path map_path, odom_path;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">odomCB</span><span class="params">(<span class="type">const</span> nav_msgs::Odometry::ConstPtr &amp;odomMsg)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">pathCB</span><span class="params">(<span class="type">const</span> nav_msgs::Path::ConstPtr &amp;pathMsg)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">encoderCB</span><span class="params">(<span class="type">const</span> nav_msgs::Odometry::ConstPtr &amp;encoderMsg)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">goalCB</span><span class="params">(<span class="type">const</span> geometry_msgs::PoseStamped::ConstPtr &amp;goalMsg)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">goalReachingCB</span><span class="params">(<span class="type">const</span> ros::TimerEvent &amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">controlLoopCB</span><span class="params">(<span class="type">const</span> ros::TimerEvent &amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">stopCB</span><span class="params">(<span class="type">const</span> std_msgs::Float64::ConstPtr &amp;stopMsg)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">lineCB</span><span class="params">(<span class="type">const</span> std_msgs::Float64::ConstPtr &amp;lineMsg)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// end of class</span></span><br><span class="line"></span><br><span class="line">L1Controller::<span class="built_in">L1Controller</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Private parameters handler</span></span><br><span class="line">  <span class="function">ros::NodeHandle <span class="title">pn</span><span class="params">(<span class="string">&quot;~&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Car parameter</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;L&quot;</span>, L, <span class="number">0.335</span>);      <span class="comment">//前后轮轴距</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;Vcmd&quot;</span>, Vcmd, <span class="number">1.0</span>);  <span class="comment">//期望速度</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;lfw&quot;</span>, lfw, <span class="number">0.1675</span>); <span class="comment">//车身转向控制点</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;lrv&quot;</span>, lrv, <span class="number">10.0</span>);   <span class="comment">//车身转向控制点</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;Lrv&quot;</span>, Lrv, <span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Controller parameter</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;controller_freq&quot;</span>, controller_freq, <span class="number">30</span>); <span class="comment">//控制循环频率</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;Angle_gain_p&quot;</span>, Angle_gain_p, <span class="number">-1.0</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;Angle_gain_d&quot;</span>, Angle_gain_d, <span class="number">-0.0</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;baseSpeed&quot;</span>, baseSpeed, <span class="number">0.0</span>); <span class="comment">//基础速度</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;baseAngle&quot;</span>, baseAngle, <span class="number">0.0</span>); <span class="comment">//舵机中值     舵机打角steeringangle设为-90度～90度</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;k_rou&quot;</span>, k_rou, <span class="number">0.0</span>);         <span class="comment">//类曲率调速的系数</span></span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;vp_max_base&quot;</span>, vp_max_base, <span class="number">0.0</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;vp_min&quot;</span>, vp_min, <span class="number">0.0</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;goalRadius&quot;</span>, goalRadius, <span class="number">1.0</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;Lfw&quot;</span>, Lfw, <span class="number">0.3</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;slow_final&quot;</span>, slow_final, <span class="number">0.8</span>);</span><br><span class="line">  pn.<span class="built_in">param</span>(<span class="string">&quot;fast_final&quot;</span>, fast_final, <span class="number">1.1</span>);</span><br><span class="line">  initbaseSpeed = baseSpeed;</span><br><span class="line">  odom_sub = n_.<span class="built_in">subscribe</span>(<span class="string">&quot;/odometry/filtered&quot;</span>, <span class="number">1</span>, &amp;L1Controller::odomCB, <span class="keyword">this</span>); <span class="comment">//订阅里程计</span></span><br><span class="line">  path_sub = n_.<span class="built_in">subscribe</span>(<span class="string">&quot;/move_base/NavfnROS/plan&quot;</span>, <span class="number">1</span>, &amp;L1Controller::pathCB, <span class="keyword">this</span>);</span><br><span class="line">  goal_sub = n_.<span class="built_in">subscribe</span>(<span class="string">&quot;/move_base_simple/goal&quot;</span>, <span class="number">1</span>, &amp;L1Controller::goalCB, <span class="keyword">this</span>); <span class="comment">//订阅movebase目标点</span></span><br><span class="line">  encoder_sub = n_.<span class="built_in">subscribe</span>(<span class="string">&quot;/encoder&quot;</span>, <span class="number">1</span>, &amp;L1Controller::encoderCB, <span class="keyword">this</span>);         <span class="comment">//订阅编码器</span></span><br><span class="line">  final_goal_sub = n_.<span class="built_in">subscribe</span>(<span class="string">&quot;/arrfinal&quot;</span>, <span class="number">1</span>, &amp;L1Controller::stopCB, <span class="keyword">this</span>);</span><br><span class="line">  line_sub = n_.<span class="built_in">subscribe</span>(<span class="string">&quot;/line_wight&quot;</span>, <span class="number">1</span>, &amp;L1Controller::lineCB, <span class="keyword">this</span>);</span><br><span class="line">  marker_pub = n_.<span class="built_in">advertise</span>&lt;visualization_msgs::Marker&gt;(<span class="string">&quot;car_path&quot;</span>, <span class="number">10</span>); <span class="comment">//发布路径到rviz</span></span><br><span class="line">  pub_ = n_.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;car/cmd_vel&quot;</span>, <span class="number">1</span>);           <span class="comment">//发布速度、角速度</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Timer</span></span><br><span class="line">  timer1 = n_.<span class="built_in">createTimer</span>(ros::<span class="built_in">Duration</span>((<span class="number">1.0</span>) / controller_freq), &amp;L1Controller::controlLoopCB, <span class="keyword">this</span>);  <span class="comment">// Duration(0.05) -&gt; 20Hz</span></span><br><span class="line">  timer2 = n_.<span class="built_in">createTimer</span>(ros::<span class="built_in">Duration</span>((<span class="number">0.5</span>) / controller_freq), &amp;L1Controller::goalReachingCB, <span class="keyword">this</span>); <span class="comment">// Duration(0.05) -&gt; 20Hz</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化变量</span></span><br><span class="line">  <span class="comment">//Lfw = 1.1; //前瞻</span></span><br><span class="line">  foundForwardPt = <span class="literal">false</span>;</span><br><span class="line">  goal_received = <span class="literal">false</span>;</span><br><span class="line">  goal_reached = <span class="literal">false</span>;</span><br><span class="line">  cmd_vel.linear.x = <span class="number">0</span>;          <span class="comment">// 0 for stop</span></span><br><span class="line">  cmd_vel.angular.z = baseAngle; <span class="comment">//中值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Show info</span></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;[param] baseSpeed: %f&quot;</span>, baseSpeed);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;[param] baseAngle: %f&quot;</span>, baseAngle);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;[param] Angle_gain_p: %f&quot;</span>, Angle_gain_p);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;[param] Angle_gain_d: %f&quot;</span>, Angle_gain_d);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;[param] Vcmd: %f&quot;</span>, Vcmd);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;[param] Lfw: %f&quot;</span>, Lfw);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Visualization Marker Settings</span></span><br><span class="line">  <span class="built_in">initMarker</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rviz可视化初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::initMarker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  points.header.frame_id = line_strip.header.frame_id = goal_circle.header.frame_id = <span class="string">&quot;odom&quot;</span>;</span><br><span class="line">  points.ns = line_strip.ns = goal_circle.ns = <span class="string">&quot;Markers&quot;</span>;</span><br><span class="line">  points.action = line_strip.action = goal_circle.action = visualization_msgs::Marker::ADD;</span><br><span class="line">  points.pose.orientation.w = line_strip.pose.orientation.w = goal_circle.pose.orientation.w = <span class="number">1.0</span>;</span><br><span class="line">  points.id = <span class="number">0</span>;</span><br><span class="line">  line_strip.id = <span class="number">1</span>;</span><br><span class="line">  goal_circle.id = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  points.type = visualization_msgs::Marker::POINTS;</span><br><span class="line">  line_strip.type = visualization_msgs::Marker::LINE_STRIP;</span><br><span class="line">  goal_circle.type = visualization_msgs::Marker::CYLINDER;</span><br><span class="line">  <span class="comment">// POINTS markers use x and y scale for width/height respectively</span></span><br><span class="line">  points.scale.x = <span class="number">0.2</span>;</span><br><span class="line">  points.scale.y = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// LINE_STRIP markers use only the x component of scale, for the line width</span></span><br><span class="line">  line_strip.scale.x = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">  goal_circle.scale.x = goalRadius;</span><br><span class="line">  goal_circle.scale.y = goalRadius;</span><br><span class="line">  goal_circle.scale.z = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Points are green</span></span><br><span class="line">  points.color.g = <span class="number">1.0f</span>;</span><br><span class="line">  points.color.a = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Line strip is blue</span></span><br><span class="line">  line_strip.color.b = <span class="number">1.0</span>;</span><br><span class="line">  line_strip.color.a = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// goal_circle is yellow</span></span><br><span class="line">  goal_circle.color.r = <span class="number">1.0</span>;</span><br><span class="line">  goal_circle.color.g = <span class="number">1.0</span>;</span><br><span class="line">  goal_circle.color.b = <span class="number">0.0</span>;</span><br><span class="line">  goal_circle.color.a = <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::odomCB</span><span class="params">(<span class="type">const</span> nav_msgs::Odometry::ConstPtr &amp;odomMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//里程计回调函数</span></span><br><span class="line">  odom = *odomMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::pathCB</span><span class="params">(<span class="type">const</span> nav_msgs::Path::ConstPtr &amp;pathMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//路径点回调函数</span></span><br><span class="line">  <span class="comment">//如果没路径了按上次路径走</span></span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> pathCBidx = <span class="number">0</span>;</span><br><span class="line">  <span class="type">static</span> nav_msgs::Path last_map_path;</span><br><span class="line">  <span class="keyword">if</span> (pathCBidx == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    last_map_path.poses.<span class="built_in">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  map_path = *pathMsg;</span><br><span class="line">  mapPathNum = map_path.poses.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (map_path.poses.<span class="built_in">size</span>() &lt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; last_map_path.poses.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      map_path.poses.<span class="built_in">push_back</span>(last_map_path.poses[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    last_map_path.poses.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; map_path.poses.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      last_map_path.poses.<span class="built_in">push_back</span>(map_path.poses[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  pathCBidx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void L1Controller::pathCB(const nav_msgs::Path::ConstPtr &amp;pathMsg)</span></span><br><span class="line"><span class="comment"> &#123; //路径点回调函数</span></span><br><span class="line"><span class="comment">   map_path = *pathMsg;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::encoderCB</span><span class="params">(<span class="type">const</span> nav_msgs::Odometry::ConstPtr &amp;encoderMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//编码器回调函数</span></span><br><span class="line">  encoder = *encoderMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::stopCB</span><span class="params">(<span class="type">const</span> std_msgs::Float64::ConstPtr &amp;stopMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  stop_flag = (*stopMsg).data;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;stop_flag=%f&quot;</span>, stop_flag);</span><br><span class="line">  <span class="comment">// stopIdx = stopIdx + 1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::lineCB</span><span class="params">(<span class="type">const</span> std_msgs::Float64::ConstPtr &amp;lineMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  line_wight = (*lineMsg).data;</span><br><span class="line">  <span class="comment">// stopIdx = stopIdx + 1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::goalCB</span><span class="params">(<span class="type">const</span> geometry_msgs::PoseStamped::ConstPtr &amp;goalMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//目标点回调函数</span></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    geometry_msgs::PoseStamped odom_goal;</span><br><span class="line">    tf_listener.<span class="built_in">transformPose</span>(<span class="string">&quot;odom&quot;</span>, ros::<span class="built_in">Time</span>(<span class="number">0</span>), *goalMsg, <span class="string">&quot;map&quot;</span>, odom_goal);</span><br><span class="line"></span><br><span class="line">    odom_goal_pos = odom_goal.pose.position;</span><br><span class="line">    goal_received = <span class="literal">true</span>;</span><br><span class="line">    goal_reached = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Draw Goal on RVIZ*/</span></span><br><span class="line">    goal_circle.pose = odom_goal.pose;</span><br><span class="line">    marker_pub.<span class="built_in">publish</span>(goal_circle);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span> (tf::TransformException &amp;ex)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;%s&quot;</span>, ex.<span class="built_in">what</span>());</span><br><span class="line">    ros::<span class="built_in">Duration</span>(<span class="number">1.0</span>).<span class="built_in">sleep</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">L1Controller::getYawFromPose</span><span class="params">(<span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//计算航向角</span></span><br><span class="line">  <span class="type">float</span> x = carPose.orientation.x;</span><br><span class="line">  <span class="type">float</span> y = carPose.orientation.y;</span><br><span class="line">  <span class="type">float</span> z = carPose.orientation.z;</span><br><span class="line">  <span class="type">float</span> w = carPose.orientation.w;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> tmp, yaw;</span><br><span class="line">  <span class="function">tf::Quaternion <span class="title">q</span><span class="params">(x, y, z, w)</span></span>;</span><br><span class="line">  <span class="function">tf::Matrix3x3 <span class="title">quaternion</span><span class="params">(q)</span></span>;</span><br><span class="line">  quaternion.<span class="built_in">getRPY</span>(tmp, tmp, yaw);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> yaw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">L1Controller::isForwardWayPt</span><span class="params">(<span class="type">const</span> geometry_msgs::Point &amp;wayPt,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">float</span> car2wayPt_x = wayPt.x - carPose.position.x;</span><br><span class="line">  <span class="type">float</span> car2wayPt_y = wayPt.y - carPose.position.y;</span><br><span class="line">  <span class="type">double</span> car_theta = <span class="built_in">getYawFromPose</span>(carPose);</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> car_car2wayPt_x = <span class="built_in">cos</span>(car_theta) * car2wayPt_x + <span class="built_in">sin</span>(car_theta) * car2wayPt_y;</span><br><span class="line">  <span class="type">float</span> car_car2wayPt_y = -<span class="built_in">sin</span>(car_theta) * car2wayPt_x + <span class="built_in">cos</span>(car_theta) * car2wayPt_y;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (car_car2wayPt_x &gt; <span class="number">0</span>) <span class="comment">/*is Forward WayPt*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">L1Controller::isWayPtAwayFromLfwDist</span><span class="params">(<span class="type">const</span> geometry_msgs::Point &amp;wayPt, <span class="type">const</span> geometry_msgs::Point &amp;car_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//判断是否是前瞻外的一个点</span></span><br><span class="line">  <span class="type">double</span> dx = wayPt.x - car_pos.x;</span><br><span class="line">  <span class="type">double</span> dy = wayPt.y - car_pos.y;</span><br><span class="line">  <span class="type">double</span> dist = <span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dist &lt; Lfw)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (dist &gt;= Lfw)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void callback(const art_racecar::racecarConfig &amp;config, const uint32_t level)</span></span><br><span class="line"><span class="comment">// &#123; //reconfigure配置动态参数</span></span><br><span class="line"><span class="comment">//   ROS_INFO(&quot;param changed&quot;);</span></span><br><span class="line"><span class="comment">//   L = config.L;</span></span><br><span class="line"><span class="comment">//   Vcmd = config.Vcmd;</span></span><br><span class="line"><span class="comment">//   Lfw = config.lfw;</span></span><br><span class="line"><span class="comment">//   controller_freq = config.controller_freq;</span></span><br><span class="line"><span class="comment">//   Angle_gain_p = config.Angle_gain_p;</span></span><br><span class="line"><span class="comment">//   Angle_gain_d = config.Angle_gain_d;</span></span><br><span class="line"><span class="comment">//   baseSpeed = config.baseSpeed;</span></span><br><span class="line"><span class="comment">//   k_rou = config.k_rou;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function">geometry_msgs::Point <span class="title">L1Controller::get_odom_car2WayPtVec</span><span class="params">(<span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//计算前瞻向量</span></span><br><span class="line">  geometry_msgs::Point carPose_pos = carPose.position;</span><br><span class="line">  <span class="type">double</span> carPose_yaw = <span class="built_in">getYawFromPose</span>(carPose);</span><br><span class="line">  geometry_msgs::Point forwardPt;</span><br><span class="line">  geometry_msgs::Point odom_car2WayPtVec;</span><br><span class="line">  foundForwardPt = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">double</span> car2goal_dist = <span class="built_in">getCar2GoalDist</span>();</span><br><span class="line">  <span class="type">bool</span> start_flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!goal_reached)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; map_path.poses.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      geometry_msgs::PoseStamped map_path_pose = map_path.poses[i];</span><br><span class="line">      geometry_msgs::PoseStamped odom_path_pose;</span><br><span class="line">      <span class="comment">// geometry_msgs::PoseStamped odom_path_pose = map_path.poses[i];</span></span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        tf_listener.<span class="built_in">transformPose</span>(<span class="string">&quot;odom&quot;</span>, ros::<span class="built_in">Time</span>(<span class="number">0</span>), map_path_pose, <span class="string">&quot;map&quot;</span>, odom_path_pose);</span><br><span class="line">        geometry_msgs::Point odom_path_wayPt = odom_path_pose.pose.position;</span><br><span class="line">        <span class="type">bool</span> _isForwardWayPt = <span class="built_in">isForwardWayPt</span>(odom_path_wayPt, carPose);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_isForwardWayPt &amp;&amp; start_flag == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          start_flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start_flag == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_isForwardWayPt || <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">bool</span> _isWayPtAwayFromLfwDist = <span class="built_in">isWayPtAwayFromLfwDist</span>(odom_path_wayPt, carPose_pos);</span><br><span class="line">          <span class="keyword">if</span> (_isWayPtAwayFromLfwDist)</span><br><span class="line">          &#123;</span><br><span class="line">            forwardPt = odom_path_wayPt;</span><br><span class="line">            foundForwardPt = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (car2goal_dist &lt; Lfw)</span><br><span class="line">        &#123;</span><br><span class="line">          forwardPt = odom_goal_pos;</span><br><span class="line">          foundForwardPt = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">catch</span> (tf::TransformException &amp;ex)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;%s&quot;</span>, ex.<span class="built_in">what</span>());</span><br><span class="line">        ros::<span class="built_in">Duration</span>(<span class="number">1.0</span>).<span class="built_in">sleep</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (goal_reached)</span><br><span class="line">  &#123;</span><br><span class="line">    forwardPt = odom_goal_pos;</span><br><span class="line">    foundForwardPt = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// ROS_INFO(&quot;goal REACHED!&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Visualized Target Point on RVIZ*/</span></span><br><span class="line">  <span class="comment">/*Clear former target point Marker*/</span></span><br><span class="line">  points.points.<span class="built_in">clear</span>();</span><br><span class="line">  line_strip.points.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (foundForwardPt &amp;&amp; !goal_reached)</span><br><span class="line">  &#123;</span><br><span class="line">    points.points.<span class="built_in">push_back</span>(carPose_pos);</span><br><span class="line">    points.points.<span class="built_in">push_back</span>(forwardPt);</span><br><span class="line">    line_strip.points.<span class="built_in">push_back</span>(carPose_pos);</span><br><span class="line">    line_strip.points.<span class="built_in">push_back</span>(forwardPt);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  marker_pub.<span class="built_in">publish</span>(points);</span><br><span class="line">  marker_pub.<span class="built_in">publish</span>(line_strip);</span><br><span class="line"></span><br><span class="line">  odom_car2WayPtVec.x = <span class="built_in">cos</span>(carPose_yaw) * (forwardPt.x - carPose_pos.x) + <span class="built_in">sin</span>(carPose_yaw) * (forwardPt.y - carPose_pos.y);</span><br><span class="line">  odom_car2WayPtVec.y = -<span class="built_in">sin</span>(carPose_yaw) * (forwardPt.x - carPose_pos.x) + <span class="built_in">cos</span>(carPose_yaw) * (forwardPt.y - carPose_pos.y);</span><br><span class="line">  <span class="keyword">return</span> odom_car2WayPtVec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">L1Controller::getEta</span><span class="params">(<span class="type">const</span> geometry_msgs::Pose &amp;carPose)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//根据前瞻向量求车到前瞻点和车中心线的夹角</span></span><br><span class="line">  geometry_msgs::Point odom_car2WayPtVec = <span class="built_in">get_odom_car2WayPtVec</span>(carPose);</span><br><span class="line">  <span class="type">double</span> eta = <span class="built_in">atan2</span>(odom_car2WayPtVec.y, odom_car2WayPtVec.x);</span><br><span class="line">  <span class="keyword">return</span> eta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">L1Controller::getCar2GoalDist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//计算车到目标点的距离</span></span><br><span class="line">  geometry_msgs::Point car_pose = odom.pose.pose.position;</span><br><span class="line">  <span class="type">double</span> car2goal_x = odom_goal_pos.x - car_pose.x;</span><br><span class="line">  <span class="type">double</span> car2goal_y = odom_goal_pos.y - car_pose.y;</span><br><span class="line">  <span class="type">double</span> dist2goal = <span class="built_in">sqrt</span>(car2goal_x * car2goal_x + car2goal_y * car2goal_y);</span><br><span class="line">  <span class="keyword">return</span> dist2goal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">L1Controller::getL1Distance</span><span class="params">(<span class="type">const</span> <span class="type">double</span> &amp;_Vcmd)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//根据速度变前瞻距离</span></span><br><span class="line">  <span class="type">double</span> L1 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">double</span> car2goal_dist = <span class="built_in">getCar2GoalDist</span>();</span><br><span class="line">  <span class="type">double</span> v = _Vcmd;</span><br><span class="line">  <span class="comment">/*if (car2goal_dist &lt; 1)</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">   L1 = 0.5; </span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  else</span></span><br><span class="line"><span class="comment">  &#123;*/</span></span><br><span class="line">  L1 = <span class="number">1.45</span>;</span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="comment">// L1 = 0.65 + 0.6 * _Vcmd;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> L1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">L1Controller::getSteeringAngle</span><span class="params">(<span class="type">double</span> eta)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//纯追踪算舵机打角</span></span><br><span class="line">  <span class="type">double</span> steeringAnge = <span class="built_in">atan2</span>((L * <span class="built_in">sin</span>(eta)), ((Lfw / <span class="number">2</span>) + lfw * <span class="built_in">cos</span>(eta))) * (<span class="number">180.0</span> / PI);</span><br><span class="line">  <span class="comment">// ROS_INFO(&quot;Steering Angle = %.2f&quot;, steeringAnge);</span></span><br><span class="line">  <span class="keyword">return</span> steeringAnge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::goalReachingCB</span><span class="params">(<span class="type">const</span> ros::TimerEvent &amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//小车到达目标点后</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (goal_received)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">double</span> car2goal_dist = <span class="built_in">getCar2GoalDist</span>();</span><br><span class="line">    <span class="keyword">if</span> (car2goal_dist &lt; goalRadius)</span><br><span class="line">    &#123;</span><br><span class="line">      goal_reached = <span class="literal">true</span>;</span><br><span class="line">      goal_received = <span class="literal">false</span>;</span><br><span class="line">      cmd_vel.linear.x = <span class="number">0.0</span>;</span><br><span class="line">      cmd_vel.angular.z = <span class="number">0.0</span>;</span><br><span class="line">      pub_.<span class="built_in">publish</span>(cmd_vel);</span><br><span class="line">      <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Goal Reached !!!!!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">L1Controller::isline</span><span class="params">(<span class="type">double</span> line_wight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (line_wight == <span class="number">0.0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> initbaseSpeed;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">double</span> line_acc = <span class="number">0.0</span>;</span><br><span class="line">  <span class="comment">//tow versions</span></span><br><span class="line">  line_acc = line_wight * <span class="number">0.5</span>;</span><br><span class="line">  baseSpeed = baseSpeed + line_acc;</span><br><span class="line">  <span class="built_in">ROS_WARN</span>(<span class="string">&quot;WE ARE CHAMPION!!!!!!!!!!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> baseSpeed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">L1Controller::controlLoopCB</span><span class="params">(<span class="type">const</span> ros::TimerEvent &amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  geometry_msgs::Pose carPose = odom.pose.pose;</span><br><span class="line">  geometry_msgs::Twist carVel = odom.twist.twist;</span><br><span class="line">  cmd_vel.linear.x = <span class="number">0</span>;</span><br><span class="line">  cmd_vel.angular.z = baseAngle;</span><br><span class="line">  <span class="type">double</span> encoder_speed = encoder.twist.twist.linear.x;</span><br><span class="line">  <span class="type">static</span> <span class="type">double</span> speedlast;</span><br><span class="line">  <span class="type">static</span> <span class="type">double</span> anglelast;</span><br><span class="line">  <span class="comment">//Lfw = getL1Distance(encoder_speed);</span></span><br><span class="line">  <span class="keyword">if</span> (goal_received)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">double</span> eta = <span class="built_in">getEta</span>(carPose);</span><br><span class="line">    <span class="keyword">if</span> (foundForwardPt)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (!goal_reached)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (stop_flag == <span class="number">1.0</span> &amp;&amp; stopIdx &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//only ex once</span></span><br><span class="line">          baseSpeed = slow_final * baseSpeed + <span class="number">1500</span>;</span><br><span class="line">          stopIdx++;</span><br><span class="line">          <span class="built_in">ROS_WARN</span>(<span class="string">&quot;I GET THE FINAL GOAL AND I WILL SLOW DOWN&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stop_flag == <span class="number">2.0</span> &amp;&amp; stopIdx &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//only ex once</span></span><br><span class="line">          baseSpeed = fast_final * baseSpeed + <span class="number">1500</span>;</span><br><span class="line">          stopIdx++;</span><br><span class="line">          <span class="built_in">ROS_WARN</span>(<span class="string">&quot;I GET THE FINAL GOAL AND I WILL SPEED UP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stop_flag == <span class="number">3.0</span> &amp;&amp; stopIdx &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          baseSpeed = initbaseSpeed + <span class="number">1500</span>;</span><br><span class="line">          <span class="built_in">ROS_WARN</span>(<span class="string">&quot;I recovery the speed in case overstep the area&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cmd_vel.linear.x = baseSpeed;</span><br><span class="line">        cmd_vel.angular.z = <span class="number">90</span> - <span class="built_in">getSteeringAngle</span>(eta) * Angle_gain_p - Angle_gain_d * (<span class="built_in">getSteeringAngle</span>(eta) - last_steeringangle); <span class="comment">//纯追踪pd</span></span><br><span class="line">        last_steeringangle = <span class="built_in">getSteeringAngle</span>(eta);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//角度限幅</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmd_vel.linear.x &lt; vp_min<span class="number">+1500</span>)</span><br><span class="line">          cmd_vel.linear.x = vp_min<span class="number">+1500</span>;</span><br><span class="line">        <span class="keyword">if</span> (mapPathNum &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//if now the path is empty then v=kv</span></span><br><span class="line">          <span class="built_in">ROS_WARN</span>(<span class="string">&quot;---------------NO PATH TO GO&quot;</span>);</span><br><span class="line">          cmd_vel.linear.x = <span class="number">115</span>;</span><br><span class="line">          <span class="comment">//cmd_vel.angular.z = anglelast + 0.1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd_vel.linear.x &gt; vp_max_base<span class="number">+1500</span>)</span><br><span class="line">          cmd_vel.linear.x = vp_max_base<span class="number">+1500</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmd_vel.angular.z &gt; <span class="number">135</span>)</span><br><span class="line">          cmd_vel.angular.z = <span class="number">135</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmd_vel.angular.z &lt; <span class="number">45</span>)</span><br><span class="line">          cmd_vel.angular.z = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Lfw = %.2f&quot;</span>, Lfw);</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;eta = %.2f&quot;</span>, eta * <span class="number">180</span> / PI);</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;encoder_v = %.2f&quot;</span>, encoder_speed);</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;out_speed = %.2f&quot;</span>, cmd_vel.linear.x);</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;out_angle = %.2f&quot;</span>, cmd_vel.angular.z);</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cmd_vel.linear.x = <span class="number">1500</span>;</span><br><span class="line">    cmd_vel.angular.z = <span class="number">90</span>;</span><br><span class="line">    <span class="comment">//ROS_INFO(&quot;Goal_Reached!!!&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">  speedlast = cmd_vel.linear.x;</span><br><span class="line">  anglelast = cmd_vel.angular.z;</span><br><span class="line">  pub_.<span class="built_in">publish</span>(cmd_vel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************/</span></span><br><span class="line"><span class="comment">/* MAIN FUNCTION */</span></span><br><span class="line"><span class="comment">/*****************/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Initiate ROS</span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;art_car_controller&quot;</span>);</span><br><span class="line">  L1Controller controller;</span><br><span class="line"></span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序放上来纯粹是为了以后万万一有空想起来了看一眼</p>
<p>下面说我自己的。首先是路线规划到底是什么，在rviz打开<code>poseArray</code>然后选择<code>/move_base/TebLocalPlannerROS/teb_poses</code>这个topic，可以看到很多向量，这就是车子要走过的每一个点，我们可以根据这个点来规划车子行进<br><img src="/2023/ros-apply/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230608201239.png" alt="规划的路径点"><br><img src="/2023/ros-apply/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230608201807.png" alt="teb发布的其他话题"><br>或者直接用命令查看话题内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rostopic <span class="built_in">echo</span> /move_base/TebLocalPlannerROS/local_plan</span><br></pre></td></tr></table></figure>
<p><img src="/2023/ros-apply/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230608203032.png" alt="一大串坐标点和四元数方向"></p>
<p>好了差不多了开始写</p>
<p>这个程序问题还是很大的，比如显然反正切值和舵机角度之间关系不是线性的，甚至没有正负判断，仅用于举例体现如何实现，以后用到务必修改</p>
<p>run.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> PoseArray, Twist</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation <span class="keyword">as</span> R</span><br><span class="line"><span class="keyword">import</span> tf</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dir</span>(<span class="params">PoseArray</span>):</span><br><span class="line">    <span class="keyword">global</span> tf_listener, cmd_pub</span><br><span class="line">    <span class="comment"># 获取teb规划的下一个点的位置</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(PoseArray.poses) &gt; <span class="number">5</span>:</span><br><span class="line">        pose_next = PoseArray.poses[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pose_next = PoseArray.poses[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;next_pose:&quot;</span>, pose_next.position)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------------------------&quot;</span>)</span><br><span class="line">    <span class="comment"># rospy_Time(0)指最近时刻,从 /map 到 /base_link 的变换，也就是车目前的坐标</span></span><br><span class="line">    (trans, rot) = tf_listener.lookupTransform(<span class="string">&#x27;/map&#x27;</span>, <span class="string">&#x27;/base_link&#x27;</span>, rospy.Time(<span class="number">0</span>))</span><br><span class="line">    <span class="comment"># 四元数转欧拉角转弧度</span></span><br><span class="line">    r = R.from_quat(rot)</span><br><span class="line">    euler_z = math.radians(r.as_euler(<span class="string">&#x27;xyz&#x27;</span>, degrees=<span class="literal">True</span>)[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now_pose:&quot;</span>, trans[<span class="number">0</span>], trans[<span class="number">1</span>], euler_z)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------------------------&quot;</span>)</span><br><span class="line">    <span class="comment"># 比较arctan值计算舵机方向，差为负则左转</span></span><br><span class="line">    arg_next = math.atan2(pose_next.position.y, pose_next.position.x)</span><br><span class="line">    arg_now = math.atan2(trans[<span class="number">1</span>], trans[<span class="number">0</span>])</span><br><span class="line">    arg_d = arg_now - arg_next</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg:&quot;</span>, arg_d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------------------------&quot;</span>)</span><br><span class="line">    <span class="comment"># 向底盘控制节点发送信息</span></span><br><span class="line">    twist = Twist()</span><br><span class="line">    twist.linear.x = <span class="number">1500</span> + <span class="number">200</span></span><br><span class="line">    twist.linear.y = <span class="number">0</span></span><br><span class="line">    twist.linear.z = <span class="number">0</span></span><br><span class="line">    twist.angular.x = <span class="number">0</span></span><br><span class="line">    twist.angular.y = <span class="number">0</span></span><br><span class="line">    twist.angular.z = <span class="number">90</span> - <span class="number">10000</span>*arg_d</span><br><span class="line">    cmd_pub.publish(twist)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">90</span> - <span class="number">10000</span>*arg_d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 订阅teb的坐标话题，回调函数get_dir</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;teb_pos_subscriber&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    tf_listener = tf.TransformListener()</span><br><span class="line">    cmd_pub = rospy.Publisher(<span class="string">&#x27;~/car/cmd_vel&#x27;</span>, Twist, queue_size=<span class="number">5</span>)</span><br><span class="line">    rospy.Subscriber(<span class="string">&quot;/move_base/TebLocalPlannerROS/teb_poses&quot;</span>, PoseArray, get_dir)</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没有继续完善上面程序的原因就是……志伟哥已经写好了路径点纯追踪的程序，如果想要实现导航功能，把路径点读取改成获取导航坐标点就可以了</p>
<p>pp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> PoseArray</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> pairwise_distances</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> splprep, splev</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PurePursuit</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.path_list = []</span><br><span class="line">        <span class="variable language_">self</span>.final_point = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.load_path()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.speed_mid = <span class="number">1500</span></span><br><span class="line">        <span class="variable language_">self</span>.speed_max = <span class="number">350</span></span><br><span class="line">        <span class="variable language_">self</span>.speed_max_final = <span class="number">280</span></span><br><span class="line">        <span class="variable language_">self</span>.pp_k = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tf_buffer = tf2_ros.Buffer()</span><br><span class="line">        listener = tf2_ros.TransformListener(<span class="variable language_">self</span>.tf_buffer)</span><br><span class="line">        <span class="variable language_">self</span>.cmd_pub = rospy.Publisher(<span class="string">&#x27;~/car/cmd_vel&#x27;</span>, Twist, queue_size=<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.start_time = rospy.Time.now()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_path</span>(<span class="params">self</span>):</span><br><span class="line">        x = [<span class="number">0</span>]</span><br><span class="line">        y = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/ros-autocar/Ros-manualcar/src/autopilot/scripts/waypoint.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            f.close()</span><br><span class="line">        waypoint = data[<span class="string">&quot;waypoint&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> waypoint:</span><br><span class="line">            x.append(point[<span class="number">0</span>])</span><br><span class="line">            y.append(point[<span class="number">1</span>])</span><br><span class="line">        tck, u = splprep([x, y], s=<span class="number">0</span>)</span><br><span class="line">        u_new = np.linspace(u.<span class="built_in">min</span>(), u.<span class="built_in">max</span>(), <span class="number">200</span>)</span><br><span class="line">        x_new, y_new = splev(u_new, tck)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_new)):</span><br><span class="line">            <span class="variable language_">self</span>.path_list.append([x_new[i], y_new[i]])</span><br><span class="line">        <span class="variable language_">self</span>.final_point = <span class="variable language_">self</span>.path_list[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                trans = <span class="variable language_">self</span>.tf_buffer.lookup_transform(<span class="string">&quot;map&quot;</span>, <span class="string">&#x27;base_link&#x27;</span>, rospy.Time())</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;missing tf2 trans&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            x = trans.transform.translation.x</span><br><span class="line">            y = trans.transform.translation.y</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.path_list) &lt; <span class="number">10</span>:</span><br><span class="line">                dis_final = math.sqrt((<span class="variable language_">self</span>.final_point[<span class="number">0</span>] - x) ** <span class="number">2</span> + (<span class="variable language_">self</span>.final_point[<span class="number">1</span>] - y) ** <span class="number">2</span>)</span><br><span class="line">                <span class="variable language_">self</span>.speed_max = <span class="variable language_">self</span>.speed_max_final</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;final distance: <span class="subst">&#123;dis_final&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> dis_final &lt; <span class="number">0.7</span>:</span><br><span class="line">                    twist = Twist()</span><br><span class="line">                    twist.linear.x = <span class="number">1500</span></span><br><span class="line">                    twist.linear.y = <span class="number">0</span></span><br><span class="line">                    twist.linear.z = <span class="number">0</span></span><br><span class="line">                    twist.angular.x = <span class="number">0</span></span><br><span class="line">                    twist.angular.y = <span class="number">0</span></span><br><span class="line">                    twist.angular.z = <span class="number">90</span></span><br><span class="line">                    <span class="variable language_">self</span>.cmd_pub.publish(twist)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;arrive&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.path_list) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            degree = <span class="variable language_">self</span>.quaternion_to_euler_angle(trans.transform.rotation.w,</span><br><span class="line">                                                    trans.transform.rotation.x,</span><br><span class="line">                                                    trans.transform.rotation.y,</span><br><span class="line">                                                    trans.transform.rotation.z,)</span><br><span class="line">            degree = degree / <span class="number">180</span> * math.pi</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.path_list)):</span><br><span class="line">                distance = math.sqrt((<span class="variable language_">self</span>.path_list[i][<span class="number">0</span>] - x) ** <span class="number">2</span> + (<span class="variable language_">self</span>.path_list[i][<span class="number">1</span>] - y) ** <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> distance &gt; <span class="variable language_">self</span>.pp_k:</span><br><span class="line">                    <span class="variable language_">self</span>.path_list = <span class="variable language_">self</span>.path_list[i:]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            forward_point = [<span class="variable language_">self</span>.path_list[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">            a = forward_point[<span class="number">0</span>][<span class="number">0</span>]-x</span><br><span class="line">            b = forward_point[<span class="number">0</span>][<span class="number">1</span>]-y</span><br><span class="line"></span><br><span class="line">            theta = math.acos(a / math.sqrt(a * a + b * b))</span><br><span class="line">            <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">                theta = - theta</span><br><span class="line">            theta -= degree</span><br><span class="line"></span><br><span class="line">            wheel_angle = <span class="number">0.9</span>*math.atan(<span class="number">2</span> * <span class="number">0.3</span> * math.sin(theta) / <span class="variable language_">self</span>.pp_k * <span class="number">2.15</span>) / math.pi * <span class="number">180</span></span><br><span class="line">            speed = <span class="variable language_">self</span>.speed_mid + <span class="variable language_">self</span>.speed_max</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;angle: <span class="subst">&#123;wheel_angle&#125;</span>,speed:<span class="subst">&#123;speed&#125;</span>,points:<span class="subst">&#123;<span class="built_in">len</span>(self.path_list)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            twist = Twist()</span><br><span class="line">            twist.linear.x = speed</span><br><span class="line">            twist.linear.y = <span class="number">0</span></span><br><span class="line">            twist.linear.z = <span class="number">0</span></span><br><span class="line">            twist.angular.x = <span class="number">0</span></span><br><span class="line">            twist.angular.y = <span class="number">0</span></span><br><span class="line">            twist.angular.z = <span class="number">90</span>+wheel_angle</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.cmd_pub.publish(twist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quaternion_to_euler_angle</span>(<span class="params">self,w, x, y, z</span>):</span><br><span class="line">        ysqr = y * y</span><br><span class="line">        t3 = +<span class="number">2.0</span> * (w * z + x * y)</span><br><span class="line">        t4 = +<span class="number">1.0</span> - <span class="number">2.0</span> * (ysqr + z * z)</span><br><span class="line">        Z = np.degrees(np.arctan2(t3, t4))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rospy.init_node(<span class="string">&#x27;pp&#x27;</span>)</span><br><span class="line">pp = PurePursuit()</span><br><span class="line">pp.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="区域搜索：RRT"><a href="#区域搜索：RRT" class="headerlink" title="区域搜索：RRT"></a>区域搜索：RRT</h2>]]></content>
      <categories>
        <category>折腾记录</category>
        <category>文档&amp;笔记</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ROS</tag>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ros学习笔记-最基础内容-2023重制版</title>
    <url>/2023/ros-learning-2023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前写过一篇关于<a href="https://triority.cc/root/ros%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">ROS学习笔记</a>，那时候刚开始学感觉不适合现在使用所以重写一篇。</p>
<p>这篇文章缩减了一部分不需要的内容，关于实操应用的内容可以看<a href="https://triority.cc/2023/ros-apply/">下一篇文章</a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="工作空间和功能包的基本操作"><a href="#工作空间和功能包的基本操作" class="headerlink" title="工作空间和功能包的基本操作"></a>工作空间和功能包的基本操作</h2><h3 id="创建工作空间目录和代码空间"><a href="#创建工作空间目录和代码空间" class="headerlink" title="创建工作空间目录和代码空间"></a>创建工作空间目录和代码空间</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ros_learning</span><br><span class="line">cd ros_learning</span><br><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">catkin_init_workspace</span><br><span class="line">cd ..</span><br><span class="line">catkin_make</span><br><span class="line">catkin_make install</span><br></pre></td></tr></table></figure>
<h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><p>在工作空间目录内：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure>
<p>检查环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $ROS_PACKAGE_PATH</span><br></pre></td></tr></table></figure>
<p>每次打开终端都要设置环境变量，如果想要免除这一步骤可以修改用户目录内的(<code>/home/triority</code>)文件<code>.bashrc</code>。</p>
<p>在<code>source /opt/ros/melodic/setup.bash</code>下一行加入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /home/triority/desktop/ROS_learning/devel/setup.bash</span><br></pre></td></tr></table></figure>
<p>工作空间路径改成自己的。</p>
<h3 id="创建功能包-catkin-create-pkg"><a href="#创建功能包-catkin-create-pkg" class="headerlink" title="创建功能包:catkin_create_pkg"></a>创建功能包:catkin_create_pkg</h3><p>在<code>src</code>文件夹内：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg &lt;包名&gt; &lt;依赖&gt;</span><br></pre></td></tr></table></figure>
<p>依赖：roscpp；用于编写c++程序，rospy：用于编写python程序，std_msgs；ros标准消息结构，等依赖的的一个名为<code>lab</code>的功能包(应创建在src文件夹内)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg lab roscpp rospy std_msgs geometry_msgs turtlesim message_generation</span><br></pre></td></tr></table></figure>

<h2 id="话题：发布与订阅"><a href="#话题：发布与订阅" class="headerlink" title="话题：发布与订阅"></a>话题：发布与订阅</h2><h3 id="自定义消息"><a href="#自定义消息" class="headerlink" title="自定义消息"></a>自定义消息</h3><h5 id="消息定义"><a href="#消息定义" class="headerlink" title="消息定义"></a>消息定义</h5><p>在功能包文件夹内创建<code>msg</code>文件夹，并新建<code>lab.msg</code>文件，在里面写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string str</span><br></pre></td></tr></table></figure>
<h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><p>在<code>package.xml</code>文件内添加依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br><span class="line">&lt;build_export_depend&gt;message_generation&lt;/build_export_depend&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>CMakeLists.txt</code>内加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Person.msg</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>并把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime</span><br></pre></td></tr></table></figure>
<h3 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h3><p>publisher.py<br>记得给.py文件添加可执行权限！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from lab.msg import lab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def publisher():</span><br><span class="line">	# 初始化ROS节点</span><br><span class="line">    rospy.init_node(&#x27;lab_publisher_node&#x27;, anonymous=True)</span><br><span class="line"></span><br><span class="line">	# 创建一个Publisher，发布名为/publisher_info的topic，消息类型为lab，队列长度10</span><br><span class="line">    publisher_info = rospy.Publisher(&#x27;/publisher_info&#x27;, lab, queue_size=10)</span><br><span class="line"></span><br><span class="line">	#设置循环的频率</span><br><span class="line">    rate = rospy.Rate(1) </span><br><span class="line"></span><br><span class="line">    while not rospy.is_shutdown():</span><br><span class="line">        # 初始化消息类型</span><br><span class="line">        lab_msg = lab()</span><br><span class="line">        lab_msg.str = &quot;Tom&quot;</span><br><span class="line"></span><br><span class="line">		    # 发布消息</span><br><span class="line">        publisher_info.publish(lab_msg)</span><br><span class="line">        rospy.loginfo(&quot;Publsh person message[%s]&quot;, lab.str)</span><br><span class="line"></span><br><span class="line">		    # 按照循环频率延时</span><br><span class="line">        rate.sleep()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    try:</span><br><span class="line">        publisher()</span><br><span class="line">    except rospy.ROSInterruptException:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>
<h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from lab.msg import lab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def InfoCallback(msg):</span><br><span class="line">    rospy.loginfo(&quot;Subcribe Info: str:%s&quot;, msg.str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def subscriber():</span><br><span class="line">	# ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;lab_subscriber&#x27;, anonymous=True)</span><br><span class="line"></span><br><span class="line">	# 创建一个Subscriber，订阅名为/publisher_info的topic，注册回调函数InfoCallback</span><br><span class="line">    rospy.Subscriber(&quot;/publisher_info&quot;, lab, InfoCallback)</span><br><span class="line"></span><br><span class="line">	# 循环等待回调函数</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    subscriber()</span><br></pre></td></tr></table></figure>
<h3 id="rosrun"><a href="#rosrun" class="headerlink" title="rosrun"></a>rosrun</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun lab publisher.py</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun lab subscriber.py</span><br></pre></td></tr></table></figure>
<h2 id="服务：服务端与客户端"><a href="#服务：服务端与客户端" class="headerlink" title="服务：服务端与客户端"></a>服务：服务端与客户端</h2><h3 id="自定义消息-1"><a href="#自定义消息-1" class="headerlink" title="自定义消息"></a>自定义消息</h3><p>新建<code>srv</code>文件夹并写入<code>labs.srv</code>(不能与前面的lab.msg同名)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string str</span><br><span class="line">---</span><br><span class="line">string res</span><br></pre></td></tr></table></figure>
<p>在<code>package.xml</code>添加的依赖和前面的话题部分一样，写过就不再写了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br><span class="line">&lt;build_export_depend&gt;message_generation&lt;/build_export_depend&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>CMakeList.txt</code>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  Person.srv</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>还需要添加的另一部分也已经在前面的话题部分一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>client.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from lab.srv import labs, labsResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def client():</span><br><span class="line">	  # ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;lab_client&#x27;)</span><br><span class="line"></span><br><span class="line">	  # 发现/lab_server服务后，创建客户端连接名为/lab_server的service</span><br><span class="line">    rospy.wait_for_service(&#x27;/lab_server&#x27;)</span><br><span class="line">    try:</span><br><span class="line">        person_client = rospy.ServiceProxy(&#x27;/lab_server&#x27;, labs)</span><br><span class="line"></span><br><span class="line">		    # 请求服务调用，输入请求数据</span><br><span class="line">        response = person_client(&quot;str&quot;)</span><br><span class="line">        return response.res</span><br><span class="line">    except rospy.ServiceException as e:</span><br><span class="line">        print (&quot;Service call failed: %s&quot;%e)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	  #服务调用并显示调用结果</span><br><span class="line">    print (&quot;Show result : %s&quot; %(client()))</span><br></pre></td></tr></table></figure>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>server.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import rospy</span><br><span class="line">from lab.srv import labs, labsResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Callback(req):</span><br><span class="line">	  # 显示请求数据</span><br><span class="line">    rospy.loginfo(&quot;string: str:%s&quot;, req.str)</span><br><span class="line"></span><br><span class="line">	  # 反馈数据</span><br><span class="line">    return labsResponse(&quot;OK&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def person_server():</span><br><span class="line">	  # ROS节点初始化</span><br><span class="line">    rospy.init_node(&#x27;lab_server&#x27;)</span><br><span class="line"></span><br><span class="line">	  # 创建一个名为/lab_server的server，注册回调函数Callback</span><br><span class="line">    s = rospy.Service(&#x27;/lab_server&#x27;, labs, Callback)</span><br><span class="line"></span><br><span class="line">	  # 循环等待回调函数</span><br><span class="line">    print (&quot;Ready to show.&quot;)</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    person_server()</span><br></pre></td></tr></table></figure>
<h3 id="rosrun-1"><a href="#rosrun-1" class="headerlink" title="rosrun"></a>rosrun</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun lab client.py</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun lab server.py</span><br></pre></td></tr></table></figure>
<h2 id="TF坐标变换"><a href="#TF坐标变换" class="headerlink" title="TF坐标变换"></a>TF坐标变换</h2><h2 id="参数服务器：全局字典"><a href="#参数服务器：全局字典" class="headerlink" title="参数服务器：全局字典"></a>参数服务器：全局字典</h2><h3 id="参数操作命令行"><a href="#参数操作命令行" class="headerlink" title="参数操作命令行"></a>参数操作命令行</h3><p>1.列出参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam list</span><br></pre></td></tr></table></figure>
<p>2.获取参数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam get &lt;参数&gt;</span><br></pre></td></tr></table></figure>
<p>3.修改参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam set &lt;参数&gt;</span><br></pre></td></tr></table></figure>
<p>4.保存参数为文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam dump xxx.yaml</span><br></pre></td></tr></table></figure>
<p>5.从文件加载参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam load xxx.yaml</span><br></pre></td></tr></table></figure>
<p>6.删除参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosparam delete xxx.yaml</span><br></pre></td></tr></table></figure>
<h3 id="使用python操作参数"><a href="#使用python操作参数" class="headerlink" title="使用python操作参数"></a>使用python操作参数</h3><p>parameter_config.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_srvs.srv <span class="keyword">import</span> Empty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parameter_config</span>():</span><br><span class="line">	<span class="comment"># ROS节点初始化</span></span><br><span class="line">    rospy.init_node(<span class="string">&#x27;parameter_config&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 读取背景颜色参数</span></span><br><span class="line">    red   = rospy.get_param(<span class="string">&#x27;/turtlesim/background_r&#x27;</span>)</span><br><span class="line">    green = rospy.get_param(<span class="string">&#x27;/turtlesim/background_g&#x27;</span>)</span><br><span class="line">    blue  = rospy.get_param(<span class="string">&#x27;/turtlesim/background_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Get Backgroud Color[%d, %d, %d]&quot;</span>, red, green, blue)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 设置背景颜色参数</span></span><br><span class="line">    rospy.set_param(<span class="string">&quot;/turtlesim/background_r&quot;</span>, <span class="number">255</span>);</span><br><span class="line">    rospy.set_param(<span class="string">&quot;/turtlesim/background_g&quot;</span>, <span class="number">255</span>);</span><br><span class="line">    rospy.set_param(<span class="string">&quot;/turtlesim/background_b&quot;</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Set Backgroud Color[255, 255, 255]&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 读取背景颜色参数</span></span><br><span class="line">    red   = rospy.get_param(<span class="string">&#x27;/turtlesim/background_r&#x27;</span>)</span><br><span class="line">    green = rospy.get_param(<span class="string">&#x27;/turtlesim/background_g&#x27;</span>)</span><br><span class="line">    blue  = rospy.get_param(<span class="string">&#x27;/turtlesim/background_b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Get Backgroud Color[%d, %d, %d]&quot;</span>, red, green, blue)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 发现/spawn服务后，创建一个服务客户端，连接名为/spawn的service</span></span><br><span class="line">    rospy.wait_for_service(<span class="string">&#x27;/clear&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        clear_background = rospy.ServiceProxy(<span class="string">&#x27;/clear&#x27;</span>, Empty)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 请求服务调用，输入请求数据</span></span><br><span class="line">        response = clear_background()</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> rospy.ServiceException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Service call failed: %s&quot;</span>%e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parameter_config()</span><br></pre></td></tr></table></figure>

<h2 id="使用launch文件启动"><a href="#使用launch文件启动" class="headerlink" title="使用launch文件启动"></a>使用launch文件启动</h2><h3 id="luanch文件语法"><a href="#luanch文件语法" class="headerlink" title="luanch文件语法"></a>luanch文件语法</h3><h5 id="根元素定义标签"><a href="#根元素定义标签" class="headerlink" title="根元素定义标签"></a><launch>根元素定义标签</h5><h5 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a><node>启动节点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;node pkg=&quot;package-name&quot; type=&quot;executable-name&quot; name=&quot;node-name&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>可选属性：</p>
<ul>
<li><code>pkg</code>：节点功能包名称</li>
<li><code>type</code>：节点可执行文件名称</li>
<li><code>name</code>：节点运行时的名称，取代原有节点名，避免冲突</li>
<li><code>output</code>：控制终端使出</li>
<li><code>respawn</code>：挂掉后是否自动重启</li>
<li><code>required</code>：是否为必须项</li>
<li><code>args</code>：输入参数</li>
<li>……</li>
</ul>
<h5 id="设置参数服务器的参数"><a href="#设置参数服务器的参数" class="headerlink" title="设置参数服务器的参数"></a><param>设置参数服务器的参数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;param name=&quot;output_frame&quot; value=&quot;odom&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p><code>name</code>：参数名；<code>value</code>：参数值</p>
<p>加载多个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;rosparam file+&quot;param.yaml&quot; command=&quot;load&quot; ns=&quot;params&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h5 id="launch文件内局部变量"><a href="#launch文件内局部变量" class="headerlink" title="launch文件内局部变量"></a><arg>launch文件内局部变量</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;arg name=&quot;arg-name&quot; default=&quot;arg-value&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p><code>name</code>：参数名；<code>value</code>：参数值</p>
<h5 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a><remap>重命名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;remap from=&quot;/turtlebot/cmd_vel&quot; to+&quot;/cmd_vel&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h5 id="包含其他launch文件"><a href="#包含其他launch文件" class="headerlink" title="包含其他launch文件"></a><include>包含其他launch文件</h5><h3 id="运行launch文件"><a href="#运行launch文件" class="headerlink" title="运行launch文件"></a>运行launch文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roslaunch &lt;package_name&gt; &lt;launch_name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="命令行及可视化工具"><a href="#命令行及可视化工具" class="headerlink" title="命令行及可视化工具"></a>命令行及可视化工具</h2><h5 id="可视化查看节点关系rqt-graph"><a href="#可视化查看节点关系rqt-graph" class="headerlink" title="可视化查看节点关系rqt_graph"></a>可视化查看节点关系<code>rqt_graph</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></table></figure>
<h5 id="查看节点信息rosnode"><a href="#查看节点信息rosnode" class="headerlink" title="查看节点信息rosnode"></a>查看节点信息<code>rosnode</code></h5><p>查看全部节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosnode list</span><br></pre></td></tr></table></figure>
<p>查看节点详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosnode info &lt;节点名&gt;</span><br></pre></td></tr></table></figure>
<h5 id="查看话题rostopic"><a href="#查看话题rostopic" class="headerlink" title="查看话题rostopic"></a>查看话题<code>rostopic</code></h5><p>打印话题列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rostopic list</span><br></pre></td></tr></table></figure>
<p>给话题发布数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rostopic pub &lt;话题名&gt; &lt;数据内容&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据内容可用两次tab补全默认格式。可加参数 -r &lt;频率(Hz)&gt; 来连续发布</p>
</blockquote>
<h5 id="查看消息rosmsg"><a href="#查看消息rosmsg" class="headerlink" title="查看消息rosmsg"></a>查看消息<code>rosmsg</code></h5><p>查看消息数据结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosmsg show &lt;话题名&gt;</span><br></pre></td></tr></table></figure>
<h5 id="查看服务rosservice"><a href="#查看服务rosservice" class="headerlink" title="查看服务rosservice"></a>查看服务<code>rosservice</code></h5><p>#查看所有服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosservice list</span><br></pre></td></tr></table></figure>
<p>发布服务请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosservice call &lt;服务名&gt;</span><br></pre></td></tr></table></figure>
<h5 id="记录工具"><a href="#记录工具" class="headerlink" title="记录工具"></a>记录工具</h5><p>记录话题数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosbag record -a -O &lt;压缩数据包名&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中-a表示all保存全部数据，-O表示保存成压缩包</p>
</blockquote>
<p>复现话题数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosbag paly &lt;复现文件名&gt;</span><br></pre></td></tr></table></figure>
<h5 id="rqt可视化"><a href="#rqt可视化" class="headerlink" title="rqt可视化"></a>rqt可视化</h5><p>显示tf坐标变换关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun rqt_tf_tree rqt_tf_tree</span><br></pre></td></tr></table></figure>

<p>日志输出工具<code>rqt_console</code><br>计算图可视化工具<code>rqt_graph</code><br>数据绘图工具<code>rqt_plot</code><br>图像渲染工具<code>rqt_image_view</code></p>
]]></content>
      <categories>
        <category>折腾记录</category>
        <category>文档&amp;笔记</category>
        <category>值得一提的文章</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ROS</tag>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派和esp32电机控制器通讯的底盘控制</title>
    <url>/2023/rpi-esp32-iic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="上下位机通讯"><a href="#上下位机通讯" class="headerlink" title="上下位机通讯"></a>上下位机通讯</h1><h2 id="iic"><a href="#iic" class="headerlink" title="iic"></a>iic</h2><p>在<a href="https://triority.cc/2023/esp32-all-in-one/#%E5%BA%94%E7%AD%94%E4%BA%A4%E4%BA%92%E9%80%9A%E8%AE%AF">这篇文章</a>我已经写过arduino uno和esp32通讯并控制电机速度，但是树莓派并没有封装好的Wire库，或者说我没找到，所以如果使用树莓派作为上位机这段程序需要重写。</p>
<blockquote>
<p>树莓派速度发送程序（还没有进行位置计算）:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import numpy as np</span><br><span class="line">from smbus2 import SMBus</span><br><span class="line">i2c = SMBus(1)</span><br><span class="line">i2c.open(1)</span><br><span class="line">while 1:</span><br><span class="line">  inf = &quot;0010!&quot;</span><br><span class="line">  adr = 0x08</span><br><span class="line">  str_list = np.fromstring(inf,dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">  str_list=np.append(str_list,10)</span><br><span class="line">  for i in str_list:</span><br><span class="line">      #print(i)</span><br><span class="line">      i = int(i)</span><br><span class="line">      i2c.write_byte(adr,i,force=None)</span><br><span class="line">  time.sleep(0.1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>esp32电机控制程序：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line">#include &lt;dummy.h&gt;</span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line">BLDCMotor motor = BLDCMotor(11);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(25, 26, 27, 14);</span><br><span class="line"></span><br><span class="line">float target_velocity = 0;</span><br><span class="line"></span><br><span class="line">TwoWire Wire_foc = TwoWire(0);</span><br><span class="line">TwoWire Wire_rec = TwoWire(1);</span><br><span class="line"></span><br><span class="line">String inString=&quot;&quot;;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line"></span><br><span class="line">  Wire_rec.setPins(16,17);</span><br><span class="line">  Wire_rec.begin(0x08);</span><br><span class="line">  Wire_rec.onReceive(receiveEvent);</span><br><span class="line">  Wire_rec.onRequest(requestEvent);</span><br><span class="line"></span><br><span class="line">  Wire_foc.setPins(33,32);</span><br><span class="line">  Wire_foc.begin();</span><br><span class="line">  sensor.init(&amp;Wire_foc);</span><br><span class="line"></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  driver.voltage_power_supply = 12;</span><br><span class="line">  driver.init();</span><br><span class="line"></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  motor.controller = MotionControlType::velocity;</span><br><span class="line"></span><br><span class="line">  motor.PID_velocity.P = 0.2f;</span><br><span class="line">  motor.PID_velocity.I = 20;</span><br><span class="line">  motor.PID_velocity.D = 0;</span><br><span class="line">  motor.voltage_limit = 6;</span><br><span class="line">  motor.PID_velocity.output_ramp = 1000;</span><br><span class="line">  motor.LPF_velocity.Tf = 0.01f;</span><br><span class="line"></span><br><span class="line">  motor.init();</span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  _delay(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  motor.move(target_velocity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void receiveEvent(int howMany) &#123;</span><br><span class="line">    target_velocity = inString.toFloat()/100;</span><br><span class="line">    char ch = Wire_rec.read();</span><br><span class="line">    inString += ch;</span><br><span class="line">    if (ch==&#x27;!&#x27;)&#123;</span><br><span class="line">      inString[4]=0;</span><br><span class="line">      target_velocity = inString.toFloat()/100;</span><br><span class="line">      Serial.println(target_velocity);</span><br><span class="line">      inString=&quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void requestEvent() &#123;</span><br><span class="line">  float get_ang = sensor.getAngle();</span><br><span class="line">  int ang = int(get_ang*100);</span><br><span class="line">  Serial.println(ang);</span><br><span class="line">  char cstr[8];</span><br><span class="line">  itoa(ang, cstr, 10);</span><br><span class="line">  Wire_rec.write(cstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><p>使用iic出现的问题就是电机抖动，iic读取和发送的时间太长了影响了电机运算，所以改用了串口。实际上串口也会有卡顿现象，随着角度数量级增加卡顿更加明显，因此进行了降采样。实测3倍降采样在-104rad范围内工作完美。</p>
<blockquote>
<p>esp32接收速度并发送编码器累计里程</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SimpleFOC.h&gt;</span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line">BLDCMotor motor = BLDCMotor(11);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(25, 26, 27, 14);</span><br><span class="line"></span><br><span class="line">float target_velocity = 0;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line"></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line">void doTarget(char* cmd) &#123; command.scalar(&amp;target_velocity, cmd); &#125;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Wire.setPins(33,32);</span><br><span class="line">  Wire.begin();</span><br><span class="line">  sensor.init(&amp;Wire);</span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  driver.voltage_power_supply = 12;</span><br><span class="line">  driver.init();</span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  motor.controller = MotionControlType::velocity;</span><br><span class="line">  motor.PID_velocity.P = 0.2f;</span><br><span class="line">  motor.PID_velocity.I = 20;</span><br><span class="line">  motor.PID_velocity.D = 0;</span><br><span class="line">  motor.voltage_limit = 6;</span><br><span class="line">  motor.PID_velocity.output_ramp = 1000;</span><br><span class="line"></span><br><span class="line">  motor.LPF_velocity.Tf = 0.01f;</span><br><span class="line"></span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line">  motor.init();</span><br><span class="line">  motor.initFOC(4.53, Direction::CCW);</span><br><span class="line"></span><br><span class="line">  command.add(&#x27;T&#x27;, doTarget, &quot;target velocity&quot;);</span><br><span class="line">  _delay(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  motor.loopFOC();</span><br><span class="line">  motor.move(target_velocity);</span><br><span class="line">  command.run();</span><br><span class="line">  i++;</span><br><span class="line">  if(i%3==0) &#123;</span><br><span class="line">    //Serial.print(sensor.getVelocity());</span><br><span class="line">    //Serial.print(&quot;---&quot;);</span><br><span class="line">    Serial.println(sensor.getAngle());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>树莓派使用python发送速度接收里程</p>
</blockquote>
<p>记得获取usb设备和读写权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /dev/ttyUSB*</span><br><span class="line">sudo chmod 777 /dev/ttyUSB*</span><br></pre></td></tr></table></figure>

<p>然后安装库需要只安装pyserial</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall serial</span><br><span class="line">pip uninstall pyserial</span><br><span class="line"></span><br><span class="line">pip install pyserial</span><br></pre></td></tr></table></figure>
<p>通信程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import serial</span><br><span class="line">serial_port = serial.Serial(</span><br><span class="line">    port=&#x27;/dev/ttyUSB0&#x27;,</span><br><span class="line">    baudrate=115200,</span><br><span class="line">    bytesize=serial.EIGHTBITS,</span><br><span class="line">    parity=serial.PARITY_NONE,</span><br><span class="line">    stopbits=serial.STOPBITS_ONE,</span><br><span class="line">)</span><br><span class="line">serial_port.write(&quot;T1\r\n&quot;.encode())</span><br><span class="line">str = &quot;&quot;</span><br><span class="line">while True:</span><br><span class="line">    if serial_port.inWaiting() &gt; 0:</span><br><span class="line">        data = serial_port.read().decode()</span><br><span class="line">        if data == &#x27;\n&#x27;:</span><br><span class="line">            print(str)</span><br><span class="line">            str = &quot;&quot;</span><br><span class="line">        else:</span><br><span class="line">            str = str + data</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>树莓派</tag>
        <tag>esp32</tag>
      </tags>
  </entry>
  <entry>
    <title>用python写个聊天室</title>
    <url>/2023/secret-chat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="别问，问就是闲的"><a href="#别问，问就是闲的" class="headerlink" title="别问，问就是闲的"></a>别问，问就是闲的</h2><p>python用了一年半了，我说这是我第一次自己写class你信吗hhh</p>
<p>当然写这个主要是因为这里面包括了很多以后可能需要的东西，比如多线程socket连接，以及后面的改进内容里的线程锁等等等，里面也有一些无关紧要的东西比如base64”加密“，反正很简单加进去就完了hhh也许将来无聊直接给他写成https加密呢，那样加密就不用带引号了</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ChatSever:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.addr = (&quot;0.0.0.0&quot;, 12345)</span><br><span class="line">        self.users = &#123;&#125;</span><br><span class="line">        self.rooms = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def start_sever(self):</span><br><span class="line">        try:</span><br><span class="line">            self.sock.bind(self.addr)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">        self.sock.listen(1024)</span><br><span class="line">        print(&quot;服务器已开启，等待连接...&quot;)</span><br><span class="line">        self.accept_cont()</span><br><span class="line"></span><br><span class="line">    def accept_cont(self):</span><br><span class="line">        while True:</span><br><span class="line">            s, addr = self.sock.accept()</span><br><span class="line">            client_note = json.loads(base64.b64decode(s.recv(1024)).decode(&quot;gbk&quot;))</span><br><span class="line">            room_id = client_note[&quot;room_id&quot;]</span><br><span class="line">            name = client_note[&quot;name&quot;]</span><br><span class="line">            self.users[addr] = [s, room_id, name]</span><br><span class="line">            if room_id in self.rooms:</span><br><span class="line">                self.rooms[room_id].append(name)</span><br><span class="line">            else:</span><br><span class="line">                self.rooms[room_id] = [name]</span><br><span class="line">            print(&quot;&#123;&#125;连接成功，&#123;&#125;已加入房间&#123;&#125;，其中有&#123;&#125;位用户:&#123;&#125;，当前连接的用户共有&#123;&#125;&quot;.format(addr, name, room_id, len(self.rooms[room_id])</span><br><span class="line">                                                                    , self.rooms[room_id], len(self.users)))</span><br><span class="line">            threading.Thread(target=self.recv_send, args=(s, addr, name, room_id)).start()</span><br><span class="line"></span><br><span class="line">    def recv_send(self, sock, addr, name, room_id):</span><br><span class="line">        sock.send(base64.b64encode(&quot;您已成功加入房间&#123;&#125;，当前房间内有&#123;&#125;位用户：&#123;&#125;&quot;.format(room_id, len(self.rooms[room_id])</span><br><span class="line">                                                                      , self.rooms[room_id]).encode(&#x27;gbk&#x27;)))</span><br><span class="line">        for client in self.users.values():</span><br><span class="line">            if client[1] == room_id:</span><br><span class="line">                client[0].send(</span><br><span class="line">                    base64.b64encode(&quot;&#123;&#125;：用户&#123;&#125;加入了聊天室。&quot;.format(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime())</span><br><span class="line">                                                             , name).encode(&quot;gbk&quot;)))</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                response = base64.b64decode(sock.recv(4096)).decode(&quot;gbk&quot;)</span><br><span class="line">                for client in self.users.values():</span><br><span class="line">                    if client[1] == room_id:</span><br><span class="line">                        msg = &quot;&#123;&#125;：用户&#123;&#125;发送消息：&#123;&#125;&quot;.format(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime())</span><br><span class="line">                                                      , name, response)</span><br><span class="line">                        client[0].send(base64.b64encode(msg.encode(&quot;gbk&quot;)))</span><br><span class="line">            except ConnectionResetError:</span><br><span class="line">                print(&quot;&#123;&#125;房间的&#123;&#125;用户&#123;&#125;已经退出聊天!&quot;.format(room_id, addr, name))</span><br><span class="line">                self.users.pop(addr)</span><br><span class="line">                self.rooms[room_id].remove(name)</span><br><span class="line">                for client in self.users.values():</span><br><span class="line">                    if client[1] == room_id:</span><br><span class="line">                        client[0].send(base64.b64encode(</span><br><span class="line">                            &quot;&#123;&#125;：用户&#123;&#125;已经退出聊天!&quot;.format(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime())</span><br><span class="line">                                                    , name).encode(&quot;gbk&quot;)))</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    def close_sever(self):</span><br><span class="line">        for client in self.users.values():</span><br><span class="line">            client.close()</span><br><span class="line">        self.sock.close()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    sever = ChatSever()</span><br><span class="line">    sever.start_sever()</span><br><span class="line">    while True:</span><br><span class="line">        cmd = input()</span><br><span class="line">        if cmd == &quot;stop&quot;:</span><br><span class="line">            print(&quot;正在关闭...&quot;)</span><br><span class="line">            sever.close_sever()</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">addr = (&quot;triority.cc&quot;, 12345)</span><br><span class="line">room_id = input(&quot;请输入房间号：&quot;)</span><br><span class="line">name = input(&quot;请输入你的昵称：&quot;)</span><br><span class="line">client = &#123;&quot;room_id&quot;: room_id, &quot;name&quot;: name&#125;</span><br><span class="line">s.connect(addr)</span><br><span class="line">s.send(base64.b64encode(json.dumps(client).encode(&quot;gbk&quot;)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_msg():</span><br><span class="line">    print(&quot;连接成功！现在可以接收消息！\n&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            response = base64.b64decode(s.recv(4096)).decode(&quot;gbk&quot;)</span><br><span class="line">            print(response)</span><br><span class="line">        except ConnectionResetError:</span><br><span class="line">            print(&quot;服务器关闭，聊天已结束！&quot;)</span><br><span class="line">            s.close()</span><br><span class="line">            break</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_msg():</span><br><span class="line">    print(&quot;连接成功！现在可以发送消息！\n&quot;)</span><br><span class="line">    print(&quot;窗口底部输入消息后按回车发送&quot;)</span><br><span class="line">    print(&quot;发送esc退出聊天&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        msg = input()</span><br><span class="line">        if msg == &quot;esc&quot;:</span><br><span class="line">            print(&quot;你退出了聊天&quot;)</span><br><span class="line">            s.close()</span><br><span class="line">            break</span><br><span class="line">        s.send(base64.b64encode(msg.encode(&quot;gbk&quot;)))</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=recv_msg), threading.Thread(target=send_msg)]</span><br><span class="line">for t in threads:</span><br><span class="line">    t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>上面的已经可以实现我想要的功能了，但是要改进的话，显而易见的以后也有可能再写个GUI吧，不过那是以后的事，现在想的是加一个log功能，服务端保存登入登出记录的数据，由于每个与客户端的连接都在不同线程，这就涉及到了多线程对同一文件同时修改的问题，也就需要线程锁来保证同一时间只有一个线程在读写文件</p>
<h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3><h4 id="多线程的冲突"><a href="#多线程的冲突" class="headerlink" title="多线程的冲突"></a>多线程的冲突</h4><p>由于线程之间的全局变量是共享的，因此在多线程访问的时候可以会有一些问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">a = 0</span><br><span class="line"></span><br><span class="line">def do_thread1():</span><br><span class="line">    global a</span><br><span class="line">    for i in range(1000000):</span><br><span class="line">        a += 1</span><br><span class="line"> </span><br><span class="line">def do_thread2():</span><br><span class="line">    global a</span><br><span class="line">    for i in range(1000000):</span><br><span class="line">        a += 1</span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;---------main begin ----------&#x27;)</span><br><span class="line">    t1 = threading.Thread(target=do_thread1)</span><br><span class="line">    t2 = threading.Thread(target=do_thread2)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    print(a)</span><br><span class="line">    print(&#x27;---------main end ----------&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>理论上说结果应该是<code>2000000</code>，但是实际上由于可能一个线程取出a还没增加时另一个线程执行了a增加操作，就会浪费一次运算次数，所以实际输出不一定是多少，比如我这一次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---------main begin ----------</span><br><span class="line">1724297</span><br><span class="line">---------main end ----------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h4 id="访问共同资源的时候加锁"><a href="#访问共同资源的时候加锁" class="headerlink" title="访问共同资源的时候加锁"></a>访问共同资源的时候加锁</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">a = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def do_thread1():</span><br><span class="line">    global a</span><br><span class="line">    for i in range(1000000):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        a += 1</span><br><span class="line">        mutex.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def do_thread2():</span><br><span class="line">    global a</span><br><span class="line">    for i in range(1000000):</span><br><span class="line">        mutex.acquire()  # 加锁</span><br><span class="line">        a += 1</span><br><span class="line">        mutex.release()  # 解锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;---------main begin ----------&#x27;)</span><br><span class="line">    mutex = threading.Lock()  # 创建一把锁</span><br><span class="line">    t1 = threading.Thread(target=do_thread1)</span><br><span class="line">    t2 = threading.Thread(target=do_thread2)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    print(a)</span><br><span class="line">    print(&#x27;---------main end ----------&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先使用<code>threading.Lock()</code>方法获得一个锁，默认是没上锁的状态，当两个线程开始执行后，开始同时竞争这一把锁。那个线程先获得到锁哪个线程就可以继续执行，获得不到锁的线程只能在原地阻塞等待释放锁。这样就保证了同一时刻只能有一个线程访问全局变量，某段关键代码只能由一个线程从头到尾完整地执行。</p>
<p>这一次输出是正确的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---------main begin ----------</span><br><span class="line">2000000</span><br><span class="line">---------main end ----------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="带有log的服务端"><a href="#带有log的服务端" class="headerlink" title="带有log的服务端"></a>带有log的服务端</h3><p>回到我们的服务端程序，在log记录的线程里，先加锁，再读写文件，再开锁，避免文件写入混乱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ChatSever:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.addr = (&quot;0.0.0.0&quot;, 12345)</span><br><span class="line">        self.users = &#123;&#125;</span><br><span class="line">        self.rooms = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def start_sever(self):</span><br><span class="line">        try:</span><br><span class="line">            self.sock.bind(self.addr)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">        self.sock.listen(1024)</span><br><span class="line">        print(&quot;服务器已开启，等待连接...&quot;)</span><br><span class="line">        self.accept_cont()</span><br><span class="line"></span><br><span class="line">    def accept_cont(self):</span><br><span class="line">        mutex = threading.Lock()</span><br><span class="line">        while True:</span><br><span class="line">            s, addr = self.sock.accept()</span><br><span class="line">            client_note = json.loads(base64.b64decode(s.recv(1024)).decode(&quot;gbk&quot;))</span><br><span class="line">            room_id = client_note[&quot;room_id&quot;]</span><br><span class="line">            name = client_note[&quot;name&quot;]</span><br><span class="line">            self.users[addr] = [s, room_id, name]</span><br><span class="line">            if room_id in self.rooms:</span><br><span class="line">                self.rooms[room_id].append(name)</span><br><span class="line">            else:</span><br><span class="line">                self.rooms[room_id] = [name]</span><br><span class="line">            print(&quot;&#123;&#125;连接成功，&#123;&#125;已加入房间&#123;&#125;，其中有&#123;&#125;位用户:&#123;&#125;，服务端当前连接的用户共有&#123;&#125;位&quot;.format(addr</span><br><span class="line">                                                                        , name, room_id, len(self.rooms[room_id])</span><br><span class="line">                                                                        , self.rooms[room_id], len(self.users)))</span><br><span class="line">            threading.Thread(target=self.recv_send, args=(s, addr, name, room_id, mutex)).start()</span><br><span class="line"></span><br><span class="line">    def recv_send(self, sock, addr, name, room_id, mutex):</span><br><span class="line">        sock.send(base64.b64encode(&quot;您已成功加入房间&#123;&#125;，当前房间内有&#123;&#125;位用户：&#123;&#125;&quot;.format(room_id, len(self.rooms[room_id])</span><br><span class="line">                                                                      , self.rooms[room_id]).encode(&#x27;gbk&#x27;)))</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        log_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime()) + &#x27;：总人数：&#x27; + str(len(self.users)) + str(</span><br><span class="line">            addr) + &#x27;以昵称&#x27; + name + &#x27;加入了房间&#x27; + room_id</span><br><span class="line">        f = open(&#x27;log.txt&#x27;, &#x27;a&#x27;, encoding=&quot;utf-8&quot;)</span><br><span class="line">        f.write(log_str + &#x27;\n&#x27;)</span><br><span class="line">        f.close()</span><br><span class="line">        mutex.release()</span><br><span class="line">        for client in self.users.values():</span><br><span class="line">            if client[1] == room_id:</span><br><span class="line">                client[0].send(</span><br><span class="line">                    base64.b64encode(&quot;&#123;&#125;：用户&#123;&#125;加入了聊天室。&quot;.format(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime())</span><br><span class="line">                                                             , name).encode(&quot;gbk&quot;)))</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                response = base64.b64decode(sock.recv(4096)).decode(&quot;gbk&quot;)</span><br><span class="line">                for client in self.users.values():</span><br><span class="line">                    if client[1] == room_id:</span><br><span class="line">                        msg = &quot;&#123;&#125;：用户&#123;&#125;发送消息：&#123;&#125;&quot;.format(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime())</span><br><span class="line">                                                      , name, response)</span><br><span class="line">                        client[0].send(base64.b64encode(msg.encode(&quot;gbk&quot;)))</span><br><span class="line">            except ConnectionResetError:</span><br><span class="line">                print(&quot;&#123;&#125;房间的&#123;&#125;用户&#123;&#125;已经退出聊天!&quot;.format(room_id, addr, name))</span><br><span class="line">                self.users.pop(addr)</span><br><span class="line">                self.rooms[room_id].remove(name)</span><br><span class="line">                mutex.acquire()</span><br><span class="line">                log_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime()) + &#x27;：总人数：&#x27; + str(len(self.users)) + str(</span><br><span class="line">                    addr) + &#x27;昵称&#x27; + name + &#x27;退出了房间&#x27; + room_id</span><br><span class="line">                f = open(&#x27;log.txt&#x27;, &#x27;a&#x27;, encoding=&quot;utf-8&quot;)</span><br><span class="line">                f.write(log_str + &#x27;\n&#x27;)</span><br><span class="line">                f.close()</span><br><span class="line">                mutex.release()</span><br><span class="line">                for client in self.users.values():</span><br><span class="line">                    if client[1] == room_id:</span><br><span class="line">                        client[0].send(base64.b64encode(</span><br><span class="line">                            &quot;&#123;&#125;：用户&#123;&#125;已经退出聊天!&quot;.format(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime())</span><br><span class="line">                                                    , name).encode(&quot;gbk&quot;)))</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    def close_sever(self):</span><br><span class="line">        for client in self.users.values():</span><br><span class="line">            client.close()</span><br><span class="line">        self.sock.close()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    sever = ChatSever()</span><br><span class="line">    sever.start_sever()</span><br><span class="line">    while True:</span><br><span class="line">        cmd = input()</span><br><span class="line">        if cmd == &quot;stop&quot;:</span><br><span class="line">            print(&quot;正在关闭...&quot;)</span><br><span class="line">            sever.close_sever()</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样得以实现人数的记录</p>
<h3 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h3><p>哦突然想起来，以前就有的，经常有人对所有端口各种扫描，会导致无法解析json报错然后程序停止运行，很好解决，给这一段加上，如果无法解析就<code>continue</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">room_id = client_note[&quot;room_id&quot;]</span><br><span class="line">name = client_note[&quot;name&quot;]</span><br></pre></td></tr></table></figure>
<p>这一部分改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    room_id = client_note[&quot;room_id&quot;]</span><br><span class="line">    name = client_note[&quot;name&quot;]</span><br><span class="line">except KeyError:</span><br><span class="line">    s.send(&#x27;fuck u&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    s.close()</span><br><span class="line">    print(&#x27;Error client from &#x27; + addr)</span><br><span class="line">    continue</span><br></pre></td></tr></table></figure>
<h3 id="使用pyqt5带有GUI的客户端"><a href="#使用pyqt5带有GUI的客户端" class="headerlink" title="使用pyqt5带有GUI的客户端"></a>使用pyqt5带有GUI的客户端</h3><p>用Qt Designer设计了一个(十分丑陋的)GUI界面。在做的时候遇到一个问题，就是说当GUI窗口关闭之后，获取新消息的子线程仍在工作。原因是主线程执行完自己的任务以后，就退出了，此时子线程会继续执行自己的任务，直到自己的任务结束，显然我们的子线程任务是一个死循环。</p>
<p>解决方法是将线程设置为一个守护线程，主线程退出时子线程也会被强制关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t = threading.Thread(target=recv_msg)</span><br><span class="line">t.setDaemon(True)</span><br></pre></td></tr></table></figure>
<p>这样只要关闭GUI窗口，<code>recv_msg</code>函数的线程也会被关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller -F -w -i LOGO.ico -n PyQt5_SecretChat pyqt5_client.py</span><br></pre></td></tr></table></figure>
<p>全部客户端代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from PyQt5 import QtCore, QtGui, QtWidgets</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import socket</span><br><span class="line">import threading</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">addr = (&quot;triority.cc&quot;, 12345)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_msg():</span><br><span class="line">    print(&quot;消息接收线程已启动&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            response = base64.b64decode(s.recv(4096)).decode(&quot;gbk&quot;)</span><br><span class="line">            Ui_MainWindow.string_add(ui, response)</span><br><span class="line">        except ConnectionResetError:</span><br><span class="line">            Ui_MainWindow.string_add(ui, &quot;服务器关闭，聊天室已关闭！&quot;)</span><br><span class="line">            s.close()</span><br><span class="line">            break</span><br><span class="line">    print(&quot;消息接收线程已关闭&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ui_MainWindow(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.t = threading.Thread(target=recv_msg)</span><br><span class="line">        self.t.setDaemon(True)</span><br><span class="line"></span><br><span class="line">    def setupUi(self, MainWindow):</span><br><span class="line">        MainWindow.setObjectName(&quot;MainWindow&quot;)</span><br><span class="line">        MainWindow.resize(1117, 857)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(&quot;centralwidget&quot;)</span><br><span class="line">        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)</span><br><span class="line">        self.verticalLayoutWidget.setGeometry(QtCore.QRect(9, 9, 1101, 811))</span><br><span class="line">        self.verticalLayoutWidget.setObjectName(&quot;verticalLayoutWidget&quot;)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)</span><br><span class="line">        self.verticalLayout.setContentsMargins(0, 0, 0, 0)</span><br><span class="line">        self.verticalLayout.setObjectName(&quot;verticalLayout&quot;)</span><br><span class="line">        self.horizontalLayout = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout.setObjectName(&quot;horizontalLayout&quot;)</span><br><span class="line">        self.lineEdit_2 = QtWidgets.QLineEdit(self.verticalLayoutWidget)</span><br><span class="line">        self.lineEdit_2.setInputMask(&quot;&quot;)</span><br><span class="line">        self.lineEdit_2.setMaxLength(512)</span><br><span class="line">        self.lineEdit_2.setObjectName(&quot;lineEdit_2&quot;)</span><br><span class="line">        self.horizontalLayout.addWidget(self.lineEdit_2)</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit(self.verticalLayoutWidget)</span><br><span class="line">        self.lineEdit.setMaxLength(512)</span><br><span class="line">        self.lineEdit.setObjectName(&quot;lineEdit&quot;)</span><br><span class="line">        self.horizontalLayout.addWidget(self.lineEdit)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)</span><br><span class="line">        self.pushButton.setObjectName(&quot;pushButton&quot;)</span><br><span class="line">        self.horizontalLayout.addWidget(self.pushButton)</span><br><span class="line">        self.verticalLayout.addLayout(self.horizontalLayout)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)</span><br><span class="line">        sizePolicy.setHorizontalStretch(0)</span><br><span class="line">        sizePolicy.setVerticalStretch(0)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.label.setSizePolicy(sizePolicy)</span><br><span class="line">        self.label.setObjectName(&quot;label&quot;)</span><br><span class="line">        self.verticalLayout.addWidget(self.label)</span><br><span class="line">        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout_2.setObjectName(&quot;horizontalLayout_2&quot;)</span><br><span class="line">        self.lineEdit_3 = QtWidgets.QLineEdit(self.verticalLayoutWidget)</span><br><span class="line">        self.lineEdit_3.setObjectName(&quot;lineEdit_3&quot;)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.lineEdit_3)</span><br><span class="line">        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)</span><br><span class="line">        self.pushButton_2.setObjectName(&quot;pushButton_2&quot;)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.pushButton_2)</span><br><span class="line">        self.verticalLayout.addLayout(self.horizontalLayout_2)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(&quot;statusbar&quot;)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">        self.pushButton.clicked.connect(self.connect_room)</span><br><span class="line">        self.pushButton_2.clicked.connect(self.send)</span><br><span class="line">        self.lineEdit_3.textChanged.connect(self.text_changed)</span><br><span class="line"></span><br><span class="line">    def retranslateUi(self, MainWindow):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;SecretChat&quot;))</span><br><span class="line">        self.lineEdit_2.setText(_translate(&quot;MainWindow&quot;, &quot;请在此输入你们的房间号&quot;))</span><br><span class="line">        self.lineEdit.setText(_translate(&quot;MainWindow&quot;, &quot;请在此输入你想使用的昵称&quot;))</span><br><span class="line">        self.pushButton.setText(_translate(&quot;MainWindow&quot;, &quot;进入聊天室&quot;))</span><br><span class="line">        self.label.setText(_translate(&quot;MainWindow&quot;, &quot;&quot;))</span><br><span class="line">        self.pushButton_2.setText(_translate(&quot;MainWindow&quot;, &quot;发送消息&quot;))</span><br><span class="line"></span><br><span class="line">    def connect_room(self):</span><br><span class="line">        name = self.lineEdit.text()</span><br><span class="line">        room_id = self.lineEdit_2.text()</span><br><span class="line">        client = &#123;&quot;room_id&quot;: room_id, &quot;name&quot;: name&#125;</span><br><span class="line">        s.connect(addr)</span><br><span class="line">        s.send(base64.b64encode(json.dumps(client).encode(&quot;gbk&quot;)))</span><br><span class="line">        self.pushButton.setEnabled(False)</span><br><span class="line">        self.lineEdit.setEnabled(False)</span><br><span class="line">        self.lineEdit_2.setEnabled(False)</span><br><span class="line">        self.t.start()</span><br><span class="line">        self.string_add(&#x27;正在加入聊天室：&#x27;+room_id+&#x27;...&#x27;)</span><br><span class="line"></span><br><span class="line">    def send(self):</span><br><span class="line">        text = self.lineEdit_3.text()</span><br><span class="line">        s.send(base64.b64encode(text.encode(&quot;gbk&quot;)))</span><br><span class="line">        self.lineEdit_3.setText(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    def string_add(self, message):</span><br><span class="line">        string = self.label.text()</span><br><span class="line">        if string.count(&#x27;\n&#x27;) &gt; 40:</span><br><span class="line">            ind1 = string.find(&#x27;\n&#x27;)</span><br><span class="line">            string = string[ind1 + 1:]</span><br><span class="line">        string += message + &#x27;\n&#x27;</span><br><span class="line">        self.label.setText(string)</span><br><span class="line"></span><br><span class="line">    def text_changed(self):</span><br><span class="line">        msg = self.lineEdit_3.text()</span><br><span class="line">        if &#x27;=&#x27; in msg:</span><br><span class="line">            msg = msg.replace(&#x27;=&#x27;, &#x27;&#x27;)</span><br><span class="line">            self.lineEdit_3.setText(msg)</span><br><span class="line">            self.send()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    MainWindow = QtWidgets.QMainWindow()</span><br><span class="line">    ui = Ui_MainWindow()</span><br><span class="line">    ui.setupUi(MainWindow)</span><br><span class="line">    MainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>server-Services</title>
    <url>/2023/server-Services/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="必须"><a href="#必须" class="headerlink" title="必须"></a>必须</h1><h2 id="Frps"><a href="#Frps" class="headerlink" title="Frps"></a>Frps</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -R frps</span><br><span class="line">cd /frps</span><br><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>
<h2 id="strelaysrv"><a href="#strelaysrv" class="headerlink" title="strelaysrv"></a>strelaysrv</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -R strelaysrv</span><br><span class="line">cd /strelaysrv</span><br><span class="line">./strelaysrv -pools=&quot;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="stdiscosrv"><a href="#stdiscosrv" class="headerlink" title="stdiscosrv"></a>stdiscosrv</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -R stdiscosrv</span><br><span class="line">cd /stdiscosrv</span><br><span class="line">./stdiscosrv</span><br></pre></td></tr></table></figure>
<h2 id="cloudreve"><a href="#cloudreve" class="headerlink" title="cloudreve"></a>cloudreve</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -R cloudreve</span><br><span class="line">cd /cloudreve</span><br><span class="line">./cloudreve</span><br></pre></td></tr></table></figure>
<h2 id="library"><a href="#library" class="headerlink" title="library"></a>library</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -R library</span><br><span class="line">cd /library</span><br><span class="line">cps</span><br></pre></td></tr></table></figure>
<h1 id="可选"><a href="#可选" class="headerlink" title="可选"></a>可选</h1><h2 id="syncthing"><a href="#syncthing" class="headerlink" title="syncthing"></a>syncthing</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -R syncthing</span><br><span class="line">cd /syncthing</span><br><span class="line">syncthing</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>重庆</title>
    <url>/2023/spicy-zip/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>本文内图片为压缩图片流量消耗较小，如果希望查看原图请访问<a href="https://triority.cc/2023/spicy/">原图页</a></p>
<h2 id="2023的开始"><a href="#2023的开始" class="headerlink" title="2023的开始"></a>2023的开始</h2><p>2023年，疫情终于是在与病毒共存的结局下结束了，生活也回归正常。上一次长途旅行还是在5年前的高一寒假，是学校的游学活动，去了华东的几座城市。这个假期也是一个十分难得的休息时间，于是来到了重庆……</p>
<h2 id="40h的火车"><a href="#40h的火车" class="headerlink" title="40h的火车"></a>40h的火车</h2><p>原计划是乘坐2.1耗时31h的火车，晚上十点多从沈阳出发，两天之后的早上到达，结果由于重度拖延症买票时候已经没有卧铺票了，要么等到2.3，要么换40h的火车。我们选择了后者，好吧下次一定早买！</p>
<p><img src="/2023/spicy-zip/Screenshot_2023-02-01-22-46-09-795_com.MobileTicket.jpg" alt="《长途跋涉》"></p>
<p>第一天晚上还是硬座，第二天晚上才有硬卧睡。我在硬座的最外面，好消息是可以起来活动，坏消息是没有东西靠着睡觉。每到一个站点周围还有许多人上下车，干脆不睡了，正好前几天在论坛上看见一个无感无刷电调设计的教程文档，下载记录里翻出来看了看，顺便自己也画了一个原理图，第一天晚上也就这样过去了。早上我去里面趴桌子上睡了会，醒来已经是中午，快要到石家庄站转车了。</p>
<p><img src="/2023/spicy-zip/IMG_20230205_024039_344.jpg" alt="电脑？充电宝！"></p>
<h2 id="中转石家庄火车站"><a href="#中转石家庄火车站" class="headerlink" title="中转石家庄火车站"></a>中转石家庄火车站</h2><p><img src="/2023/spicy-zip/IMG_20230202_133204.jpg" alt="我到河北省来"></p>
<p>在石家庄中转有5个多小时，当然要出去逛一逛，这一逛有点哈人。出站首先看见的当然是火车站全貌，如下图所示(有那味了)：</p>
<p><img src="/2023/spicy-zip/IMG_20230202_162131.jpg" alt="石家庄站"></p>
<p>emmm看这个建筑给人一种强烈的的压迫感，而且地下结构繁多，无障碍几乎没有(拎着大行李箱上很长一段台阶)。用某位自称松鼠皇帝的同学的话来说，简直就是古代的陵墓一样。除了火车站，很显眼的还有对面的大楼，我称之为《交投烂额》：</p>
<p><img src="/2023/spicy-zip/IMG_20230202_134231.jpg" alt="《交投烂额》"></p>
<p>好吧不管它，大中午的要找地方吃饭啦。从车站出来之后的路上，遇到两伙人，手里没拿东西，看起来是本地人，问我们火车站怎么走，嗯有点离谱。后来一边走我们一边创作火车站怪谈：</p>
<blockquote>
<p>石家庄火车站怪谈：</p>
<ul>
<li>1.出站时请不要抬头看火车站建筑</li>
<li>2.出站后如果有本地人问你火车站怎么走，请如实告知</li>
<li>3.路口人行道如果红灯变绿，务必以最快速度通过</li>
<li>4.请勿用手机记录任何信息，包括但不限于拍照摄像</li>
<li>……</li>
</ul>
</blockquote>
<blockquote>
<p>里面第3条是因为火车站门口马路特别宽，记得是八排车道，然后绿灯时间15s，真跑过去都来不及。</p>
<p>至于第4条，则是因为在火车站对面的商业街竟然几乎不见人影，店铺大部分也都是关门的，大概是这样的：</p>
</blockquote>
<p><img src="/2023/spicy-zip/IMG_20230202_140306.jpg" alt="商业街？"></p>
<p>那里还有个天桥：</p>
<p><img src="/2023/spicy-zip/IMG_20230202_135902.jpg" alt="天桥"></p>
<p>后来在一家火锅店吃了午饭。不过提前感谢这家店，因为接下来的卧铺竟然没有电源插座，前一天的硬座车厢没有我还能理解，那时候已经用光了充电宝的电量。在这家火锅店充满了电脑和手机，才让我们在接下来的一天多有电用hhh</p>
<p>接下来就是另一段旅程，过了第二晚，从平坦的华北平原来到了丘陵地形。火车不停的在一个个隧道穿进穿出，很烦因为隧道里没有信号，刚出隧道有信号了，随即钻进下一段隧道。</p>
<p><img src="/2023/spicy-zip/IMG_20230203_100553.jpg" alt="在火车上拍的窗外"></p>
<h2 id="到达重庆"><a href="#到达重庆" class="headerlink" title="到达重庆"></a>到达重庆</h2><p>到达的时间是下午，提前预定的酒店在观音桥步行街，位置很好但是价格比较贵而且房间不是很好，最可恶一点就是没有窗户。总之以后再也不会要没有窗户的房间了。顺便展示一下写文章的现在的房间，就是现在拍的：</p>
<p><img src="/2023/spicy-zip/65797e9ee7859b4db872b1169a99fee.jpg" alt="窗户!"></p>
<p>嘿最爱窗户了！</p>
<p>出于成本考虑，我们三个人甚至住的二人间。床是两个1.1m的，为晚上闵某挤我埋伏笔做铺垫。第一天晚上在楼下的观音桥步行街吃的酸菜鱼。酸菜鱼挺好吃，但是我用汤泡了饭，那个汤居然那么辣！被迫倒掉半碗饭加点新的饭才吃得下去，好吧对于浪费半碗食物的行为我会抽空敲敲木鱼的。有一个学弟也在重庆，而且很巧就住在观音桥附近，于是也叫来和我们聊天。<strong>这里记个小本本，闵某加我学弟微信然后发我的丑照</strong>。晚上我和学弟在周围逛街，过了嘉陵江大桥,远看了看洪崖洞:</p>
<p><img src="/2023/spicy-zip/IMG_20230203_220249.jpg" alt="嘉陵江大桥"><br><img src="/2023/spicy-zip/IMG_20230203_223913.jpg" alt="嘉陵江大桥"><br><img src="/2023/spicy-zip/IMG_20230204_120203.jpg" alt="嘉陵江大桥"><br><img src="/2023/spicy-zip/IMG_20230204_120448.jpg" alt="嘉陵江大桥"><br><img src="/2023/spicy-zip/IMG_20230204_120708.jpg" alt="嘉陵江大桥"></p>
<p>后来又去了解放碑，据学弟介绍是1945年为了纪念抗战胜利而建造：</p>
<p><img src="/2023/spicy-zip/IMG_20230203_230013.jpg" alt="人民解放纪念碑"></p>
<p>后来回到观音桥，去了学弟家楼下的烧烤摊吃了点烧烤。众所周知我是不吃辣的，烧烤没有跟老板说这个需求，体验一下，实测还能接受，除了最后那个豆腐片。那个东西简直就是一大块活性炭，吸附无数辣酱，尝试吃了几口真的不行了。其他的串倒还好，如果有点辣就喝几口酒问题不大。</p>
<p><img src="/2023/spicy-zip/IMG_20230204_003501.jpg"></p>
<p>吃饱喝足，回到旅店。拍摄于观音桥步行街：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_121407.jpg" alt="观音桥步行街"></p>
<p><img src="/2023/spicy-zip/IMG_20230204_121214.jpg" alt="5G固定电话亭，挺有意思的"></p>
<h2 id="2-4，第二天————重庆轨道交通"><a href="#2-4，第二天————重庆轨道交通" class="headerlink" title="2.4，第二天————重庆轨道交通"></a>2.4，第二天————重庆轨道交通</h2><p>前一天晚上烧烤吃到了4点多，醒来已经是中午十二点了，好吧其实第三天也是中午才醒。</p>
<h3 id="每天都是大雾天"><a href="#每天都是大雾天" class="headerlink" title="每天都是大雾天"></a>每天都是大雾天</h3><p>第二天下午学弟带着我来到了重庆的一些景点。首先给我留下深刻印象的就是这里的轨道交通，习惯上我叫这个地铁，不过它真的不在地下，而是基本都在天上，学弟表示这个当地叫他轻轨。这里的桥要修一个地铁换乘站似乎是一个不成文的规定，桥上总是有一个换乘站，同时，这里的天气几乎都是大雾，阴天。在桥上远眺都是大楼的轮廓：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_160843.jpg" alt="桥上的换乘站"><br><img src="/2023/spicy-zip/IMG_20230204_160939.jpg" alt="雾蒙蒙"><br><img src="/2023/spicy-zip/IMG_20230204_160957.jpg" alt="下楼换乘"><br><img src="/2023/spicy-zip/IMG_20230204_161230.jpg" alt="另一侧"><br><img src="/2023/spicy-zip/IMG_20230204_161346.jpg" alt="《桁架结构》"></p>
<h3 id="穿楼的轻轨————李子坝站"><a href="#穿楼的轻轨————李子坝站" class="headerlink" title="穿楼的轻轨————李子坝站"></a>穿楼的轻轨————李子坝站</h3><p>这里可谓是人山人海，学弟表示对此十分厌倦，因为高中上学每天都要经过这个站点hhh</p>
<p>下车看看我们是怎样钻进这栋楼的：</p>
<p><img src="/M5HK/IMG_20230204_161951.jpg"></p>
<p>没感觉？下楼看看：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_163045.jpg" alt="竟然是原有居民搬迁然后修的站点，大楼设计的很强嘛"></p>
<div id="dplayer33" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer33"),"video":{"url":"https://cr.triority.cc/f/KGIV/VID_20230204_163125.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>没错先下楼再上楼hhh然后等下一班继续往前走，有个地方还挺有趣的，有的轻轨列车系统和站台的门不兼容，需要司机开门出来手动拉站台边的拉杆才能开门，这图里就能看见那个控制开关：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_162145.jpg" alt="手动开门"></p>
<p>发车！</p>
<div id="dplayer34" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer34"),"video":{"url":"https://cr.triority.cc/f/8ZcE/VID_20230207_185819.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h3 id="山城重庆————跑重庆爬山去了是吧"><a href="#山城重庆————跑重庆爬山去了是吧" class="headerlink" title="山城重庆————跑重庆爬山去了是吧"></a>山城重庆————跑重庆爬山去了是吧</h3><p>然后我们去了一个小山，真就小公园没几分钟就上去了。在山顶拍了一些照片，嗯完全就是拍大雾：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_163239.jpg"><br><img src="/2023/spicy-zip/IMG_20230204_171535.jpg"><br><img src="/2023/spicy-zip/IMG_20230204_171622.jpg"><br><img src="/2023/spicy-zip/IMG_20230204_173040.jpg"></p>
<p>你看见了什么？没错！那是一颗飞星！！！</p>
<p>然后去了学弟的高中，学弟在校门口打卡拍照然后立刻走人。在他高三放学常去的KFC给我讲述他的高中生活，我的感受是四个字：极度羡慕。最震惊的莫过于午休2.5h，至今还记得在本溪一中12:00下课之后中午吃饭只有30min，一般我都是吃不完的，然后班主任12:30来了看着还在吃午饭的我hhhhhhhc嗯还有晚自习可以不去。笑死不知道是哪个学校晚自习上厕所都要记名啊~</p>
<h3 id="SRW"><a href="#SRW" class="headerlink" title="@SRW"></a>@SRW</h3><p>孙某同学想要看某座大楼，去拍了一张，那个大楼我不是很感兴趣不过对面的江面和桥嘛：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_200322.jpg" alt="好吧我才发现手机长曝光的功能"><br><img src="/2023/spicy-zip/IMG_20230205_171431.jpg" alt="有一艘船哎"></p>
<h3 id="玩会？喝点？"><a href="#玩会？喝点？" class="headerlink" title="玩会？喝点？"></a>玩会？喝点？</h3><p>闵某想要点夜生活的氛围，来到了酒吧，玩了会小游戏，喝了<code>点</code>酒：</p>
<p><img src="/2023/spicy-zip/IMG_20230204_230509.jpg" alt="先来135块的(后来又来了120块的)"></p>
<p>跟大家说一下，闵某喝酒都打烟雾弹，说自己看东西都模糊了，然后上厕所健步如飞，一边跟我炫耀能喝多少白酒！</p>
<p><img src="/2023/spicy-zip/IMG_20230205_044109_788.jpg" alt="亿点"></p>
<p>当然千万不要喝太多，在酒吧上厕所途中看见好几个被人架着抬出去或者边走变吐的，千万不要喝那么多哦！</p>
<p><img src="/2023/spicy-zip/IMG_20230205_170023.jpg" alt="重庆的夜生活真是精彩，后半夜街上人山人海"></p>
<h2 id="2-5，元宵节"><a href="#2-5，元宵节" class="headerlink" title="2.5，元宵节"></a>2.5，元宵节</h2><p>醒来又是下午，发现三体电视剧更完了，一口气看完，已经是下午了。退房然后找到新的旅店，已经是晚上。我们去了之前就看过的洪崖洞，近距离的看。不过似乎没啥好玩的，一个纯纯的商业街。随手拍几张，没啥有趣事。</p>
<p><img src="/2023/spicy-zip/IMG_20230206_002347.jpg" alt="随手拍几张"><br><img src="/2023/spicy-zip/IMG_20230206_002827.jpg" alt="不知道那个红色建筑干嘛的"></p>
<p>买了返程机票。2.9的6:45在江北机场。计划2.6再逛逛，2.7去成都，2.8晚上回来直接去机场，2.9早上回家！飞机11:10到达沈阳桃仙机场。就写到这咯，现在是2.6的02:53，睡觉。</p>
<h2 id="2-6————体验重庆火锅"><a href="#2-6————体验重庆火锅" class="headerlink" title="2.6————体验重庆火锅"></a>2.6————体验重庆火锅</h2><p>今天稍作休息，下午到嘉陵江和长江交汇处逛了逛，沿着南滨路走了三四公里：</p>
<p><img src="/2023/spicy-zip/IMG_20230207_011437.jpg" alt="日常拍大桥"><br><img src="/2023/spicy-zip/IMG_20230207_011535.jpg" alt="两江交汇"></p>
<p>晚上回到旅店，在旅店楼下找了家火锅店。不是很想去商业街，感觉那边的东西又贵又不正宗，还是普通居民楼附近的更好。不过刚进门第一桌就把我震撼到了：</p>
<p><img src="/2023/spicy-zip/IMG_20230206_210407.jpg" alt="除了辣椒，都是佐料"></p>
<p>感觉主食是辣椒，其他的都是佐料。显而易见我们是鸳鸯锅，辣的那边尝了一口，下次不要再尝了。闵某吃的辣半锅，罕见的吃了三碗饭喝两杯蜜雪冰城，看来他十分享受呢！</p>
<p><img src="/2023/spicy-zip/IMG_20230206_211526.jpg" alt="鸳鸯锅"></p>
<p>今晚是三个人一起的最后一晚，明天星文老师要去云南和别的小伙伴玩了。我的计划是和闵2.7去成都走走看看，2.8晚上回来直接去机场。已经买了2.9早上6点回沈阳的飞机了。</p>
<p>说到旅店，这两天住的旅店叫做里仁巷都市客栈，还是很有必要详细说说。这里的环境感觉真的不错(不排除前两天住的太差的因素)，前面已经有了一张窗户边的照片，这个旅店占这栋楼的4层大约一半，和另一半的另一家旅店用一个小帘子隔开。另一家旅店装修就是十分精简，走廊里除了白色的墙和地砖就是房门，帘子的另一边风格骤变。走廊里还有三只老板娘的猫咪窜来窜去，走到尽头就是厨房，早上可以来吃早饭。厨房里还有一扇玻璃门通向外面的平台，上面都是各种花花草草。晚上还发现房间里的书是真的，刚开还以为是模型：</p>
<p><img src="/2023/spicy-zip/IMG_20230207_100753.jpg" alt="书架"><br><img src="/2023/spicy-zip/IMG_20230207_100824.jpg" alt="甚至还有藏书印"></p>
<h2 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h2><p>好吧时间问题(起床时间问题)，成都没去成，于是去了重庆的动物园。</p>
<h3 id="动物园"><a href="#动物园" class="headerlink" title="动物园"></a>动物园</h3><p>游客不算特别多，大部分都是本地人带小孩子来玩。<br><img src="/2023/spicy-zip/IMG_20230207_123317.jpg"><br><img src="/2023/spicy-zip/IMG_20230207_123356.jpg" alt="躺平x1"><br><img src="/2023/spicy-zip/IMG_20230207_123659.jpg" alt="吃x1"><br><img src="/2023/spicy-zip/IMG_20230207_123833.jpg" alt="躺+吃"><br><img src="/2023/spicy-zip/IMG_20230207_123835.jpg" alt="躺+吃"><br><img src="/2023/spicy-zip/IMG_20230207_124418.jpg" alt="冒泡"><br><img src="/2023/spicy-zip/IMG_20230207_124611.jpg"><br><img src="/2023/spicy-zip/IMG_20230207_183302.jpg" alt="躺平x2"><br><img src="/2023/spicy-zip/IMG_20230207_124715.jpg" alt="&quot;不行你不能躺&quot;"><br><img src="/2023/spicy-zip/IMG_20230207_125842.jpg"><br><img src="/2023/spicy-zip/IMG_20230207_130045.jpg" alt="emmm有点瘦呢"><br><img src="/2023/spicy-zip/IMG_20230207_130420.jpg" alt="你瞅啥"><br><img src="/2023/spicy-zip/IMG_20230207_130451.jpg" alt="“这个原始人仰望星空的时间超过了预警阀值，已对宇宙表现出了充分的好奇，到此为止，已在不同的地点观察到了十例这样的超限事件，符合报警条件。”————《朝闻道》"><br><img src="/2023/spicy-zip/IMG_20230207_131620.jpg" alt="哦好吧可是我没带吃的给你"><br><img src="/2023/spicy-zip/IMG_20230207_135702.jpg"><br><img src="/2023/spicy-zip/IMG_20230207_140224.jpg"><br><img src="/2023/spicy-zip/IMG_20230207_183059.jpg" alt="躺平x3"><br><img src="/2023/spicy-zip/IMG_20230207_183208.jpg"></p>
<div id="dplayer35" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer35"),"video":{"url":"https://cr.triority.cc/f/jwSV/VID_20230207_123607.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<div id="dplayer36" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer36"),"video":{"url":"https://cr.triority.cc/f/Ybil/VID_20230207_123708.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h3 id="轻轨高架桥"><a href="#轻轨高架桥" class="headerlink" title="轻轨高架桥"></a>轻轨高架桥</h3><p>看起来有那么意思哈人是吧<br><img src="/2023/spicy-zip/IMG_20230207_145949.jpg"></p>
<h3 id="火锅x2"><a href="#火锅x2" class="headerlink" title="火锅x2"></a>火锅x2</h3><p>第一次尝试吃这种颜色的东西，无论如何都应该纪念一下<br>其实也没那么辣的，但是我们两个人吃了3盆饭…没错，就是盆<br><img src="/2023/spicy-zip/IMG_20230207_155254.jpg" alt="其实也没那么辣的"></p>
<h2 id="闵某照片合辑"><a href="#闵某照片合辑" class="headerlink" title="闵某照片合辑"></a>闵某照片合辑</h2><p><img src="/2023/spicy-zip/IMG_20230207_012014.jpg" alt="让我看看是谁脖子上挂着相机然后手机拍照"><br><img src="/2023/spicy-zip/IMG_20230207_011823.jpg" alt="闵某正在拍摄新买的手办"><br><img src="/2023/spicy-zip/IMG_20230207_145710.jpg" alt="禁止依靠哦"></p>
]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>重庆（全原图文章！移动网络环境慎入！）</title>
    <url>/2023/spicy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2023的开始"><a href="#2023的开始" class="headerlink" title="2023的开始"></a>2023的开始</h2><p>2023年，疫情终于是在与病毒共存的结局下结束了，生活也回归正常。上一次长途旅行还是在5年前的高一寒假，是学校的游学活动，去了华东的几座城市。这个假期也是一个十分难得的休息时间，于是来到了重庆……</p>
<h2 id="40h的火车"><a href="#40h的火车" class="headerlink" title="40h的火车"></a>40h的火车</h2><p>原计划是乘坐2.1耗时31h的火车，晚上十点多从沈阳出发，两天之后的早上到达，结果由于重度拖延症买票时候已经没有卧铺票了，要么等到2.3，要么换40h的火车。我们选择了后者，好吧下次一定早买！</p>
<p><img src="https://cr.triority.cc/f/P1to/Screenshot_2023-02-01-22-46-09-795_com.MobileTicket.jpg" alt="《长途跋涉》"></p>
<p>第一天晚上还是硬座，第二天晚上才有硬卧睡。我在硬座的最外面，好消息是可以起来活动，坏消息是没有东西靠着睡觉。每到一个站点周围还有许多人上下车，干脆不睡了，正好前几天在论坛上看见一个无感无刷电调设计的教程文档，下载记录里翻出来看了看，顺便自己也画了一个原理图，第一天晚上也就这样过去了。早上我去里面趴桌子上睡了会，醒来已经是中午，快要到石家庄站转车了。</p>
<p><img src="https://cr.triority.cc/f/kzU7/IMG_20230205_024039_344.jpg" alt="电脑？充电宝！"></p>
<h2 id="中转石家庄火车站"><a href="#中转石家庄火车站" class="headerlink" title="中转石家庄火车站"></a>中转石家庄火车站</h2><p><img src="https://cr.triority.cc/f/gks2/IMG_20230202_133204.jpg" alt="我到河北省来"></p>
<p>在石家庄中转有5个多小时，当然要出去逛一逛，这一逛有点哈人。出站首先看见的当然是火车站全貌，如下图所示(有那味了)：</p>
<p><img src="https://cr.triority.cc/f/7PCp/IMG_20230202_162131.jpg" alt="石家庄站"></p>
<p>emmm看这个建筑给人一种强烈的的压迫感，而且地下结构繁多，无障碍几乎没有(拎着大行李箱上很长一段台阶)。用某位自称松鼠皇帝的同学的话来说，简直就是古代的陵墓一样。除了火车站，很显眼的还有对面的大楼，我称之为《交投烂额》：</p>
<p><img src="https://cr.triority.cc/f/GDfo/IMG_20230202_134231.jpg" alt="《交投烂额》"></p>
<p>好吧不管它，大中午的要找地方吃饭啦。从车站出来之后的路上，遇到两伙人，手里没拿东西，看起来是本地人，问我们火车站怎么走，嗯有点离谱。后来一边走我们一边创作火车站怪谈：</p>
<blockquote>
<p>石家庄火车站怪谈：</p>
<ul>
<li>1.出站时请不要抬头看火车站建筑</li>
<li>2.出站后如果有本地人问你火车站怎么走，请如实告知</li>
<li>3.路口人行道如果红灯变绿，务必以最快速度通过</li>
<li>4.请勿用手机记录任何信息，包括但不限于拍照摄像</li>
<li>……</li>
</ul>
</blockquote>
<blockquote>
<p>里面第3条是因为火车站门口马路特别宽，记得是八排车道，然后绿灯时间15s，真跑过去都来不及。</p>
<p>至于第4条，则是因为在火车站对面的商业街竟然几乎不见人影，店铺大部分也都是关门的，大概是这样的：</p>
</blockquote>
<p><img src="https://cr.triority.cc/f/EmuX/IMG_20230202_140306.jpg" alt="商业街？"></p>
<p>那里还有个天桥：</p>
<p><img src="https://cr.triority.cc/f/Ayhr/IMG_20230202_135902.jpg" alt="天桥"></p>
<p>后来在一家火锅店吃了午饭。不过提前感谢这家店，因为接下来的卧铺竟然没有电源插座，前一天的硬座车厢没有我还能理解，那时候已经用光了充电宝的电量。在这家火锅店充满了电脑和手机，才让我们在接下来的一天多有电用hhh</p>
<p>接下来就是另一段旅程，过了第二晚，从平坦的华北平原来到了丘陵地形。火车不停的在一个个隧道穿进穿出，很烦因为隧道里没有信号，刚出隧道有信号了，随即钻进下一段隧道。</p>
<p><img src="https://cr.triority.cc/f/lGFM/IMG_20230203_100553.jpg" alt="在火车上拍的窗外"></p>
<h2 id="到达重庆"><a href="#到达重庆" class="headerlink" title="到达重庆"></a>到达重庆</h2><p>到达的时间是下午，提前预定的酒店在观音桥步行街，位置很好但是价格比较贵而且房间不是很好，最可恶一点就是没有窗户。总之以后再也不会要没有窗户的房间了。顺便展示一下写文章的现在的房间，就是现在拍的：</p>
<p><img src="https://cr.triority.cc/f/dqTe/65797e9ee7859b4db872b1169a99fee.jpg" alt="窗户!"></p>
<p>嘿最爱窗户了！</p>
<p>出于成本考虑，我们三个人甚至住的二人间。床是两个1.1m的，为晚上闵某挤我埋伏笔做铺垫。第一天晚上在楼下的观音桥步行街吃的酸菜鱼。酸菜鱼挺好吃，但是我用汤泡了饭，那个汤居然那么辣！被迫倒掉半碗饭加点新的饭才吃得下去，好吧对于浪费半碗食物的行为我会抽空敲敲木鱼的。有一个学弟也在重庆，而且很巧就住在观音桥附近，于是也叫来和我们聊天。<strong>这里记个小本本，闵某加我学弟微信然后发我的丑照</strong>。晚上我和学弟在周围逛街，过了嘉陵江大桥,远看了看洪崖洞:</p>
<p><img src="https://cr.triority.cc/f/BwHE/IMG_20230203_220249.jpg" alt="嘉陵江大桥"><br><img src="https://cr.triority.cc/f/wdIP/IMG_20230203_223913.jpg" alt="嘉陵江大桥"><br><img src="https://cr.triority.cc/f/ryiy/IMG_20230204_120203.jpg" alt="嘉陵江大桥"><br><img src="https://cr.triority.cc/f/XXSV/IMG_20230204_120448.jpg" alt="嘉陵江大桥"><br><img src="https://cr.triority.cc/f/Zzcl/IMG_20230204_120708.jpg" alt="嘉陵江大桥"></p>
<p>后来又去了解放碑，据学弟介绍是1945年为了纪念抗战胜利而建造：</p>
<p><img src="https://cr.triority.cc/f/yPty/IMG_20230203_230013.jpg" alt="人民解放纪念碑"></p>
<p>后来回到观音桥，去了学弟家楼下的烧烤摊吃了点烧烤。众所周知我是不吃辣的，烧烤没有跟老板说这个需求，体验一下，实测还能接受，除了最后那个豆腐片。那个东西简直就是一大块活性炭，吸附无数辣酱，尝试吃了几口真的不行了。其他的串倒还好，如果有点辣就喝几口酒问题不大。</p>
<p><img src="https://cr.triority.cc/f/N1UV/IMG_20230204_003501.jpg"></p>
<p>吃饱喝足，回到旅店。拍摄于观音桥步行街：</p>
<p><img src="https://cr.triority.cc/f/58sE/IMG_20230204_121407.jpg" alt="观音桥步行街"></p>
<p><img src="https://cr.triority.cc/f/amCQ/IMG_20230204_121214.jpg" alt="5G固定电话亭，挺有意思的"></p>
<h2 id="2-4，第二天————重庆轨道交通"><a href="#2-4，第二天————重庆轨道交通" class="headerlink" title="2.4，第二天————重庆轨道交通"></a>2.4，第二天————重庆轨道交通</h2><p>前一天晚上烧烤吃到了4点多，醒来已经是中午十二点了，好吧其实第三天也是中午才醒。</p>
<h3 id="每天都是大雾天"><a href="#每天都是大雾天" class="headerlink" title="每天都是大雾天"></a>每天都是大雾天</h3><p>第二天下午学弟带着我来到了重庆的一些景点。首先给我留下深刻印象的就是这里的轨道交通，习惯上我叫这个地铁，不过它真的不在地下，而是基本都在天上，学弟表示这个当地叫他轻轨。这里的桥要修一个地铁换乘站似乎是一个不成文的规定，桥上总是有一个换乘站，同时，这里的天气几乎都是大雾，阴天。在桥上远眺都是大楼的轮廓：</p>
<p><img src="https://cr.triority.cc/f/bZfJ/IMG_20230204_160843.jpg" alt="桥上的换乘站"><br><img src="https://cr.triority.cc/f/0MuJ/IMG_20230204_160939.jpg" alt="雾蒙蒙"><br><img src="https://cr.triority.cc/f/n0hO/IMG_20230204_160957.jpg" alt="下楼换乘"><br><img src="https://cr.triority.cc/f/mVFb/IMG_20230204_161230.jpg" alt="另一侧"><br><img src="https://cr.triority.cc/f/eDT2/IMG_20230204_161346.jpg" alt="《桁架结构》"></p>
<h3 id="穿楼的轻轨————李子坝站"><a href="#穿楼的轻轨————李子坝站" class="headerlink" title="穿楼的轻轨————李子坝站"></a>穿楼的轻轨————李子坝站</h3><p>这里可谓是人山人海，学弟表示对此十分厌倦，因为高中上学每天都要经过这个站点hhh</p>
<p>下车看看我们是怎样钻进这栋楼的：</p>
<p><img src="https://cr.triority.cc/f/M5HK/IMG_20230204_161951.jpg"></p>
<p>没感觉？下楼看看：</p>
<p><img src="https://cr.triority.cc/f/z5IN/IMG_20230204_163045.jpg" alt="竟然是原有居民搬迁然后修的站点，大楼设计的很强嘛"></p>
<div id="dplayer37" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer37"),"video":{"url":"https://cr.triority.cc/f/KGIV/VID_20230204_163125.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>没错先下楼再上楼hhh然后等下一班继续往前走，有个地方还挺有趣的，有的轻轨列车系统和站台的门不兼容，需要司机开门出来手动拉站台边的拉杆才能开门，这图里就能看见那个控制开关：</p>
<p><img src="https://cr.triority.cc/f/Rwie/IMG_20230204_162145.jpg" alt="手动开门"></p>
<p>发车！</p>
<div id="dplayer38" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer38"),"video":{"url":"https://cr.triority.cc/f/8ZcE/VID_20230207_185819.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h3 id="山城重庆————跑重庆爬山去了是吧"><a href="#山城重庆————跑重庆爬山去了是吧" class="headerlink" title="山城重庆————跑重庆爬山去了是吧"></a>山城重庆————跑重庆爬山去了是吧</h3><p>然后我们去了一个小山，真就小公园没几分钟就上去了。在山顶拍了一些照片，嗯完全就是拍大雾：</p>
<p><img src="https://cr.triority.cc/f/OASj/IMG_20230204_163239.jpg"><br><img src="https://cr.triority.cc/f/Dagcr/IMG_20230204_171535.jpg"><br><img src="https://cr.triority.cc/f/9LLtm/IMG_20230204_171622.jpg"><br><img src="https://cr.triority.cc/f/QAeUl/IMG_20230204_173040.jpg"></p>
<p>你看见了什么？没错！那是一颗飞星！！！</p>
<p>然后去了学弟的高中，学弟在校门口打卡拍照然后立刻走人。在他高三放学常去的KFC给我讲述他的高中生活，我的感受是四个字：极度羡慕。最震惊的莫过于午休2.5h，至今还记得在本溪一中12:00下课之后中午吃饭只有30min，一般我都是吃不完的，然后班主任12:30来了看着还在吃午饭的我hhhhhhhc嗯还有晚自习可以不去。笑死不知道是哪个学校晚自习上厕所都要记名啊~</p>
<h3 id="SRW"><a href="#SRW" class="headerlink" title="@SRW"></a>@SRW</h3><p>孙某同学想要看某座大楼，去拍了一张，那个大楼我不是很感兴趣不过对面的江面和桥嘛：</p>
<p><img src="https://cr.triority.cc/f/37Qsp/IMG_20230204_200322.jpg" alt="好吧我才发现手机长曝光的功能"><br><img src="https://cr.triority.cc/f/110CP/IMG_20230205_171431.jpg" alt="有一艘船哎"></p>
<h3 id="玩会？喝点？"><a href="#玩会？喝点？" class="headerlink" title="玩会？喝点？"></a>玩会？喝点？</h3><p>闵某想要点夜生活的氛围，来到了酒吧，玩了会小游戏，喝了<code>点</code>酒：</p>
<p><img src="https://cr.triority.cc/f/2A8fv/IMG_20230204_230509.jpg" alt="先来135块的(后来又来了120块的)"></p>
<p>跟大家说一下，闵某喝酒都打烟雾弹，说自己看东西都模糊了，然后上厕所健步如飞，一边跟我炫耀能喝多少白酒！</p>
<p><img src="https://cr.triority.cc/f/p2Kik/IMG_20230205_044109_788.jpg" alt="亿点"></p>
<p>当然千万不要喝太多，在酒吧上厕所途中看见好几个被人架着抬出去或者边走变吐的，千万不要喝那么多哦！</p>
<p><img src="https://cr.triority.cc/f/JaPhK/IMG_20230205_170023.jpg" alt="重庆的夜生活真是精彩，后半夜街上人山人海"></p>
<h2 id="2-5，元宵节"><a href="#2-5，元宵节" class="headerlink" title="2.5，元宵节"></a>2.5，元宵节</h2><p>醒来又是下午，发现三体电视剧更完了，一口气看完，已经是下午了。退房然后找到新的旅店，已经是晚上。我们去了之前就看过的洪崖洞，近距离的看。不过似乎没啥好玩的，一个纯纯的商业街。随手拍几张，没啥有趣事。</p>
<p><img src="https://cr.triority.cc/f/oDpFa/IMG_20230206_002347.jpg" alt="随手拍几张"><br><img src="https://cr.triority.cc/f/vVZTl/IMG_20230206_002827.jpg" alt="不知道那个红色建筑干嘛的"></p>
<p>买了返程机票。2.9的6:45在江北机场。计划2.6再逛逛，2.7去成都，2.8晚上回来直接去机场，2.9早上回家！飞机11:10到达沈阳桃仙机场。就写到这咯，现在是2.6的02:53，睡觉。</p>
<h2 id="2-6————体验重庆火锅"><a href="#2-6————体验重庆火锅" class="headerlink" title="2.6————体验重庆火锅"></a>2.6————体验重庆火锅</h2><p>今天稍作休息，下午到嘉陵江和长江交汇处逛了逛，沿着南滨路走了三四公里：</p>
<p><img src="https://cr.triority.cc/f/LZRiZ/IMG_20230207_011437.jpg" alt="日常拍大桥"><br><img src="https://cr.triority.cc/f/KoGSV/IMG_20230207_011535.jpg" alt="两江交汇"></p>
<p>晚上回到旅店，在旅店楼下找了家火锅店。不是很想去商业街，感觉那边的东西又贵又不正宗，还是普通居民楼附近的更好。不过刚进门第一桌就把我震撼到了：</p>
<p><img src="https://cr.triority.cc/f/q9YHA/IMG_20230206_210407.jpg" alt="除了辣椒，都是佐料"></p>
<p>感觉主食是辣椒，其他的都是佐料。显而易见我们是鸳鸯锅，辣的那边尝了一口，下次不要再尝了。闵某吃的辣半锅，罕见的吃了三碗饭喝两杯蜜雪冰城，看来他十分享受呢！</p>
<p><img src="https://cr.triority.cc/f/V7EiK/IMG_20230206_211526.jpg" alt="鸳鸯锅"></p>
<p>今晚是三个人一起的最后一晚，明天星文老师要去云南和别的小伙伴玩了。我的计划是和闵2.7去成都走走看看，2.8晚上回来直接去机场。已经买了2.9早上6点回沈阳的飞机了。</p>
<p>说到旅店，这两天住的旅店叫做里仁巷都市客栈，还是很有必要详细说说。这里的环境感觉真的不错(不排除前两天住的太差的因素)，前面已经有了一张窗户边的照片，这个旅店占这栋楼的4层大约一半，和另一半的另一家旅店用一个小帘子隔开。另一家旅店装修就是十分精简，走廊里除了白色的墙和地砖就是房门，帘子的另一边风格骤变。走廊里还有三只老板娘的猫咪窜来窜去，走到尽头就是厨房，早上可以来吃早饭。厨房里还有一扇玻璃门通向外面的平台，上面都是各种花花草草。晚上还发现房间里的书是真的，刚开还以为是模型：</p>
<p><img src="https://cr.triority.cc/f/YRbcl/IMG_20230207_100753.jpg" alt="书架"><br><img src="https://cr.triority.cc/f/jVwtV/IMG_20230207_100824.jpg" alt="甚至还有藏书印"></p>
<h2 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h2><p>好吧时间问题(起床时间问题)，成都没去成，于是去了重庆的动物园。</p>
<h3 id="动物园"><a href="#动物园" class="headerlink" title="动物园"></a>动物园</h3><p>游客不算特别多，大部分都是本地人带小孩子来玩。<br><img src="https://cr.triority.cc/f/8dZUE/IMG_20230207_123317.jpg"><br><img src="https://cr.triority.cc/f/Py1so/IMG_20230207_123356.jpg" alt="躺平x1"><br><img src="https://cr.triority.cc/f/k5zh7/IMG_20230207_123659.jpg" alt="吃x1"><br><img src="https://cr.triority.cc/f/g5kF2/IMG_20230207_123833.jpg" alt="躺+吃"><br><img src="https://cr.triority.cc/f/7LPup/IMG_20230207_123835.jpg" alt="躺+吃"><br><img src="https://cr.triority.cc/f/GnDho/IMG_20230207_124418.jpg" alt="冒泡"><br><img src="https://cr.triority.cc/f/EjmFX/IMG_20230207_124611.jpg"><br><img src="https://cr.triority.cc/f/ARyTr/IMG_20230207_183302.jpg" alt="躺平x2"><br><img src="https://cr.triority.cc/f/dKqIe/IMG_20230207_124715.jpg" alt="&quot;不行你不能躺&quot;"><br><img src="https://cr.triority.cc/f/l8GHM/IMG_20230207_125842.jpg"><br><img src="https://cr.triority.cc/f/BgwiE/IMG_20230207_130045.jpg" alt="emmm有点瘦呢"><br><img src="https://cr.triority.cc/f/wydSP/IMG_20230207_130420.jpg" alt="你瞅啥"><br><img src="https://cr.triority.cc/f/rQycy/IMG_20230207_130451.jpg" alt="“这个原始人仰望星空的时间超过了预警阀值，已对宇宙表现出了充分的好奇，到此为止，已在不同的地点观察到了十例这样的超限事件，符合报警条件。”————《朝闻道》"><br><img src="https://cr.triority.cc/f/XLXtV/IMG_20230207_131620.jpg" alt="哦好吧可是我没带吃的给你"><br><img src="https://cr.triority.cc/f/ZOzUl/IMG_20230207_135702.jpg"><br><img src="https://cr.triority.cc/f/ywPsy/IMG_20230207_140224.jpg"><br><img src="https://cr.triority.cc/f/N01iV/IMG_20230207_183059.jpg" alt="躺平x3"><br><img src="https://cr.triority.cc/f/508SE/IMG_20230207_183208.jpg"></p>
<div id="dplayer39" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer39"),"video":{"url":"https://cr.triority.cc/f/jwSV/VID_20230207_123607.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<div id="dplayer40" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer40"),"video":{"url":"https://cr.triority.cc/f/Ybil/VID_20230207_123708.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h3 id="轻轨高架桥"><a href="#轻轨高架桥" class="headerlink" title="轻轨高架桥"></a>轻轨高架桥</h3><p>看起来有那么意思哈人是吧<br><img src="https://cr.triority.cc/f/aqmuQ/IMG_20230207_145949.jpg"></p>
<h3 id="火锅x2"><a href="#火锅x2" class="headerlink" title="火锅x2"></a>火锅x2</h3><p>第一次尝试吃这种颜色的东西，无论如何都应该纪念一下<br>其实也没那么辣的，但是我们两个人吃了3盆饭…没错，就是盆<br><img src="https://cr.triority.cc/f/bLZtJ/IMG_20230207_155254.jpg" alt="其实也没那么辣的"></p>
<h2 id="闵某照片合辑"><a href="#闵某照片合辑" class="headerlink" title="闵某照片合辑"></a>闵某照片合辑</h2><p><img src="https://cr.triority.cc/f/0QMFJ/IMG_20230207_012014.jpg" alt="让我看看是谁脖子上挂着相机然后手机拍照"><br><img src="https://cr.triority.cc/f/nl0TO/IMG_20230207_011823.jpg" alt="闵某正在拍摄新买的手办"><br><img src="https://cr.triority.cc/f/mnVHb/IMG_20230207_145710.jpg" alt="禁止依靠哦"></p>
]]></content>
      <categories>
        <category>旅游&amp;摄影</category>
      </categories>
      <tags>
        <tag>旅游</tag>
        <tag>全原图文章</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32学习笔记(STM32F103C8T6)</title>
    <url>/2023/stm32-learning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="STM32简介及工具软件安装"><a href="#STM32简介及工具软件安装" class="headerlink" title="STM32简介及工具软件安装"></a>STM32简介及工具软件安装</h1><h2 id="STM32简介"><a href="#STM32简介" class="headerlink" title="STM32简介"></a>STM32简介</h2><h3 id="芯片命名及手册"><a href="#芯片命名及手册" class="headerlink" title="芯片命名及手册"></a>芯片命名及手册</h3><p><img src="/2023/stm32-learning/STM32F103C8T6.png" alt="STM32F103C8T6是一款由意法半导体公司(ST)推出的基于Cortex-M3内核的32位微控制器，采用`LQFP48`封装"></p>
<p><img src="/2023/stm32-learning/20210115142206386.png" alt="单片机命名规则"></p>
<p><a href="https://cr.triority.cc/f/1r0uP/STM32F103%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%E5%8F%8A%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf">STM32F103系列中文芯片手册</a></p>
<h3 id="下载烧录"><a href="#下载烧录" class="headerlink" title="下载烧录"></a>下载烧录</h3><p>STM32单片机支持3种程序下载方式</p>
<ul>
<li>ISP串口下载(使用USB-TTL接PA9、PA10)</li>
<li>SWD下载(使用ST-LINK接PA13、PA14)</li>
<li>JTAG下载(使用JLINK接PA13、PA14、PA15、PB3、PB4)</li>
</ul>
<p>虽然有三种方式，但是我个人一般是使用st-link的，所以下面主要介绍这一个</p>
<h4 id="ISP下载-串口"><a href="#ISP下载-串口" class="headerlink" title="ISP下载(串口)"></a>ISP下载(串口)</h4><p>使用ISP串口下载前，将单片机上电之前需要先用跳线帽把<code>BOOT0</code>短接到<code>1</code>的位置，<code>BOOT1</code>短接到<code>0</code>的位置，即系统存储器模式，然后才能通过串口下载程序。ISP串口下载完成后断电，在单片机上电之前需要先用跳线帽把<code>BOOT0</code>短接到<code>0</code>的位置，即主闪存存储器模式。</p>
<p><img src="/2023/stm32-learning/%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E9%80%89%E6%8B%A9.png" alt="启动模式"></p>
<p>下载器GND与单片机GND相连，下载器3.3V与单片机3.3V相连(或者下载器5V与单片机VIN相连)、下载器RXD与单片机PA9(U1TX)相连，下载器TXD与单片机PA10(U1RX)相连</p>
<h4 id="SWD下载-st-link"><a href="#SWD下载-st-link" class="headerlink" title="SWD下载(st-link)"></a>SWD下载(st-link)</h4><p>使用SWD接口下载只需要连接3.3V、GND、<code>SWDIO(PA13)</code>、<code>SWCLK(PA14)</code>、<code>RST</code>(非必要)，可以从淘宝购买<code>ST-LINK</code>下载器。使用SWD接口除了可以烧录程序外，还可以实现在线仿真(debug)，仿真过程可以监视寄存器等数据，非常适合软件开发(找问题)。<code>ST-LINK/V2</code>只支持给自家的STM32和STM8烧录程序，不支持为其他公司的单片机烧录程序(即使同样搭载<code>Cortex-M3</code>内核)</p>
<p>如果使用<code>STLink</code>，其上的LED指示灯用于提示当前的工作状态：</p>
<ul>
<li>LED 闪烁红色：<code>STLink</code>已经连接至计算机。</li>
<li>LED 保持红色：计算机已经成功与<code>STLink</code>建立通信连接。</li>
<li>LED 交替闪烁红色和绿色：数据正在传输。</li>
<li>LED 保持绿色：最后一次通信是成功的。</li>
<li>LED 为橘黄色：最后一次通信失败。</li>
</ul>
<h4 id="JTAG下载"><a href="#JTAG下载" class="headerlink" title="JTAG下载"></a>JTAG下载</h4><p>这种方式很少使用，不再详细叙述</p>
<blockquote>
<p>如果我们不需要使用JTAG下载，但GPIO资源紧张或PCB设计时已经使用了这些第一功能为JTAG的引脚，那么我们就需要关闭JTAG。比如说我要使用GPIOA15作为GPIO口，那么代码层面需要这样实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能PORTA时钟</span></span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);<span class="comment">// 关闭JTAG但使能SWD</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_15;<span class="comment">//PA15</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//设置上拉输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h3><h4 id="使用arduino编程"><a href="#使用arduino编程" class="headerlink" title="使用arduino编程"></a>使用arduino编程</h4><p>突然得知stm32可以用arduino编程，喜出望外hhh</p>
<p>添加开发板管理器地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://dan.drown.org/stm32duino/package_STM32duino_index.json</span><br></pre></td></tr></table></figure>
<p>然后就可以找到<code>STM32F103C</code>来给我的板子编程了。</p>
<h4 id="使用keil编程"><a href="#使用keil编程" class="headerlink" title="使用keil编程"></a>使用keil编程</h4><p><code>Keil uVision</code>:编程工具，可以在官网注册获取下载链接，可能需要自行搜索破解，虽然不破解也能正常使用基础功能。<br><code>STM32 ST-LINK Utility</code>：配套<code>ST-LINK</code>一起使用的烧录工具，包含<code>ST-Link</code>驱动，同样可以在官网下载，我也<a href="https://cr.triority.cc/f/2L8tv/STM32-ST-LINK-Utility-setup.exe">copy的一份在网盘上</a></p>
<p>其中如果使用后者进行下载而不是keil自带的下载按钮，需要设置keil编译后输出<code>.hex</code>文件：<img src="/2023/stm32-learning/QQ%E6%88%AA%E5%9B%BE20230511175030.png" alt="设置生成hex文件"></p>
<p>在<code>STM32 ST-LINK Utility</code>中，首先连接芯片<code>(Tarage -&gt; connect或直接点击连接快捷按钮)</code>，然后打开<code>hex</code>文件<code>(也可以直接讲hex文件拖动到FLASH区域)</code>，最后就可以下载程序<code>(Taraget -&gt; Program，也可以直接点击下载快捷按钮)</code>。弹出信息确认窗口，如hex文件路径、验证方式等，确认信息无误后点击<code>Start</code>开始下载程序，出现<code>Verification…OK</code>，说明下载成功。</p>
<h1 id="在keil环境下编程-标准库"><a href="#在keil环境下编程-标准库" class="headerlink" title="在keil环境下编程(标准库)"></a>在keil环境下编程(标准库)</h1><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>首先选择开发板芯片，我的是<code>stm32f103c8</code></p>
<p>添加启动文件等，这部分文字说明比较麻烦(暂时懒得写了)，建议参考<a href="https://www.bilibili.com/video/BV1th411z7sn?p=4">这个视频</a></p>
<p>添加<code>main.c</code>文件，之后就可以在main文件中写代码了，写完可以编译一下，如果输出正确就表示环境配置没问题</p>
<h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="GPIO高低电平输出"><a href="#GPIO高低电平输出" class="headerlink" title="GPIO高低电平输出"></a>GPIO高低电平输出</h3><h4 id="磨磨唧唧的讲解"><a href="#磨磨唧唧的讲解" class="headerlink" title="磨磨唧唧的讲解"></a>磨磨唧唧的讲解</h4><p>在GPIO输出之前要先对要操作的GPIO进行配置，下面这个程序可以连续将PC13这个引脚拉低拉高:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//A</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    <span class="comment">//B</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    <span class="comment">//C</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    <span class="comment">//D</span></span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    LED_Init();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">//E</span></span><br><span class="line">      GPIO_ResetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line">      GPIO_SetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面来解释一下这个程序:</p>
<blockquote>
<p>A:定义GPIO的初始化类型结构体</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br></pre></td></tr></table></figure>
<p>此结构体的定义是在<code>stm32f10x_gpio.h</code>文件中，其中包括3个成员：</p>
<ul>
<li><code>uint16_t GPIO_Pin;</code>来指定GPIO的哪个或哪些引脚</li>
<li><code>GPIOSpeed_TypeDef GPIO_Speed;</code>GPIO的速度配置,对应3个速度：10MHz、2MHz、50MHz</li>
<li><code>GPIOMode_TypeDef GPIO_Mode;</code>为GPIO的工作模式配置，即GPIO的8种工作模式。<ul>
<li>输入浮空 <code>GPIO_Mode_IN_FLOATING</code></li>
<li>输入上拉 <code>GPIO_Mode_IPU</code></li>
<li>输入下拉 <code>GPIO_Mode_IPD</code></li>
<li>模拟输入 <code>GPIO_Mode_AIN</code></li>
<li>具有上拉或下拉功能的开漏输出 <code>GPIO_Mode_Out_OD</code></li>
<li>具有上拉或下拉功能的推挽输出 <code>GPIO_Mode_Out_PP</code></li>
<li>具有上拉或下拉功能的复用功能推挽 <code>GPIO_Mode_AF_PP</code></li>
<li>具有上拉或下拉功能的复用功能开漏 <code>GPIO_Mode_AF_OD</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>B:使能GPIO时钟</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br></pre></td></tr></table></figure>
<p>此函数是在<code>stm32f10x_rcc.c</code>文件中定义的。其中第一个参数指要打开哪一组GPIO的时钟，取值参见<code>stm32f10x_rcc.h</code>文件中的宏定义，第二个参数为打开或关闭使能，取值参见<code>stm32f10x.h</code>文件中的定义，其中<code>ENABLE</code>代表开启使能，<code>DISABLE</code>代表关闭使能。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">RCC_APB2PeriphClockCmd</span><span class="params">(<span class="type">uint32_t</span> RCC_APB2Periph, FunctionalState NewState)</span>;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>C:设置<code>GPIO_InitTypeDef</code>结构体三个成员的值</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>D:初始化GPIO</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure>


<blockquote>
<p>E:GPIO电平输出</p>
</blockquote>
<p>函数就是置位GPIO，即让相应的GPIO输出高电平</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_ResetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line">GPIO_SetBits(GPIOC,GPIO_Pin_13);</span><br></pre></td></tr></table></figure>

<p>很多网上找到的程序也会这样做，在文件开头写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_OFF GPIO_SetBits(GPIOB,GPIO_Pin_5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_ON GPIO_ResetBits(GPIOB,GPIO_Pin_5)</span></span><br></pre></td></tr></table></figure>
<p>然后在调用时候就可以直接写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LED3_ON;</span><br><span class="line">LED3_OFF;</span><br></pre></td></tr></table></figure>

<h4 id="直接上代码-LED闪烁"><a href="#直接上代码-LED闪烁" class="headerlink" title="直接上代码(LED闪烁)"></a>直接上代码(LED闪烁)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    </span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">        GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里面的延时函数来自<a href="https://space.bilibili.com/383400717">up江协科技</a><br><a href="Delay.c">Delay.c</a><br><a href="Delay.h">Delay.h</a></p>
<h3 id="GPIO输入"><a href="#GPIO输入" class="headerlink" title="GPIO输入"></a>GPIO输入</h3><p>这一部分原理和上面几乎一样，通过<code>GPIO_ReadInputDataBit()</code>读取GPIO输入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化引脚</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//IPU为输入模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_11; <span class="comment">//可以这样写同时设置多个引脚</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取引脚输入</span></span><br><span class="line"><span class="keyword">if</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Delay_ms(<span class="number">20</span>);</span><br><span class="line">		<span class="keyword">while</span> (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1) == <span class="number">0</span>);</span><br><span class="line">		Delay_ms(<span class="number">20</span>);</span><br><span class="line">		KeyNum = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此外，对于输出的引脚，也可以使用<code>GPIO_ReadOutputDataBit()</code>读取输出，比如这样翻转输出电平：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_1) == <span class="number">0</span>)&#123;</span><br><span class="line">		GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>中断涉及的结构如下图：<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230911200344.png"><br>这一流程也就是我们配置中断的流程</p>
<h4 id="配置GPIO"><a href="#配置GPIO" class="headerlink" title="配置GPIO"></a>配置GPIO</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//上拉输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure>

<h4 id="配置AFIO选择引脚"><a href="#配置AFIO选择引脚" class="headerlink" title="配置AFIO选择引脚"></a>配置AFIO选择引脚</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);  <span class="comment">//打开AFIO的时钟</span></span><br><span class="line">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource11);  <span class="comment">//将11线路连接到B11</span></span><br></pre></td></tr></table></figure>

<h4 id="配置EXTI"><a href="#配置EXTI" class="headerlink" title="配置EXTI"></a>配置EXTI</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXTI_InitTypeDef EXTI_InitStructure;  <span class="comment">//定义EXTI初始化结构体</span></span><br><span class="line">EXTI_InitStructure.EXTI_Line = EXTI_Line11;</span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; <span class="comment">//事件模式或中断模式。这里选中断</span></span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; <span class="comment">//下降沿触发</span></span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure);</span><br></pre></td></tr></table></figure>
<p>其中触发方式包含：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下降沿</span></span><br><span class="line">EXTI_Trigger_Falling</span><br><span class="line"><span class="comment">//上升沿</span></span><br><span class="line">EXTI_Trigger_Rising</span><br><span class="line"><span class="comment">//上升或下降</span></span><br><span class="line">EXTI_Trigger_Rising_Falling</span><br></pre></td></tr></table></figure>

<h4 id="配置NVIC"><a href="#配置NVIC" class="headerlink" title="配置NVIC"></a>配置NVIC</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//中断分组，两位抢占优先级两位响应优先级</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;  <span class="comment">//定义NVIC初始化结构体</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;  <span class="comment">//配置中断通道，EXITI10-15都在这个通道</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//优先级设置为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;  <span class="comment">//优先级设置为1</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br></pre></td></tr></table></figure>

<h4 id="中断函数"><a href="#中断函数" class="headerlink" title="中断函数"></a>中断函数</h4><p>stm32的中断函数名字是固定的，比如这里是EXTI15_10_IRQn通道的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//首先判断标志位，确定是11线路的信号</span></span><br><span class="line">  <span class="keyword">if</span> (EXTI_GetITStatus(EXTI_Line11) == SET)&#123;</span><br><span class="line">    <span class="comment">//执行的程序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除中断标志位，退出中断。注意如果不清除将会不停申请中断导致卡死</span></span><br><span class="line">    EXTI_ClearITPendingBit(EXTI_Line11);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>这个程序可以实现PB11下降沿中断时反转PC13引脚的输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">    </span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure2;</span><br><span class="line">    GPIO_InitStructure2.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">    GPIO_InitStructure2.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructure2.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure2);</span><br><span class="line">    </span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);  <span class="comment">//打开AFIO的时钟</span></span><br><span class="line">    GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource11);  <span class="comment">//将11线路连接到B11</span></span><br><span class="line">    </span><br><span class="line">    EXTI_InitTypeDef EXTI_InitStructure;  <span class="comment">//定义EXTI初始化结构体</span></span><br><span class="line">    EXTI_InitStructure.EXTI_Line = EXTI_Line11;</span><br><span class="line">    EXTI_InitStructure.EXTI_LineCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; <span class="comment">//事件模式或中断模式。这里选中断</span></span><br><span class="line">    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; <span class="comment">//下降沿触发</span></span><br><span class="line">    EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">    </span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//中断分组，两位抢占优先级两位响应优先级</span></span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;  <span class="comment">//定义NVIC初始化结构体</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;  <span class="comment">//配置中断通道，EXITI10-15都在这个通道</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//优先级设置为1</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;  <span class="comment">//优先级设置为1</span></span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (EXTI_GetITStatus(EXTI_Line11) == SET)&#123;</span><br><span class="line">    <span class="comment">//执行的程序</span></span><br><span class="line">	<span class="keyword">if</span> (GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_13) == <span class="number">0</span>)&#123;</span><br><span class="line">		GPIO_SetBits(GPIOC, GPIO_Pin_13);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOC, GPIO_Pin_13);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    EXTI_ClearITPendingBit(EXTI_Line11);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="定时中断"><a href="#定时中断" class="headerlink" title="定时中断"></a>定时中断</h4><p>定时中断基本结构:<br><img src="/2023/stm32-learning/QQ%E6%88%AA%E5%9B%BE20230913003026.png" alt="定时中断基本结构"></p>
<h5 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);  <span class="comment">//tim2是APB1总线的外设，开启时钟</span></span><br><span class="line"></span><br><span class="line">TIM_InternalClockConfig(TIM2);  <span class="comment">//设置时基单元时钟为内部时钟，默认值也是这个所以其实可以不写</span></span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;  <span class="comment">//定义时基单元初始化结构体</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//时钟滤波器时钟分频，1表示不分频，还可以是2和4</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式，这里是向上计数</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> - <span class="number">1</span>; <span class="comment">//计数器，10k频率计数1w也即是1s定时，数值必须位于0-65535</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//预分频器，对72M分频7200得到10k频率，数值必须位于0-65535</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;  <span class="comment">//重复计数器，仅高级计时器有，所以直接配置0</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);  <span class="comment">//tim2的更新中断使能，使信号通往NVIC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NVIC配置，上一节讲过了</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; <span class="comment">//tim2的通道</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">TIM_Cmd(TIM2, ENABLE);  <span class="comment">//使能定时器</span></span><br></pre></td></tr></table></figure>
<p>下面是中断函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)&#123;</span><br><span class="line">		<span class="comment">//做点东西</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除标志位</span></span><br><span class="line">		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h5><p>这个程序可以让PC13每秒亮灭一次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">    </span><br><span class="line">    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);</span><br><span class="line">    </span><br><span class="line">    TIM_InternalClockConfig(TIM2);</span><br><span class="line">    </span><br><span class="line">    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">    TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;</span><br><span class="line">    TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class="line">    TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line">    TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;</span><br><span class="line">    TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br><span class="line">    </span><br><span class="line">    TIM_ClearFlag(TIM2, TIM_FLAG_Update); <span class="comment">//这个函数上面没讲。因为上电启动会直接触发中断以更新配置，这样写可以避免上电立刻触发中断</span></span><br><span class="line">    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);</span><br><span class="line">    </span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">    </span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">    </span><br><span class="line">    TIM_Cmd(TIM2, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)&#123;</span><br><span class="line">        <span class="keyword">if</span> (GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_13) == <span class="number">0</span>)&#123;</span><br><span class="line">            GPIO_SetBits(GPIOC, GPIO_Pin_13);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            GPIO_ResetBits(GPIOC, GPIO_Pin_13);</span><br><span class="line">        &#125;</span><br><span class="line">        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="PWM输出"><a href="#PWM输出" class="headerlink" title="PWM输出"></a>PWM输出</h4><p><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230913111001.png"></p>
<p>定时器配置和上一节一样，只不过不需要中断配置了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);</span><br><span class="line"></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"><span class="comment">// 这部分注释表示引脚重映射，默认tim2定时器的输出引脚是PA0，注释这部分可以重映射到PA15，当然下面GPIO_Pin_0也要改成注释的GPIO_Pin_15</span></span><br><span class="line"><span class="comment">//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);  //打开AFIO</span></span><br><span class="line"><span class="comment">//	GPIO_PinRemapConfig(GPIO_PartialRemap1_TIM2, ENABLE); //打开部分重映射1</span></span><br><span class="line"><span class="comment">//	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);  //PA15默认复用为调试端口，关闭JTAG功能即可作为普通GPIO，但是务必保留SWJ否则无法再使用st-link下载程序</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;		<span class="comment">//GPIO_Pin_15;</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_InternalClockConfig(TIM2);</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Period = <span class="number">100</span> - <span class="number">1</span>;		<span class="comment">//ARR，输出1k</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">720</span> - <span class="number">1</span>;		<span class="comment">//PSC，分频到100k</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>;</span><br><span class="line">	TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br><span class="line">	<span class="comment">//这里上面的都和之前一样</span></span><br><span class="line"></span><br><span class="line">	TIM_OCInitTypeDef TIM_OCInitStructure;  <span class="comment">//定义配置结构体</span></span><br><span class="line">	TIM_OCStructInit(&amp;TIM_OCInitStructure); <span class="comment">//初始化结构体。下面几个参数是通用定时器的参数，还有一些没用到的参数这样可以初始化配置，如果未来改成高级定时器不至于出错</span></span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; <span class="comment">//输出比较模式</span></span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; <span class="comment">//输出比较极性</span></span><br><span class="line">	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; <span class="comment">//输出使能</span></span><br><span class="line">	TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;		<span class="comment">//CCR</span></span><br><span class="line">	TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);  <span class="comment">//输出比较器配置，使用通道为OC1</span></span><br><span class="line">	</span><br><span class="line">	TIM_Cmd(TIM2, ENABLE);</span><br></pre></td></tr></table></figure>

<p>之后修改pwm占空比就可以使用这个函数：Compare为CCR</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TIM_SetCompare1(TIM2, Compare);</span><br></pre></td></tr></table></figure>

<h4 id="TIM输入捕获"><a href="#TIM输入捕获" class="headerlink" title="TIM输入捕获"></a>TIM输入捕获</h4><h3 id="串口通讯"><a href="#串口通讯" class="headerlink" title="串口通讯"></a>串口通讯</h3><h1 id="keil调试"><a href="#keil调试" class="headerlink" title="keil调试"></a>keil调试</h1><p>使用st-link连接上stm32后，点击这个按钮，进入调试模式<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250314160335.png"></p>
<p><img src="/2023/stm32-learning/ad4ff3cb059848284ddebd78c6279b4.png"></p>
<p>代码窗口左侧灰色区域可以设置断点，左上角可以设置单步运行等功能。</p>
<p>如果需要查看变量的值需要打开<code>View &gt; Watch Windows &gt; watch 1</code>，即可输入变量名查看变量的实时值（注意必须是全局变量）</p>
<h1 id="使用cubemx自动配置寄存器-HAL库"><a href="#使用cubemx自动配置寄存器-HAL库" class="headerlink" title="使用cubemx自动配置寄存器(HAL库)"></a>使用cubemx自动配置寄存器(HAL库)</h1><h2 id="工程基本配置：以stm32f103c8t6为例"><a href="#工程基本配置：以stm32f103c8t6为例" class="headerlink" title="工程基本配置：以stm32f103c8t6为例"></a>工程基本配置：以stm32f103c8t6为例</h2><ul>
<li><p>设置外置时钟源和串口调试：<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164315.png"><br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164341.png"></p>
</li>
<li><p>时钟源选择外置8MHz和32.768MHz，时钟树如下：<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164144.png"></p>
</li>
<li><p>修改工程名称IDE代码输出内容等：<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164238.png"><br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164407.png"></p>
</li>
</ul>
<h2 id="点灯：定时器中断闪烁"><a href="#点灯：定时器中断闪烁" class="headerlink" title="点灯：定时器中断闪烁"></a>点灯：定时器中断闪烁</h2><p>这里使用TIM3触发中断然后反转PC13电平</p>
<p><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164915.png"><br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313164930.png"></p>
<p>cubemx中设置TIM3的PSC为7199，72M时钟频率分频到10kHz，然后ARR设置为9999即为每秒中断1次，生成工程后在<code>main.c</code>添加定时器开启和中断函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HAL_TIM_Base_Start_IT(&amp;htim3);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span> <span class="comment">// 该函数在 stm32f1xx_hal_tim.c 中定义为弱函数(__weak)，由用户再定义</span></span><br><span class="line">&#123;</span><br><span class="line">	  <span class="keyword">if</span>(htim == &amp;htim3)</span><br><span class="line">	 &#123;</span><br><span class="line">	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译下载即可看到PC13指示灯闪烁</p>
<h2 id="点灯：输出PWM"><a href="#点灯：输出PWM" class="headerlink" title="点灯：输出PWM"></a>点灯：输出PWM</h2><p>使用TIM2的Channel1，配置如下：<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313210740.png"></p>
<p>72Mhz的时钟不分频，ARR设置为999即为频率72kHz，CH1的Pluse为100，因此占空比为10%</p>
<p>然后在main()函数中启动输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HAL_TIM_PWM_Start (&amp;htim2,TIM_CHANNEL_1);</span><br></pre></td></tr></table></figure>

<p>即可看到示波器显示：<br><img src="/2023/stm32-learning/28f592eeb806da33ccad2bbe17cba7e.jpg"></p>
<h2 id="oled显示"><a href="#oled显示" class="headerlink" title="oled显示"></a>oled显示</h2><p>这里使用了<a href="https://controllerstech.com/oled-display-using-i2c-stm32/">ssd1306驱动库</a></p>
<p>cubemx配置i2c1，使用fastmode：<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250313165953.png"></p>
<p>然后在keil添加如下文件：<br><a href="fonts.c">fonts.c</a></p>
<p><a href="fonts.h">fonts.h</a></p>
<p><a href="ssd1306.c">ssd1306.c</a></p>
<p><a href="ssd1306.h">ssd1306.h</a></p>
<p>在main.c的while(1)之前添加：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SSD1306_Init (); <span class="comment">// initialise the display </span></span><br><span class="line">SSD1306_GotoXY (<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// goto 10, 10 </span></span><br><span class="line">SSD1306_Puts (<span class="string">&quot;HELLO WORLD !!&quot;</span>, &amp;Font_11x18, <span class="number">1</span>); </span><br><span class="line">SSD1306_UpdateScreen(); <span class="comment">// update screen</span></span><br></pre></td></tr></table></figure>
<p>即可看到<br><img src="/2023/stm32-learning/a45bc23741268296768adc5bec8c950.jpg"></p>
<p>下面的代码将会显示数字并每秒加一</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SSD1306_Init ();</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> bufnum[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line"> SSD1306_GotoXY (<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"> SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">  SSD1306_UpdateScreen();</span><br><span class="line"> Delay_ms(<span class="number">1000</span>);</span><br><span class="line"> num++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>缩短delay时间估计实际刷新用时大约25ms，因此这个读秒并不准确，应该用定时器中断来计算num</p>
<h2 id="GPIO输入中断"><a href="#GPIO输入中断" class="headerlink" title="GPIO输入中断"></a>GPIO输入中断</h2><p>首先设置中断引脚<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250314161413.png"></p>
<p>设置触发模式和内部上下拉<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250314161442.png"></p>
<p>设置nvic开启中断<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250314161453.png"></p>
<p>生成代码后添加中断触发的回调函数。下面代码实现内容是按键消抖，使用TIM3定时器100ms一次中断计时从而避免阻塞</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">uint32_t</span> running_time = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> key_time_last = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">	  <span class="keyword">if</span>(htim == &amp;htim3)</span><br><span class="line">	 &#123;</span><br><span class="line">     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);</span><br><span class="line">	   running_time++;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>( GPIO_Pin == GPIO_PIN_5)</span><br><span class="line">	&#123;</span><br><span class="line">    <span class="keyword">if</span>(running_time-key_time_last&gt;<span class="number">2</span>)&#123;</span><br><span class="line">      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);</span><br><span class="line">      key_time_last=running_time;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>

<p>注意：如果在中断中使用了<code>HAL_GetTick()</code>和<code>HAL_Delay()</code>这类函数，要调整中断优先级，否则会在GPIO中卡死，GPIO中断优先级要比<code>Time base</code>的要低，也就是<code>Preemption Priority</code>更大</p>
<h2 id="ADC（DMA）"><a href="#ADC（DMA）" class="headerlink" title="ADC（DMA）"></a>ADC（DMA）</h2><p>在cubemx中配置ADC1，并开启DMA。这里我开启了10个通道的循环扫描输入，DNA设置为自动连续转运，内存地址自增<br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250314194249.png"><br><img src="/2023/stm32-learning/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250314194301.png"></p>
<p>使用DMA转运到内存的100位数组，然后取平均值（只读了两个通道）然后在屏幕显示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> ADC_Value[<span class="number">100</span>];</span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1, (<span class="type">uint32_t</span>*)&amp;ADC_Value, <span class="number">100</span>);</span><br><span class="line"><span class="type">uint32_t</span> ad1,ad2;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">SSD1306_Init ();</span><br><span class="line"><span class="type">char</span> bufnum[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>,ad1 =<span class="number">0</span>,ad2=<span class="number">0</span>; i &lt; <span class="number">100</span>;i+=<span class="number">10</span>)&#123;</span><br><span class="line">    ad1 += ADC_Value[i];</span><br><span class="line">    ad2 += ADC_Value[i+<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  ad1 /= <span class="number">10</span>;</span><br><span class="line">  ad2 /= <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;%04d&quot;</span>, ad1);</span><br><span class="line"> SSD1306_GotoXY (<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"> SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;%04d&quot;</span>, ad2);</span><br><span class="line"> SSD1306_GotoXY (<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"> SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">  SSD1306_UpdateScreen();</span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="串口通讯-1"><a href="#串口通讯-1" class="headerlink" title="串口通讯"></a>串口通讯</h2><h3 id="串口发送-中断"><a href="#串口发送-中断" class="headerlink" title="串口发送(中断)"></a>串口发送(中断)</h3><p>在cubemx配置串口参数后即可使用下面的HAL库函数直接发送串口数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> data[] = <span class="string">&quot;Hello, UART!&quot;</span>;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, data, <span class="keyword">sizeof</span>(data) - <span class="number">1</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="串口接收-中断"><a href="#串口接收-中断" class="headerlink" title="串口接收(中断)"></a>串口接收(中断)</h3><p>首先定义中断回调处理函数，这里函数的内容是将发来的内容发回去</p>
<p>注意下面这种方式每次最多发送6个字符，否则每第七个字符会被丢弃</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart-&gt;Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理接收到的数据</span></span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, &amp;rxData, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, &amp;rxData, <span class="keyword">sizeof</span>(rxData) - <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新启用中断接收</span></span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart1, &amp;rxData, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在main()函数进入while(1)循环之前开启接收</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HAL_UART_Receive_IT(&amp;huart1, &amp;rxData, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>以及别忘了最开始定义一个存储数据的全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> rxData;</span><br></pre></td></tr></table></figure>
<h3 id="串口发送-DMA"><a href="#串口发送-DMA" class="headerlink" title="串口发送(DMA)"></a>串口发送(DMA)</h3><h3 id="串口接收-DMA"><a href="#串口接收-DMA" class="headerlink" title="串口接收(DMA)"></a>串口接收(DMA)</h3><h3 id="串口接收数据解析存储"><a href="#串口接收数据解析存储" class="headerlink" title="串口接收数据解析存储"></a>串口接收数据解析存储</h3><h2 id="通过i2c读取传感器数据"><a href="#通过i2c读取传感器数据" class="headerlink" title="通过i2c读取传感器数据"></a>通过i2c读取传感器数据</h2><h3 id="mpu6050示例"><a href="#mpu6050示例" class="headerlink" title="mpu6050示例"></a>mpu6050示例</h3><p>这部分内容参考了<a href="https://controllerstech.com/how-to-interface-mpu6050-gy-521-with-stm32/">这篇文章</a>，对里面一些内容做了一些小的修改和解释</p>
<ul>
<li><p>关于mpu6050的地址</p>
<p>值取决于引脚 AD0。该引脚位于传感器的分线板上接入 GND。这意味着设备的7位Slave地址为<code>0x68</code>。但是我们需要为 STM32 HAL 提供 8 位地址，因此我们将这个 7 位地址向左移动 1 位，<code>0x68&lt;&lt;1 = 0xD0</code>。如果AD0接入高电平，那么地址将会是<code>0x69</code></p>
</li>
<li><p>初始化mpu6050</p>
<ul>
<li><p>首先通过读取 <code>WHO_AM_I</code> （<code>0x75</code>）寄存器来检查传感器是否响应。如果传感器响应 <code>0x68</code>，则意味着通信正常<br><img src="/2023/stm32-learning/mpu6050_4-1024x377.avif"></p>
</li>
<li><p>然后配置<code>PWR_MGMT_1 （0x6B）</code>”寄存器，我们将此 <code>register</code> 重置为 <code>0</code>。在此过程中，我们将：</p>
<ul>
<li>选择 8 MHz 的内部 clock source。</li>
<li>Temperature sensor （温度传感器） 将被启用。</li>
<li>将启用睡眠模式和唤醒模式之间的 CYCLE。</li>
<li>SLEEP 模式将被禁用。</li>
<li>此外，我们不执行 RESET。<br><img src="/2023/stm32-learning/mpu6050_5-1024x682.avif"></li>
</ul>
</li>
<li><p>设置 数据输出率 or 采样率.这可以通过写入 <code>SMPLRT_DIV （0x19）</code> 寄存器来完成。此 register 指定陀螺仪输出速率的分频器，用于生成 MPU6050 的 <code>Sample Rate</code>。为了获得 1KHz 的采样率，我们将 <code>SMPLRT_DIV</code> 值设置为 7<br><img src="/2023/stm32-learning/mpu6050_6-1024x377.avif"></p>
</li>
<li><p>修改 <code>GYRO_CONFIG （0x1B）</code>和 <code>ACCEL_CONFIG （0x1C）</code>寄存器来配置 <code>Accelerometer</code> 和 <code>Gyroscope</code> 寄存器，将 <code>0x18</code> 写入这两个寄存器将在 Register 中设置满量程范围，并禁用自检<br><img src="/2023/stm32-learning/mpu6050_7-1024x349.avif"><br><img src="/2023/stm32-learning/mpu6050_8-1024x342.avif"></p>
<ul>
<li>加速度计量程设置：<ul>
<li>0x00: ±2g</li>
<li>0x08: ±4g</li>
<li>0x10: ±8g</li>
<li>0x18: ±16g</li>
</ul>
</li>
<li>陀螺仪量程设置：<ul>
<li>0x00: ±250°&#x2F;s</li>
<li>0x08: ±500°&#x2F;s</li>
<li>0x10: ±1000°&#x2F;s</li>
<li>0x18: ±2000°&#x2F;s</li>
</ul>
</li>
</ul>
<p>例如16进制<code>0x10</code>和<code>0x18</code>对应二进制<code>10000</code>和<code>11000</code>，因此按照手册去掉后三位无效数字，前两位是二进制<code>10</code>和<code>11</code>，也就是10进制的<code>2</code>和<code>3</code>，也就是手册描述的两个设置选项</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MPU6050_Init</span> <span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MPU6050_Init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">uint8_t</span> check;</span><br><span class="line">  <span class="type">uint8_t</span> data;</span><br><span class="line">  <span class="comment">// 检查设备ID</span></span><br><span class="line">  HAL_I2C_Mem_Read(&amp;hi2c1, <span class="number">0x68</span> &lt;&lt; <span class="number">1</span>, <span class="number">0x75</span>, <span class="number">1</span>, &amp;check, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">if</span> (check == <span class="number">0x68</span>) &#123;</span><br><span class="line">      <span class="comment">// 唤醒</span></span><br><span class="line">      data = <span class="number">0</span>;</span><br><span class="line">      HAL_I2C_Mem_Write(&amp;hi2c1, <span class="number">0x68</span> &lt;&lt; <span class="number">1</span>, <span class="number">0x6B</span>, <span class="number">1</span>, &amp;data, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">      <span class="comment">// 设置采样率</span></span><br><span class="line">      data = <span class="number">0x07</span>;</span><br><span class="line">      HAL_I2C_Mem_Write(&amp;hi2c1, <span class="number">0x68</span> &lt;&lt; <span class="number">1</span>, <span class="number">0x19</span>, <span class="number">1</span>, &amp;data, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">      <span class="comment">// 设置加速度计量程</span></span><br><span class="line">      data = <span class="number">0x18</span>;</span><br><span class="line">      HAL_I2C_Mem_Write(&amp;hi2c1, <span class="number">0x68</span> &lt;&lt; <span class="number">1</span>, <span class="number">0x1C</span>, <span class="number">1</span>, &amp;data, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">      <span class="comment">// 设置陀螺仪量程</span></span><br><span class="line">      data = <span class="number">0x18</span>;</span><br><span class="line">      HAL_I2C_Mem_Write(&amp;hi2c1, <span class="number">0x68</span> &lt;&lt; <span class="number">1</span>, <span class="number">0x1B</span>, <span class="number">1</span>, &amp;data, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取 MPU6050 数据<br><img src="/2023/stm32-learning/mpu6050_10-1024x507.avif"><br><img src="/2023/stm32-learning/mpu6050_11-1024x477.avif"><br>根据手册给出的寄存器地址，传感器数据在<code>0x3B</code>到<code>0x48</code>之间，直接读取这一段内容，将每个参数的较高的 8 位向左移动，并和低 8 位的结果相加，得到完整的16位数据，然后根据选择的量程和分辨率转换成以<code>g</code>为单位的数值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MPU6050_Read</span><span class="params">(<span class="type">float</span> *Ax,<span class="type">float</span> *Ay,<span class="type">float</span> *Az,<span class="type">float</span> *Gx,<span class="type">float</span> *Gy,<span class="type">float</span> *Gz)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MPU6050_Read</span><span class="params">(<span class="type">float</span> *Ax,<span class="type">float</span> *Ay,<span class="type">float</span> *Az,<span class="type">float</span> *Gx,<span class="type">float</span> *Gy,<span class="type">float</span> *Gz)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> data[<span class="number">14</span>];</span><br><span class="line"></span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c1, <span class="number">0x68</span> &lt;&lt; <span class="number">1</span>, <span class="number">0x3B</span>, <span class="number">1</span>, data, <span class="number">14</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int16_t</span> Accel_X_RAW = (data[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int16_t</span> Accel_Y_RAW = (data[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int16_t</span> Accel_Z_RAW = (data[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int16_t</span> Gyro_X_RAW = (data[<span class="number">8</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">9</span>];</span><br><span class="line">    <span class="type">int16_t</span> Gyro_Y_RAW = (data[<span class="number">10</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">11</span>];</span><br><span class="line">    <span class="type">int16_t</span> Gyro_Z_RAW = (data[<span class="number">12</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">13</span>];</span><br><span class="line">  </span><br><span class="line">    *Ax = (<span class="type">float</span>)Accel_X_RAW/<span class="number">2048.0</span>;</span><br><span class="line">    *Ay = (<span class="type">float</span>)Accel_Y_RAW/<span class="number">2048.0</span>;</span><br><span class="line">    *Az = (<span class="type">float</span>)Accel_Z_RAW/<span class="number">2048.0</span>;</span><br><span class="line">  </span><br><span class="line">    *Gx = (<span class="type">float</span>)Gyro_X_RAW/<span class="number">16.4</span>;</span><br><span class="line">    *Gy = (<span class="type">float</span>)Gyro_Y_RAW/<span class="number">16.4</span>;</span><br><span class="line">    *Gz = (<span class="type">float</span>)Gyro_Z_RAW/<span class="number">16.4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用这两个函数并串口发送就好了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MPU6050_Init();</span><br><span class="line"><span class="type">float</span> Data_mpu6050[<span class="number">6</span>]=&#123;<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  MPU6050_Read(&amp;Data_mpu6050[<span class="number">0</span>], &amp;Data_mpu6050[<span class="number">1</span>], &amp;Data_mpu6050[<span class="number">2</span>], &amp;Data_mpu6050[<span class="number">3</span>], &amp;Data_mpu6050[<span class="number">4</span>], &amp;Data_mpu6050[<span class="number">5</span>]);</span><br><span class="line">  <span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;Ax=%07.4f\nAy=%07.4f\nAz=%07.4f\nGx=%07.1f\nGy=%07.1f\nGz=%07.1f\n&quot;</span>, Data_mpu6050[<span class="number">0</span>],Data_mpu6050[<span class="number">1</span>],Data_mpu6050[<span class="number">2</span>],Data_mpu6050[<span class="number">3</span>],Data_mpu6050[<span class="number">4</span>],Data_mpu6050[<span class="number">5</span>]);</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1, bufnum, <span class="keyword">sizeof</span>(bufnum) - <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">  Delay_ms(<span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>文档&amp;笔记</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>syncthing发现和中继服务器的搭建</title>
    <url>/2023/syncthing-server/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="折腾的借口"><a href="#折腾的借口" class="headerlink" title="折腾的借口"></a>折腾的借口</h2><p>前段时间用sync同步手机电脑文件，简直太舒服，唯一问题就是公共的中继服务器网络质量参差不齐，于是打算自己搭建一个发现和中继服务器，提高速度和稳定性。</p>
<h2 id="搭建发现服务器-Syncthing-Discovery-Server"><a href="#搭建发现服务器-Syncthing-Discovery-Server" class="headerlink" title="搭建发现服务器 Syncthing Discovery Server"></a>搭建发现服务器 Syncthing Discovery Server</h2><h3 id="下载-stdiscosrv-程序"><a href="#下载-stdiscosrv-程序" class="headerlink" title="下载 stdiscosrv 程序"></a>下载 stdiscosrv 程序</h3><p><a href="https://github.com/syncthing/discosrv/releases">stdiscosrv</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/syncthing/discosrv/releases</span><br></pre></td></tr></table></figure>

<p>解压后运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./stdiscosrv</span><br></pre></td></tr></table></figure>

<p>虽然需要密钥，但是就算不配置程序启动后也会自动生成</p>
<h3 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h3><p>如果需要修改端口，启动时可以加参数<code>-listen=&lt;address&gt;</code>，默认端口为<code>8443</code>。其他参数不是很常用，需要可以去看<a href="https://docs.syncthing.net/users/stdiscosrv.html#syncthing-discovery-server">文档</a></p>
<h2 id="搭建中继服务器-Syncthing-Relay-Server"><a href="#搭建中继服务器-Syncthing-Relay-Server" class="headerlink" title="搭建中继服务器 Syncthing Relay Server"></a>搭建中继服务器 Syncthing Relay Server</h2><p><a href="https://github.com/syncthing/relaysrv/releases">relaysrv</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/syncthing/relaysrv/releases</span><br></pre></td></tr></table></figure>

<p>解压后运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./stdiscosrv</span><br></pre></td></tr></table></figure>

<p>虽然也需要密钥，但是跟刚才一样就算不配置也可以</p>
<h3 id="启动参数-重要！"><a href="#启动参数-重要！" class="headerlink" title="启动参数-重要！"></a>启动参数-重要！</h3><ul>
<li>全局限速：<code>-global-rate=&lt;bytes/s&gt;</code></li>
<li>创建私人服务器<code>-pools=&quot;&quot;</code>，如果没有这一参数，网络上所有人都可以用你的服务器流量进行免费传输</li>
</ul>
<h3 id="运行-私人中继服务器"><a href="#运行-私人中继服务器" class="headerlink" title="运行(私人中继服务器)"></a>运行(私人中继服务器)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./strelaysrv -pools=&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>运行程序后会生成一个<code>id</code>，将其拷贝下来</p>
<p>发现服务器：</p>
<blockquote>
<p><a href="https://ip_address:port/?id=your_id">https://ip_address:port/?id=your_id</a></p>
</blockquote>
<p>中继服务器:</p>
<blockquote>
<p>relay:&#x2F;&#x2F;ip_address:port&#x2F;?id&#x3D;your_id</p>
</blockquote>
<p>自己的地址可以用逗号和<code>default</code>分开，这样就能同时使用多个地址。</p>
<p>比如我的：</p>
<p>协议监听地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp4://0.0.0.0:22000,relay://triority.cc:22067/?id=your_id</span><br></pre></td></tr></table></figure>

<p>全局发现服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://triority.cc:8443/?id=your_id, default</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>tft-espi使用sprite方法实现动画效果</title>
    <url>/2023/tft-espi-sprite/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="功能目标"><a href="#功能目标" class="headerlink" title="功能目标"></a>功能目标</h1><p>实现在彩色tft屏幕上做一个字符移动的动画效果，之前尝试过用u8g2库但是传输速度超级慢，每帧要好几秒那种，完全不能用，这次尝试了使用tft_espi库，真香hhh</p>
<h1 id="TFT-ESPI"><a href="#TFT-ESPI" class="headerlink" title="TFT_ESPI"></a>TFT_ESPI</h1><p>点亮tft屏幕这一部分可以参考学弟写的<a href="https://qwqpap.xyz/esp32%e4%bd%bf%e7%94%a8tft%e5%b1%8f%e5%b9%95%e5%85%a8%e8%b8%a9%e5%9d%91%e6%8c%87%e5%8d%97/330.html">ESP32使用TFT屏幕全踩坑指南</a></p>
<h1 id="tft-fillScreen"><a href="#tft-fillScreen" class="headerlink" title="tft.fillScreen"></a>tft.fillScreen</h1><p>首先尝试了一下使用全屏重写的方法实现字符动画效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;SPI.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;TFT_eSPI.h&gt;       // Hardware-specific library</span><br><span class="line"></span><br><span class="line">TFT_eSPI tft = TFT_eSPI();  // Invoke custom library</span><br><span class="line"></span><br><span class="line">void setup(void) &#123;</span><br><span class="line">  </span><br><span class="line">  tft.init();</span><br><span class="line"></span><br><span class="line">  tft.fillScreen(TFT_BLACK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void show(int x)&#123;</span><br><span class="line">  tft.invertDisplay( false ); // Where i is true or false</span><br><span class="line"> </span><br><span class="line">  tft.fillScreen(TFT_BLACK);</span><br><span class="line"></span><br><span class="line">  tft.setCursor(x, 120, 4);</span><br><span class="line"></span><br><span class="line">  tft.setTextColor(TFT_WHITE);</span><br><span class="line">  tft.println(&quot;Hello World&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  int x = 0;</span><br><span class="line">  while (x&lt;200)&#123;</span><br><span class="line">  show(x);</span><br><span class="line">  x += 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  while (x&gt;0)&#123;</span><br><span class="line">  show(x);</span><br><span class="line">  x -= 3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尝试后问题十分明显，由于全屏刷新屏幕一直在闪烁，虽然也可以换用局部刷新的方法，但是依然非常不优雅</p>
<h1 id="Sprite尝试"><a href="#Sprite尝试" class="headerlink" title="Sprite尝试"></a>Sprite尝试</h1><h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><p>首先是一个tft_espi的例程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Set delay after plotting the sprite</span><br><span class="line">#define DELAY 1000</span><br><span class="line"></span><br><span class="line">// Width and height of sprite</span><br><span class="line">#define WIDTH  128</span><br><span class="line">#define HEIGHT 128</span><br><span class="line"></span><br><span class="line">#include &lt;TFT_eSPI.h&gt;                 // Include the graphics library (this includes the sprite functions)</span><br><span class="line"></span><br><span class="line">TFT_eSPI    tft = TFT_eSPI();         // Declare object &quot;tft&quot;</span><br><span class="line"></span><br><span class="line">TFT_eSprite spr = TFT_eSprite(&amp;tft);  // Declare Sprite object &quot;spr&quot; with pointer to &quot;tft&quot; object</span><br><span class="line"></span><br><span class="line">void setup()</span><br><span class="line">&#123;</span><br><span class="line">  Serial.begin(250000);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  // Initialise the TFT registers</span><br><span class="line">  tft.init();</span><br><span class="line"></span><br><span class="line">  // Optionally set colour depth to 8 or 16 bits, default is 16 if not specified</span><br><span class="line">  // spr.setColorDepth(8);</span><br><span class="line"></span><br><span class="line">  // Create a sprite of defined size</span><br><span class="line">  spr.createSprite(WIDTH, HEIGHT);</span><br><span class="line"></span><br><span class="line">  // Clear the TFT screen to blue</span><br><span class="line">  tft.fillScreen(TFT_BLUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop(void)</span><br><span class="line">&#123;</span><br><span class="line">  // Fill the whole sprite with black (Sprite is in memory so not visible yet)</span><br><span class="line">  spr.fillSprite(TFT_BLACK);</span><br><span class="line"></span><br><span class="line">  // Number of pixels to draw</span><br><span class="line">  uint16_t n = 100;</span><br><span class="line"></span><br><span class="line">  // Draw 100 random colour pixels at random positions in sprite</span><br><span class="line">  while (n--)</span><br><span class="line">  &#123;</span><br><span class="line">    uint16_t colour = random(0x10000); // Returns colour 0 - 0xFFFF</span><br><span class="line">    int16_t x = random(WIDTH);        // Random x coordinate</span><br><span class="line">    int16_t y = random(HEIGHT);       // Random y coordinate</span><br><span class="line">    spr.drawPixel( x, y, colour);      // Draw pixel in sprite</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Draw some lines</span><br><span class="line">  spr.drawLine(1, 0, WIDTH, HEIGHT-1, TFT_GREEN);</span><br><span class="line">  spr.drawLine(0, 0, WIDTH, HEIGHT, TFT_GREEN);</span><br><span class="line">  spr.drawLine(0, 1, WIDTH-1, HEIGHT, TFT_GREEN);</span><br><span class="line">  spr.drawLine(0, HEIGHT-1, WIDTH-1, 0, TFT_RED);</span><br><span class="line">  spr.drawLine(0, HEIGHT, WIDTH, 0, TFT_RED);</span><br><span class="line">  spr.drawLine(1, HEIGHT, WIDTH, 1, TFT_RED);</span><br><span class="line"></span><br><span class="line">  // Draw some text with Middle Centre datum</span><br><span class="line">  spr.setTextDatum(MC_DATUM);</span><br><span class="line">  spr.drawString(&quot;Sprite&quot;, WIDTH / 2, HEIGHT / 2, 4);</span><br><span class="line"></span><br><span class="line">  // Now push the sprite to the TFT at position 0,0 on screen</span><br><span class="line">  spr.pushSprite(-40, -40);</span><br><span class="line">  spr.pushSprite(tft.width() / 2 - WIDTH / 2, tft.height() / 2 - HEIGHT / 2);</span><br><span class="line">  spr.pushSprite(tft.width() - WIDTH + 40, tft.height() - HEIGHT + 40);</span><br><span class="line"></span><br><span class="line">  delay(DELAY);</span><br><span class="line"></span><br><span class="line">  // Fill TFT screen with blue</span><br><span class="line">  tft.fillScreen(TFT_BLUE);</span><br><span class="line"></span><br><span class="line">  // Draw a blue rectangle in sprite so when we move it 1 pixel it does not leave a trail</span><br><span class="line">  // on the blue screen background</span><br><span class="line">  spr.drawRect(0, 0, WIDTH, HEIGHT, TFT_BLUE);</span><br><span class="line"></span><br><span class="line">  int x = tft.width() / 2  -  WIDTH / 2;</span><br><span class="line">  int y = tft.height() / 2 - HEIGHT / 2;</span><br><span class="line"></span><br><span class="line">  uint32_t updateTime = 0;       // time for next update</span><br><span class="line"></span><br><span class="line">  while (true)</span><br><span class="line">  &#123;</span><br><span class="line">    // Random movement direction</span><br><span class="line">    int dx = 1; if (random(2)) dx = -1;</span><br><span class="line">    int dy = 1; if (random(2)) dy = -1;</span><br><span class="line"></span><br><span class="line">    // Pull it back onto screen if it wanders off</span><br><span class="line">    if (x &lt; -WIDTH/2) dx = 1;</span><br><span class="line">    if (x &gt;= tft.width()-WIDTH/2) dx = -1;</span><br><span class="line">    if (y &lt; -HEIGHT/2) dy = 1;</span><br><span class="line">    if (y &gt;= tft.height()-HEIGHT/2) dy = -1;</span><br><span class="line"></span><br><span class="line">    // Draw it 50 time, moving in random direct or staying still</span><br><span class="line">    n = 50;</span><br><span class="line">    int wait = random (50);</span><br><span class="line">    while (n)</span><br><span class="line">    &#123;</span><br><span class="line">      if (updateTime &lt;= millis())</span><br><span class="line">      &#123;</span><br><span class="line">        // Use time delay so sprite does not move fast when not all on screen</span><br><span class="line">        updateTime = millis() + wait;</span><br><span class="line"></span><br><span class="line">        // Push the sprite to the TFT screen</span><br><span class="line">        spr.pushSprite(x, y);</span><br><span class="line"></span><br><span class="line">        // Change coord for next loop</span><br><span class="line">        x += dx;</span><br><span class="line">        y += dy;</span><br><span class="line">        n--;</span><br><span class="line">        yield(); // Stop watchdog reset</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; // Infinite while, will not exit!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到中间那个图案四处移动非常丝滑，简直完美解决方案</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里我就把原例程稍作修改，只保留必要部分以便于理解，顺便把注释翻译为中文了</p>
<p>(sprite不知道应该怎么翻译，就写英文了。现在是七月初北京天天40度真想翻译成雪碧hhh)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置绘制sprite之后的延迟时间</span><br><span class="line">#define DELAY 500</span><br><span class="line">// 设置sprite的宽高</span><br><span class="line">#define WIDTH  120</span><br><span class="line">#define HEIGHT 120</span><br><span class="line"></span><br><span class="line">#include &lt;TFT_eSPI.h&gt;</span><br><span class="line">TFT_eSPI    tft = TFT_eSPI();</span><br><span class="line">TFT_eSprite spr = TFT_eSprite(&amp;tft);  // 声明带有 &quot;tft&quot; 指针对象的 Sprite 对象 &quot;spr&quot; </span><br><span class="line"></span><br><span class="line">void setup()&#123;</span><br><span class="line">  tft.init();</span><br><span class="line">  // 可将颜色深度设置为 8 或 16 位，如果未指定，则默认值为 16</span><br><span class="line">  // spr.setColorDepth(8);</span><br><span class="line">  // 创建一个sprite</span><br><span class="line">  spr.createSprite(WIDTH, HEIGHT);</span><br><span class="line"></span><br><span class="line">  tft.fillScreen(TFT_BLUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop(void)</span><br><span class="line">&#123;</span><br><span class="line">  // 填充整个sprite为黑色 (Sprite 还在内存中所以不可见)</span><br><span class="line">  spr.fillSprite(TFT_BLACK);</span><br><span class="line"></span><br><span class="line">  // 在sprite里画几条线</span><br><span class="line">  spr.drawLine(1, 0, WIDTH, HEIGHT-1, TFT_GREEN);</span><br><span class="line">  spr.drawLine(0, 0, WIDTH, HEIGHT, TFT_GREEN);</span><br><span class="line">  spr.drawLine(0, 1, WIDTH-1, HEIGHT, TFT_GREEN);</span><br><span class="line">  spr.drawLine(0, HEIGHT-1, WIDTH-1, 0, TFT_RED);</span><br><span class="line">  spr.drawLine(0, HEIGHT, WIDTH, 0, TFT_RED);</span><br><span class="line">  spr.drawLine(1, HEIGHT, WIDTH, 1, TFT_RED);</span><br><span class="line">  // 在中间写一些字</span><br><span class="line">  spr.setTextDatum(MC_DATUM);</span><br><span class="line">  spr.drawString(&quot;Sprite&quot;, WIDTH / 2, HEIGHT / 2, 4);</span><br><span class="line"></span><br><span class="line">  // 将Sprite显示在屏幕中间</span><br><span class="line">  spr.pushSprite(-40, -40);</span><br><span class="line">  spr.pushSprite(tft.width() / 2 - WIDTH / 2, tft.height() / 2 - HEIGHT / 2);</span><br><span class="line">  spr.pushSprite(tft.width() - WIDTH + 40, tft.height() - HEIGHT + 40);</span><br><span class="line"></span><br><span class="line">  delay(DELAY);</span><br><span class="line"></span><br><span class="line">  // 填充TFT屏幕为蓝色</span><br><span class="line">  tft.fillScreen(TFT_BLUE);</span><br><span class="line"></span><br><span class="line">  // 在Sprite中绘制一个蓝色矩形，这样当我们将他移动 1 个像素时不会在蓝色背景留下痕迹</span><br><span class="line">  spr.drawRect(0, 0, WIDTH, HEIGHT, TFT_BLUE);</span><br><span class="line"></span><br><span class="line">  int x = tft.width() / 2  -  WIDTH / 2;</span><br><span class="line">  int y = tft.height() / 2 - HEIGHT / 2;</span><br><span class="line"></span><br><span class="line">  while (true)</span><br><span class="line">  &#123;</span><br><span class="line">    // 随机移动方向</span><br><span class="line">    int dx = 1; if (random(2)) dx = -1;</span><br><span class="line">    int dy = 1; if (random(2)) dy = -1;</span><br><span class="line"></span><br><span class="line">    // 如果移动离开了屏幕就拉回来</span><br><span class="line">    if (x &lt; -WIDTH/2) dx = 1;</span><br><span class="line">    if (x &gt;= tft.width()-WIDTH/2) dx = -1;</span><br><span class="line">    if (y &lt; -HEIGHT/2) dy = 1;</span><br><span class="line">    if (y &gt;= tft.height()-HEIGHT/2) dy = -1;</span><br><span class="line"></span><br><span class="line">    // 随机移动绘制50次</span><br><span class="line">    int n = 50;</span><br><span class="line">    while (n)&#123;</span><br><span class="line">      //delay(10);</span><br><span class="line">      // 将Sprite显示在屏幕上并设置下次显示位置</span><br><span class="line">      spr.pushSprite(x, y);</span><br><span class="line">      x += dx;</span><br><span class="line">      y += dy;</span><br><span class="line">      n--;</span><br><span class="line">      //yield(); // 停止看门狗复位（不知道干嘛用而且删掉了没有影响）</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看完注释的内容差不多也就基本会用sprite这个神奇的东西了，可以做下一步工作了</p>
<p>简单尝试一下做个根据电位器移动的字符串</p>
<p>电位器是连接在VP引脚上的，也就是GPIO39，屏幕接线不变</p>
<p>里面有一些魔法数字，是适配我这个240*240的屏幕的，如果是其他分辨率的屏幕可能需要做些修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置sprite的宽高</span><br><span class="line">#define WIDTH  120</span><br><span class="line">#define HEIGHT 120</span><br><span class="line">#include &lt;TFT_eSPI.h&gt;</span><br><span class="line">TFT_eSPI    tft = TFT_eSPI();</span><br><span class="line">TFT_eSprite spr = TFT_eSprite(&amp;tft);</span><br><span class="line"></span><br><span class="line">void setup()&#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  tft.init();</span><br><span class="line">  spr.setColorDepth(8);</span><br><span class="line">  // 创建一个sprite</span><br><span class="line">  spr.createSprite(WIDTH, HEIGHT);</span><br><span class="line"></span><br><span class="line">  tft.fillScreen(TFT_BLACK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop(void)&#123;</span><br><span class="line">  // 填充整个sprite为黑色 (Sprite 还在内存中所以不可见)</span><br><span class="line">  spr.fillSprite(TFT_BLACK);</span><br><span class="line"></span><br><span class="line">  spr.setTextDatum(MC_DATUM);</span><br><span class="line">  spr.drawString(&quot;Sprite&quot;, WIDTH/2, HEIGHT/2, 4);</span><br><span class="line">  spr.pushSprite(tft.width()/2 - WIDTH/2, tft.height()/2 - HEIGHT/2);</span><br><span class="line"></span><br><span class="line">  tft.fillScreen(TFT_BLACK);</span><br><span class="line"></span><br><span class="line">  int x = tft.width() / 2  -  WIDTH / 2;</span><br><span class="line">  int y = tft.height() / 2 - HEIGHT / 2;</span><br><span class="line">  while (true)&#123;</span><br><span class="line">  int analogValueX=analogReadMilliVolts(39);</span><br><span class="line">  int x_goal = analogValueX*240/3300;</span><br><span class="line"></span><br><span class="line">  x+=(x_goal-x)/10;</span><br><span class="line"></span><br><span class="line">  spr.pushSprite(x-60, 60);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果很棒，非常丝滑舒适</p>
<div id="dplayer41" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer41"),"video":{"url":"/2023/tft-espi-sprite/edcc5dd7253720d2441f86f45a76d544.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<h1 id="Sprite方法"><a href="#Sprite方法" class="headerlink" title="Sprite方法"></a>Sprite方法</h1>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>显示屏</tag>
        <tag>esp32</tag>
      </tags>
  </entry>
  <entry>
    <title>xbox手柄控制</title>
    <url>/2023/xbox-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="手柄信息读取"><a href="#手柄信息读取" class="headerlink" title="手柄信息读取"></a>手柄信息读取</h2><p>使用python读取xbox手柄数据例程：<br><img src="/2023/xbox-python/QQ%E6%88%AA%E5%9B%BE20230227164056.png" alt="参考链接：https://blog.csdn.net/qq_41556318/article/details/86305263"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pygame</span><br><span class="line"></span><br><span class="line"># Define some colors</span><br><span class="line">BLACK = (0, 0, 0)</span><br><span class="line">WHITE = (255, 255, 255)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># This is a simple class that will help us print to the screen</span><br><span class="line"># It has nothing to do with the joysticks, just outputting the</span><br><span class="line"># information.</span><br><span class="line">class TextPrint:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.reset()</span><br><span class="line">        self.font = pygame.font.Font(None, 20)</span><br><span class="line"></span><br><span class="line">    def print(self, screen, textString):</span><br><span class="line">        textBitmap = self.font.render(textString, True, BLACK)</span><br><span class="line">        screen.blit(textBitmap, [self.x, self.y])</span><br><span class="line">        self.y += self.line_height</span><br><span class="line"></span><br><span class="line">    def reset(self):</span><br><span class="line">        self.x = 10</span><br><span class="line">        self.y = 10</span><br><span class="line">        self.line_height = 15</span><br><span class="line"></span><br><span class="line">    def indent(self):</span><br><span class="line">        self.x += 10</span><br><span class="line"></span><br><span class="line">    def unindent(self):</span><br><span class="line">        self.x -= 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"># Set the width and height of the screen [width,height]</span><br><span class="line">size = [500, 700]</span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line"></span><br><span class="line">pygame.display.set_caption(&quot;My Game&quot;)</span><br><span class="line"></span><br><span class="line"># Loop until the user clicks the close button.</span><br><span class="line">done = False</span><br><span class="line"></span><br><span class="line"># Used to manage how fast the screen updates</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"># Initialize the joysticks</span><br><span class="line">pygame.joystick.init()</span><br><span class="line"></span><br><span class="line"># Get ready to print</span><br><span class="line">textPrint = TextPrint()</span><br><span class="line"></span><br><span class="line"># -------- Main Program Loop -----------</span><br><span class="line">while done == False:</span><br><span class="line">    # EVENT PROCESSING STEP</span><br><span class="line">    for event in pygame.event.get():  # User did something</span><br><span class="line">        if event.type == pygame.QUIT:  # If user clicked close</span><br><span class="line">            done = True  # Flag that we are done so we exit this loop</span><br><span class="line"></span><br><span class="line">        # Possible joystick actions: JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION</span><br><span class="line">        if event.type == pygame.JOYBUTTONDOWN:</span><br><span class="line">            print(&quot;Joystick button pressed.&quot;)</span><br><span class="line">        if event.type == pygame.JOYBUTTONUP:</span><br><span class="line">            print(&quot;Joystick button released.&quot;)</span><br><span class="line"></span><br><span class="line">    # DRAWING STEP</span><br><span class="line">    # First, clear the screen to white. Don&#x27;t put other drawing commands</span><br><span class="line">    # above this, or they will be erased with this command.</span><br><span class="line">    screen.fill(WHITE)</span><br><span class="line">    textPrint.reset()</span><br><span class="line"></span><br><span class="line">    # Get count of joysticks</span><br><span class="line">    joystick_count = pygame.joystick.get_count()</span><br><span class="line"></span><br><span class="line">    textPrint.print(screen, &quot;Number of joysticks: &#123;&#125;&quot;.format(joystick_count))</span><br><span class="line">    textPrint.indent()</span><br><span class="line"></span><br><span class="line">    # For each joystick:</span><br><span class="line">    for i in range(joystick_count):</span><br><span class="line">        joystick = pygame.joystick.Joystick(i)</span><br><span class="line">        joystick.init()</span><br><span class="line"></span><br><span class="line">        textPrint.print(screen, &quot;Joystick &#123;&#125;&quot;.format(i))</span><br><span class="line">        textPrint.indent()</span><br><span class="line"></span><br><span class="line">        # Get the name from the OS for the controller/joystick</span><br><span class="line">        name = joystick.get_name()</span><br><span class="line">        textPrint.print(screen, &quot;Joystick name: &#123;&#125;&quot;.format(name))</span><br><span class="line"></span><br><span class="line">        # Usually axis run in pairs, up/down for one, and left/right for</span><br><span class="line">        # the other.</span><br><span class="line">        axes = joystick.get_numaxes()</span><br><span class="line">        textPrint.print(screen, &quot;Number of axes: &#123;&#125;&quot;.format(axes))</span><br><span class="line">        textPrint.indent()</span><br><span class="line"></span><br><span class="line">        for i in range(axes):</span><br><span class="line">            axis = joystick.get_axis(i)</span><br><span class="line">            textPrint.print(screen, &quot;Axis &#123;&#125; value: &#123;:&gt;6.3f&#125;&quot;.format(i, axis))</span><br><span class="line">        textPrint.unindent()</span><br><span class="line"></span><br><span class="line">        buttons = joystick.get_numbuttons()</span><br><span class="line">        textPrint.print(screen, &quot;Number of buttons: &#123;&#125;&quot;.format(buttons))</span><br><span class="line">        textPrint.indent()</span><br><span class="line"></span><br><span class="line">        for i in range(buttons):</span><br><span class="line">            button = joystick.get_button(i)</span><br><span class="line">            textPrint.print(screen, &quot;Button &#123;:&gt;2&#125; value: &#123;&#125;&quot;.format(i, button))</span><br><span class="line">        textPrint.unindent()</span><br><span class="line"></span><br><span class="line">        # Hat switch. All or nothing for direction, not like joysticks.</span><br><span class="line">        # Value comes back in an array.</span><br><span class="line">        hats = joystick.get_numhats()</span><br><span class="line">        textPrint.print(screen, &quot;Number of hats: &#123;&#125;&quot;.format(hats))</span><br><span class="line">        textPrint.indent()</span><br><span class="line"></span><br><span class="line">        for i in range(hats):</span><br><span class="line">            hat = joystick.get_hat(i)</span><br><span class="line">            textPrint.print(screen, &quot;Hat &#123;&#125; value: &#123;&#125;&quot;.format(i, str(hat)))</span><br><span class="line">        textPrint.unindent()</span><br><span class="line"></span><br><span class="line">        textPrint.unindent()</span><br><span class="line"></span><br><span class="line">    # ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT</span><br><span class="line"></span><br><span class="line">    # Go ahead and update the screen with what we&#x27;ve drawn.</span><br><span class="line">    pygame.display.flip()</span><br><span class="line"></span><br><span class="line">    # Limit to 20 frames per second</span><br><span class="line">    clock.tick(20)</span><br><span class="line"></span><br><span class="line"># Close the window and quit.</span><br><span class="line"># If you forget this line, the program will &#x27;hang&#x27;</span><br><span class="line"># on exit if running from IDLE.</span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure>
<h2 id="上位机远程控制"><a href="#上位机远程控制" class="headerlink" title="上位机远程控制"></a>上位机远程控制</h2><h3 id="手柄数据获取"><a href="#手柄数据获取" class="headerlink" title="手柄数据获取"></a>手柄数据获取</h3><p>使用左侧摇杆作为方向控制，左侧按键作为倒车，右侧为油门(优先级低于左侧)</p>
<p>注意<code>while</code>循环里面的<code>for event in pygame.event.get():</code>部分不可删除，否则无法读取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pygame</span><br><span class="line">pygame.init()</span><br><span class="line">pygame.joystick.init()</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    for event in pygame.event.get():  # User did something</span><br><span class="line">        # Possible joystick actions: JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION</span><br><span class="line">        if event.type == pygame.JOYBUTTONDOWN:</span><br><span class="line">            print(&quot;Joystick button pressed.&quot;)</span><br><span class="line">        if event.type == pygame.JOYBUTTONUP:</span><br><span class="line">            print(&quot;Joystick button released.&quot;)</span><br><span class="line">    joystick = pygame.joystick.Joystick(0)</span><br><span class="line">    joystick.init()</span><br><span class="line"></span><br><span class="line">    # direction from -1 ~ 1, returns to 0 automatically</span><br><span class="line">    axis0 = joystick.get_axis(0)</span><br><span class="line">    if axis0 &gt; 0.1 or axis0 &lt; -0.1:</span><br><span class="line">        direction = axis0</span><br><span class="line">    else:</span><br><span class="line">        direction = 0</span><br><span class="line">    print(direction)</span><br><span class="line">    # speed from -1 to 1, returns to -1 automatically</span><br><span class="line">    speed = joystick.get_axis(4)</span><br><span class="line">    print(speed)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>即可得到方向和速度控制数值。</p>
<h3 id="使用socket连接传输指令数据"><a href="#使用socket连接传输指令数据" class="headerlink" title="使用socket连接传输指令数据"></a>使用socket连接传输指令数据</h3><h4 id="电脑server发送"><a href="#电脑server发送" class="headerlink" title="电脑server发送"></a>电脑server发送</h4><p>注意这里用<code>clock.tick(10)</code>限制发送速度每秒10次，确保客户端接收速度更快，否则多次发送的json文本将会直接相连被接收，导致无法解析json文本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">import pygame</span><br><span class="line">from socket import *</span><br><span class="line">import _thread</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">pygame.joystick.init()</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line">address = (&#x27;127.0.0.1&#x27;, 7788)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_size(sock, count):</span><br><span class="line">    buf = &#x27;&#x27;</span><br><span class="line">    while count:</span><br><span class="line">        newbuf = sock.recv(count)</span><br><span class="line">        if not newbuf: return None</span><br><span class="line">        buf += newbuf</span><br><span class="line">        count -= len(newbuf)</span><br><span class="line">    return buf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def web():</span><br><span class="line">    global direction</span><br><span class="line">    global run</span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    tcp_server_socket.listen(8)</span><br><span class="line">    client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">            data = &#123;&quot;direction&quot;: direction, &quot;run&quot;: run&#125;</span><br><span class="line">            client_socket.send(json.dumps(data).encode(&#x27;utf-8&#x27;))</span><br><span class="line">        except:</span><br><span class="line">            client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">_thread.start_new_thread(web, ())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    for event in pygame.event.get():  # User did something</span><br><span class="line">        # Possible joystick actions: JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION</span><br><span class="line">        if event.type == pygame.JOYBUTTONDOWN:</span><br><span class="line">            print(&quot;Joystick button pressed.&quot;)</span><br><span class="line">        if event.type == pygame.JOYBUTTONUP:</span><br><span class="line">            print(&quot;Joystick button released.&quot;)</span><br><span class="line">    joystick = pygame.joystick.Joystick(0)</span><br><span class="line">    joystick.init()</span><br><span class="line"></span><br><span class="line">    # direction from -1 ~ 1, returns to 0 automatically</span><br><span class="line">    axis0 = joystick.get_axis(0)</span><br><span class="line">    if axis0 &gt; 0.1 or axis0 &lt; -0.1:</span><br><span class="line">        direction = axis0</span><br><span class="line">    else:</span><br><span class="line">        direction = 0</span><br><span class="line">    # speed from -1 to 1, returns to -1 automatically</span><br><span class="line">    speed = joystick.get_axis(5) + 1    # 0~2</span><br><span class="line">    speed_back = -1 - joystick.get_axis(4)  # -2~0</span><br><span class="line">    if speed_back == 0:</span><br><span class="line">        run = speed</span><br><span class="line">    else:</span><br><span class="line">        run = speed_back</span><br><span class="line">    print(&quot;direction&quot;, direction, &quot;run&quot;, run, &#x27;speed&#x27;, speed, &#x27;speed_back&#x27;, speed_back)</span><br><span class="line">    clock.tick(10)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="车子client接收"><a href="#车子client接收" class="headerlink" title="车子client接收"></a>车子client接收</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import _thread</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">from socket import *</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">direction = 0</span><br><span class="line">speed = -1</span><br><span class="line">server = (&quot;127.0.0.1&quot;, 7788)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_data():</span><br><span class="line">    global direction</span><br><span class="line">    global speed</span><br><span class="line">    s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    s.connect(server)</span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            rec = s.recv(1024).decode(&quot;utf-8&quot;)</span><br><span class="line">            data = json.loads(rec)</span><br><span class="line">            direction = float(data[&#x27;direction&#x27;])</span><br><span class="line">            speed = float(data[&#x27;speed&#x27;])</span><br><span class="line">            print(&quot;direction&quot;, direction, &quot;speed&quot;, speed)</span><br><span class="line">        except:</span><br><span class="line">            s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">            s.connect(server)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_thread.start_new_thread(get_data, ())</span><br><span class="line">while 1:</span><br><span class="line">    time.sleep(10)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="client使用ROS控制"><a href="#client使用ROS控制" class="headerlink" title="client使用ROS控制"></a>client使用ROS控制</h4><p>将<code>time.sleep(10)</code>替换为ROS节点数据发布：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import rospy</span><br><span class="line">from geometry_msgs.msg import Twist</span><br><span class="line">import numpy as np</span><br><span class="line">import _thread</span><br><span class="line">import time</span><br><span class="line">from socket import *</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">control_speed = 1500  # 500-1499倒车/1500停车/1501-2500前进</span><br><span class="line">turn_mid = 90  # 舵机中值是90</span><br><span class="line">direction = 0</span><br><span class="line">run = 0</span><br><span class="line">server = (&quot;triority.cc&quot;, 7788)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_data():</span><br><span class="line">    global direction</span><br><span class="line">    global run</span><br><span class="line">    s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    s.connect(server)</span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            rec = s.recv(1024).decode(&quot;utf-8&quot;)</span><br><span class="line">            data = json.loads(rec)</span><br><span class="line">            direction = float(data[&#x27;direction&#x27;])</span><br><span class="line">            run = float(data[&#x27;run&#x27;])</span><br><span class="line">            print(&quot;direction&quot;, direction, &quot;run&quot;, run)</span><br><span class="line">        except:</span><br><span class="line">            s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">            s.connect(server)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def publisher(direction, run):</span><br><span class="line">    twist.linear.x = 1500 + int(run * 200)</span><br><span class="line">    twist.linear.y = 0</span><br><span class="line">    twist.linear.z = 0</span><br><span class="line">    twist.angular.x = 0</span><br><span class="line">    twist.angular.y = 0</span><br><span class="line">    twist.angular.z = 90 - int(direction * 50)</span><br><span class="line">    pub.publish(twist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_thread.start_new_thread(get_data, ())</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 声明twist节点</span><br><span class="line">    rospy.init_node(&#x27;racecar_teleop&#x27;)</span><br><span class="line">    pub = rospy.Publisher(&#x27;~/car/cmd_vel&#x27;, Twist, queue_size=1)</span><br><span class="line">    twist = Twist()</span><br><span class="line">    # cap = cv2.VideoCapture(0)</span><br><span class="line">    while 1:</span><br><span class="line">        publisher(direction, run)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><p>使用launch文件启动下位机节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roslaunch racecar Run_car.launch</span><br></pre></td></tr></table></figure>
<p>启动控制python程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun racecar run_school.py</span><br></pre></td></tr></table></figure>
<h3 id="图传数据使用opencv低延迟高帧率传输"><a href="#图传数据使用opencv低延迟高帧率传输" class="headerlink" title="图传数据使用opencv低延迟高帧率传输"></a>图传数据使用opencv低延迟高帧率传输</h3><p>这个程序有点问题，就是有时候客户端发送图片长度数据之后，服务端接收到无法解析为长度数据，具体原因不清楚，所以直接try然后重建连接了。</p>
<p>最开始延迟很可观，帧率只有5-10，一部分原因是<code>capture.read()</code>是一个IO密集型的阻塞函数，把读取和部分编码压缩工作移动到其他线程即可明显改善。</p>
<h4 id="发送图传数据client-py"><a href="#发送图传数据client-py" class="headerlink" title="发送图传数据client.py"></a>发送图传数据client.py</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import socket</span><br><span class="line">import _thread</span><br><span class="line">import cv2</span><br><span class="line">import numpy</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 压缩参数，对于jpeg来说，15代表图像质量，越高代表图像质量越好为 0-100，默认95</span><br><span class="line">encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 20]</span><br><span class="line">string_data = &#x27;&#x27;</span><br><span class="line">address = (&#x27;triority.cc&#x27;, 8002)</span><br><span class="line"></span><br><span class="line">def read_video():</span><br><span class="line">    global string_data</span><br><span class="line">    capture = cv2.VideoCapture(0)</span><br><span class="line">    while 1:</span><br><span class="line">        ret, read_frame = capture.read()</span><br><span class="line">        # cv2.imencode将图片格式转换(编码)成流数据，赋值到内存缓存中;用于图像数据格式的压缩，方便网络传输</span><br><span class="line">        result, img_encode = cv2.imencode(&#x27;.jpg&#x27;, read_frame, encode_param)</span><br><span class="line">        # 建立矩阵并将numpy矩阵转换成字符形式，以便在网络中传输</span><br><span class="line">        data = numpy.array(img_encode)</span><br><span class="line">        string_data = data.tobytes()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_video():</span><br><span class="line">    while 1:</span><br><span class="line">        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        sock.connect(address)</span><br><span class="line">        while 1:</span><br><span class="line">            time.sleep(0.02)</span><br><span class="line">            try:</span><br><span class="line">                # 先发送要发送的数据的长度 ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串</span><br><span class="line">                sock.send(str.encode(str(len(string_data)).ljust(16)))</span><br><span class="line">                sock.send(string_data)</span><br><span class="line">                if cv2.waitKey(10) == 27:</span><br><span class="line">                    break</span><br><span class="line">            except:</span><br><span class="line">                sock.close()</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    _thread.start_new_thread(read_video, ())</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    send_video()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="接受图传数据server-py"><a href="#接受图传数据server-py" class="headerlink" title="接受图传数据server.py:"></a>接受图传数据server.py:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line">import cv2</span><br><span class="line">import numpy</span><br><span class="line"></span><br><span class="line">address = (&#x27;127.0.0.1&#x27;, 8002)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_all(sock, count):</span><br><span class="line">    buf = b&#x27;&#x27;</span><br><span class="line">    while count:</span><br><span class="line">        new_buf = sock.recv(count)</span><br><span class="line">        if not new_buf:</span><br><span class="line">            return None</span><br><span class="line">        buf += new_buf</span><br><span class="line">        count -= len(new_buf)</span><br><span class="line">    return buf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receive_video():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind(address)</span><br><span class="line">    s.listen(1)</span><br><span class="line">    while 1:</span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line">        print(&#x27;connect from:&#x27; + str(addr))</span><br><span class="line">        while 1:</span><br><span class="line">            try:</span><br><span class="line">                length = recv_all(conn, 16).decode(&#x27;utf-8&#x27;)  # 获得图片文件的长度,16代表获取长度</span><br><span class="line">                string_data = recv_all(conn, int(length))  # 根据获得的文件长度，获取图片文件</span><br><span class="line">                data = numpy.frombuffer(string_data, numpy.uint8)  # 将获取到的字符流数据转换成数组</span><br><span class="line">                dec_img = cv2.imdecode(data, cv2.IMREAD_COLOR)  # 将数组解码成图像</span><br><span class="line">                cv2.imshow(&#x27;SERVER&#x27;, dec_img)</span><br><span class="line">                k = cv2.waitKey(10) &amp; 0xff</span><br><span class="line">                if k == 27:</span><br><span class="line">                    break</span><br><span class="line">            except:</span><br><span class="line">                conn.close()</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    receive_video()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="香橙派与arduino串口通信-失败"><a href="#香橙派与arduino串口通信-失败" class="headerlink" title="香橙派与arduino串口通信(失败)"></a>香橙派与arduino串口通信(失败)</h2><h3 id="arduino接收串口数据控制电调舵机"><a href="#arduino接收串口数据控制电调舵机" class="headerlink" title="arduino接收串口数据控制电调舵机"></a>arduino接收串口数据控制电调舵机</h3><p>电调的有效值是<code>1000-2000</code>的脉宽，舵机直接使用角度控制有效值<code>60-120</code>。将两者相接一起串口发送到arduino下位机。<br>如<code>1800090</code>表示速度<code>1800</code>,角度<code>90</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;Servo.h&gt;</span><br><span class="line"></span><br><span class="line">Servo myServo;</span><br><span class="line">Servo pwm;</span><br><span class="line"></span><br><span class="line">String comStr = &quot;&quot;;</span><br><span class="line">long comInt=0;</span><br><span class="line">long speed=2000;</span><br><span class="line">long dir=90;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  // put your setup code here, to run once:</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  while(Serial.read()&gt;=0)&#123;&#125; // clear serial port&#x27;s buffer</span><br><span class="line">  </span><br><span class="line">  myServo.attach(9); // attach myServo to GPIO_09</span><br><span class="line">  myServo.write(90);</span><br><span class="line">  pwm.attach(10);</span><br><span class="line"></span><br><span class="line">  pwm.writeMicroseconds(2000);</span><br><span class="line">  delay(1500);</span><br><span class="line">  pwm.writeMicroseconds(1500);</span><br><span class="line">  delay(1500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  // put your main code here, to run repeatedly:</span><br><span class="line">  if (Serial.available() &gt; 0)&#123;</span><br><span class="line">    // listen the Serial port, run the code when something catched..</span><br><span class="line">    delay(30);</span><br><span class="line">    comStr = Serial.readString();</span><br><span class="line">    comInt = comStr.toInt();</span><br><span class="line">    comInt = constrain(comInt, 1000060, 2000120);</span><br><span class="line">    Serial.println(comStr);</span><br><span class="line">    Serial.println(comInt);</span><br><span class="line">    speed = comInt/1000;</span><br><span class="line">    speed = constrain(speed, 1000, 2000);</span><br><span class="line">    Serial.println(speed);</span><br><span class="line">    dir = comInt - speed*1000;</span><br><span class="line">    dir = constrain(dir, 60, 120);</span><br><span class="line">    Serial.println(dir);</span><br><span class="line"></span><br><span class="line">    myServo.write(dir);</span><br><span class="line">    pwm.writeMicroseconds(speed);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="香橙派串口数据通信-失败"><a href="#香橙派串口数据通信-失败" class="headerlink" title="香橙派串口数据通信(失败)"></a>香橙派串口数据通信(失败)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import serial</span><br><span class="line">import serial.tools.list_ports</span><br><span class="line"></span><br><span class="line">ports_list = list(serial.tools.list_ports.comports())</span><br><span class="line">if len(ports_list) &lt;= 0:</span><br><span class="line">    print(&quot;无串口设备&quot;)</span><br><span class="line">else:</span><br><span class="line">    for comport in ports_list:</span><br><span class="line">        print(list(comport)[0], list(comport)[1])</span><br><span class="line"></span><br><span class="line">ser = serial.Serial(&#x27;/dev/ttyUSB0&#x27;,9600,timeout=1)</span><br><span class="line">ser.write(&#x27;1500090&#x27;.encode())</span><br></pre></td></tr></table></figure>
<p>发送后arduino串口灯有闪烁，但是没有反应，显然没有正确传输信息。</p>
<h2 id="使用esp32直接接收服务器命令"><a href="#使用esp32直接接收服务器命令" class="headerlink" title="使用esp32直接接收服务器命令"></a>使用esp32直接接收服务器命令</h2><p>舵机库无法在esp32上运行，但是esp32输出pwm控制比arduino方便得多hhh</p>
<p>现在真的是觉得esp32比arduino好用太多了，以后有空写个esp32的教程合集吧。</p>
<h3 id="esp32连接wifi并接收tcp数据以及PWM输出"><a href="#esp32连接wifi并接收tcp数据以及PWM输出" class="headerlink" title="esp32连接wifi并接收tcp数据以及PWM输出"></a>esp32连接wifi并接收tcp数据以及PWM输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;WiFi.h&gt;</span><br><span class="line"></span><br><span class="line">const char *ssid = &quot;Triority3434&quot;;</span><br><span class="line">const char *password = &quot;123654789&quot;;</span><br><span class="line"></span><br><span class="line">const IPAddress serverIP(47,243,172,141);</span><br><span class="line">uint16_t serverPort = 7788;</span><br><span class="line">WiFiClient client;</span><br><span class="line"></span><br><span class="line">int freq = 50;</span><br><span class="line">int freq2 = 500;</span><br><span class="line">int channel = 8;    // 通道(高速通道（0 ~ 7）由80MHz时钟驱动，低速通道（8 ~ 15）由 1MHz 时钟驱动。)</span><br><span class="line">int channel2 = 15;</span><br><span class="line">int resolution = 8; // 分辨率</span><br><span class="line">const int servo = 12;</span><br><span class="line">const int pwm = 13;</span><br><span class="line"></span><br><span class="line">int dir = 90;</span><br><span class="line">int run = 1500;</span><br><span class="line"></span><br><span class="line">int servoPWM(int degree)</span><br><span class="line">&#123; // 0-180度</span><br><span class="line">  // 20ms周期，高电平0.5-2.5ms，对应0-180度角度</span><br><span class="line">  const float deadZone = 6.4;//对应0.5ms（0.5ms/(20ms/256）)</span><br><span class="line">  const float max = 32;//对应2.5ms</span><br><span class="line">  if (degree &lt; 60)</span><br><span class="line">    degree = 60;</span><br><span class="line">  if (degree &gt; 120)</span><br><span class="line">    degree = 120;</span><br><span class="line">  return (int)(((max - deadZone) / 180) * degree + deadZone);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void setup()&#123;</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  Serial.println();</span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.setSleep(false);</span><br><span class="line">  WiFi.setHostname(&quot;esp32-car&quot;);</span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line">  while (WiFi.status() != WL_CONNECTED)&#123;</span><br><span class="line">    delay(2000);</span><br><span class="line">    Serial.print(&quot;.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(&quot;WiFi connected, IP address: &quot;);</span><br><span class="line">  Serial.println(WiFi.localIP());</span><br><span class="line">  </span><br><span class="line">  ledcSetup(channel, freq, resolution);</span><br><span class="line">  ledcAttachPin(servo, channel);</span><br><span class="line"></span><br><span class="line">  ledcSetup(channel2, freq2, resolution);</span><br><span class="line">  ledcAttachPin(pwm, channel2);</span><br><span class="line"></span><br><span class="line">  ledcWrite(channel, servoPWM(90));</span><br><span class="line">  delay(500);</span><br><span class="line">  ledcWrite(channel2, 255);</span><br><span class="line">  delay(1500);</span><br><span class="line">  ledcWrite(channel2, 191);</span><br><span class="line">  delay(1500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop()&#123;</span><br><span class="line">  Serial.println(&quot;connecting to server&quot;);</span><br><span class="line">  if (client.connect(serverIP, serverPort))&#123;</span><br><span class="line">    Serial.println(&quot;connected&quot;);</span><br><span class="line">    while (client.connected() || client.available())&#123;</span><br><span class="line">      if (client.available())&#123;</span><br><span class="line">        String d = client.readStringUntil(&#x27;d&#x27;);</span><br><span class="line">        Serial.println(d);</span><br><span class="line">        dir = d.toInt();</span><br><span class="line">        String r = client.readStringUntil(&#x27;r&#x27;);</span><br><span class="line">        run = r.toInt();</span><br><span class="line">        Serial.println(r);</span><br><span class="line"></span><br><span class="line">        ledcWrite(channel, servoPWM(dir));</span><br><span class="line">        ledcWrite(channel2, int(run*256/2000-1));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    Serial.println(&quot;err&quot;);</span><br><span class="line">    client.stop();</span><br><span class="line">  &#125;</span><br><span class="line">  delay(5000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="以及进行了轻微修改的控制程序"><a href="#以及进行了轻微修改的控制程序" class="headerlink" title="以及进行了轻微修改的控制程序"></a>以及进行了轻微修改的控制程序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">import pygame</span><br><span class="line">from socket import *</span><br><span class="line">import _thread</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">pygame.joystick.init()</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line">address = (&#x27;127.0.0.1&#x27;, 7788)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_size(sock, count):</span><br><span class="line">    buf = &#x27;&#x27;</span><br><span class="line">    while count:</span><br><span class="line">        newbuf = sock.recv(count)</span><br><span class="line">        if not newbuf:</span><br><span class="line">            return None</span><br><span class="line">        buf += newbuf</span><br><span class="line">        count -= len(newbuf)</span><br><span class="line">    return buf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def web():</span><br><span class="line">    global direction</span><br><span class="line">    global run</span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    tcp_server_socket.listen(8)</span><br><span class="line">    client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            time.sleep(0.03)</span><br><span class="line">            dir = 90 - int(direction*30)</span><br><span class="line">            if run &gt;= 0:</span><br><span class="line">                r = 1500 + int(250*run)</span><br><span class="line">            else:</span><br><span class="line">                r = 1100</span><br><span class="line">            client_socket.send((str(dir)+&#x27;d&#x27;+str(r)+&#x27;r&#x27;).encode(&#x27;utf-8&#x27;))</span><br><span class="line">        except:</span><br><span class="line">            client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">_thread.start_new_thread(web, ())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    for event in pygame.event.get():  # User did something</span><br><span class="line">        # Possible joystick actions: JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION</span><br><span class="line">        if event.type == pygame.JOYBUTTONDOWN:</span><br><span class="line">            print(&quot;Joystick button pressed.&quot;)</span><br><span class="line">        if event.type == pygame.JOYBUTTONUP:</span><br><span class="line">            print(&quot;Joystick button released.&quot;)</span><br><span class="line">    joystick = pygame.joystick.Joystick(0)</span><br><span class="line">    joystick.init()</span><br><span class="line"></span><br><span class="line">    # direction from -1 ~ 1, returns to 0 automatically</span><br><span class="line">    axis0 = joystick.get_axis(0)</span><br><span class="line">    if axis0 &gt; 0.1 or axis0 &lt; -0.1:</span><br><span class="line">        direction = axis0</span><br><span class="line">    else:</span><br><span class="line">        direction = 0</span><br><span class="line">    # speed from -1 to 1, returns to -1 automatically</span><br><span class="line">    speed = joystick.get_axis(5) + 1    # 0~2</span><br><span class="line">    speed_back = -1 - joystick.get_axis(4)  # -2~0</span><br><span class="line">    if speed_back == 0:</span><br><span class="line">        run = speed</span><br><span class="line">    else:</span><br><span class="line">        run = speed_back</span><br><span class="line">    print(&quot;direction&quot;, direction, &quot;run&quot;, run, &#x27;speed&#x27;, speed, &#x27;speed_back&#x27;, speed_back)</span><br><span class="line">    clock.tick(10)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="RUN！"><a href="#RUN！" class="headerlink" title="RUN！"></a>RUN！</h2><div id="dplayer42" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer42"),"video":{"url":"https://cr.triority.cc/f/95Lum/car_school.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>arduino</tag>
        <tag>esp32</tag>
      </tags>
  </entry>
  <entry>
    <title>无抽头zvs感应加热</title>
    <url>/2023/zvs-heating/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="两个电路"><a href="#两个电路" class="headerlink" title="两个电路"></a>两个电路</h2><p>这两个电路来自立创开源广场，区别在于功率不同，一个使用两个MOS管，一个用4个。前段时间不是在研究<code>电磁炉</code>的升压电路嘛，和这个原理几乎一样。原文写的图片过多，翻找起来十分麻烦，所以在这转载一下。</p>
<h4 id="开源协议是WTFPL："><a href="#开源协议是WTFPL：" class="headerlink" title="开源协议是WTFPL："></a>开源协议是<code>WTFPL</code>：</h4><blockquote>
<p>WTFPL许可协议全文：<br>DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2, December 2004Copyright (C) 2004 Sam Hocevar. Everyone is permitted to copy and distribute verbatim or modifiedcopies of this license document, and changing it is allowed as longas the name is changed.DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSETERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION0. You just DO WHAT THE FUCK YOU WANT TO.</p>
</blockquote>
<h4 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h4><table>
<thead>
<tr>
<th><a href="https://oshwhub.com/Soviet_lynx/ZVS_IH_2MOS">无抽头ZVS感应加热2管</a></th>
<th><a href="https://oshwhub.com/Soviet_lynx/ZVS_IH_4MOS">无抽头ZVS感应加热4管</a></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/zvs-heating/bDsezGxEpgbfMpKnHknjMGEE1yTeO0wyBEsdJ9hY.jpg" alt="2管"></td>
<td><img src="/2023/zvs-heating/jVguS5GzsHfRpJrIeYpbb1z78IkyzdpDvxvyisaf.jpg" alt="4管"></td>
</tr>
</tbody></table>
<p><a href="https://www.bilibili.com/video/BV1mX4y1u7gN">4管版本演示视频</a></p>
<h2 id="原理图及BOM"><a href="#原理图及BOM" class="headerlink" title="原理图及BOM"></a>原理图及BOM</h2><h3 id="两管"><a href="#两管" class="headerlink" title="两管"></a>两管</h3><blockquote>
<p>2管的ZVS感应加热，功率管型号使用了IRFP260 场效应管，48V（53.5V）下工作，最大可以运行在1.5kW。</p>
</blockquote>
<p><img src="/2023/zvs-heating/wtqZ1Dcx43DrFtgx7jA72eU9LiCVK1J7cgHrtZmB.png" alt="2管"></p>
<p>Q1，Q2 ：IRFP260   2个<br>L1，L2：100uH 15A 2个<br>D1，D2：FR307        2个<br>D4，D5：1N4742     2个<br>R4，R5：10K 0.25W 2个<br>R2，R3：470R到750R，可根据实际情况调阻值，两个电阻的阻值要一样  2个<br>谐振电容：1200V 0.33uf 6个 ，（可直接联系丰明或者创格厂家定做，立式电容。）<br>R1：10K 0.25W  1个<br>LED ：5mm  颜色任意 1个<br>P2，P1：M4铜柱，高度30mm ， 6个</p>
<h3 id="四管"><a href="#四管" class="headerlink" title="四管"></a>四管</h3><p><img src="/2023/zvs-heating/x2azPc11vUShhwYlsvT5E2dJdlmoQ41MLQUG9xkM.png" alt="4管"></p>
<p>C1, C2 : 1200V 0.33 电磁炉电容 12个<br>D1, D2: FR307 2个<br>D3: 5mm LED 1个<br>D4, D5, D6, D7:1N4742 4个<br>L1, L2: 100uH,20A 2个<br>P1:HB9500-2P 1个<br>P2, P3, P5:XH2.54&#x2F;2P 3个<br>P4, P7, P8, P10: M4铜柱，高度30mm ， 6个<br>P6, P9：PCB-10端子 2个<br>Q1, Q2, Q3, Q4：IRFP260 4个<br>R1, R4, R5, R6, R7：10K，0.25W<br>R2, R3：470R 5W RX27-5</p>
<h3 id="其他元件"><a href="#其他元件" class="headerlink" title="其他元件"></a>其他元件</h3><blockquote>
<p>水泵，可以在淘宝买隔膜泵，买带电源的就行。</p>
<p>风机，买48V的12025或者12038的高速风机。注意风机的正负极不要插错，不能使用金属风机。</p>
<p>关于通信电源的选购，可以在咸鱼去找华为R4850或者R4875，中兴ZXD3000或者ZXD4000，台达4856。这东西新旧都有，看自己喜好。</p>
<p>关于加热线圈，如果是用于坩埚，那就把坩埚买来了在石英坩埚上面盘铜管，绕满就行。如果用于其他工件的加热，根据实际情况去做。线圈的直径越大，圈数越多，所需功率越大。一般用于直径60mm以下的工件加热，加热的时候注意耦合度，注意监测电流不要过载。</p>
<p>坩埚可以在淘宝买1kg坩埚套装，也可以用下面的小坩埚。</p>
</blockquote>
<p><img src="/2023/zvs-heating/PFyejGpA1QPrCeGvYZDhj5dvLOKCiq5ttLzTdasK.jpg" alt="坩埚"></p>
<p><img src="/2023/zvs-heating/ikEJdLdoSprsMhK5HF8YuVpQlf5mlbOccPjTIG5Q.png" alt="散热片尺寸"></p>
<h2 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h2><p><a href="https://lceda.cn/editor#project_id=b7443b19f4f0441da76def948c7d31c9">两管</a></p>
<p><a href="https://lceda.cn/editor#project_id=3fd16e4140594e3c8e97fd7ad751a1b2">四管</a></p>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>PCB设计</tag>
        <tag>电力电子</tag>
        <tag>电磁炉</tag>
      </tags>
  </entry>
</search>
