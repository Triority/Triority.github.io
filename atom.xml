<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Triority&#39;s blog</title>
  
  
  <link href="http://triority.cc/atom.xml" rel="self"/>
  
  <link href="http://triority.cc/"/>
  <updated>2025-10-16T14:58:41.782Z</updated>
  <id>http://triority.cc/</id>
  
  <author>
    <name>Triority</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用神经网络方法的视频水印消除</title>
    <link href="http://triority.cc/2025/watermark_removal_tool/"/>
    <id>http://triority.cc/2025/watermark_removal_tool/</id>
    <published>2025-10-16T14:58:41.782Z</published>
    <updated>2025-10-16T14:58:41.782Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="近期情况"><a href="#近期情况" class="headerlink" title="近期情况"></a>近期情况</h1><p>已经几个月没有在网站上更新文章了，已经到了被朋友催更的地步。一部分原因是前段时间在忙活毕业的事情，包括毕业论文和期末考试给我折磨的死去活来（主要是期末考试）；另一部分原因是一直在填坑，之前的好多项目做了一半没做完的，都在接着做，所有虽然没有新建文章但是之前的文章是一直在更新的啦</p><p>七月初毕业回家，全家出去玩了几天，回来之后开始谋划我都毕业旅行，打算去西藏和深圳。可惜去西藏的半个月花光了存款，深圳只好暂时放弃，不过考虑到温度，深圳香港寒假再去也是明智的选择。去西藏的经历的文章稍后推出（x</p><p>虽然原计划八月份要回学校干活了，但是宿舍没有解决，要在家等到9.2开学再去学校了。计划学点东西，包括深度学习，模电，信号处理（显然后两个是为自制短波台准备的，九月份开学去考b类操作证）以及背点单词准备六级。</p><p>去西藏无人机拍摄的素材有osd数据的叠加，虽然已经有现成的软件去除水印，但是吧神经网络学过那么久了从来没正经用过（pytorch学习笔记是已经有两年之久的2023年的文章了），于是就有了这篇文章</p><h1 id="水印数据"><a href="#水印数据" class="headerlink" title="水印数据"></a>水印数据</h1><p><img src="/2025/watermark_removal_tool/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250812155953.png"><br>上图即为穿越机拍摄的视频的截图。为了训练这个神经网络，首先需要大量对应的无水印视频和水印视频。电脑的机械硬盘里有大概700G的电影，都是没有任何水印的蓝光原盘高码率视频，除了超高码率的缺点以外非常适合用来生成数据集。最开始想直接做视频截取图片叠加水印，已经写好了视频抽帧的程序，但是后来想到应该让网络学习连续的帧片段而不是单独处理每一张图片，否则视频的连贯性肯定要出问题。反正两个造数据的程序都放在下面</p><p><code>video2img.py</code>:视频截取图片。由于视频码率很高处理特别慢还写了多进程<del>写了我好几个小时还没用上</del></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_processes = multiprocessing.cpu_count()</span><br><span class="line">img_time_interval = <span class="number">5</span></span><br><span class="line">img_size = (<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">img_Dir = <span class="string">&#x27;data\img&#x27;</span></span><br><span class="line">video_Dir = <span class="string">&#x27;D:\movie\data&#x27;</span></span><br><span class="line">video_Type = <span class="string">&#x27;.mkv&#x27;</span></span><br><span class="line">start_frame_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video2img</span>(<span class="params">video_path, img_path, interval, size, progress_queue, shared_total_counter</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_path):</span><br><span class="line">        os.makedirs(img_path)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: Could not open file <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    frame_interval = <span class="built_in">int</span>(fps * interval)</span><br><span class="line">    <span class="keyword">if</span> frame_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Frame interval is calculated as 0.&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> frame_count % frame_interval == <span class="number">0</span>:</span><br><span class="line">            frame = cv2.resize(frame, size)</span><br><span class="line">            output_image_path = os.path.join(img_path, <span class="string">f&quot;Frame_<span class="subst">&#123;shared_total_counter.value&#125;</span>.jpg&quot;</span>)</span><br><span class="line">            cv2.imwrite(output_image_path, frame)</span><br><span class="line">            shared_total_counter.value += <span class="number">1</span></span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">        progress_queue.put(<span class="number">1</span>)</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_video_files</span>(<span class="params">directory, file_type=<span class="string">&quot;.mkv&quot;</span></span>):</span><br><span class="line">    mkv_files_list = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(file_type):</span><br><span class="line">                full_path = os.path.join(root, file)</span><br><span class="line">                mkv_files_list.append(full_path)</span><br><span class="line">    <span class="keyword">return</span> mkv_files_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    video_path_list = find_video_files(video_Dir, video_Type)</span><br><span class="line">    frame_total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        cap = cv2.VideoCapture(i)</span><br><span class="line">        frame_total = frame_total + <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">        cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The total number of frames of the video is <span class="subst">&#123;frame_total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    progress_queue = manager.Queue()</span><br><span class="line">    frame_completed = <span class="number">0</span></span><br><span class="line">    shared_total_counter = manager.Value(<span class="string">&#x27;i&#x27;</span>, start_frame_num)</span><br><span class="line">    pool = multiprocessing.Pool(processes=num_processes)</span><br><span class="line">    pbar = tqdm(total=frame_total, desc=<span class="string">&quot;Video frame processing&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        pool.apply_async(video2img, args=(i, img_Dir, img_time_interval, img_size, progress_queue, shared_total_counter))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frame_completed &lt; frame_total:</span><br><span class="line">        _ = progress_queue.get()</span><br><span class="line">        frame_completed += <span class="number">1</span></span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pbar.close()</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nCompleted!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>video_mask.py</code>:视频截取指定帧长度的视频，并随机生成文字掩膜，保存视频片段、带水印的视频片段和掩膜图片。这个程序大部分是用Google AI Studio写的</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_processes = multiprocessing.cpu_count()</span><br><span class="line">img_time_interval = <span class="number">5</span></span><br><span class="line">img_size = (<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">img_Dir = <span class="string">&#x27;data\img&#x27;</span></span><br><span class="line">video_Dir = <span class="string">&#x27;D:\movie\data&#x27;</span></span><br><span class="line">video_Type = <span class="string">&#x27;.mkv&#x27;</span></span><br><span class="line">start_frame_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video2img</span>(<span class="params">video_path, img_path, interval, size, progress_queue, shared_total_counter</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_path):</span><br><span class="line">        os.makedirs(img_path)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: Could not open file <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    frame_interval = <span class="built_in">int</span>(fps * interval)</span><br><span class="line">    <span class="keyword">if</span> frame_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Frame interval is calculated as 0.&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> frame_count % frame_interval == <span class="number">0</span>:</span><br><span class="line">            frame = cv2.resize(frame, size)</span><br><span class="line">            output_image_path = os.path.join(img_path, <span class="string">f&quot;Frame_<span class="subst">&#123;shared_total_counter.value&#125;</span>.jpg&quot;</span>)</span><br><span class="line">            cv2.imwrite(output_image_path, frame)</span><br><span class="line">            shared_total_counter.value += <span class="number">1</span></span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">        progress_queue.put(<span class="number">1</span>)</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_video_files</span>(<span class="params">directory, file_type=<span class="string">&quot;.mkv&quot;</span></span>):</span><br><span class="line">    mkv_files_list = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(file_type):</span><br><span class="line">                full_path = os.path.join(root, file)</span><br><span class="line">                mkv_files_list.append(full_path)</span><br><span class="line">    <span class="keyword">return</span> mkv_files_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    video_path_list = find_video_files(video_Dir, video_Type)</span><br><span class="line">    frame_total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        cap = cv2.VideoCapture(i)</span><br><span class="line">        frame_total = frame_total + <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">        cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The total number of frames of the video is <span class="subst">&#123;frame_total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    progress_queue = manager.Queue()</span><br><span class="line">    frame_completed = <span class="number">0</span></span><br><span class="line">    shared_total_counter = manager.Value(<span class="string">&#x27;i&#x27;</span>, start_frame_num)</span><br><span class="line">    pool = multiprocessing.Pool(processes=num_processes)</span><br><span class="line">    pbar = tqdm(total=frame_total, desc=<span class="string">&quot;Video frame processing&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> video_path_list:</span><br><span class="line">        pool.apply_async(video2img, args=(i, img_Dir, img_time_interval, img_size, progress_queue, shared_total_counter))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frame_completed &lt; frame_total:</span><br><span class="line">        _ = progress_queue.get()</span><br><span class="line">        frame_completed += <span class="number">1</span></span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pbar.close()</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nCompleted!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p>由于要处理的数据是运动性极强的FPV视频，需要使用循环神经网络来让网络考虑上一帧内容，以及用卷积神经网络来恢复图像。因此使用带有ConvLSTM的U-Net结构。</p><p>输入图像经过4组卷积，维度扩展到512维，然后在这里通过ConvLSTM将当前信息和过去记忆拼接考虑，并通过四个门控更新记忆和生成输出和新的隐藏状态，再经过4组和前面卷积组有跳跃连接的转置卷积恢复图像尺寸，最终得到三维度的RGB输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBlock, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.convblock = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convblock(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvLSTMCell</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, hidden_dim, kernel_size, bias</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvLSTMCell, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_dim = input_dim</span><br><span class="line">        <span class="variable language_">self</span>.hidden_dim = hidden_dim</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.padding = kernel_size[<span class="number">0</span>] // <span class="number">2</span>, kernel_size[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将输入门、遗忘门、输出门和细胞门的卷积操作合并计算</span></span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels=<span class="variable language_">self</span>.input_dim + <span class="variable language_">self</span>.hidden_dim,</span><br><span class="line">                              out_channels=<span class="number">4</span> * <span class="variable language_">self</span>.hidden_dim,  <span class="comment"># 4 for i, f, o, g gates</span></span><br><span class="line">                              kernel_size=<span class="variable language_">self</span>.kernel_size,</span><br><span class="line">                              padding=<span class="variable language_">self</span>.padding,</span><br><span class="line">                              bias=<span class="variable language_">self</span>.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_tensor, cur_state</span>):</span><br><span class="line">        h_cur, c_cur = cur_state</span><br><span class="line">        combined = torch.cat([input_tensor, h_cur], dim=<span class="number">1</span>)</span><br><span class="line">        combined_conv = <span class="variable language_">self</span>.conv(combined)</span><br><span class="line">        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, <span class="variable language_">self</span>.hidden_dim, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 计算4*门</span></span><br><span class="line">        i = torch.sigmoid(cc_i)</span><br><span class="line">        f = torch.sigmoid(cc_f)</span><br><span class="line">        o = torch.sigmoid(cc_o)</span><br><span class="line">        g = torch.tanh(cc_g)</span><br><span class="line">        c_next = f * c_cur + i * g</span><br><span class="line">        h_next = o * torch.tanh(c_next)</span><br><span class="line">        <span class="keyword">return</span> h_next, c_next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_hidden</span>(<span class="params">self, batch_size, image_size</span>):</span><br><span class="line">        height, width = image_size</span><br><span class="line">        <span class="keyword">return</span> (torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device),</span><br><span class="line">                torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.final_conv(current_frame)</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br></pre></td></tr></table></figure><h1 id="改进和效果记录"><a href="#改进和效果记录" class="headerlink" title="改进和效果记录"></a>改进和效果记录</h1><h2 id="RGB三维输入"><a href="#RGB三维输入" class="headerlink" title="RGB三维输入"></a>RGB三维输入</h2><p>让网络直接学习加了水印的视频，训练了五轮的效果如下（由于显存限制，图像降低分辨率到480*270之后给网络计算）</p><table><thead><tr><th align="center"><div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"video":{"url":"/2025/watermark_removal_tool/b34be09f1bee268c4fc728776988c605.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"video":{"url":"/2025/watermark_removal_tool/9a9d89aef96d5c03e600bdaa5e65f646.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th></tr></thead><tbody><tr><td align="center">水印视频</td><td align="center">去水印视频</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>看起来网络已经学会了什么样的东西是文字水印并进行了一定处理。于是，为什么要让模型自己学习文字水印长啥样啊我明明有掩膜图片的，无人机视频也能用白色过滤选中水印区域啊，于是稍作修改，改成叠加了掩膜的四个通道输入</p><h2 id="RGB-Mask四维输入"><a href="#RGB-Mask四维输入" class="headerlink" title="RGB+Mask四维输入"></a>RGB+Mask四维输入</h2><p><code>train.py</code>: 训练程序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBlock, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.convblock = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convblock(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvLSTMCell</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, hidden_dim, kernel_size, bias</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvLSTMCell, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_dim = input_dim</span><br><span class="line">        <span class="variable language_">self</span>.hidden_dim = hidden_dim</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.padding = kernel_size[<span class="number">0</span>] // <span class="number">2</span>, kernel_size[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将输入门、遗忘门、输出门和细胞门的卷积操作合并计算</span></span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels=<span class="variable language_">self</span>.input_dim + <span class="variable language_">self</span>.hidden_dim,</span><br><span class="line">                              out_channels=<span class="number">4</span> * <span class="variable language_">self</span>.hidden_dim,  <span class="comment"># 4 for i, f, o, g gates</span></span><br><span class="line">                              kernel_size=<span class="variable language_">self</span>.kernel_size,</span><br><span class="line">                              padding=<span class="variable language_">self</span>.padding,</span><br><span class="line">                              bias=<span class="variable language_">self</span>.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_tensor, cur_state</span>):</span><br><span class="line">        h_cur, c_cur = cur_state</span><br><span class="line">        combined = torch.cat([input_tensor, h_cur], dim=<span class="number">1</span>)</span><br><span class="line">        combined_conv = <span class="variable language_">self</span>.conv(combined)</span><br><span class="line">        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, <span class="variable language_">self</span>.hidden_dim, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 计算4*门</span></span><br><span class="line">        i = torch.sigmoid(cc_i)</span><br><span class="line">        f = torch.sigmoid(cc_f)</span><br><span class="line">        o = torch.sigmoid(cc_o)</span><br><span class="line">        g = torch.tanh(cc_g)</span><br><span class="line">        c_next = f * c_cur + i * g</span><br><span class="line">        h_next = o * torch.tanh(c_next)</span><br><span class="line">        <span class="keyword">return</span> h_next, c_next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_hidden</span>(<span class="params">self, batch_size, image_size</span>):</span><br><span class="line">        height, width = image_size</span><br><span class="line">        <span class="keyword">return</span> (torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device),</span><br><span class="line">                torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.final_conv(current_frame)</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, sequence_length=<span class="number">10</span>, transform=<span class="literal">None</span>, size=(<span class="params"><span class="number">480</span>, <span class="number">270</span></span>)</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = pathlib.Path(root_dir)</span><br><span class="line">        <span class="variable language_">self</span>.clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;mask_clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;masks&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_dir.glob(<span class="string">&#x27;*.png&#x27;</span>)])</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_files), <span class="string">&quot;The number of dataset files does not match!&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.sequence_length = sequence_length</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform</span><br><span class="line">        <span class="comment"># 输入格式(width, height)，PyTorch(height, width)</span></span><br><span class="line">        <span class="variable language_">self</span>.target_size = size</span><br><span class="line">        <span class="variable language_">self</span>.target_size_torch = (size[<span class="number">1</span>], size[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.clips_files[idx])</span><br><span class="line">        mask_clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_clips_files[idx])</span><br><span class="line">        mask_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_files[idx])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">read_and_resize_frames</span>(<span class="params">video_path, num_frames, size</span>):</span><br><span class="line">            cap = cv2.VideoCapture(video_path)</span><br><span class="line">            total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_frames &lt; num_frames:</span><br><span class="line">                cap.release()</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Video <span class="subst">&#123;video_path&#125;</span> : total_frames (<span class="subst">&#123;total_frames&#125;</span>) &lt; num_frames (<span class="subst">&#123;num_frames&#125;</span>)。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            frames = []</span><br><span class="line">            start_frame_index = <span class="number">0</span></span><br><span class="line">            cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, start_frame_index)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_frames):</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                frame_resized = cv2.resize(frame, size, interpolation=cv2.INTER_AREA)</span><br><span class="line"></span><br><span class="line">                frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">                frames.append(TF.to_tensor(frame_rgb))</span><br><span class="line">            cap.release()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(frames) != num_frames:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Read frame failed: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> torch.stack(frames)</span><br><span class="line"></span><br><span class="line">        clips_seq = read_and_resize_frames(clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        masked_seq = read_and_resize_frames(mask_clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        mask_image = torchvision.io.read_image(<span class="built_in">str</span>(mask_path))</span><br><span class="line">        mask_image_resized = TF.resize(mask_image, <span class="variable language_">self</span>.target_size_torch, antialias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 归一化</span></span><br><span class="line">        clips_seq = clips_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line">        masked_seq = masked_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        mask_seq = mask_image_resized.<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">        mask_seq[mask_seq &gt; <span class="number">0.5</span>] = <span class="number">1.0</span></span><br><span class="line">        mask_seq[mask_seq &lt;= <span class="number">0.5</span>] = <span class="number">0.0</span></span><br><span class="line">        mask_seq = mask_seq.unsqueeze(<span class="number">0</span>).repeat(<span class="variable language_">self</span>.sequence_length, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        mask_seq = mask_seq[:, <span class="number">0</span>:<span class="number">1</span>, :, :]</span><br><span class="line">        masked_seq = torch.cat((masked_seq, mask_seq), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> masked_seq, clips_seq, mask_seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr = <span class="number">1e-4</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line">    sequence_len = <span class="number">4</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    dataset_path = <span class="string">&quot;D:\Dataset&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，路径为空字符串则从零开始训练且设置的轮次无效</span></span><br><span class="line">    load_model_path = <span class="string">&quot;model\epoch_7.pth&quot;</span></span><br><span class="line">    load_model_epoch = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line">    model = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    <span class="keyword">if</span> load_model_path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        load_model_epoch = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model.load_state_dict(torch.load(load_model_path, map_location=device))</span><br><span class="line"></span><br><span class="line">    criterion = nn.L1Loss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">    num_params = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Model has <span class="subst">&#123;num_params:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        shuffle=<span class="literal">True</span>,</span><br><span class="line">        num_workers=dataset_loader_workers,</span><br><span class="line">        pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        model.train()</span><br><span class="line">        total_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                restored_seq, h_last = model(masked_seq)</span><br><span class="line"></span><br><span class="line">                loss = criterion(restored_seq, clips_seq)</span><br><span class="line">                loss.backward()</span><br><span class="line">                optimizer.step()</span><br><span class="line">                total_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(loss=<span class="string">f&#x27;<span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        avg_loss = total_loss / <span class="built_in">len</span>(train_loader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss: <span class="subst">&#123;avg_loss:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        torch.save(model.state_dict(), <span class="string">f&quot;model\epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>infer.py</code>:有了训练的代码，这段程序就很容易了（懒得写了），以下内容由Google AI Studio生成。不要问为什么注释序号从2开始，因为第一部分被我整个删掉换成了<code>from train import RecurrentUNet</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> RecurrentUNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="comment"># 2. 推理主函数</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postprocess_and_write</span>(<span class="params">output_tensor, writer</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;辅助函数：后处理并写入文件 (无需修改)&quot;&quot;&quot;</span></span><br><span class="line">    output_tensor = output_tensor.squeeze(<span class="number">0</span>).cpu()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(output_tensor.shape[<span class="number">0</span>]):</span><br><span class="line">        frame = (output_tensor[i] + <span class="number">1.0</span>) / <span class="number">2.0</span></span><br><span class="line">        frame = (frame.clamp(<span class="number">0</span>, <span class="number">1</span>) * <span class="number">255</span>).byte()</span><br><span class="line">        frame_np = frame.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).numpy()</span><br><span class="line">        frame_bgr = cv2.cvtColor(frame_np, cv2.COLOR_RGB2BGR)</span><br><span class="line">        writer.write(frame_bgr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer_video_4channel</span>(<span class="params">config</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用4通道输入(RGB+Mask)对视频进行分段推理。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    device = torch.device(config[<span class="string">&quot;device&quot;</span>])</span><br><span class="line">    target_size = config[<span class="string">&quot;input_size&quot;</span>]</span><br><span class="line">    target_size_torch = (target_size[<span class="number">1</span>], target_size[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在加载模型...&quot;</span>)</span><br><span class="line">    <span class="comment"># *** 关键改动: in_channels=4 ***</span></span><br><span class="line">    <span class="comment"># 模型输出仍然是修复后的RGB图像，所以 out_channels=3</span></span><br><span class="line">    model = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    model.load_state_dict(torch.load(config[<span class="string">&quot;model_path&quot;</span>], map_location=device))</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;模型已加载到设备: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 新增: 加载并预处理掩膜 ---</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在加载并处理掩膜: <span class="subst">&#123;config[<span class="string">&#x27;mask_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    mask_image = torchvision.io.read_image(config[<span class="string">&#x27;mask_path&#x27;</span>])</span><br><span class="line">    mask_resized = TF.resize(mask_image, target_size_torch, antialias=<span class="literal">True</span>)</span><br><span class="line">    mask_tensor = mask_resized.<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">    mask_tensor[mask_tensor &gt; <span class="number">0.5</span>] = <span class="number">1.0</span></span><br><span class="line">    mask_tensor[mask_tensor &lt;= <span class="number">0.5</span>] = <span class="number">0.0</span></span><br><span class="line">    <span class="comment"># 确保是单通道 [1, H, W]，并放在CPU上以便和每帧拼接</span></span><br><span class="line">    mask_tensor_cpu = mask_tensor[<span class="number">0</span>:<span class="number">1</span>, :, :]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在处理输入视频: <span class="subst">&#123;config[<span class="string">&#x27;input_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    cap = cv2.VideoCapture(config[<span class="string">&quot;input_video_path&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">f&quot;无法打开视频文件: <span class="subst">&#123;config[<span class="string">&#x27;input_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    original_fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;VP09&#x27;</span>)</span><br><span class="line">    out_writer = cv2.VideoWriter(config[<span class="string">&quot;output_video_path&quot;</span>], fourcc, original_fps, target_size)</span><br><span class="line"></span><br><span class="line">    hidden_state = <span class="literal">None</span></span><br><span class="line">    chunk_frames = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">with</span> tqdm(total=total_frames, desc=<span class="string">&quot;正在推理&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 1. 预处理RGB帧</span></span><br><span class="line">                frame_resized = cv2.resize(frame, target_size, interpolation=cv2.INTER_AREA)</span><br><span class="line">                frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">                frame_tensor_3ch = TF.to_tensor(frame_rgb) * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 2. *** 关键改动: 拼接成4通道输入 ***</span></span><br><span class="line">                <span class="comment"># torch.cat 沿着第0维(通道维)拼接 [3,H,W] 和 [1,H,W] -&gt; [4,H,W]</span></span><br><span class="line">                four_channel_tensor = torch.cat([frame_tensor_3ch, mask_tensor_cpu], dim=<span class="number">0</span>)</span><br><span class="line">                chunk_frames.append(four_channel_tensor)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(chunk_frames) == config[<span class="string">&quot;chunk_size&quot;</span>]:</span><br><span class="line">                    input_chunk = torch.stack(chunk_frames).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">                    restored_chunk, hidden_state = model(input_chunk, hidden_state)</span><br><span class="line">                    postprocess_and_write(restored_chunk, out_writer)</span><br><span class="line">                    chunk_frames = []</span><br><span class="line"></span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> chunk_frames:</span><br><span class="line">                pbar.set_description(<span class="string">&quot;处理最后一段&quot;</span>)</span><br><span class="line">                input_chunk = torch.stack(chunk_frames).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">                restored_chunk, hidden_state = model(input_chunk, hidden_state)</span><br><span class="line">                postprocess_and_write(restored_chunk, out_writer)</span><br><span class="line"></span><br><span class="line">    cap.release()</span><br><span class="line">    out_writer.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n视频推理完成并保存到: <span class="subst">&#123;config[<span class="string">&#x27;output_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="comment"># 3. 配置和执行</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    inference_config = &#123;</span><br><span class="line">        <span class="string">&quot;model_path&quot;</span>: <span class="string">&quot;model/epoch_2.pth&quot;</span>,</span><br><span class="line">        <span class="comment"># 这是需要修复的视频，例如视频中某些区域被涂黑或有水印</span></span><br><span class="line">        <span class="string">&quot;input_video_path&quot;</span>: <span class="string">&quot;D:\Dataset\mask_clips\\0628.mp4&quot;</span>,</span><br><span class="line">        <span class="comment"># 这是对应的单张二值化掩膜图片，白色区域代表需要修复的地方</span></span><br><span class="line">        <span class="string">&quot;mask_path&quot;</span>: <span class="string">&quot;D:\Dataset\masks\\0628.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;output_video_path&quot;</span>: <span class="string">&quot;restored_video.mp4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input_size&quot;</span>: (<span class="number">480</span>, <span class="number">270</span>),</span><br><span class="line">        <span class="string">&quot;device&quot;</span>: <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;chunk_size&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pathlib.Path(inference_config[<span class="string">&quot;model_path&quot;</span>]).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 模型文件未找到 -&gt; <span class="subst">&#123;inference_config[<span class="string">&#x27;model_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> pathlib.Path(inference_config[<span class="string">&quot;input_video_path&quot;</span>]).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 输入视频未找到 -&gt; <span class="subst">&#123;inference_config[<span class="string">&#x27;input_video_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增对掩膜文件路径的检查</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> pathlib.Path(inference_config[<span class="string">&quot;mask_path&quot;</span>]).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 掩膜文件未找到 -&gt; <span class="subst">&#123;inference_config[<span class="string">&#x27;mask_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        infer_video_4channel(inference_config)</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"video":{"url":"/2025/watermark_removal_tool/video_0628.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><img src="/2025/watermark_removal_tool/mask0628.png"></th></tr></thead><tbody><tr><td align="center">水印视频</td><td align="center">掩膜图片</td></tr><tr><td align="center"><div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"video":{"url":"/2025/watermark_removal_tool/restored_epoch2_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td><td align="center"><div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"video":{"url":"/2025/watermark_removal_tool/restored_epoch8_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td></tr><tr><td align="center">训练2轮去水印效果</td><td align="center">训练8轮去水印效果</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><h2 id="最后卷积层溢出"><a href="#最后卷积层溢出" class="headerlink" title="最后卷积层溢出"></a>最后卷积层溢出</h2><p>此时去水印已经有一定效果，但是在纯色区域和动态区域出现了疑似像素值溢出的彩色条带状区域。</p><div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"video":{"url":"/2025/watermark_removal_tool/明显的白色溢出.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>考虑原因可能是网络最后一层是卷积层，输出的值没有范围限制，因此在后面追加了一个tanh层，现在RecurrentUNet类变成这样（只是在__init__和生成帧的两个位置改了两行）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tanh = nn.Tanh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.tanh(<span class="variable language_">self</span>.final_conv(current_frame))</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br></pre></td></tr></table></figure><p>经过10轮的训练和测试，溢出问题得到解决：</p><table><thead><tr><th align="center"><div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"video":{"url":"/2025/watermark_removal_tool/epoch5_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><div id="dplayer11" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer11"),"video":{"url":"/2025/watermark_removal_tool/epoch10_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><div id="dplayer12" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer12"),"video":{"url":"/2025/watermark_removal_tool/epoch10_0628_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th></tr></thead><tbody><tr><td align="center">训练5轮去水印效果</td><td align="center">训练10轮去水印效果</td><td align="center">与前面的测试作比较</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>看起来训练轮次的增加效果不是那么明显，在继续训练的同时排查一下是不是激活函数导致的梯度消失问题。以及考虑是否是损失函数的缺陷，考虑增加对抗损失？</p><h2 id="梯度消失和可视化"><a href="#梯度消失和可视化" class="headerlink" title="梯度消失和可视化"></a>梯度消失和可视化</h2><p>对于梯度消失问题，用TensorBoard进行参数可视化，检查梯度范数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;runs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录梯度范数到TensorBoard，在backward()和step()之间</span></span><br><span class="line">    <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">        <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 使用writer.add_scalar来记录，标签格式 &#x27;grads/层名&#x27; 可以在 TensorBoard 中分组</span></span><br><span class="line">            writer.add_scalar(<span class="string">f&#x27;grads/<span class="subst">&#123;name&#125;</span>_norm&#x27;</span>, param.grad.norm(<span class="number">2</span>), epoch)</span><br><span class="line">    <span class="comment"># 记录总的梯度范数，以监控梯度爆炸</span></span><br><span class="line">    total_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;grads/total_norm&#x27;</span>, total_norm, epoch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束，关闭writer</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p>此时在终端输入启动命令即可在web查看具体图表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=runs</span><br></pre></td></tr></table></figure><p>得到的数据如下，发生梯度消失的可能性比较大，特别是ConvLSTM梯度已经到-7次的数量级，很有可能与此处使用的多个sigmoid和tanh激活函数有关。</p><table><thead><tr><th align="center"><img src="/2025/watermark_removal_tool/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816140036.png"></th><th align="center"><img src="/2025/watermark_removal_tool/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816140051.png"></th></tr></thead><tbody><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>考虑增加应该跳跃连接来让梯度传播跳过ConvLSTM层？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ConvLSTM</span></span><br><span class="line">h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">hidden_state = (h, c)</span><br><span class="line"><span class="comment">#下一行为改动内容，原来是current_frame = h</span></span><br><span class="line">current_frame = h + current_frame</span><br></pre></td></tr></table></figure><p>反正先试一下，在10轮的基础上继续训练一轮</p><table><thead><tr><th align="center"><div id="dplayer13" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer13"),"video":{"url":"/2025/watermark_removal_tool/epoch10_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><div id="dplayer14" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer14"),"video":{"url":"/2025/watermark_removal_tool/epoch11_14938_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th></tr></thead><tbody><tr><td align="center">原来10轮模型效果</td><td align="center">改动后训练1轮也就是第11轮效果</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>效果不太明显，同时发生了图片整体的偏色，当然也不排除训练次数不够的原因，有待继续训练测试，下面是梯度图像</p><table><thead><tr><th align="center"><img src="/2025/watermark_removal_tool/%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816151838.png"></th><th align="center"><img src="/2025/watermark_removal_tool/%E4%BF%A1%E6%88%AA%E5%9B%BE_20250816151901.png"></th></tr></thead><tbody><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><h2 id="对抗损失函数"><a href="#对抗损失函数" class="headerlink" title="对抗损失函数"></a>对抗损失函数</h2><p>使用多层3D卷积网络作为判别器的对抗网络的推理作为损失函数<br>train_gan.py:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> RecurrentUNet, VideoDataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDiscriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        layers = []</span><br><span class="line">        <span class="comment"># 3D卷积输入视频片段[Batch, Channels, Time, Height, Width]，卷积核在时间维度上覆盖了3帧，在空间高度上覆盖4个像素</span></span><br><span class="line">        <span class="comment"># stride滑动步长，在时间维度上每次只移动1帧，在空间上每次移动2个像素，起到下采样的作用</span></span><br><span class="line">        <span class="comment"># padding输入视频数据块的三个维度的两侧填充0</span></span><br><span class="line">        layers.append(nn.Conv3d(in_channels, features[<span class="number">0</span>], kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="comment"># inplace=True会直接在存储输入数据的内存上进行计算并覆盖，节省一些GPU显存</span></span><br><span class="line">        layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(features) - <span class="number">1</span>):</span><br><span class="line">            layers.append(nn.Conv3d(features[i], features[i + <span class="number">1</span>],kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>))</span><br><span class="line">            layers.append(nn.InstanceNorm3d(features[i + <span class="number">1</span>]))</span><br><span class="line">            layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        layers.append(nn.Conv3d(features[-<span class="number">1</span>], <span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="variable language_">self</span>.model = nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.model(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr_gen = <span class="number">2e-4</span></span><br><span class="line">    lr_disc = <span class="number">2e-4</span></span><br><span class="line">    L1_weigth = <span class="number">100</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line">    sequence_len = <span class="number">4</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    dataset_path = <span class="string">&quot;D:\Dataset&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，输入0则从零开始训练</span></span><br><span class="line">    load_model_epoch = <span class="number">0</span></span><br><span class="line">    load_model_path_gen = <span class="string">&quot;&quot;</span></span><br><span class="line">    load_model_path_disc = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    gen = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    disc = VideoDiscriminator(in_channels=<span class="number">3</span>).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> load_model_epoch != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Generator from <span class="subst">&#123;load_model_path_gen&#125;</span>&quot;</span>)</span><br><span class="line">        gen.load_state_dict(torch.load(load_model_path_gen, map_location=device))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Discriminator from <span class="subst">&#123;load_model_path_disc&#125;</span>&quot;</span>)</span><br><span class="line">        disc.load_state_dict(torch.load(load_model_path_disc, map_location=device))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adam优化器，学习率lr，beta1默认值0.9的动量大约是过去10个时间步梯度的平均，降低到0.5降低动量惯性</span></span><br><span class="line">    <span class="comment"># beta2默认值0.999的二阶矩估计大约是过去1000个时间步梯度平方的平均，保持较高的值有助于保持自适应学习率的稳定性，防止因为单次梯度爆炸而导致学习率剧烈变化</span></span><br><span class="line">    opt_gen = optim.Adam(gen.parameters(), lr=lr_gen, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    opt_disc = optim.Adam(disc.parameters(), lr=lr_disc, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    <span class="comment"># 二元交叉熵和L1损失函数</span></span><br><span class="line">    adversarial_loss_fn = nn.BCEWithLogitsLoss()</span><br><span class="line">    l1_loss_fn = nn.L1Loss()</span><br><span class="line"></span><br><span class="line">    num_params_gen = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> gen.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    num_params_disc = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> disc.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Generator has <span class="subst">&#123;num_params_gen:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Discriminator has <span class="subst">&#123;num_params_disc:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>,num_workers=dataset_loader_workers, pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        total_loss_g = <span class="number">0.0</span></span><br><span class="line">        total_loss_d = <span class="number">0.0</span></span><br><span class="line">        gen.train()</span><br><span class="line">        disc.train()</span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                <span class="comment"># masked_seq: [B, T, 4, H, W], clips_seq: [B, T, 3, H, W]</span></span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># disc训练</span></span><br><span class="line">                clips_fake, _ = gen(masked_seq)</span><br><span class="line">                opt_disc.zero_grad()</span><br><span class="line">                <span class="comment"># 将视频维度从[B, T, C, H, W]转换到[B, C, T, H, W]以匹配Conv3d</span></span><br><span class="line">                real_clip_for_disc = clips_seq.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                fake_clip_for_disc = clips_fake.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                <span class="comment"># 判别器分别推理真实视频与全1张量、虚假视频与全0张量，计算二元交叉熵损失</span></span><br><span class="line">                disc_real = disc(real_clip_for_disc)</span><br><span class="line">                loss_disc_real = adversarial_loss_fn(disc_real, torch.ones_like(disc_real))</span><br><span class="line">                <span class="comment"># 用 .detach() 阻止梯度传回生成器</span></span><br><span class="line">                disc_fake = disc(fake_clip_for_disc.detach())</span><br><span class="line">                loss_disc_fake = adversarial_loss_fn(disc_fake, torch.zeros_like(disc_fake))</span><br><span class="line">                <span class="comment"># 判别器总损失</span></span><br><span class="line">                loss_disc = (loss_disc_real + loss_disc_fake) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">                loss_disc.backward()</span><br><span class="line">                opt_disc.step()</span><br><span class="line">                total_loss_d += loss_disc.item()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 训练生成器</span></span><br><span class="line">                opt_gen.zero_grad()</span><br><span class="line">                disc_fake_for_gen = disc(fake_clip_for_disc)</span><br><span class="line">                loss_g_adv = adversarial_loss_fn(disc_fake_for_gen, torch.ones_like(disc_fake_for_gen))</span><br><span class="line">                loss_g_l1 = l1_loss_fn(clips_fake, clips_seq) * L1_weigth</span><br><span class="line">                loss_g = loss_g_adv + loss_g_l1</span><br><span class="line">                loss_g.backward()</span><br><span class="line">                opt_gen.step()</span><br><span class="line">                total_loss_g += loss_g.item()</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(</span><br><span class="line">                    Loss_D=<span class="string">f&#x27;<span class="subst">&#123;loss_disc.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    Loss_G=<span class="string">f&#x27;<span class="subst">&#123;loss_g.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_adv=<span class="string">f&#x27;<span class="subst">&#123;loss_g_adv.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_L1=<span class="string">f&#x27;<span class="subst">&#123;loss_g_l1.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            avg_loss_g = total_loss_g / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_d = total_loss_d / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss_G: <span class="subst">&#123;avg_loss_g:<span class="number">.4</span>f&#125;</span>, avg_loss_D: <span class="subst">&#123;avg_loss_d:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pathlib.Path(<span class="string">&quot;model_gan&quot;</span>).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        torch.save(gen.state_dict(), <span class="string">f&quot;model_gan/gen_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line">        torch.save(disc.state_dict(), <span class="string">f&quot;model_gan/disc_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用对抗损失后出现了一些进步和问题。14轮的模型在天空纯色区域明显好于13轮，但是出现少量溢出。再看15轮的结果就只剩溢出了……</p><table><thead><tr><th align="center"><div id="dplayer15" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer15"),"video":{"url":"/2025/watermark_removal_tool/GAN_epoch13_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><div id="dplayer16" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer16"),"video":{"url":"/2025/watermark_removal_tool/GAN_epoch14_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th><th align="center"><div id="dplayer17" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer17"),"video":{"url":"/2025/watermark_removal_tool/GAN_epoch15_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></th></tr></thead><tbody><tr><td align="center">13轮</td><td align="center">14轮</td><td align="center">15轮</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>这部分训练是和前一节的梯度消失解决同时在两台电脑上测试的，因此并没有在convlstm引入跳跃连接，考虑到有可能由此引发这一问题，因此下面是加入了这一结构之后的训练效果。很明显溢出问题再次消失。</p><h2 id="残差网络"><a href="#残差网络" class="headerlink" title="残差网络"></a>残差网络</h2><p>虽然在convLSTM层加入了跳跃连接，但是在u-net部分的卷积层仍然出现了一定的梯度消失。不仅在梯度数据上，实际效果上从十几轮开始几乎就没有进步了。因此将残差网络的思想也加入这里，在卷积块加入了一个1*1的卷积层直连输入输出。卷积层的激活函数也从ReLU改为LeakyReLU，避免出现死亡节点。此外初始化遗忘门值改为1让信息全部通过，在初期避免进入饱和区（后来看这一点收效甚微，循环网络部分依然有严重的梯度消失）。判别器的第一层也加入了归一化层避免梯度消失或爆炸。</p><p>此外还增加了tensorboard对训练数据进行检测，包括梯度权重和损失的可视化。</p><p>由于额外加入了多个卷积层，对显存的占用更高，因此将输入图像序列长度sequence_len从4改为3，以能在我的8G显存3060ti上运行。由于这样减少了计算量，在我的电脑上单个epoch训练时间从70分钟缩短到55分钟。</p><p>由于改动巨大，github上开启了一个新的分支<code>dev</code>来和之前的代码<code>main</code>相区别。如果后续再有大规模修改这部分内容将以<code>GAN_GRAD</code>分支保存并在<code>dev</code>继续改进。</p><p>tarin.py:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvBlock, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.convblock = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(out_channels),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> in_channels != out_channels:</span><br><span class="line">            <span class="variable language_">self</span>.shortcut = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(out_channels))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.shortcut = nn.Identity()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.final_activation = nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.convblock(x) + <span class="variable language_">self</span>.shortcut(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.final_activation(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvLSTMCell</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, hidden_dim, kernel_size, bias</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvLSTMCell, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.input_dim = input_dim</span><br><span class="line">        <span class="variable language_">self</span>.hidden_dim = hidden_dim</span><br><span class="line">        <span class="variable language_">self</span>.kernel_size = kernel_size</span><br><span class="line">        <span class="variable language_">self</span>.padding = kernel_size[<span class="number">0</span>] // <span class="number">2</span>, kernel_size[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.bias = bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将输入门、遗忘门、输出门和细胞门的卷积操作合并计算</span></span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels=<span class="variable language_">self</span>.input_dim + <span class="variable language_">self</span>.hidden_dim,</span><br><span class="line">                              out_channels=<span class="number">4</span> * <span class="variable language_">self</span>.hidden_dim,  <span class="comment"># 4 for i, f, o, g gates</span></span><br><span class="line">                              kernel_size=<span class="variable language_">self</span>.kernel_size,</span><br><span class="line">                              padding=<span class="variable language_">self</span>.padding,</span><br><span class="line">                              bias=<span class="variable language_">self</span>.bias)</span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            <span class="comment"># 初始化遗忘门的偏置为1.0，尽可能地保持打开</span></span><br><span class="line">            forget_gate_bias_start = hidden_dim</span><br><span class="line">            forget_gate_bias_end = <span class="number">2</span> * hidden_dim</span><br><span class="line">            <span class="variable language_">self</span>.conv.bias.data[forget_gate_bias_start:forget_gate_bias_end].fill_(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_tensor, cur_state</span>):</span><br><span class="line">        h_cur, c_cur = cur_state</span><br><span class="line">        combined = torch.cat([input_tensor, h_cur], dim=<span class="number">1</span>)</span><br><span class="line">        combined_conv = <span class="variable language_">self</span>.conv(combined)</span><br><span class="line">        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, <span class="variable language_">self</span>.hidden_dim, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 计算4*门</span></span><br><span class="line">        i = torch.sigmoid(cc_i)</span><br><span class="line">        f = torch.sigmoid(cc_f)</span><br><span class="line">        o = torch.sigmoid(cc_o)</span><br><span class="line">        g = torch.tanh(cc_g)</span><br><span class="line">        c_next = f * c_cur + i * g</span><br><span class="line">        h_next = o * torch.tanh(c_next)</span><br><span class="line">        <span class="keyword">return</span> h_next, c_next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_hidden</span>(<span class="params">self, batch_size, image_size</span>):</span><br><span class="line">        height, width = image_size</span><br><span class="line">        <span class="keyword">return</span> (torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device),</span><br><span class="line">                torch.zeros(batch_size, <span class="variable language_">self</span>.hidden_dim, height, width, device=<span class="variable language_">self</span>.conv.weight.device))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RecurrentUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, out_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>(RecurrentUNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downs = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.ups = nn.ModuleList()</span><br><span class="line">        <span class="variable language_">self</span>.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            <span class="variable language_">self</span>.downs.append(ConvBlock(in_channels, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ConvLSTM瓶颈</span></span><br><span class="line">        <span class="variable language_">self</span>.bottleneck_dim = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.conv_lstm = ConvLSTMCell(input_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      hidden_dim=<span class="variable language_">self</span>.bottleneck_dim,</span><br><span class="line">                                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>), bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        in_channels = features[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">reversed</span>(features):</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(nn.ConvTranspose2d(in_channels, feature, kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">            <span class="variable language_">self</span>.ups.append(ConvBlock(feature * <span class="number">2</span>, feature))</span><br><span class="line">            in_channels = feature</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出</span></span><br><span class="line">        <span class="variable language_">self</span>.final_conv = nn.Conv2d(features[<span class="number">0</span>], out_channels, kernel_size=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tanh = nn.Tanh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, hidden_state=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 视频片段x的期望形状:[batch_size, sequence_length, Channels, H, W]</span></span><br><span class="line">        batch_size, seq_len, _, H, W = x.shape</span><br><span class="line">        <span class="keyword">if</span> hidden_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bottleneck_h, bottleneck_w = H // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>)), W // (<span class="number">2</span> ** (<span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>))</span><br><span class="line">            hidden_state = <span class="variable language_">self</span>.conv_lstm.init_hidden(batch_size, (bottleneck_h, bottleneck_w))</span><br><span class="line">        outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列帧循环</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(seq_len):</span><br><span class="line">            current_frame = x[:, t, :, :, :]</span><br><span class="line">            skip_connections_t = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 编码器</span></span><br><span class="line">            <span class="keyword">for</span> i, down <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.downs):</span><br><span class="line">                current_frame = down(current_frame)</span><br><span class="line">                skip_connections_t.append(current_frame)</span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.downs) - <span class="number">1</span>:</span><br><span class="line">                    current_frame = <span class="variable language_">self</span>.pool(current_frame)</span><br><span class="line">            <span class="comment"># ConvLSTM</span></span><br><span class="line">            h, c = <span class="variable language_">self</span>.conv_lstm(input_tensor=current_frame, cur_state=hidden_state)</span><br><span class="line">            hidden_state = (h, c)</span><br><span class="line">            current_frame = h + current_frame</span><br><span class="line">            <span class="comment"># 反转跳跃连接列表</span></span><br><span class="line">            skip_connections_t = skip_connections_t[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解码器</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.ups), <span class="number">2</span>):</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i](current_frame)</span><br><span class="line">                skip_connection = skip_connections_t[i // <span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 如果池化导致奇数尺寸，上采样后的尺寸与跳跃连接不匹配，则强制修改尺寸</span></span><br><span class="line">                <span class="keyword">if</span> current_frame.shape != skip_connection.shape:</span><br><span class="line">                    current_frame = nn.functional.interpolate(current_frame, size=skip_connection.shape[<span class="number">2</span>:])</span><br><span class="line">                concat_skip = torch.cat((skip_connection, current_frame), dim=<span class="number">1</span>)</span><br><span class="line">                current_frame = <span class="variable language_">self</span>.ups[i + <span class="number">1</span>](concat_skip)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成帧</span></span><br><span class="line">            frame_output = <span class="variable language_">self</span>.tanh(<span class="variable language_">self</span>.final_conv(current_frame))</span><br><span class="line">            outputs.append(frame_output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(outputs, dim=<span class="number">1</span>), hidden_state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, sequence_length=<span class="number">10</span>, transform=<span class="literal">None</span>, size=(<span class="params"><span class="number">480</span>, <span class="number">270</span></span>)</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = pathlib.Path(root_dir)</span><br><span class="line">        <span class="variable language_">self</span>.clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;mask_clips&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.mask_dir = <span class="variable language_">self</span>.root_dir / <span class="string">&#x27;masks&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_clips_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_clips_dir.glob(<span class="string">&#x27;*.mp4&#x27;</span>)])</span><br><span class="line">        <span class="variable language_">self</span>.mask_files = <span class="built_in">sorted</span>([p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.mask_dir.glob(<span class="string">&#x27;*.png&#x27;</span>)])</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_clips_files) == <span class="built_in">len</span>(<span class="variable language_">self</span>.mask_files), <span class="string">&quot;The number of dataset files does not match!&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.sequence_length = sequence_length</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform</span><br><span class="line">        <span class="comment"># 输入格式(width, height)，PyTorch(height, width)</span></span><br><span class="line">        <span class="variable language_">self</span>.target_size = size</span><br><span class="line">        <span class="variable language_">self</span>.target_size_torch = (size[<span class="number">1</span>], size[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.clips_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.clips_files[idx])</span><br><span class="line">        mask_clips_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_clips_files[idx])</span><br><span class="line">        mask_path = <span class="built_in">str</span>(<span class="variable language_">self</span>.mask_files[idx])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">read_and_resize_frames</span>(<span class="params">video_path, num_frames, size</span>):</span><br><span class="line">            cap = cv2.VideoCapture(video_path)</span><br><span class="line">            total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_frames &lt; num_frames:</span><br><span class="line">                cap.release()</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Video <span class="subst">&#123;video_path&#125;</span> : total_frames (<span class="subst">&#123;total_frames&#125;</span>) &lt; num_frames (<span class="subst">&#123;num_frames&#125;</span>)。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            frames = []</span><br><span class="line">            start_frame_index = <span class="number">0</span></span><br><span class="line">            cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, start_frame_index)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_frames):</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                frame_resized = cv2.resize(frame, size, interpolation=cv2.INTER_AREA)</span><br><span class="line"></span><br><span class="line">                frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)</span><br><span class="line">                frames.append(TF.to_tensor(frame_rgb))</span><br><span class="line">            cap.release()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(frames) != num_frames:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Read frame failed: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> torch.stack(frames)</span><br><span class="line"></span><br><span class="line">        clips_seq = read_and_resize_frames(clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        masked_seq = read_and_resize_frames(mask_clips_path, <span class="variable language_">self</span>.sequence_length, <span class="variable language_">self</span>.target_size)</span><br><span class="line">        mask_image = torchvision.io.read_image(<span class="built_in">str</span>(mask_path))</span><br><span class="line">        mask_image_resized = TF.resize(mask_image, <span class="variable language_">self</span>.target_size_torch, antialias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 归一化</span></span><br><span class="line">        clips_seq = clips_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line">        masked_seq = masked_seq * <span class="number">2.0</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        mask_seq = mask_image_resized.<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">        mask_seq[mask_seq &gt; <span class="number">0.5</span>] = <span class="number">1.0</span></span><br><span class="line">        mask_seq[mask_seq &lt;= <span class="number">0.5</span>] = <span class="number">0.0</span></span><br><span class="line">        mask_seq = mask_seq.unsqueeze(<span class="number">0</span>).repeat(<span class="variable language_">self</span>.sequence_length, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        mask_seq = mask_seq[:, <span class="number">0</span>:<span class="number">1</span>, :, :]</span><br><span class="line">        masked_seq = torch.cat((masked_seq, mask_seq), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> masked_seq, clips_seq, mask_seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr = <span class="number">1e-4</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line">    sequence_len = <span class="number">4</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    dataset_path = <span class="string">r&quot;D:/Dataset&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，路径为空字符串则从零开始训练且设置的轮次无效</span></span><br><span class="line">    load_model_path = <span class="string">r&quot;model/epoch_10.pth&quot;</span></span><br><span class="line">    load_model_epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    writer = SummaryWriter(<span class="string">r&#x27;runs/gradient_monitoring&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line">    model = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    <span class="keyword">if</span> load_model_path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        load_model_epoch = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model.load_state_dict(torch.load(load_model_path, map_location=device))</span><br><span class="line"></span><br><span class="line">    criterion = nn.L1Loss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">    num_params = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Model has <span class="subst">&#123;num_params:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        shuffle=<span class="literal">True</span>,</span><br><span class="line">        num_workers=dataset_loader_workers,</span><br><span class="line">        pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        model.train()</span><br><span class="line">        total_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">                restored_seq, h_last = model(masked_seq)</span><br><span class="line"></span><br><span class="line">                loss = criterion(restored_seq, clips_seq)</span><br><span class="line">                loss.backward()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">                    <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="comment"># 使用writer.add_scalar来记录，标签格式 &#x27;grads/层名&#x27; 可以在 TensorBoard 中分组</span></span><br><span class="line">                        writer.add_scalar(<span class="string">f&#x27;grads/<span class="subst">&#123;name&#125;</span>_norm&#x27;</span>, param.grad.norm(<span class="number">2</span>), epoch)</span><br><span class="line">                <span class="comment"># 记录总的梯度范数，以监控梯度爆炸</span></span><br><span class="line">                total_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;grads/total_norm&#x27;</span>, total_norm, epoch)</span><br><span class="line"></span><br><span class="line">                optimizer.step()</span><br><span class="line">                total_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(loss=<span class="string">f&#x27;<span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        avg_loss = total_loss / <span class="built_in">len</span>(train_loader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss: <span class="subst">&#123;avg_loss:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        torch.save(model.state_dict(), <span class="string">f&quot;model/epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tarin_GAN.py:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> TF</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> RecurrentUNet, VideoDataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoDiscriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels=<span class="number">3</span>, features=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        layers = []</span><br><span class="line">        <span class="comment"># 3D卷积输入视频片段[Batch, Channels, Time, Height, Width]，卷积核在时间维度上覆盖了3帧，在空间高度上覆盖4个像素</span></span><br><span class="line">        <span class="comment"># stride滑动步长，在时间维度上每次只移动1帧，在空间上每次移动2个像素，起到下采样的作用</span></span><br><span class="line">        <span class="comment"># padding输入视频数据块的三个维度的两侧填充0</span></span><br><span class="line">        layers.append(nn.Conv3d(in_channels, features[<span class="number">0</span>], kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        layers.append(nn.InstanceNorm3d(features[<span class="number">0</span>]))</span><br><span class="line">        <span class="comment"># inplace=True会直接在存储输入数据的内存上进行计算并覆盖，节省一些GPU显存</span></span><br><span class="line">        layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(features) - <span class="number">1</span>):</span><br><span class="line">            layers.append(nn.Conv3d(features[i], features[i + <span class="number">1</span>],kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>))</span><br><span class="line">            layers.append(nn.InstanceNorm3d(features[i + <span class="number">1</span>]))</span><br><span class="line">            layers.append(nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        layers.append(nn.Conv3d(features[-<span class="number">1</span>], <span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="variable language_">self</span>.model = nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.model(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lr_gen = <span class="number">2e-4</span></span><br><span class="line">    lr_disc = <span class="number">2e-4</span></span><br><span class="line">    L1_weigth = <span class="number">100</span></span><br><span class="line">    batch_size = <span class="number">2</span></span><br><span class="line">    epochs = <span class="number">100</span></span><br><span class="line">    sequence_len = <span class="number">3</span></span><br><span class="line">    size = (<span class="number">480</span>, <span class="number">270</span>)</span><br><span class="line">    dataset_loader_workers = <span class="number">6</span></span><br><span class="line">    Gradient_intervals = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集和模型保存路径</span></span><br><span class="line">    dataset_path = <span class="string">r&quot;D:/Dataset&quot;</span></span><br><span class="line">    model_save_dir = <span class="string">r&quot;model_gan_2&quot;</span></span><br><span class="line">    <span class="comment"># 继续训练时加载模型路径和已完成轮次，输入0则从零开始训练</span></span><br><span class="line">    load_model_epoch = <span class="number">9</span></span><br><span class="line">    load_model_path_gen = <span class="string">r&quot;model_gan_2/gen_epoch_9.pth&quot;</span></span><br><span class="line">    load_model_path_disc = <span class="string">r&quot;model_gan_2/disc_epoch_9.pth&quot;</span></span><br><span class="line"></span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Using device: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer = SummaryWriter(<span class="string">&#x27;runs/GAN_2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    gen = RecurrentUNet(in_channels=<span class="number">4</span>, out_channels=<span class="number">3</span>).to(device)</span><br><span class="line">    disc = VideoDiscriminator(in_channels=<span class="number">3</span>).to(device)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> load_model_epoch != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Generator from <span class="subst">&#123;load_model_path_gen&#125;</span>&quot;</span>)</span><br><span class="line">        gen.load_state_dict(torch.load(load_model_path_gen, map_location=device))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading Discriminator from <span class="subst">&#123;load_model_path_disc&#125;</span>&quot;</span>)</span><br><span class="line">        disc.load_state_dict(torch.load(load_model_path_disc, map_location=device))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adam优化器，学习率lr，beta1默认值0.9的动量大约是过去10个时间步梯度的平均，降低到0.5降低动量惯性</span></span><br><span class="line">    <span class="comment"># beta2默认值0.999的二阶矩估计大约是过去1000个时间步梯度平方的平均，保持较高的值有助于保持自适应学习率的稳定性，防止因为单次梯度爆炸而导致学习率剧烈变化</span></span><br><span class="line">    opt_gen = optim.Adam(gen.parameters(), lr=lr_gen, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    opt_disc = optim.Adam(disc.parameters(), lr=lr_disc, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">    <span class="comment"># 二元交叉熵和L1损失函数</span></span><br><span class="line">    adversarial_loss_fn = nn.BCEWithLogitsLoss()</span><br><span class="line">    l1_loss_fn = nn.L1Loss()</span><br><span class="line"></span><br><span class="line">    num_params_gen = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> gen.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    num_params_disc = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> disc.parameters() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Generator has <span class="subst">&#123;num_params_gen:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Discriminator has <span class="subst">&#123;num_params_disc:,&#125;</span> trainable parameters.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Preparing dataset...&quot;</span>)</span><br><span class="line">    train_dataset = VideoDataset(root_dir=dataset_path, sequence_length=sequence_len, size=size)</span><br><span class="line">    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>,num_workers=dataset_loader_workers, pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    writer.add_graph(gen, <span class="built_in">next</span>(<span class="built_in">iter</span>(train_loader))[<span class="number">0</span>].to(device))</span><br><span class="line">    writer.add_graph(disc, <span class="built_in">next</span>(<span class="built_in">iter</span>(train_loader))[<span class="number">1</span>].permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>).to(device))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(load_model_epoch, epochs):</span><br><span class="line">        total_loss_g = <span class="number">0.0</span></span><br><span class="line">        total_loss_d = <span class="number">0.0</span></span><br><span class="line">        total_loss_g_L1 = <span class="number">0.0</span></span><br><span class="line">        total_loss_g_adv = <span class="number">0.0</span></span><br><span class="line">        gen.train()</span><br><span class="line">        disc.train()</span><br><span class="line">        <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(train_loader), desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>&quot;</span>, unit=<span class="string">&quot;batch&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">            <span class="keyword">for</span> batch_idx, (masked_seq, clips_seq, mask_seq) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">                <span class="comment"># masked_seq: [B, T, 4, H, W], clips_seq: [B, T, 3, H, W]</span></span><br><span class="line">                masked_seq = masked_seq.to(device)</span><br><span class="line">                clips_seq = clips_seq.to(device)</span><br><span class="line">                mask_seq = mask_seq.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># disc训练</span></span><br><span class="line">                clips_fake, _ = gen(masked_seq)</span><br><span class="line">                opt_disc.zero_grad()</span><br><span class="line">                <span class="comment"># 将视频维度从[B, T, C, H, W]转换到[B, C, T, H, W]以匹配Conv3d</span></span><br><span class="line">                real_clip_for_disc = clips_seq.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                fake_clip_for_disc = clips_fake.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                <span class="comment"># 判别器分别推理真实视频与全1张量、虚假视频与全0张量，计算二元交叉熵损失</span></span><br><span class="line">                disc_real = disc(real_clip_for_disc)</span><br><span class="line">                loss_disc_real = adversarial_loss_fn(disc_real, torch.ones_like(disc_real))</span><br><span class="line">                <span class="comment"># 用 .detach() 阻止梯度传回生成器</span></span><br><span class="line">                disc_fake = disc(fake_clip_for_disc.detach())</span><br><span class="line">                loss_disc_fake = adversarial_loss_fn(disc_fake, torch.zeros_like(disc_fake))</span><br><span class="line">                <span class="comment"># 判别器总损失</span></span><br><span class="line">                loss_disc = (loss_disc_real + loss_disc_fake) / <span class="number">2</span></span><br><span class="line">                loss_disc.backward()</span><br><span class="line">                <span class="comment"># 记录梯度权重</span></span><br><span class="line">                <span class="keyword">if</span> batch_idx % Gradient_intervals == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> name, param <span class="keyword">in</span> disc.named_parameters():</span><br><span class="line">                        <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                            <span class="comment"># 使用 f-string 为每个梯度直方图创建唯一的、有组织的标签</span></span><br><span class="line">                            <span class="comment"># &#x27;Gradients/&#x27; 会在 TensorBoard 中创建一个名为 Gradients 的分组</span></span><br><span class="line">                            writer.add_histogram(</span><br><span class="line">                                tag=<span class="string">f&#x27;Grad_disc/<span class="subst">&#123;name&#125;</span>&#x27;</span>,values=param.grad,global_step=epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                opt_disc.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 训练生成器</span></span><br><span class="line">                opt_gen.zero_grad()</span><br><span class="line">                disc_fake_for_gen = disc(fake_clip_for_disc)</span><br><span class="line">                loss_g_adv = adversarial_loss_fn(disc_fake_for_gen, torch.ones_like(disc_fake_for_gen))</span><br><span class="line">                loss_g_l1 = l1_loss_fn(clips_fake, clips_seq) * L1_weigth</span><br><span class="line">                loss_g = loss_g_adv + loss_g_l1</span><br><span class="line">                loss_g.backward()</span><br><span class="line">                <span class="keyword">if</span> batch_idx % Gradient_intervals == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> name, param <span class="keyword">in</span> gen.named_parameters():</span><br><span class="line">                        <span class="keyword">if</span> param.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                            writer.add_histogram(tag=<span class="string">f&#x27;Grad_gan/<span class="subst">&#123;name&#125;</span>&#x27;</span>,values=param.grad,global_step=epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                opt_gen.step()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 统计记录</span></span><br><span class="line">                total_loss_g += loss_g.item()</span><br><span class="line">                total_loss_d += loss_disc.item()</span><br><span class="line">                total_loss_g_L1 += loss_g_l1.item()</span><br><span class="line">                total_loss_g_adv += loss_g_adv.item()</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_g_l1&#x27;</span>, loss_g_l1.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_g_adv&#x27;</span>, loss_g_adv.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_g&#x27;</span>, loss_g.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/loss_disc&#x27;</span>, loss_disc.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/D_real&#x27;</span>, loss_disc_real.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line">                writer.add_scalar(<span class="string">&#x27;Loss/D_fake&#x27;</span>, loss_disc_fake.item(), epoch * <span class="built_in">len</span>(train_loader) + batch_idx)</span><br><span class="line"></span><br><span class="line">                pbar.set_postfix(</span><br><span class="line">                    D_real=<span class="string">f&#x27;<span class="subst">&#123;loss_disc_real.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    D_fake=<span class="string">f&#x27;<span class="subst">&#123;loss_disc_fake.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    Loss_D=<span class="string">f&#x27;<span class="subst">&#123;loss_disc.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    Loss_G=<span class="string">f&#x27;<span class="subst">&#123;loss_g.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_adv=<span class="string">f&#x27;<span class="subst">&#123;loss_g_adv.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>,</span><br><span class="line">                    G_L1=<span class="string">f&#x27;<span class="subst">&#123;loss_g_l1.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            avg_loss_g = total_loss_g / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_d = total_loss_d / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_g_L1 = total_loss_g_L1 / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            avg_loss_d_adv = total_loss_g_adv / <span class="built_in">len</span>(train_loader)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;--- <span class="subst">&#123;datetime.datetime.now():%H:%M:%S&#125;</span>: Epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span> avg_loss_G: <span class="subst">&#123;avg_loss_g:<span class="number">.4</span>f&#125;</span>, avg_loss_D: <span class="subst">&#123;avg_loss_d:<span class="number">.4</span>f&#125;</span>, avg_loss_g_L1: <span class="subst">&#123;avg_loss_g_L1:<span class="number">.4</span>f&#125;</span>, avg_loss_d_adv: <span class="subst">&#123;avg_loss_d_adv:<span class="number">.4</span>f&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pathlib.Path(<span class="string">&quot;model_gan&quot;</span>).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        torch.save(gen.state_dict(), <span class="string">f&quot;<span class="subst">&#123;model_save_dir&#125;</span>/gen_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line">        torch.save(disc.state_dict(), <span class="string">f&quot;<span class="subst">&#123;model_save_dir&#125;</span>/disc_epoch_<span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经过测试，效果提升极其显著。这里将前一两节内容结合得到的模型和多处改进的当前模型的推理结果进行对比，两者在5、10、20、30轮的效果分别如何：</p><table><thead><tr><th align="center">—</th><th align="center">仅在循环网络部分加入一处跳跃连接</th><th align="center">卷积层也加入残差网络等修改之后</th></tr></thead><tbody><tr><td align="center">5轮</td><td align="center"><div id="dplayer18" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer18"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_5_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td><td align="center"><div id="dplayer19" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer19"),"video":{"url":"/2025/watermark_removal_tool/GAN_2_5_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td></tr><tr><td align="center">10轮</td><td align="center"><div id="dplayer20" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer20"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_10_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td><td align="center"><div id="dplayer21" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer21"),"video":{"url":"/2025/watermark_removal_tool/GAN_2_10_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td></tr><tr><td align="center">20轮</td><td align="center"><div id="dplayer22" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer22"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_20_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td><td align="center">bad asset path...</td></tr><tr><td align="center">30轮</td><td align="center"><div id="dplayer24" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer24"),"video":{"url":"/2025/watermark_removal_tool/GAN_1_30_restored_video.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></td><td align="center">bad asset path...</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">用于消除去西藏的无人机视频素材的osd数据。以及最近的情况（好几个月没有更新文章啦）</summary>
    
    
    
    <category term="文档&amp;笔记" scheme="http://triority.cc/categories/%E6%96%87%E6%A1%A3-%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://triority.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="C++" scheme="http://triority.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>本科毕业设计论文：巷道移动机器人SLAM技术研究</title>
    <link href="http://triority.cc/2025/Visual-SLAM/"/>
    <id>http://triority.cc/2025/Visual-SLAM/</id>
    <published>2025-02-06T20:41:20.000Z</published>
    <updated>2025-10-16T14:58:41.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计划完成的任务目标"><a href="#计划完成的任务目标" class="headerlink" title="计划完成的任务目标"></a>计划完成的任务目标</h1><ul><li>制作一台移动机器人</li><li>使用三维激光雷达和毫米波雷达进行建图</li><li>使用深度相机和imu数据融合进行建图和导航</li></ul><h1 id="三维激光雷达建图的实现（LeGO-LOAM）"><a href="#三维激光雷达建图的实现（LeGO-LOAM）" class="headerlink" title="三维激光雷达建图的实现（LeGO-LOAM）"></a>三维激光雷达建图的实现（LeGO-LOAM）</h1><ul><li>算法：<a href="https://github.com/RobustFieldAutonomyLab/LeGO-LOAM">LeGO-LOAM</a></li><li>激光雷达：<a href="RS-Helios-5515%E4%BA%A7%E5%93%81%E6%89%8B%E5%86%8C.pdf">RS-Helios-5515</a></li></ul><h2 id="通讯连接和基本配置"><a href="#通讯连接和基本配置" class="headerlink" title="通讯连接和基本配置"></a>通讯连接和基本配置</h2><p>首先用交换机连接激光雷达和电脑，为了方便我决定在vmware中开发，系统为<code>Ubuntu 18.04</code>安装了<code>ROS1-melodic</code>。网络设置为桥接模式，系统内设置网络手动ip<code>192.168.1.102</code>，子网掩码<code>255.255.255.0</code>（雷达默认ip<code>192.168.1.200</code>发送udp数据包到<code>192.168.1.102</code>的端口<code>6699``7788</code>）</p><p>新建ros工作空间后<code>src</code>文件夹放入<a href="5515_SDK.rar">雷达ros驱动</a>和<a href="rslidar_msg-master.zip">雷达话题定义(驱动文档也有说明)</a>，按照里面的要求进行配置修改即可，以及<code>LeGO-LOAM</code>代码包，除了按照文档说明进行修改以外，还要将<code>CMakeLists.txt</code>第四行的c++版本14:<code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++14 -O3&quot;)</code>。</p><p>设置雷达数据为我们使用的32线雷达，修改<code>LeGO-LOAM/include/utility.h</code>，这里我补充一些注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Mine</span><br><span class="line">// 传感器垂直方向上的扫描线数量</span><br><span class="line">extern const int N_SCAN = 32;</span><br><span class="line">// 水平方向上扫描一周360度所采集的点数</span><br><span class="line">extern const int Horizon_SCAN = 1800;</span><br><span class="line">// 水平方向上的角度分辨率</span><br><span class="line">extern const float ang_res_x = 0.2;</span><br><span class="line">// 垂直方向上的角度分辨率（某些垂直角度分辨率可能不是均匀的，可以写平均值）</span><br><span class="line">extern const float ang_res_y = 2.2;</span><br><span class="line">// 最底部扫描线的垂直角度</span><br><span class="line">extern const float ang_bottom = 55.0;</span><br><span class="line">// 地面点分割或移除算法中，指定了一个扫描线的索引号。索引号小于或等于groundScanInd的扫描线上的点，会被认为是潜在的地面点</span><br><span class="line">extern const int groundScanInd = 7;</span><br></pre></td></tr></table></figure><p>由于雷达数据的格式不同，使用<a href="https://github.com/HViktorTsoi/rs_to_velodyne">rs_to_velodyne</a>进行格式转化，<code>A ros tool for converting Robosense pointcloud to Velodyne pointcloud format, which can be directly used for downstream algorithm, such as LOAM, LEGO-LOAM, LIO-SAM, etc.</code><br>使用<code>rostopic list</code>可以看到代码接收雷达topic<code>/rslidar_points</code>转换后发送到<code>/velodyne_points</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">triority@ubuntu:~/Desktop/lidar$ rostopic list</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/rslidar_points</span><br><span class="line">/velodyne_points</span><br></pre></td></tr></table></figure><p>这里我由于openGL驱动问题导致rviz报错闪退，即使不闪退也不显示任何点云，要将其改为软件驱动。由于rviz错误log为空文件导致我很久没有找到问题所在。没有在物理机上试过不知道和vmware有没有关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LIBGL_ALWAYS_SOFTWARE=1</span><br></pre></td></tr></table></figure><p>按照LeGO-LOAM文档要求在实际运行和使用rosbag时需要使用不同的roslaunch配置，具体是修改<code>LeGO-LOAM/launch/run.launch</code>的第四行，仿真下设置为false否则为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;param name=&quot;/use_sim_time&quot; value=&quot;false&quot; /&gt;</span><br></pre></td></tr></table></figure><p>由于雷达驱动和LeGO-LOAM都会启动rviz，我这里直接修改雷达驱动启动文件<code>rslidar_sdk-dev_opt/launch/start.launch</code>注释掉rviz的启动内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">  &lt;node pkg=&quot;rslidar_sdk&quot; name=&quot;rslidar_sdk_node&quot; type=&quot;rslidar_sdk_node&quot; output=&quot;screen&quot;&gt;</span><br><span class="line">    &lt;param name=&quot;config_path&quot; value=&quot;&quot;/&gt;</span><br><span class="line">  &lt;/node&gt;</span><br><span class="line">  &lt;!-- rviz --&gt;</span><br><span class="line">  &lt;!--&lt;node pkg=&quot;rviz&quot; name=&quot;rviz&quot; type=&quot;rviz&quot; args=&quot;-d $(find rslidar_sdk)/rviz/rviz.rviz&quot; /&gt;--&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><h2 id="建图测试"><a href="#建图测试" class="headerlink" title="建图测试"></a>建图测试</h2><p>习惯上我喜欢先单独启动roscore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure><p>启动雷达：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch rslidar_sdk start.launch</span><br></pre></td></tr></table></figure><p>启动雷达数据转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rs_to_velodyne rs_to_velodyne XYZIRT XIRI</span><br></pre></td></tr></table></figure><p>启动建图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch lego_loam run.launch</span><br></pre></td></tr></table></figure><p>这时就可以使用激光雷达的数据进行建图了，下图是我所在的实验室<br><img src="/2025/Visual-SLAM/69a805494e5c171e8fcc88a78ff7393.png"></p><h2 id="地图保存和数据记录"><a href="#地图保存和数据记录" class="headerlink" title="地图保存和数据记录"></a>地图保存和数据记录</h2><p>如果需要保存建好的地图，在建图快要结束时，打开终端订阅全局点云地图的话题<code>/laser_cloud_surround</code>保存为bag包，然后转bag为pcd，使用<br><code>pcl_viewer</code>打开点云地图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">triority@ubuntu:~/Desktop/lidar$ rosbag record /laser_cloud_surround</span><br><span class="line">[ INFO] [1744615722.083300899]: Subscribing to /laser_cloud_surround</span><br><span class="line">[ INFO] [1744615722.089056296]: Recording to &#x27;2025-04-14-00-28-42.bag&#x27;.</span><br><span class="line"></span><br><span class="line">triority@ubuntu:~/Desktop/lidar$ rosrun pcl_ros bag_to_pcd 2025-04-14-00-28-42.bag /laser_cloud_surround pcd1</span><br><span class="line">Creating directory pcd1</span><br><span class="line">Saving recorded sensor_msgs::PointCloud2 messages on topic /laser_cloud_surround to pcd1</span><br><span class="line">Got 1681 data points in frame /camera_init on topic /laser_cloud_surround with the following fields: x y z intensity</span><br><span class="line">Data saved to pcd1/1744615726.458191872.pcd</span><br><span class="line"></span><br><span class="line">triority@ubuntu:~/Desktop/lidar$ pcl_viewer pcd1/1744615726.458191872.pcd</span><br></pre></td></tr></table></figure><p>此外也可以直接记录雷达原始数据，便于后续对算法进行改进测试比较等</p><h1 id="LeGO-LOAM源码分析"><a href="#LeGO-LOAM源码分析" class="headerlink" title="LeGO-LOAM源码分析"></a>LeGO-LOAM源码分析</h1><details>  <summary>引用一下来自google ai studio的源码分析作为大致方向上的参考</summary>  好的，我们来大致分析一下 LeGO-LOAM 的源代码结构和核心思想。LeGO-LOAM (Lightweight and Ground-Optimized Lidar Odometry and Mapping) 是对经典 LOAM 算法的改进，特别针对地面车辆（如自动驾驶汽车）的应用场景进行了优化。<p><strong>核心目标：</strong> 实现低计算量、实时的激光雷达里程计和建图，并特别优化地面点的处理。</p><p><strong>主要代码结构 (基于常见的 ROS 实现):</strong></p><p>LeGO-LOAM 通常由以下几个核心的 ROS 节点（或 Nodelet）组成，它们通过 ROS Topic 进行通信：</p><ol><li><p><strong><code>imageProjection</code> 节点 (预处理模块):</strong></p><ul><li><strong>输入:</strong> 原始激光雷达点云数据 (<code>sensor_msgs/PointCloud2</code>)，通常来自 <code>/points_raw</code> 或类似 topic。</li><li><strong>核心功能:</strong><ul><li><strong>点云分割 (Segmentation):</strong><ul><li><strong>地面分割 (Ground Segmentation):</strong> 这是 LeGO-LOAM 的关键优化之一。它将点云投影到一个深度图（Range Image）上，然后利用点与点之间的角度关系或简单的平面拟合方法，快速地将地面点与非地面点分离。这极大地减少了后续处理的点云数量，并移除了可能不稳定的地面特征。</li><li><strong>点云聚类 (Point Cloud Clustering):</strong> 对分割出的非地面点进行聚类（例如使用基于距离或连通性的方法），将点云分割成独立的物体或障碍物。小的、稀疏的聚类会被滤除，以消除噪声和不可靠的特征点。</li></ul></li><li><strong>点云信息标记:</strong> 为每个点打上标签（地面点、分割后的聚类ID等），并计算每个点的距离、角度等信息，方便后续处理。</li></ul></li><li><strong>输出:</strong><ul><li>分割后的点云 (<code>/segmented_cloud</code>)：包含非地面点的聚类结果。</li><li>地面点云 (<code>/ground_cloud</code>)：单独发布的地面点。</li><li>外点&#x2F;噪声点云 (<code>/outlier_cloud</code>)。</li><li>点云信息 (<code>/cloud_info</code>)：包含每个点的标签、范围、起始&#x2F;结束索引等辅助信息。</li></ul></li></ul></li><li><p><strong><code>featureAssociation</code> 节点 (特征提取与里程计模块):</strong></p><ul><li><strong>输入:</strong> <code>imageProjection</code> 节点输出的分割点云、地面点云和点云信息。</li><li><strong>核心功能:</strong><ul><li><strong>特征提取 (Feature Extraction):</strong><ul><li>基于分割后的非地面点云，计算每个点的曲率（Curvature）。</li><li>根据曲率大小，选取<strong>边缘点 (Edge Points)</strong> (曲率大的点) 和<strong>平面点 (Planar Points)</strong> (曲率小的点)。</li><li>为了提高鲁棒性，会排除一些不稳定的特征点（例如，平行于激光束方向的点、被遮挡的点）。</li><li>LeGO-LOAM 的一个特点是它会分别处理边缘特征和平面特征。</li></ul></li><li><strong>激光雷达里程计 (Lidar Odometry):</strong><ul><li>执行<strong>扫描到扫描 (Scan-to-Scan)</strong> 的匹配。</li><li>将当前帧提取的边缘点与上一帧的边缘线进行匹配（点到线距离最小化）。</li><li>将当前帧提取的平面点与上一帧的平面片进行匹配（点到面距离最小化）。</li><li><strong>两步优化 (Two-Step Optimization):</strong> LeGO-LOAM 的另一个关键优化。它首先利用地面点（被视为一个大平面）和分割出的平面点进行匹配，估计车辆的 [z, roll, pitch]；然后利用边缘点匹配，估计车辆的 [x, y, yaw]。这种分离优化降低了计算复杂度，并提高了对特定运动的估计精度。</li><li>使用优化算法（通常是 Levenberg-Marquardt, LM）迭代求解最小化点到线&#x2F;点到面距离的位姿变换（旋转和平移）。</li></ul></li></ul></li><li><strong>输出:</strong><ul><li>高频、但可能存在漂移的激光雷达里程计位姿 (<code>/laser_odom_to_init</code>)。</li><li>当前帧提取的特征点云（角点 <code>/laser_cloud_corner_last</code>，平面点 <code>/laser_cloud_surf_last</code>），供建图模块使用。</li></ul></li></ul></li><li><p><strong><code>mapOptmization</code> 节点 (建图与位姿优化模块):</strong></p><ul><li><strong>输入:</strong> <code>featureAssociation</code> 节点输出的里程计位姿、特征点云。</li><li><strong>核心功能:</strong><ul><li><strong>地图维护 (Map Maintenance):</strong><ul><li>接收来自 <code>featureAssociation</code> 的特征点云和粗略位姿。</li><li>根据里程计位姿，将历史关键帧的特征点（边缘点和平面点）变换到世界坐标系下，构建一个全局的特征地图（通常用 Voxel Grid 或 K-D Tree 存储，以便快速查找）。</li></ul></li><li><strong>扫描到地图 (Scan-to-Map) 匹配:</strong><ul><li>将当前帧的特征点与全局地图中的对应特征（边缘线、平面片）进行匹配。</li><li>再次使用优化算法（如 LM），最小化当前帧特征点到地图中对应特征的距离，进一步优化当前帧的位姿。</li><li>这个过程频率较低（相对于 Odometry），但可以有效修正 Odometry 累积的漂移。</li></ul></li><li><strong>(可选) 回环检测 (Loop Closure):</strong> 一些 LeGO-LOAM 的变种或后续工作会加入回环检测模块，通过识别之前访问过的场景来进一步消除累积误差，但这在原始 LeGO-LOAM 中可能不是核心部分。</li></ul></li><li><strong>输出:</strong><ul><li>经过地图优化后的、更精确的位姿 (<code>/aft_mapped_to_init</code>)。</li><li>构建的全局点云地图 (<code>/map</code>) 或特征地图。</li></ul></li></ul></li><li><p><strong><code>transformFusion</code> 节点 (位姿融合与发布):</strong></p><ul><li><strong>输入:</strong> <code>featureAssociation</code> 输出的高频里程计位姿，<code>mapOptmization</code> 输出的低频优化位姿。</li><li><strong>核心功能:</strong> 融合这两个位姿信息。通常是将低频的精确位姿作为基准，然后用高频的里程计增量来插值，得到一个平滑、连续、高频发布的最终位姿估计。</li><li><strong>输出:</strong> 最终的车辆位姿 (<code>/integrated_to_init</code> 或 TF 变换)。</li></ul></li></ol><p><strong>核心算法与技术总结:</strong></p><ol><li><strong>范围图像 (Range Image):</strong> 高效处理结构化激光雷达数据（如 Velodyne）的基础。</li><li><strong>地面分割:</strong> 关键优化，显著减少计算量，移除不稳定特征。</li><li><strong>点云聚类:</strong> 过滤噪声，聚焦于有意义的物体。</li><li><strong>曲率计算:</strong> 用于区分边缘点和平面点。</li><li><strong>特征关联 (点到线&#x2F;点到面):</strong> LOAM 系列算法的核心匹配方式。</li><li><strong>两步位姿优化:</strong> LeGO-LOAM 的特色，分离优化不同自由度，提高效率和精度。</li><li><strong>迭代优化算法 (Levenberg-Marquardt):</strong> 用于求解非线性最小二乘问题（位姿估计）。</li><li><strong>Scan-to-Scan &amp; Scan-to-Map 框架:</strong> LOAM 的经典框架，高频里程计+低频地图优化。</li></ol><p><strong>代码阅读建议:</strong></p><ol><li><strong>从 <code>imageProjection</code> 开始:</strong> 理解预处理流程，特别是地面分割和聚类是如何实现的。</li><li><strong>接着看 <code>featureAssociation</code>:</strong> 关注特征提取（曲率计算、点选择）和两步优化（如何分别使用平面&#x2F;地面点和边缘点进行匹配和优化）。</li><li><strong>然后是 <code>mapOptmization</code>:</strong> 理解地图如何构建和维护，以及 Scan-to-Map 匹配如何修正位姿。</li><li><strong>最后看 <code>transformFusion</code>:</strong> 理解如何融合高频和低频位姿。</li><li><strong>关注 ROS 接口:</strong> 理解各个节点之间的输入输出（订阅和发布的 Topic），以及它们传递的数据结构 (<code>sensor_msgs/PointCloud2</code>, 自定义消息如 <code>cloud_info</code>, <code>geometry_msgs/PoseStamped</code>, <code>nav_msgs/Odometry</code>, TF)。</li><li><strong>查看 <code>launch</code> 文件和 <code>config</code> 文件:</strong> 这些文件定义了节点如何启动以及各种参数（如特征提取的阈值、优化迭代次数等），理解参数对算法性能的影响很重要。</li><li><strong>核心库依赖:</strong> LeGO-LOAM 大量使用了 PCL (Point Cloud Library) 进行点云处理，以及 Eigen 进行线性代数运算。熟悉这两个库会对理解代码很有帮助。</li></ol><p>总的来说，LeGO-LOAM 的源代码体现了在经典 LOAM 基础上，针对特定应用场景（地面车辆）进行巧妙优化的思想，通过地面分割和两步优化等手段，在保证精度的同时显著降低了计算复杂度。</p></details><h1 id="VINS-Mono视觉slam实现"><a href="#VINS-Mono视觉slam实现" class="headerlink" title="VINS-Mono视觉slam实现"></a>VINS-Mono视觉slam实现</h1><p>数据集<a href="https://github.com/kminoda/VIODE/tree/master">The VIODE dataset</a></p><p>视觉slam算法<a href="https://github.com/HKUST-Aerial-Robotics/VINS-Mono">VINS-Mono</a></p><h1 id="使用wsl环境开发深度相机（已弃用）"><a href="#使用wsl环境开发深度相机（已弃用）" class="headerlink" title="使用wsl环境开发深度相机（已弃用）"></a>使用wsl环境开发深度相机（已弃用）</h1><div class="note danger modern"><p>此部分内容已经弃用，不打算使用深度相机了，但该过程未来仍有可能有参考价值，故保留。以及在wsl环境下即使挂载了usb设备，intel驱动程序也会报错检测不到深度相机，这一问题还没有解决。</p></div><p>目前还在寒假期间没有实物制作的条件，打算先跑跑仿真，准备好技术路线。目前打算在windows系统中使用wsl2的ubuntu20进行开发</p><details><summary>wsl内安装ros后无法启动roscore的问题</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">triority@Triority-Desktop:~$ roscore</span><br><span class="line">... logging to /home/triority/.ros/log/499be312-e486-11ef-add2-75fb32d30971/roslaunch-Triority-Desktop-36755.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is 1GB.</span><br></pre></td></tr></table></figure>启动之后卡死在这里。主要原因是虚拟机内网络问题。$ROS_MASTER_URI通常是http://localhost:11311，$ROS_IP通常是WSL的IP地址，这里没有显示，指定为本机IP后问题解决：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">triority@Triority-Desktop:~$ echo $ROS_MASTER_URI</span><br><span class="line">http://localhost:11311</span><br><span class="line">triority@Triority-Desktop:~$ echo $ROS_IP</span><br><span class="line"></span><br><span class="line">triority@Triority-Desktop:~$ export ROS_IP=192.168.0.100</span><br><span class="line">triority@Triority-Desktop:~$ echo $ROS_IP</span><br><span class="line">192.168.0.100</span><br><span class="line"></span><br><span class="line">triority@Triority-Desktop:~$ roscore</span><br><span class="line">... logging to /home/triority/.ros/log/f7cd5362-e486-11ef-add2-75fb32d30971/roslaunch-Triority-Desktop-36776.log</span><br><span class="line">Checking log directory for disk usage. This may take a while.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://192.168.0.100:42277/</span><br><span class="line">ros_comm version 1.17.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: noetic</span><br><span class="line"> * /rosversion: 1.17.0</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [36784]</span><br><span class="line">ROS_MASTER_URI=http://192.168.0.100:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id to f7cd5362-e486-11ef-add2-75fb32d30971</span><br><span class="line">process[rosout-1]: started with pid [36794]</span><br><span class="line">started core service [/rosout]</span><br><span class="line">^C[rosout-1] killing on exit</span><br><span class="line">[master] killing on exit</span><br><span class="line">shutting down processing monitor...</span><br><span class="line">... shutting down processing monitor complete</span><br><span class="line">done</span><br></pre></td></tr></table></figure></details><p>创建ros的工作空间之后在src文件夹新建一个包用于试验代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catkin_create_pkg lab roscpp rospy std_msgs</span><br></pre></td></tr></table></figure><p><strong>wsl挂载usb设备：</strong></p><p>使用usb3.2连接电脑，要在wsl中使用usb设备请参考<a href="https://learn.microsoft.com/zh-cn/windows/wsl/connect-usb">微软的文档</a>。</p><p>首先安装<a href="https://github.com/dorssel/usbipd-win/releases">USBIPD-WIN项目</a></p><p>在windows powershell中使用<code>usbipd list</code>查看usb设备列表，然后根据总线ID共享设备<code>usbipd bind --busid 4-4</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Triority&gt; usbipd list</span><br><span class="line">Connected:</span><br><span class="line">BUSID  VID:PID    DEVICE                                                        STATE</span><br><span class="line">1-2    1462:7d42  USB 输入设备                                                  Not shared</span><br><span class="line">1-5    1ea7:0064  USB 输入设备                                                  Not shared</span><br><span class="line">1-6    1a2c:9ef4  USB 输入设备                                                  Not shared</span><br><span class="line">1-14   8087:0026  英特尔(R) 无线 Bluetooth(R)                                   Not shared</span><br><span class="line">2-1    8086:0b3a  Intel(R) RealSense(TM) Depth Camera 435i Depth, Intel(R) ...  Not shared</span><br><span class="line"></span><br><span class="line">Persisted:</span><br><span class="line">GUID                                  DEVICE</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来应该附加USB设备<code>usbipd attach --wsl --busid 2-1</code>，但是报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Triority&gt; usbipd attach --wsl --busid 2-1</span><br><span class="line">usbipd: info: Using WSL distribution &#x27;Ubuntu-20.04&#x27; to attach; the device will be available in all WSL 2 distributions.</span><br><span class="line">usbipd: info: Detected networking mode &#x27;virtioproxy&#x27;.</span><br><span class="line">usbipd: error: Networking mode &#x27;virtioproxy&#x27; is not supported.</span><br></pre></td></tr></table></figure><p>显然需要修改网络模式，这里改成<code>mirrored</code>，这个模式的作用在<a href="https://learn.microsoft.com/en-us/windows/wsl/networking#mirrored-mode-networking">微软的文档有介绍</a></p><p>也就是配置文件<code>.wslconfig</code>内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=mirrored</span><br></pre></td></tr></table></figure><p>此时将wsl重启<code>wsl --shutdown</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Triority&gt; usbipd attach --wsl --busid 2-1</span><br><span class="line">usbipd: info: Using WSL distribution &#x27;Ubuntu-20.04&#x27; to attach; the device will be available in all WSL 2 distributions.</span><br><span class="line">usbipd: info: Detected networking mode &#x27;mirrored&#x27;.</span><br><span class="line">usbipd: info: Using IP address 127.0.0.1 to reach the host.</span><br><span class="line">WSL usbip: error: Attach Request for 2-1 failed - Device busy (exported)</span><br><span class="line">usbipd: warning: The device appears to be used by Windows; stop the software using the device, or bind the device using the &#x27;--force&#x27; option.</span><br><span class="line">usbipd: error: Failed to attach device with busid &#x27;2-1&#x27;.</span><br></pre></td></tr></table></figure><p>按照要求强制执行<code>usbipd bind --busid 2-1 --force</code>并重启电脑</p><p>此时重新<code>usbipd attach --wsl --busid 2-1</code>并在ubuntu中查看usb设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">triority@Triority-Desktop:~$ lsusb</span><br><span class="line">Bus 002 Device 002: ID 8086:0b3a Intel Corp. Intel(R) RealSense(TM) Depth Camera 435i</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p>Intel D435i相关链接：</p><ul><li><a href="https://www.intelrealsense.com/depth-camera-d435i/">商品页面</a></li><li><a href="https://www.intelrealsense.com/download/21345/?tmstv=1697035582">datasheet</a></li><li><a href="https://github.com/IntelRealSense/librealsense/releases">SDK</a></li><li><a href="https://github.com/IntelRealSense/realsense-ros/tree/ros1-legacy">ros1使用</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="文档&amp;笔记" scheme="http://triority.cc/categories/%E6%96%87%E6%A1%A3-%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ROS" scheme="http://triority.cc/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记</title>
    <link href="http://triority.cc/2025/c++/"/>
    <id>http://triority.cc/2025/c++/</id>
    <published>2025-01-23T09:33:04.000Z</published>
    <updated>2025-10-16T14:58:41.781Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>这篇文章是c++的学习笔记，仅作为我自己的备忘录使用，不包含我已经非常熟悉的内容，所以不适合入门看哦，最好有其他语言基础，当然我猜这玩意也没人看（）</p><p>所有示例程序都是我自己重新写的简化举例可放心参考。</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="windows下开发：VS-studio"><a href="#windows下开发：VS-studio" class="headerlink" title="windows下开发：VS studio"></a>windows下开发：VS studio</h2><p>目前最新版本是2022，直接下载安装就能用，一切都已经准备好了</p><h2 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h2><p>一些开源开发者朋友们得知我要学一遍c++，非常热情的想要教会我，并且建议我用vscode连接wsl在ubuntu虚拟机内使用clang&#x2F;msvc开发</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="数据类型长度和范围"><a href="#数据类型长度和范围" class="headerlink" title="数据类型长度和范围"></a>数据类型长度和范围</h2><p>c++标准没用固定值的规定，但是有最小标准：</p><ul><li><code>short</code>至少16位（-32,768 - 32,767）</li><li><code>int</code>至少于<code>short</code>一样长</li><li><code>long</code>至少32位（-2,147,483,648 - 2,147,483,647），且至少于<code>int</code>一样长</li><li><code>long long</code>至少64位（-9,223,372,036,854,775,808 - 9,223,372,036,854,775,807），且至少于<code>long</code>一样长（有的系统不支持）</li></ul><p>可以通过<code>#include &lt;climits&gt;</code>获取具体范围：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> n_int = INT_MAX;</span><br><span class="line">    <span class="type">short</span> n_short = SHRT_MAX;</span><br><span class="line">    <span class="type">long</span> n_long = LONG_MAX;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n_llong = LLONG_MAX;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_int &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;short is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_short &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_long &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long long is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot; bytes, maximum value: &quot;</span> &lt;&lt; n_llong &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在我的64位windwos系统上结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int is 4 bytes, maximum value: 2147483647</span><br><span class="line">short is 4 bytes, maximum value: 32767</span><br><span class="line">long is 4 bytes, maximum value: 2147483647</span><br><span class="line">long long is 4 bytes, maximum value: 9223372036854775807</span><br></pre></td></tr></table></figure><h2 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span>&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    std::string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    MyStruct the_string;</span><br><span class="line">    cin &gt;&gt; the_string.str;</span><br><span class="line">    the_string.len = the_string.str.<span class="built_in">length</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The Length of &quot;</span>  &lt;&lt; the_string.str &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; the_string.len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针相关操作"><a href="#指针相关操作" class="headerlink" title="指针相关操作"></a>指针相关操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span> &#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    std::string str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">10.0</span>;</span><br><span class="line">    <span class="comment">//地址p为double*类型，值设置为取num的地址</span></span><br><span class="line">    <span class="type">double</span>* p = &amp;num;</span><br><span class="line">    <span class="comment">//输出:00000004664FF714指向的值为1</span></span><br><span class="line">    std::cout &lt;&lt; p &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态数组（动态联编）和赋值</span></span><br><span class="line">    <span class="type">int</span>* pz = <span class="keyword">new</span> <span class="type">int</span> [<span class="number">5</span>];</span><br><span class="line">    *pz = <span class="number">1</span>;</span><br><span class="line">    pz[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    *(pz + <span class="number">2</span>) = <span class="number">3</span>;</span><br><span class="line">    std::cout &lt;&lt; pz &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; pz[<span class="number">0</span>] &lt;&lt; pz[<span class="number">1</span>] &lt;&lt; pz[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//使用完成后释放（如果new有[]那么del时候要写[]，反之亦然）</span></span><br><span class="line">    <span class="keyword">delete</span> [] pz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态结构操作</span></span><br><span class="line">    MyStruct* ps = <span class="keyword">new</span> MyStruct;</span><br><span class="line">    <span class="comment">//使用-&gt;运算符访问成员</span></span><br><span class="line">    ps-&gt;str = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">    <span class="comment">//使用地址访问成员</span></span><br><span class="line">    std::cout &lt;&lt; (*ps).str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="简单IO"><a href="#简单IO" class="headerlink" title="简单IO"></a>简单IO</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入ofstream（覆盖原内容）</span></span><br><span class="line">    ofstream outfile;</span><br><span class="line">    outfile.<span class="built_in">open</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line">    string str0;</span><br><span class="line">    <span class="built_in">getline</span>(cin,str0);</span><br><span class="line">    outfile &lt;&lt; str0;</span><br><span class="line">    outfile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取ifstream</span></span><br><span class="line">    ifstream infile;</span><br><span class="line">    infile.<span class="built_in">open</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!infile.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    string str1;</span><br><span class="line">    <span class="keyword">while</span> (infile.<span class="built_in">good</span>())&#123;</span><br><span class="line">        <span class="built_in">getline</span>(infile,str1);</span><br><span class="line">        cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h2><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>函数前加<code>inline</code>，编译器将函数代码替换函数调用，减少跳转导致的时间消耗</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">square</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">square</span>(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数引用变量"><a href="#函数引用变量" class="headerlink" title="函数引用变量"></a>函数引用变量</h3><p>使用引用变量作为函数参数，函数将使用原始数据而不是其副本，可用于函数处理大型结构或进行类的设计</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> &amp; number = num;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    number++;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外需要注意，引用变量必须在创建时初始化，而且无法修改关联的变量。</p><p>使用结构引用参数只需在声明结构参数时使用引用运算符<code>&amp;</code>即可。例如如下结构定义，函数原型应该这样编写，从而在函数中将指向该结构的引用作为参数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">STRUCT</span>&#123;</span><br><span class="line">    std:string name;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FUNC</span><span class="params">(STRUCT &amp; s)</span></span>;</span><br><span class="line"><span class="comment">//如果不希望函数修改传入的结构可使用const</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FUNC</span><span class="params">(<span class="type">const</span> STRUCT &amp; s)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="参数重载"><a href="#参数重载" class="headerlink" title="参数重载"></a>参数重载</h3><p>可以通过函数重载来设计一系列函数，他们名称相同，完成相同的操作，但是使用不同的参数列表（他们的返回值类型也可以不一样）。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>可以使用泛型来定义函数，避免了对函数多次几乎相同的编写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span> </span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a , b = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Swap</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a , b = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> c = <span class="number">11.4</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">51.4</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c , d = &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Swap</span>(c, d);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c , d = &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多文件编程"><a href="#多文件编程" class="headerlink" title="多文件编程"></a>多文件编程</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>头文件应该包含以下内容：</p><ul><li>函数原型</li><li>使用<code>#define</code>或<code>const</code>定义的符号常量</li><li>结构声明</li><li>类声明</li><li>模板声明</li><li>内联函数</li></ul><p>在包含头文件时，应使用<code>a.h</code>而不是<code>&lt;a.h&gt;</code>，后者编译器会在存储标准头文件的位置查找，而前者先在当前工作目录查找，如果没用找到再去标准位置。</p><p>为了避免包含同一个头文件多次（可能包含了另一个包含某个头文件的头文件），可以使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STH</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STH</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="存储持续性"><a href="#存储持续性" class="headerlink" title="存储持续性"></a>存储持续性</h3><ul><li>自动存储：函数中定义将在函数结束后释放。</li><li>静态存储：在函数外定义的变量和用关键字<code>static</code>定义的变量。在整个程序运行过程中存在。<ul><li>链接性为外部，可在其他文件访问，必须在代码块外声明。在一个文件中定义，其他文件使用<code>extern</code>关键字声明。</li><li>链接性为内部，只能在当前文件访问，必须在代码块外声明并使用<code>static</code>限定符</li><li>无链接性，只能在当前函数或代码块内访问，必须在代码块内声明并使用<code>static</code>限定符</li></ul></li><li>线程存储：使用关键字<code>thread_local</code>声明，其生命周期和其所属线程一样长</li><li>动态存储：使用<code>new</code>关键字分配，一直存在直到使用<code>delete</code>将其释放或程序结束。也被称为自由存储（free store）或堆（heap）</li></ul><h3 id="说明符和限定符"><a href="#说明符和限定符" class="headerlink" title="说明符和限定符"></a>说明符和限定符</h3><p>存储说明符：</p><ul><li>auto（c++11中不再是说明符）</li><li>register</li><li>static</li><li>extern</li><li>thread_local（c++11新增的）</li><li>mutable</li></ul><p>限定符：</p><ul><li>const</li><li>volatile（避免编译器进行将数据复制到寄存器的优化，因为硬件等可能对其进行修改，例如串口信息）</li><li>mutable（用于指出即使结构或类为const，其某个成员也可以进行修改）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">data</span>&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> accesses;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> data veep = &#123;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">strcpy</span>(veep.name, <span class="string">&quot;abc&quot;</span>);<span class="comment">//not allowed</span></span><br><span class="line">veep.accesses++;<span class="comment">//allowed</span></span><br></pre></td></tr></table></figure><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><p>两个名称空间的相同名称将不会导致冲突。下面的代码使用新的关键字<code>namespace</code>创建了一个新的名称空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Triority&#123;</span><br><span class="line">    <span class="type">int</span> sth;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名称空间可以是全局的也可以位于其他名称空间中，但是不能在代码块中。默认情况下其链接性为外部的（除非引用了常量）</p><p>标记一下，这一段我没写完，我要先去写cmake</p><h2 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h2><h3 id="简要介绍和安装"><a href="#简要介绍和安装" class="headerlink" title="简要介绍和安装"></a>简要介绍和安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">完成C++项目的执行过程， 主要是分为四步: 预处理、编译、汇编、链接。g++命令确实可以对一个C++项目通过上面四步转成可执行文件，但在中大型项目里面，这样还是太复杂。 于是乎就有了MakeFile。</span><br><span class="line">Makefile 文件描述了 Linux 系统下 C/C++ 工程的编译规则，它用来自动化编译 C/C++ 项目。一旦写编写好 Makefile 文件，只需要一个 make 命令，整个工程就开始自动编译，不再需要手动执行 GCC 命令。</span><br><span class="line">CMake是简化MakeFile编写，可以自动生成MakeFile文件</span><br><span class="line">CMake是一个跨平台的编译(Build)工具，可以用简单的语句来描述所有平台的编译过程，其是在make基础上发展而来的，早期的make需要程序员写Makefile文件，进行编译，而现在CMake能够通过对cmakelists.txt的编辑，轻松实现对复杂工程的组织</span><br><span class="line"></span><br><span class="line">cmake编译流程：</span><br><span class="line">1. 编写Cmake配置文件CMakeLists.txt, 理解成Cmake所要处理的代码</span><br><span class="line">2. 执行命令 cmake path生成MakeFile, path是CmakeList.txt所在目录</span><br><span class="line">3. 使用make命令进行编译</span><br></pre></td></tr></table></figure><p>安装cmake并查看版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure><h3 id="目录组织"><a href="#目录组织" class="headerlink" title="目录组织"></a>目录组织</h3><ul><li>项目根目录下建立<code>build</code>文件夹并建立<code>CMakeLists.txt</code>文件（和.cpp和.h在一起，这里只是最简单的演示文件）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.28)</span><br><span class="line"></span><br><span class="line"># set the project name</span><br><span class="line">project(main)</span><br><span class="line"></span><br><span class="line"># add the executable</span><br><span class="line">add_executable(main 1.cpp main.cpp)</span><br></pre></td></tr></table></figure></li><li>build文件夹内使用cmake生成makefile  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ../.</span><br></pre></td></tr></table></figure></li><li>编译项目  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li>执行程序  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><img src="/2025/c++/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250126175713.png"></li></ul><h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><p>这里面的大部分命令都是固定语法，相当于我们只需要指定一些参数即可。 先整理上面几个命令，如果有其他命令需要用到，可以<a href="https://cmake.org/cmake/help/v2.8.8/cmake.html#section_Commands">去官网查看具体使用</a>（当然这个页面我觉得不会有人愿意看）</p><ul><li>cmake_minimum_required命令<ul><li><code>cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]][FATAL_ERROR])</code></li><li>用于指定需要的CMake 的最低版本</li><li>示例：<code>cmake_minimum_required(VERSION 3.28)</code></li></ul></li><li>project命令<ul><li><code>project( [languageName1 languageName2 … ] )</code></li><li>用于指定项目的名称，一般和项目的文件名称对应</li><li>示例：<code>project(main)</code></li></ul></li><li>add_executable命令<ul><li><code>add_executable( [WIN32] [MACOSX_BUNDLE][EXCLUDE_FROM_ALL] source1 source2 … sourceN)</code></li><li>用于指定从一组源文件 source1 source2 … sourceN 编译出一个可执行文件且命名为name</li><li>示例：<code>add_executable(main 1.cpp main.cpp)</code></li></ul></li><li>include_directories命令<ul><li><code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)</code></li><li>用于设定目录，这些设定的目录将被编译器用来查找 include 文件</li></ul></li></ul><h4 id="vscode自动生成CMakeLists-txt"><a href="#vscode自动生成CMakeLists-txt" class="headerlink" title="vscode自动生成CMakeLists.txt"></a>vscode自动生成CMakeLists.txt</h4><p>利用vscode中的cmaketools插件，可以自动生成cmakelist文件，例如需要include两个头文件生成就是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5.0)</span><br><span class="line">project(main VERSION 0.1.0 LANGUAGES C CXX)</span><br><span class="line"></span><br><span class="line">add_executable(main 1.cpp 2.cpp main.cpp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在vscode安装<code>cmake</code>,<code>CMake Tools</code>,<code>Makefile Tools</code>三个插件，<code>Ctrl+shift+p</code>调出VSCode的指令面板，输入<code>cmake</code>，找到<code>cmake:quick start</code>，按照提示填写一个项目的名称，选择C++orC，选择构建库或者可执行文件，我这里只需要一个可执行文件，然后就会自动帮你生成一个CMakeLists</p><h2 id="OOP：面向对象"><a href="#OOP：面向对象" class="headerlink" title="OOP：面向对象"></a>OOP：面向对象</h2><h3 id="类的定义和使用"><a href="#类的定义和使用" class="headerlink" title="类的定义和使用"></a>类的定义和使用</h3><p><code>a_class.h</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stock</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//默认就是private，也可以不写这个关键字</span></span><br><span class="line">    std::string company;</span><br><span class="line">    <span class="type">long</span> shares;</span><br><span class="line">    <span class="type">double</span> share_val;</span><br><span class="line">    <span class="type">double</span> total_val;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        total_val = shares * share_val;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数用于初始化</span></span><br><span class="line">    <span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n = <span class="number">0</span>, <span class="type">double</span> pr = <span class="number">0.0</span>);</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buy</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span>;</span><br><span class="line">    <span class="comment">//const成员函数，保证函数不会修改调用对象</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//析构函数,一般不应显式调用，如果没用定义将隐式生成，用于完成清理工作，例如进行delate内存释放</span></span><br><span class="line">    ~<span class="built_in">Stock</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>a_class.cpp</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock::buy</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span>&#123;</span><br><span class="line">    shares += num;</span><br><span class="line">    share_val = price;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock::show</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Company:&quot;</span> &lt;&lt; company &lt;&lt; std::endl </span><br><span class="line">        &lt;&lt; <span class="string">&quot;Shares:&quot;</span> &lt;&lt; shares &lt;&lt; std::endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;Share Price:&quot;</span> &lt;&lt; share_val &lt;&lt; std::endl </span><br><span class="line">        &lt;&lt; <span class="string">&quot;Total Worth:&quot;</span> &lt;&lt; total_val &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::<span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n, <span class="type">double</span> pr)&#123;</span><br><span class="line">    company = co;</span><br><span class="line">    shares = n;</span><br><span class="line">    share_val = pr;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::~<span class="built_in">Stock</span>()&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;DEL &quot;</span> &lt;&lt; company &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="function">Stock <span class="title">triority</span><span class="params">(<span class="string">&quot;Triority&quot;</span>)</span></span>;</span><br><span class="line">    triority.<span class="built_in">buy</span>(<span class="number">114514</span>, <span class="number">3.1415926</span>);</span><br><span class="line">    triority.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要创建同一个类的多个对象，可以这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stock stocks[<span class="number">4</span>];</span><br><span class="line">stocks[<span class="number">0</span>].<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><p>如果使用构造函数则必须这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stock stocks[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="built_in">Stock</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1.0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Stock</span>(<span class="string">&quot;b&quot;</span>, <span class="number">1.0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>在 C++ 中，this指针是一个特殊的指针，它指向当前对象的实例。每一个对象都能通过this指针来访问自己的地址。可以在类的成员函数中使用，可以用来指向调用对象。</p><p>当一个对象的成员函数被调用时，编译器会隐式地传递该对象的地址作为 this 指针。</p><p>通过使用 this 指针，我们可以在成员函数中访问当前对象的成员变量，即使它们与函数参数或局部变量同名，这样可以避免命名冲突，并确保我们访问的是正确的变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;value &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>假设有一个Time类包含hours和minutes变量，求和的函数方法大概是这样<br><code>time.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Time <span class="title">Time::Sum</span><span class="params">(<span class="type">const</span> Time &amp; t)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p><code>time.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Time <span class="title">Time::Sum</span><span class="params">(<span class="type">const</span> Time &amp; t)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    Time sum;</span><br><span class="line">    sum.minutes = minutes + t.minutes;</span><br><span class="line">    sum.hours = hours + t.hours + sum.minutes/<span class="number">60</span></span><br><span class="line">    sum.minutes %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要使用加法运算符进行这个操作，只需要把<code>Sum()</code>的名称改为<code>operator+()</code>即可<br><code>time.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time <span class="keyword">operator</span>+(<span class="type">const</span> Time &amp; t) <span class="type">const</span>;</span><br></pre></td></tr></table></figure><p><code>time.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Time <span class="keyword">operator</span>+(<span class="type">const</span> Time &amp; t) <span class="type">const</span>&#123;</span><br><span class="line">    Time sum;</span><br><span class="line">    sum.minutes = minutes + t.minutes;</span><br><span class="line">    sum.hours = hours + t.hours + sum.minutes/<span class="number">60</span></span><br><span class="line">    sum.minutes %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此后计算时间总和就可以直接用<code>+</code>了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time_total = time_1 + time_2;</span><br></pre></td></tr></table></figure><p>重载的使用有一些限制：</p><ul><li>重载后必须至少有一个操作数是用户定义的类型，避免用户为标准类型重载，比如重载<code>-</code>符号为求和</li><li>不能修改运算符优先级</li><li>重载不能违反原来的句法规则，比如将求模<code>%</code>重载成只用一个操作数</li><li>不能创建新的运算符</li><li>一些不能重载的运算符：<code>sizeof</code>等（懒得全写一遍了，这玩意估计八百年用不到一次）</li></ul><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>类对象的公有类发布方法是访问对象私有部分的唯一途径，但是这种限制有时候过于严格，因此提供了友元的概念，包括友元函数，友元类，友元成员函数。通过让函数成为类的友元可以赋予函数与类的成员函数相同的访问权限</p><p>在刚才的例子中可以实现时间的加法，那如果是乘法呢？由于运算符左侧是操作数，我们只能<code>A = B * double</code>而不能<code>A = double * B</code>，因为这个<code>double</code>不是对象。另一种解决方式就是使用友元</p><p>创建友元函数只要将其原型放在类声明中，并在前面加上<code>friend</code>关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="type">double</span> m, <span class="type">const</span> Time &amp; t);</span><br></pre></td></tr></table></figure><p>显然这个函数在类声明中调用但是不是成员函数，但是拥有成员函数一样的访问权限</p><p>因为他不是成员函数，所以编写定义时不要使用<code>Time::</code>限定符，也不要使用关键字<code>friend</code>，应该这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Time <span class="keyword">operator</span>*(<span class="type">double</span> m, <span class="type">const</span> Time &amp; t)&#123;</span><br><span class="line">    Time result;</span><br><span class="line">    <span class="type">long</span> totalminutes = t.hours *m * <span class="number">60</span> + t.minutes * m;</span><br><span class="line">    result.hours = totalminutes / <span class="number">60</span>;</span><br><span class="line">    result.minutes = totalminutes % <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这些声明和定义之后，就可以使用这一语句了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time_A = <span class="number">2.75</span> * Time_B</span><br></pre></td></tr></table></figure><h3 id="类的自动转换和强制类型转换"><a href="#类的自动转换和强制类型转换" class="headerlink" title="类的自动转换和强制类型转换"></a>类的自动转换和强制类型转换</h3><p>c++会自动转换兼容的类型，比如<code>int a = 3.5;</code>会只保留整数部分，不兼容的类型不会自动转换，但是也许可以强制类型转换<code>int * p = (int *) 10;</code>，因为<code>p</code>和<code>(int *)</code>都是指针，虽然这样的转换大概率毫无意义</p><p>对于类，当构造函数只接受一个参数时（或者其他参数有默认值），可以编写这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">AClass</span>(<span class="type">int</span> a);</span><br><span class="line"></span><br><span class="line">AClass aclass;</span><br><span class="line">aclass = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>如果需要避免意外的这种转换，可以在声明构造函数时使用关键字<code>explicit</code>，从而关闭隐式转换，但仍然允许显式转换:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AClass aclass;</span><br><span class="line">aclass = <span class="built_in">AClass</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">aclass = (AClass) <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>转换函数可以反过来将类对象转换为一个值，这是一种用户定义的强制类型转换。要创建一个转换函数要注意，转换函数必须是类方法，不能指定返回类型，而且不能有参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换为double类型的函数的原型，添加到类的声明中</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//或者int，出于严谨也可以加入const</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p>然后在类定义中加入转换的方法（int返回double+0.5可以巧妙地四舍五入而不是丢弃小数部分）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AClass::<span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span> (pounds + <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样调用时候便可以直接使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a_int = aclass;</span><br></pre></td></tr></table></figure><h3 id="类和动态内存分配"><a href="#类和动态内存分配" class="headerlink" title="类和动态内存分配"></a>类和动态内存分配</h3><p>使用<code>new</code>初始化对象的指针成员时应该注意一些事情：</p><ul><li>在构造函数中使用<code>new</code>初始化之后，应该在析构函数中使用<code>delete</code>，且必须互相兼容<code>new</code>对应<code>delete</code>且<code>new[]</code>对应于<code>delete[]</code></li><li>如果要进行对象的复制，应定义一个复制构造函数，进行实际内容的复制，而非指针。例如<code>b.str</code>是通过<code>new</code>创建的，类似<code>a.str = b.str</code>这样的直接复制只会复制地址，导致两个成员实际上指向同一份内容，并在当其中一个执行<code>delete</code>时导致数据损坏</li><li>也应该定义一个赋值运算符，通过深度复制将一个对象复制给另一个对象。具体来说，应该首先检查自我赋值的情况，释放成员指针以前指向的内存，复制数据而不是地址，返回一个指向调用对象的引用</li></ul><p>这部分内容可能比较难懂，需要一些举例才能完全理解，但是我现在又懒得在这补充一大堆代码作为举例，因此这件事交给未来的自己吧。在此之前可以直接阅读原书的P356</p><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>假设已经有了下面这个类（由前面的例子删减而来）<br><code>1.h</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stock</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string company;</span><br><span class="line">    <span class="type">long</span> shares;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    ~<span class="built_in">Stock</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>1.cpp</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock::show</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Company:&quot;</span> &lt;&lt; company &lt;&lt; std::endl </span><br><span class="line">        &lt;&lt; <span class="string">&quot;Shares:&quot;</span> &lt;&lt; shares &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::<span class="built_in">Stock</span>(<span class="type">const</span> std::string &amp; co, <span class="type">long</span> n)&#123;</span><br><span class="line">    company = co;</span><br><span class="line">    shares = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock::~<span class="built_in">Stock</span>()&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;DEL &quot;</span> &lt;&lt; company &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我现在想要让这个类新增一个<code>id</code>成员，但是不想改动已有的代码（甚至可能没有源代码），那么可以直接派生出一个类：<br><code>2.h</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;1.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stock_id</span> : <span class="keyword">public</span> Stock&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stock_id</span>(<span class="type">long</span> i, std::string co, <span class="type">long</span> n = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_id</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>2.cpp</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stock_id::show_id</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">    Stock_id::<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stock_id::<span class="built_in">Stock_id</span>(<span class="type">long</span> i, std::string co, <span class="type">long</span> n) : <span class="built_in">Stock</span>(co, n)&#123;</span><br><span class="line">    id = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派生类需要自己的构造函数，也可以添加额外的数据成员和成员函数</p><p>但是注意不能直接访问基类的私有成员而必须通过基类方法进行访问，也就是说，<code>private</code>只能这个类自己访问，<code>protected</code>允许自己和派生类访问，<code>public</code>允许全部访问</p><p>派生类继承了所有的基类方法，但下列情况除外：基类的构造函数、析构函数和拷贝构造函数，基类的重载运算符，基类的友元函数。</p><h3 id="多态继承"><a href="#多态继承" class="headerlink" title="多态继承"></a>多态继承</h3><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Enter 2 nums:&quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">&quot;y = 0 is not allowed!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="built_in">catch</span>(<span class="type">const</span> <span class="type">char</span> * s)&#123;</span><br><span class="line">            std::cout &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z = x/y;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;x / y is:&quot;</span> &lt;&lt; z &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>try</code>捕获异常，然后在<code>catch()</code>中对异常进行处理。（异常是新增的内容，一些老式编译器可能不支持）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">triority@Triority-Desktop:~/c++l/build$ /home/triority/c++l/build/main</span><br><span class="line">Enter 2 nums:114 514</span><br><span class="line">x / y is:0.22179</span><br><span class="line">Enter 2 nums:114514 0</span><br><span class="line">y = 0 is not allowed!</span><br><span class="line">Enter 2 nums:^C</span><br></pre></td></tr></table></figure><div class="note danger modern"><p>这一部分原来书上的代码<code>catch (char* str)</code>运行会报错<code>terminate called after throwing an instance of &#39;char const*&#39;</code>，这里是我改正且简化的版本。<br>原因是应该捕获const异常<code>catch (const char const* strException)</code>，<a href="https://stackoverflow.com/questions/24458563/throwing-exceptions-error-terminate-called">参考链接</a>中还讨论了更加规范的错误处理方法和其他”style note: This tutorial smells, maybe you should find another source.”😨😨😨</p></div><p>想让<code>catch</code>块能够处理<code>try</code>块抛出的任何类型的异常，则必须在异常声明的括号内使用省略号<code>...</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="built_in">catch</span>(...)&#123;</span><br><span class="line">    <span class="comment">// 能处理任何异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以连续使用<code>catch</code>来分别处理多种异常：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="built_in">catch</span>(exc_a)&#123;</span><br><span class="line">&#125;<span class="built_in">catch</span>(exc_b)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常引发异常的函数会传递一个对象，从而可以使用不同的异常类型来区分不同函数在不同情况下引发的异常。对象也可以携带可以确定异常原因的信息。C++提供了一系列标准的异常，定义在<code>&lt;exception&gt;</code>中，我们可以在程序中使用这些标准的异常，或者通过继承和重载<code>exception</code>类来定义新的异常</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyException</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="type">char</span> * <span class="title">what</span> <span class="params">()</span> <span class="type">const</span> <span class="title">throw</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;C++ Exception&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">MyException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span>(MyException&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span>(std::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//其他的错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用的类和模板：string类-智能指针-STL标准模板库"><a href="#常用的类和模板：string类-智能指针-STL标准模板库" class="headerlink" title="常用的类和模板：string类,智能指针,STL标准模板库"></a>常用的类和模板：string类,智能指针,STL标准模板库</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p>使用<code>new</code>分配内存时别忘了要<code>delete</code>释放内存，但是别忘了这件事总是不可靠的。如果指针是一个对象就可以在过期时调用析构函数释放内存该有多好，这就是智能指针对象。</p><p>在C++11及之后的版本中，最常见的智能指针类型包括<code>std::unique_ptr</code>、<code>std::shared_ptr</code>和<code>std::weak_ptr</code>。</p><ul><li><code>std::unique_ptr</code>提供了独占所有权的语义，确保同一时间内只有一个智能指针指向特定的资源。在<code>std::unique_ptr</code>的生命周期结束时，它会自动释放所拥有的资源，无需程序员手动干预。</li><li><code>std::shared_ptr</code>实现了共享所有权模型，允许多个智能指针共同拥有对同一资源的引用。这种模型通过引用计数来实现，每当一个新的<code>std::shared_ptr</code>被创建并指向同一资源时，引用计数会增加；当<code>std::shared_ptr</code>被销毁时，引用计数减少。只有当引用计数降至零时，资源才会被释放。<code>std::shared_ptr</code>的使用也带来了循环引用的问题，这时</li><li><code>std::weak_ptr</code>提供了一种不控制对象生命周期的智能指针，它指向由<code>std::shared_ptr</code>管理的对象，但不增加引用计数。这允许程序员访问资源，同时避免循环引用导致的内存泄漏。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Report</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Report</span>(<span class="type">const</span> std::string s) : <span class="built_in">str</span>(s)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Object created!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Report</span>()&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Object deleted!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">comment</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Report&gt; <span class="title">ps</span> <span class="params">(<span class="keyword">new</span> Report(<span class="string">&quot;using unique_ptr&quot;</span>))</span></span>;</span><br><span class="line">    ps -&gt; <span class="built_in">comment</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">triority@Triority-Desktop:~/c++l/build$ /home/triority/c++l/build/main</span><br><span class="line">Object created!</span><br><span class="line">using unique_ptr</span><br><span class="line">Object deleted!</span><br></pre></td></tr></table></figure><h3 id="STL标准模板库"><a href="#STL标准模板库" class="headerlink" title="STL标准模板库"></a>STL标准模板库</h3><blockquote><p>C++ 标准模板库（Standard Template Library，STL）是一套功能强大的 C++ 模板类和函数的集合，它提供了一系列通用的、可复用的算法和数据结构。</p><p>STL 的设计基于泛型编程，这意味着使用模板可以编写出独立于任何特定数据类型的代码。</p></blockquote><p>C++ 标准模板库的核心包括以下重要组件组件：</p><ul><li>容器（Containers）：容器是 STL 中最基本的组件之一，提供了各种数据结构，包括向量（vector）、链表（list）、队列（queue）、栈（stack）、集合（set）、映射（map）等。这些容器具有不同的特性和用途，可以根据实际需求选择合适的容器。</li><li>算法（Algorithms）：STL 提供了大量的算法，用于对容器中的元素进行各种操作，包括排序、搜索、复制、移动、变换等。这些算法在使用时不需要关心容器的具体类型，只需要指定要操作的范围即可。</li><li>迭代器（iterators）：迭代器用于遍历容器中的元素，允许以统一的方式访问容器中的元素，而不用关心容器的内部实现细节。STL 提供了多种类型的迭代器，包括随机访问迭代器、双向迭代器、前向迭代器和输入输出迭代器等。</li><li>函数对象（Function Objects）：函数对象是可以像函数一样调用的对象，可以用于算法中的各种操作。STL 提供了多种函数对象，包括一元函数对象、二元函数对象、谓词等，可以满足不同的需求。</li><li>适配器（Adapters）：适配器用于将一种容器或迭代器适配成另一种容器或迭代器，以满足特定的需求。STL 提供了多种适配器，包括栈适配器（stack adapter）、队列适配器（queue adapter）和优先队列适配器（priority queue adapter）等。</li></ul><h4 id="容器矢量vector"><a href="#容器矢量vector" class="headerlink" title="容器矢量vector"></a>容器矢量vector</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的整数向量</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; myVector;</span><br><span class="line">    <span class="comment">// 添加元素到向量中</span></span><br><span class="line">    myVector.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    myVector.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">    myVector.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="comment">// 访问向量中的元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Elements in the vector: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> element : myVector)std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 访问向量中的第一个元素myVector[0]</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;First element: &quot;</span> &lt;&lt; myVector[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 获取向量的大小myVector.size()</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size of the vector: &quot;</span> &lt;&lt; myVector.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 定义一个迭代器，也可以使用auto语法</span></span><br><span class="line">    <span class="comment">// auto pd = myVector.begin();</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;::iterator pd = myVector.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="comment">// 删除向量中的第2个元素，迭代器的行为和指针很相似，erase函数也可以接受两个迭代器参数进行[区间)删除</span></span><br><span class="line">    myVector.<span class="built_in">erase</span>(++pd);</span><br><span class="line">    <span class="comment">// 输出删除元素后的向量</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Elements in the vector after erasing: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> element : myVector)std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//除此以外还有insert()等其他方法，不再单独举例，insert接受三个迭代器参数，插入位置，要插入的容器对象的起始和结束位置</span></span><br><span class="line">    <span class="comment">// 清空向量</span></span><br><span class="line">    myVector.<span class="built_in">clear</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size of the vector after clearing: &quot;</span> &lt;&lt; myVector.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于范围的循环和迭代器"><a href="#基于范围的循环和迭代器" class="headerlink" title="基于范围的循环和迭代器"></a>基于范围的循环和迭代器</h4><p>这段内容作为一些补充，考虑到前面没有提到循环这些语法</p><p>基于范围的for循环就是为了用于STL而设计的，上面的写法<code>for (int element : myVector)&#123;&#125;;</code>就是遍历整个容器的内容，方便一点可以使用<code>auto</code>语法<code>for (auto x : myVector) do_something(x);</code>，使用引用参数也可以在遍历的同时修改元素内容<code>for (auto &amp; x : myVector) do_something(x);</code></p><p>STL规定了5种迭代器：</p><ul><li>输入迭代器（Input Iterator）：只能进行单次读取操作，不能进行写入操作。</li><li>输出迭代器（Output Iterator）：只能进行单次写入操作，不能进行读取操作。</li><li>正向迭代器（Forward Iterator）：可以进行读取和写入操作，并且可以向前移动。</li><li>双向迭代器（Bidirectional Iterator）：除了可以进行正向迭代器的所有操作外，还可以向后移动。</li><li>随机访问迭代器（Random Access Iterator）：除了可以进行双向迭代器的所有操作外，还可以进行随机访问，例如通过下标访问元素。</li></ul><p>不同容器的迭代器的功能也不同：</p><table><thead><tr><th align="center">容器</th><th align="center">迭代器功能</th></tr></thead><tbody><tr><td align="center">vector</td><td align="center">随机访问</td></tr><tr><td align="center">deque</td><td align="center">随机访问</td></tr><tr><td align="center">list</td><td align="center">双向</td></tr><tr><td align="center">set &#x2F; multiset</td><td align="center">双向</td></tr><tr><td align="center">map &#x2F; multimap</td><td align="center">双向</td></tr><tr><td align="center">stack</td><td align="center">不支持迭代器</td></tr><tr><td align="center">queue</td><td align="center">不支持迭代器</td></tr><tr><td align="center">priority_queue</td><td align="center">不支持迭代器</td></tr></tbody></table><h4 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h4><p>关联容器存储的元素，是由一个个“键值对”（key, value）组成。通过键，往往能很快的检索到对应的值。</p><p>关联容器可以快速查找、读取或者删除所存储的元素，同时该类型的容器插入元素的效率比序列容器高。</p><p>STL提供了4种关联容器：</p><ul><li><code>set</code>：关键字即值，即只保存关键字的容器。set类似一个集合，用来存储同类型的元素</li><li><code>multiset</code>：关键字可重复出现的set</li><li><code>map</code>：元素是一些键值对：关键字起到索引的作用，值则表示与索引相关联的数据，数据的存放是有序的</li><li><code>multimap</code>：关键字可以重复出现的map</li></ul><blockquote><p>C++ 11 还新增了 4 种哈希容器,即<code>unordered_map</code>、<code>unordered_multimap</code>以及<code>unordered_set</code>、<code>unordered_multiset</code>。严格来说,它们也属于关联式容器。哈希容器底层采用的是哈希表。</p></blockquote><p>这里以<code>map</code>为例简单介绍部分用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建空 map 容器，默认根据个键值对中键的值，对键值对做降序排序</span></span><br><span class="line">    std::map&lt;std::string, std::string, std::greater&lt;std::string&gt;&gt;myMap&#123; &#123;<span class="string">&quot;d&quot;</span>,<span class="string">&quot;4&quot;</span>&#125; &#125;;</span><br><span class="line">    <span class="comment">//向 map 容器添加新键值对</span></span><br><span class="line">    myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    myMap[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    myMap[<span class="string">&quot;c&quot;</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="comment">//输出当前 myMap 容器存储键值对的个数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;myMap size==&quot;</span> &lt;&lt; myMap.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//判断当前 myMap 容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!myMap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">//借助 myMap 容器迭代器，将该容器的键值对逐个输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = myMap.<span class="built_in">begin</span>(); i != myMap.<span class="built_in">end</span>(); ++i)std::cout &lt;&lt; i-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">triority@Triority-Desktop:~/c++l/build$ /home/triority/c++l/build/main</span><br><span class="line">myMap size==4</span><br><span class="line">d 4</span><br><span class="line">c 3</span><br><span class="line">b 2</span><br><span class="line">a 1</span><br></pre></td></tr></table></figure><h2 id="书上内容的结束"><a href="#书上内容的结束" class="headerlink" title="书上内容的结束"></a>书上内容的结束</h2><p>原书最后两章节继续介绍了c++的IO操作和c++11新内容总结，这部分内容我认为完全没有必要单独写出来，内容又多又杂但是没有难度，用的时候上网查便是。</p><p>如果我的这篇文章接着写下去我认为应该写一些应用功能了，例如并发编程或者opencv这些标准外的库的使用，这部分内容就交给未来勤奋的自己咯！ <del>是某个勤奋的面壁者吗？</del></p><h1 id="继续深造"><a href="#继续深造" class="headerlink" title="继续深造"></a>继续深造</h1><h2 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h2><p>opencv的使用教程文章早已经写过，这里只写c++下需要进行的内容</p><p>OpenCV的功能被组织成多个模块，每个模块专注于不同的任务：</p><ul><li><code>Core</code>：提供基本数据结构和函数，如图像存储、矩阵操作、文件 I&#x2F;O 等。</li><li><code>Imgproc</code>：图像处理功能，包括滤波、几何变换、颜色空间转换、边缘检测、形态学操作等。</li><li><code>Highgui</code>：图像和视频的显示、窗口管理、用户交互（如鼠标事件、滑动条）。</li><li><code>Video</code>：视频处理功能，包括视频捕获、背景减除、光流计算等。</li><li><code>Calib3d</code>：相机标定、3D 重建、姿态估计等。</li><li><code>Features2d</code>：特征检测与描述，包括关键点检测、特征匹配等。</li><li><code>Objdetect</code>：目标检测功能，如 Haar 级联检测、HOG 检测等。</li><li><code>DNN</code>：深度学习模型的加载和推理，支持 TensorFlow、PyTorch、Caffe 等框架。</li><li><code>ML</code>：机器学习算法，如 KNN、SVM、决策树等。</li><li><code>Flann</code>：快速近似最近邻搜索（FLANN），用于特征匹配和高维数据搜索。</li><li><code>Photo</code>：图像修复、去噪、HDR 成像等。</li><li><code>Stitching</code>：图像拼接功能，用于创建全景图。</li><li><code>Shape</code>：形状分析和匹配。</li><li><code>Tracking</code>：目标跟踪算法，如 MIL、KCF、GOTURN 等。</li></ul><h3 id="安装和编译配置"><a href="#安装和编译配置" class="headerlink" title="安装和编译配置"></a>安装和编译配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><p>然后是编译配置<code>CMakeLists.txt</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.16.3)</span><br><span class="line"></span><br><span class="line"># set the project name</span><br><span class="line">project(main)</span><br><span class="line"></span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line">#about opencv output(Optional)</span><br><span class="line">message(STATUS &quot;Opnecv library status: &quot;)</span><br><span class="line">message(STATUS &quot;&gt; version: $&#123;OpenCV_VERSION&#125; &quot;)</span><br><span class="line">message(STATUS &quot;&gt; libraries: $&#123;OpenCV_LIBS&#125; &quot;)</span><br><span class="line">message(STATUS &quot;&gt; include: $&#123;OpenCV_INCLUDE_DIRS&#125;  &quot;)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"># add the executable</span><br><span class="line">add_executable(main 1.cpp main.cpp)</span><br><span class="line"></span><br><span class="line">target_link_libraries(main $&#123;OpenCV_LIBS&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于上面新增的内容做一些解释：</p><ul><li><code>find_package</code>：CMake 本身不提供任何关于搜索库的便捷方法，也不会对库本身的环境变量进行设置。它仅仅是按照优先级顺序在指定的搜索路径进行查找 Findxxx.cmake 文件和xxxConfig.cmake文件(其中xxx代表库的名字，特别注意的是有大小写之分)，这两个文件大体上是没有区别的，CMake 能够找到这两个文件中的任何一个，我们都能成功使用该库。</li><li><code>include_directories</code>：将指定目录添加到编译器的头文件搜索路径之下，指定的目录被解释成当前源码路径的相对路径</li><li><code>target_link_libraries</code>：该指令的作用为将目标文件与库文件进行链接</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>下面这个程序调用<code>wget</code>命令下载网站的图标（这一步是吃饱了撑的）然后显示图片</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;wget https://www.triority.cc/img/favicon.png&quot;</span>);</span><br><span class="line">    <span class="type">char</span> imageName[] = <span class="string">&quot;favicon.png&quot;</span>;</span><br><span class="line">    cv::Mat M = cv::<span class="built_in">imread</span>(imageName, cv::IMREAD_COLOR);</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>, M);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="文档&amp;笔记" scheme="http://triority.cc/categories/%E6%96%87%E6%A1%A3-%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://triority.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="C++" scheme="http://triority.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>沈阳桃仙机场SHE拍摄活动</title>
    <link href="http://triority.cc/2025/SHE/"/>
    <id>http://triority.cc/2025/SHE/</id>
    <published>2025-01-15T19:05:13.000Z</published>
    <updated>2025-10-16T14:58:41.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>回想去年过生日那一天，一个何人快递送来了zve-10从此入坑摄影，如今一整年过去，前段时间买走了学弟的腾龙70300准备享受一下长焦的快乐，相机已经从zve10换成了a6400（换了又好像没换），就在写文章的今天（1.19）我又卖掉了我的a6400给JasonZYT同学准备换成a7r2（反正就是一个一分钱不加），下面这些也是a6400陪我拍的最后一次了。</p><p>下午来到桃仙机场，目测绝大多数飞机都是空客A320和A321，没什么大飞机，穿插其中几个HL7727的波音737-900或者P-633的图-204一类。</p><div class="gallery-container" data-type="data" data-button="false">      <div class="gallery-data">[{"url":"DSC0755.jpg","alt":""},{"url":"DSC0761.jpg","alt":""},{"url":"DSC0834.jpg","alt":""},{"url":"DSC0936.jpg","alt":""},{"url":"DSC1020.jpg","alt":""},{"url":"DSC1104.jpg","alt":""},{"url":"DSC1231.jpg","alt":""},{"url":"DSC1316.jpg","alt":""},{"url":"DSC1332.jpg","alt":""},{"url":"DSC1396.jpg","alt":""},{"url":"DSC1429-已增强-降噪.jpg","alt":""},{"url":"DSC1432.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><p>还拍摄了几个降落的视频，但是第一次拍摄视频没什么经验导致了一些问题，包括没有锁定对焦导致多次的重新对焦尝试，侧面拍摄同时进行变焦导致无法追踪目标大小。以及我的懒导致的没有调色和去掉达芬奇导出bug导致的问题</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"/2025/SHE/2.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"video":{"url":"/2025/SHE/3.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    
    <summary type="html">第一次带腾龙70300出门哦</summary>
    
    
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="摄影" scheme="http://triority.cc/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>一个“比较”亮的手电</title>
    <link href="http://triority.cc/2024/bright-light/"/>
    <id>http://triority.cc/2024/bright-light/</id>
    <published>2024-12-10T13:13:13.000Z</published>
    <updated>2025-10-16T14:58:41.367Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>做这个的想法大部分来源于有一天晚上，走G6辅路从昌平骑车回市内，一堆解限速横冲直撞的逆行远光电动车给我整破防了，想做个小手电制裁一下。起因只是这么简单但是考虑到其他无辜的人我也不会真的这样去做，但是发现这个东西好像确实需要，用来摄影打光，以及夜间外出徒步这类活动都可以用，所以还是决定做出来</p><p>另一方面，关于这个手电的电源。绝大部分的设计方案都是使用一颗升压芯片来做电源控制，但是我这里有些别的想法。我以后会做一个大功率自动升降压可调电源，正好可以在这里复用，就当提前踩个坑了，所以虽然会更贵一点，我决定供电方案采用buck-boost自动升降压的恒定电流控制，顺便兼容一下各种电压的电池。（来自2025年的补充：考虑到复刻可行性和成本因素还是决定用boost恒流）</p><p>至于控制芯片，考虑到这个功能不算复杂，以及我想拿stm32但是用的机会不多，就用stm32f103c8t6做主控吧</p><h1 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h3><details>  <summary>隐藏内容：已被抛弃的大力转飞但是高效率方案（很难想象这两个形容词放在了一起）</summary>  这部分没啥技术含量，找个光效高功率大的灯就完了，这里我选择了立德达的5050贴片LED，光效250lm/w，显色指数70，电压选择了6V。随手画一个2串50并的铝基板灯板。按照规格书的功率最大值，单个功率3W，光通量700lm，总计12V 25A 300W功率，70000流明。<table><thead><tr><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241210150050.png"></th><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241210150036.png"></th></tr></thead><tbody><tr><td align="center"><a href="ProDoc_P1_2024-12-10.epro">原理图</a></td><td align="center"><a href="ProDoc_PCB1_(6V)_2024-12-10.epro">PCB</a></td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>  但是这样有个问题，发光面积过大导致光强过低，因此后来没有采用这一方案。关于冷却方案，原计划<del>直接上水冷！冷头使用60x60mm的铝制水冷头，搭配150x40x40的服务器冷排，在手电筒的体积内散热400W已经完全足够了。为了体积也不打算要水箱了，水泵随手买了个5V供电的微型水泵</del> 但是考虑到体积因素还是风冷了</p><p>  这一方案需要电压为12V，考虑到电池为3s电压因此供电采用buck-boost拓扑，这一部分也进行了matlab仿真设计，可惜在这里用不到了。仿真条件：电阻1Ω，输入电压12V，输出电容110uf，ESR10mΩ，电感33uH，开关频率100kHz，半桥PWM占空比最大值95%。<a href="buckboost.slx">matlab simulink仿真文件</a></p><table><thead><tr><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222224440.png"></th><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222224225.png"></th><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222224422.png"></th></tr></thead><tbody><tr><td align="center">5A恒流输出</td><td align="center">10A恒流输出</td><td align="center">20A恒流输出</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>  甚至还画了一个boost电路但是WDDQQX把mos橄榄了没有用得上</p><table><thead><tr><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222223801.png"></th><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250222223834.png"></th></tr></thead><tbody><tr><td align="center">原理图</td><td align="center">3D-PCB</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table></details><p>综合发光面积、价格、效率等，最终选择SFY55灯珠，参数如下：</p><table><thead><tr><th align="center"><img src="/2024/bright-light/69bd46e38601a5c39a4775097e952c4.jpg"></th><th align="center"><img src="/2024/bright-light/9e2aa0a23079d13a982fd5dbf028188.jpg"></th><th align="center"><img src="/2024/bright-light/357dc85888bb8805679a9b63933a9be.jpg"></th><th align="center"><img src="/2024/bright-light/49928d9e79ca2d41cbe7b6165ae1758.jpg"></th><th align="center"><img src="/2024/bright-light/617e2a1d9a860104e65897fc72a1f42.jpg"></th></tr></thead><tbody><tr><td align="center">外形尺寸</td><td align="center">光通量-电功率</td><td align="center">光通量-电流</td><td align="center">伏安特性曲线</td><td align="center">CCT色温-电流</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>这款灯珠为国产型号，虽然光效较低（但考虑人眼对数感知特性这点效率也问题不大）但是价格便宜，而且功率密度足够。上面加上反光杯进一步增加光强。</p><h3 id="制冷"><a href="#制冷" class="headerlink" title="制冷"></a>制冷</h3><p>散热方案极其重要，工作温度直接影响到灯珠功率效率和寿命。考虑体积没有采用水冷，而是使用了下压式风冷CPU散热器。虽然远超出了此类散热器的标称功率，但是更换风扇为台达9cm 12V 4.32A暴力风扇后完美解决（别问噪音，问就没有）</p><p><img src="/2024/bright-light/535a78305d36408756ae3cecb5cfe69.jpg"></p><h3 id="供电"><a href="#供电" class="headerlink" title="供电"></a>供电</h3><p>灯珠供电需要恒流控制下的大约24V电压，正常情况下电流需要20A.以及最高12V可调供电给散热风扇，3.3V给主控电路，外围这部分直接用buck降压电路和LDO芯片解决了没啥可说的。</p><h4 id="恒流boost电路"><a href="#恒流boost电路" class="headerlink" title="恒流boost电路"></a>恒流boost电路</h4><h5 id="v3驱动板设计"><a href="#v3驱动板设计" class="headerlink" title="v3驱动板设计"></a>v3驱动板设计</h5><h5 id="v2驱动板设计"><a href="#v2驱动板设计" class="headerlink" title="v2驱动板设计"></a>v2驱动板设计</h5><table><thead><tr><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250730214721.png"></th><th align="center"><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250730214705.png"></th><th align="center"><img src="/2024/bright-light/fe65e89473042650ebb57acb621e241.jpg"></th></tr></thead><tbody><tr><td align="center"><a href="ProDoc_P1_2025-07-30.epro">原理图</a></td><td align="center"><a href="ProDoc_PCB3_2025-07-30.epro">PCB</a></td><td align="center">实物</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>实验效果较好：信号线路工作正常，无电磁干扰影响，实现恒流控制。</p><p>存在的问题：风扇未知原因无法启动，断开信号线连接仅接入电源可以启动；逐渐加大电流过程中mos烧毁(200w+)；芯片短路保护控制引脚电压过低，短接后级放大电路强行上拉mos栅极才能工作。</p><p>增大功率过程中mos发热严重，换用TO-220封装的并联折角加散热片焊上去测试可以正常工作到30%电流：</p><table><thead><tr><th align="center"><img src="/2024/bright-light/8a17e114a10a43199fff09d865ebc15.jpg"></th><th align="center"><img src="/2024/bright-light/751b88d810fcca3590ff2f78bb0068c.jpg"></th><th align="center"><img src="/2024/bright-light/c0fa337e340a19501c9705a8f6f66f8.jpg"></th></tr></thead><tbody><tr><td align="center">20%电流工作情况</td><td align="center">Vgs波形</td><td align="center">Vds波形</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>综上，下一个版本要做的改进:</p><ol><li>散热风扇测速信号导致错误</li><li>更换电感值同时降低mosfet开关频率</li><li>stm32的电流检测分辨率不足，要加个运算放大器</li><li>更换mosfet封装和散热</li><li>风扇电源应内部稳压而非直连电源以满足宽电压要求</li><li>栅极电阻改用3.3欧</li><li>芯片ldo电容改用1uf</li></ol><h5 id="v1驱动板设计"><a href="#v1驱动板设计" class="headerlink" title="v1驱动板设计"></a>v1驱动板设计</h5><p>基本无法正常工作，信号反馈回路遭遇严重电磁干扰。设计就不在这放了，主要是PCB设计的问题</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p><img src="/2024/bright-light/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250730222639.png"><br><a href="Light.zip">cubemx设计</a></p><p>stm32:keil main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Header */</span></span><br><span class="line"><span class="comment">/* USER CODE END Header */</span></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;adc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dma.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tim.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private includes ----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ssd1306.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private user code ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">int</span> ERR = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> bufnum[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint16_t</span> ADC_Value[<span class="number">9</span>];</span><br><span class="line"><span class="type">uint16_t</span> ADC_Vout,ADC_Fb,ADC_Vin,ADC_TEMP0,ADC_TEMP1,ADC_KNOB0,ADC_KNOB1,ADC_SW,ADC_TEMPSTM;</span><br><span class="line"><span class="type">float</span> Vout,Iout,Vin,TEMP0,TEMP1,KNOB0,KNOB1,SW,TEMPSTM;</span><br><span class="line"><span class="type">int</span> status_SW,status_KNOB;</span><br><span class="line"><span class="type">int</span> DIM_9209;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  The application entry point.</span></span><br><span class="line"><span class="comment">  * @retval int</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_DMA_Init();</span><br><span class="line">  MX_ADC1_Init();</span><br><span class="line">  MX_I2C1_Init();</span><br><span class="line">  MX_USART1_UART_Init();</span><br><span class="line">  MX_TIM2_Init();</span><br><span class="line">  MX_TIM3_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim3);</span><br><span class="line">HAL_TIM_PWM_Start (&amp;htim2,TIM_CHANNEL_1);</span><br><span class="line">HAL_TIM_PWM_Start (&amp;htim2,TIM_CHANNEL_2);</span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1, (<span class="type">uint32_t</span>*)&amp;ADC_Value, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">SSD1306_Init ();</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line"><span class="comment">//EN</span></span><br><span class="line"><span class="keyword">if</span>(ERR||status_SW==<span class="number">1</span>)&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ADC</span></span><br><span class="line">ADC_Vout=ADC_Value[<span class="number">0</span>];</span><br><span class="line">ADC_Fb=ADC_Value[<span class="number">1</span>];</span><br><span class="line">ADC_Vin=ADC_Value[<span class="number">2</span>];</span><br><span class="line">ADC_TEMP0=ADC_Value[<span class="number">3</span>];</span><br><span class="line">ADC_TEMP1=ADC_Value[<span class="number">4</span>];</span><br><span class="line">ADC_KNOB0=ADC_Value[<span class="number">5</span>];</span><br><span class="line">ADC_KNOB1=ADC_Value[<span class="number">6</span>];</span><br><span class="line">ADC_SW=ADC_Value[<span class="number">7</span>];</span><br><span class="line">ADC_TEMPSTM=ADC_Value[<span class="number">8</span>];</span><br><span class="line">Vout=(<span class="type">float</span>)ADC_Vout * <span class="number">3.3f</span> * <span class="number">11.0f</span>/ <span class="number">4095.0f</span>;</span><br><span class="line">Iout=(<span class="type">float</span>)ADC_Fb * <span class="number">3.3f</span> / <span class="number">0.0125f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">Vin=(<span class="type">float</span>)ADC_Vin * <span class="number">3.3f</span> * <span class="number">11.0f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">TEMP0=(<span class="type">float</span>)ADC_TEMP0 * <span class="number">3.3f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">TEMP1=(<span class="type">float</span>)ADC_TEMP1 * <span class="number">3.3f</span> / <span class="number">4095.0f</span>;</span><br><span class="line">KNOB0=(<span class="type">float</span>)ADC_KNOB0 / <span class="number">4095.0f</span>;</span><br><span class="line">KNOB1=(<span class="type">float</span>)ADC_KNOB1 / <span class="number">4095.0f</span>;</span><br><span class="line">SW=(<span class="type">float</span>)ADC_SW / <span class="number">4095.0f</span>;</span><br><span class="line">TEMPSTM=(<span class="number">1.43f</span> - ((<span class="type">float</span>)ADC_TEMPSTM * <span class="number">3.3f</span> / <span class="number">4095.0f</span>))/<span class="number">0.0043f</span> + <span class="number">25.0f</span>;</span><br><span class="line"><span class="comment">//status</span></span><br><span class="line">status_KNOB = (<span class="type">int</span>)(KNOB0*<span class="number">20</span>)*<span class="number">10</span>+(<span class="type">int</span>)(KNOB1*<span class="number">20.0f</span>);</span><br><span class="line"><span class="keyword">if</span>(status_KNOB&gt;<span class="number">100</span>)status_KNOB=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(SW&gt;<span class="number">0.66f</span>)&#123;status_SW=<span class="number">2</span>;&#125;<span class="keyword">else</span> <span class="keyword">if</span>(SW&gt;<span class="number">0.33f</span>)&#123;status_SW=<span class="number">1</span>;&#125;<span class="keyword">else</span>&#123;status_SW=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="comment">//DIM pwm</span></span><br><span class="line">DIM_9209 = <span class="number">10</span> + status_KNOB*<span class="number">989</span>/<span class="number">100</span>;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim2, TIM_CHANNEL_2, DIM_9209);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief System Clock Configuration</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_PeriphCLKInitTypeDef PeriphClkInit = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class="line"><span class="comment">  * in the RCC_OscInitTypeDef structure.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.HSIState = RCC_HSI_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK</span><br><span class="line">                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;</span><br><span class="line">  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCCEx_PeriphCLKConfig(&amp;PeriphClkInit) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(htim == &amp;htim3)</span><br><span class="line"> &#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);</span><br><span class="line"> <span class="comment">//oled</span></span><br><span class="line">  SSD1306_GotoXY (<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;PWM%03d&quot;</span>, DIM_9209);</span><br><span class="line">SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">SSD1306_GotoXY (<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;Vo:%03.1f&quot;</span>, Vout);</span><br><span class="line">SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">SSD1306_GotoXY (<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line"><span class="built_in">sprintf</span> (bufnum, <span class="string">&quot;Io:%03.1f&quot;</span>, Iout);</span><br><span class="line">SSD1306_Puts (bufnum, &amp;Font_11x18, <span class="number">1</span>);</span><br><span class="line">SSD1306_UpdateScreen();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function is executed in case of error occurrence.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Error_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class="line">  <span class="comment">/* USER CODE END Error_Handler_Debug */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Reports the name of the source file and the source line number</span></span><br><span class="line"><span class="comment">  *         where the assert_param error has occurred.</span></span><br><span class="line"><span class="comment">  * @param  file: pointer to the source file name</span></span><br><span class="line"><span class="comment">  * @param  line: assert_param error line source number</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span> *file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 6 */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 6 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_FULL_ASSERT */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h1>]]></content>
    
    
    <summary type="html">手电筒，但是500W，50000lm</summary>
    
    
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="PCB设计" scheme="http://triority.cc/tags/PCB%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="电力电子" scheme="http://triority.cc/tags/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90/"/>
    
    <category term="stm32" scheme="http://triority.cc/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>ARISS SSTV REWARD</title>
    <link href="http://triority.cc/2024/ARISS-SSTV-REWARD/"/>
    <id>http://triority.cc/2024/ARISS-SSTV-REWARD/</id>
    <published>2024-11-21T00:01:00.000Z</published>
    <updated>2025-10-16T14:58:41.189Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="先上证书"><a href="#先上证书" class="headerlink" title="先上证书"></a>先上证书</h1><p><img src="/2024/ARISS-SSTV-REWARD/b3ffe28b0a16749b9126c52008a3653.jpg"></p><h1 id="国际空间站SSTV活动"><a href="#国际空间站SSTV活动" class="headerlink" title="国际空间站SSTV活动"></a>国际空间站SSTV活动</h1><p>庆祝载人航天业余无线电广播40周年，国际空间站进行了一周的SSTV发射，这是我第一次使用定向天线接收卫星无线电信号。</p><p>虽然效果一般，主要是因为手机陀螺仪指示方向受到无线电接收系统的影响过大，导致巨大的积分误差，因此总是只收到半张图</p><p><img src="/2024/ARISS-SSTV-REWARD/ab899cf8e302b88d61f6527b45719e5.jpg"><br><img src="/2024/ARISS-SSTV-REWARD/52943eb720b36b4f19a333a664bf2c6.jpg"><br><img src="/2024/ARISS-SSTV-REWARD/691d8d1b3ef4d897cfa3da56e0e549a.jpg"><br><img src="/2024/ARISS-SSTV-REWARD/430666c9838367e1e02515142659884.jpg"></p><p>打算以后有空做个高精度的电动跟踪系统，除了可以用来控制定向天线跟踪卫星，还可以顺便用于星空摄影的极轴校准，挖个坑先</p><p>北航的同学给出的建议是不要依靠手机指示方向，可惜等有机会尝试时候活动已经结束了，下次一定</p><p>这是来自ARISS的奖励确认邮件</p><p><img src="/2024/ARISS-SSTV-REWARD/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241123225213.jpg"></p><h1 id="2025"><a href="#2025" class="headerlink" title="2025"></a>2025</h1><p>新年之际这次活动再次尝试，但是没有使用定向天线，直接原装uvk5，效果良好：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113731757474923&bvid=BV1Vn6pYFEap&cid=27583119378&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><p><img src="/2024/ARISS-SSTV-REWARD/50f2689287694ac1ba88a1f5e973b31.jpg"></p>]]></content>
    
    
    <summary type="html">40th Anniversary Celebrating Amateur Radio in Human Spaceflight</summary>
    
    
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>2024年CQWWRTTY竞赛</title>
    <link href="http://triority.cc/2024/CQWWRTTY2024/"/>
    <id>http://triority.cc/2024/CQWWRTTY2024/</id>
    <published>2024-09-29T19:05:13.000Z</published>
    <updated>2025-10-16T14:58:41.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CQWWRTTY"><a href="#CQWWRTTY" class="headerlink" title="CQWWRTTY"></a>CQWWRTTY</h1><p><a href="https://cqwwrtty.com/">CQWWRTTY</a>：Held each year on the last full weekend of September, the contest draws over 15,000 participants and over 3,600 log submittals from around the world.</p><h1 id="BI1HT"><a href="#BI1HT" class="headerlink" title="BI1HT"></a>BI1HT</h1><p>这次是作为北航业余无线电协会的OP参加的，在28号的下午和晚上值机。完成了自己第一次短波QSO。每个OP应该有自己的通联记录的不过现在还没出，有结果再写在这（）</p><p><img src="/img/2287c0f19791f2c90769b79121f165c.jpg"></p><p>同时白嫖来了三张eyeball QSL，因为我没带自己的qwq</p><p><img src="/2024/CQWWRTTY2024/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241002225853.jpg"></p>]]></content>
    
    
    <summary type="html">首次参加业余无线电竞赛！</summary>
    
    
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>接收中科院授时中心电台信号并电子邮件请求QSL</title>
    <link href="http://triority.cc/2024/BPM-QSL/"/>
    <id>http://triority.cc/2024/BPM-QSL/</id>
    <published>2024-09-26T20:17:39.000Z</published>
    <updated>2025-10-16T14:58:41.204Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通联"><a href="#通联" class="headerlink" title="通联"></a>通联</h2><p>之前尝试过几次接收BPM的信号，可惜都没能得到有足够辨识度的信号。今天晚上偶然想起来这件事，运气不错，传播状况良好，不过最后有一点衰减</p><p>频率: 15MHz<br>地点: OM89dx<br>北京时间: 2024.9.26 17:00<br>高度方向：9层向东<br>设备：SDR RSP1<br>天线：小环有源</p><p><a href="BPM.MP3">录音文件(不宜公开内容已做处理)</a></p><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">接收设备名称、型号；接收频段；接收时间段的起止时刻；接收到的内容；以及信号的其它情况：所在地、信号是否清晰，干扰大小、接收体会等情况，写成收听报告(Reception Reports)。</span><br><span class="line">然后，用电子邮件（ch117@ntsc.ac.cn）或平信发给我们国家授时中心。按照国际惯例，我们经过验证后，将及时给无线电爱好者邮寄短波时码接收认证卡。</span><br><span class="line"></span><br><span class="line">索取国家授时中心BPM短波时号认证QSL卡通讯地址：</span><br><span class="line">邮编：710600</span><br><span class="line">地址：陕西临潼18号信箱 中科院国家授时中心</span><br><span class="line">Email:ch117@ntsc.ac.cn</span><br><span class="line">联系人：刘长虹</span><br><span class="line">对于有兴趣的用户可以先阅读本站有关短波授时的情况介绍，然后，选择短波时号的接收频率（5MHZ、10MHz、15MHz、20MHz）中的一种。一般可在半点及整点到来前几分钟开始对准频段，作好记录准备。待听到正确的女生报时内容：BPM......（抱歉此处必须由用户自行收听后，在收听报告中给出），再接收几分钟，就可完成（最明显的特征是每秒一次嘟、嘟声，然后，在半点时刻及整点时刻有女生报时）。</span><br></pre></td></tr></table></figure><p><img src="/2024/BPM-QSL/1727354542795.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>博客github仓库通过action自动化部署</title>
    <link href="http://triority.cc/2024/hexo-github-action/"/>
    <id>http://triority.cc/2024/hexo-github-action/</id>
    <published>2024-09-06T16:49:18.000Z</published>
    <updated>2025-10-16T14:58:41.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="方案比较"><a href="#方案比较" class="headerlink" title="方案比较"></a>方案比较</h1><p>之前的部署方案是服务器本地保存源文件，写入新内容时使用vscode的远程ssh编辑，然后git推送到github仓库作为备份。有一点问题就是服务器硬件来自阿里云的轻量应用服务器，对硬盘的iops有限制，进行大量读写操作时候一旦超过就会引发系统死机。以及稀烂的CPU和内存资源，随着源文件越来越大，生成时间也越来越长。这个时候github推出了action功能，允许我直接在github的服务器上进行生成操作，而且速度掉打阿里云服务器。所以方案改成这样，直接使用github保存源代码，每次提交代码之后自动进行生成操作，同时将生成的静态文件直接复制到服务器的网站服务目录内。同时也简化了另一个问题，就是多用户编辑，之前需要服务器上多个用户的读写权限，现在只需要github仓库添加作者就可以了。</p><h1 id="hexo部署推送"><a href="#hexo部署推送" class="headerlink" title="hexo部署推送"></a>hexo部署推送</h1><p>本来是应该用hexo的git部署的，然后没配置明白hexo部署action的ssh密钥登录，反正这段用不到了，已经换成直接复制了</p><p>也就是执行<code>hexo d</code>之后将生成的代码通过git推送到自己的远程服务器，这部分内容我在2022年写过，因为当时的方案是本地编辑生成然后git推送到服务器，和现在一样，直接参考<a href="https://triority.cc/2022/remote-server-hexo/">这篇文章</a></p><h1 id="github-action配置"><a href="#github-action配置" class="headerlink" title="github action配置"></a>github action配置</h1><p>github开了一个新的仓库保存源代码，上传现有内容之后，准备新建action。<code>GitHub Actions</code>的配置文件叫做<code>workflow</code>文件，存放在源代码仓库的<code>.github/workflows</code>目录。GitHub在我们完成预设触发条件时，只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动读取运行该文件。</p><h2 id="编辑workflow"><a href="#编辑workflow" class="headerlink" title="编辑workflow"></a>编辑workflow</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">name: Blog CI/CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [main] # 当监测 main,master 的 push</span><br><span class="line">    paths: # 监测文件变动限制</span><br><span class="line">      - &#x27;*.json&#x27;</span><br><span class="line">      - &#x27;**.yml&#x27;</span><br><span class="line">      - &#x27;**.md&#x27;</span><br><span class="line">      - &#x27;**/source/**&#x27;</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  blog: # 任务名称</span><br><span class="line">    timeout-minutes: 10 # 设置 10 分钟超时</span><br><span class="line">    runs-on: ubuntu-latest # 指定最新 ubuntu 系统</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2 # 拉取仓库代码</span><br><span class="line">      - uses: actions/setup-node@v2 # 设置 node.js 环境</span><br><span class="line">      - name: Cache node_modules # 缓存 node_modules，提高编译速度，毕竟每月只有 2000 分钟。</span><br><span class="line">        uses: actions/cache@v2</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: ~/.npm</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line">      - name: Init Node.js # 安装源代码所需插件</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line">          echo &quot;init node successful&quot;</span><br><span class="line">      - name: Install Hexo-cli # 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          npm install -g hexo-cli --save</span><br><span class="line">          echo &quot;install hexo successful&quot;</span><br><span class="line">      - name: Build # 编译创建静态博客文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo g</span><br><span class="line">          echo &quot;build blog successful&quot;</span><br><span class="line">      - name: Deploy # 设置 git 信息并推送静态博客文件</span><br><span class="line">        uses: easingthemes/ssh-deploy@v2.1.1</span><br><span class="line">        env:</span><br><span class="line">          # 私钥id_rsa，存在secrets的PRIVATE_KEY中</span><br><span class="line">          SSH_PRIVATE_KEY: $&#123;&#123; secrets.PRIVATE_KEY &#125;&#125;</span><br><span class="line">          # 复制操作参数，&quot;-avzr --delete&quot;部署时清空服务器目标目录下的文件</span><br><span class="line">          ARGS: &quot;-avzr --delete&quot; </span><br><span class="line">          # 源目录，相对于$GITHUB_WORKSPACE根目录的路径</span><br><span class="line">          SOURCE: &quot;public/&quot;</span><br><span class="line">          REMOTE_HOST: &quot;www.triority.cc&quot;</span><br><span class="line">          REMOTE_USER: &quot;root&quot;</span><br><span class="line">          # 目标目录</span><br><span class="line">          TARGET: &quot;/blog_public&quot;</span><br><span class="line"></span><br><span class="line">      - run: echo &quot;Deploy Successful!&quot;</span><br></pre></td></tr></table></figure><p>然后在仓库设置密钥<code>PRIVATE_KEY</code>值为ssh私钥文件即可</p>]]></content>
    
    
    <summary type="html">目前找到的博客部署最优解</summary>
    
    
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="hexo" scheme="http://triority.cc/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客文章编辑发布指南</title>
    <link href="http://triority.cc/2024/hexo-post-guide/"/>
    <id>http://triority.cc/2024/hexo-post-guide/</id>
    <published>2024-07-22T18:33:41.000Z</published>
    <updated>2025-10-16T14:58:41.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>博客采用静态hexo框架，基于node js，文章使用markdown语言进行编写。源文件保存于github仓库，使用git进行源码管理，使用github action自动化部署到远程服务器，并使用nginx提供对外服务。</p><h1 id="编辑权限"><a href="#编辑权限" class="headerlink" title="编辑权限"></a>编辑权限</h1><p>可以私信我或发邮件申请仓库编辑权限，或者直接在github仓库发起合并请求</p><h1 id="新建和编辑文章"><a href="#新建和编辑文章" class="headerlink" title="新建和编辑文章"></a>新建和编辑文章</h1><ul><li><code>git clone</code>下载github仓库源代码到本地</li><li>编辑文件内容或使用<code>hexo new [name]</code>新建一个web链接为name的文章，新建的文章保存为<code>/hexo/source/[year]/[name].md</code>，即可在其中使用markdown语言编写文章</li><li>提交你的更改并同步到github仓库</li><li>github action自动进行网站内容的生成和部署，等待三五分钟左右即可打开网站查看更改。如果<code>build</code>出现报错<code>err: Error: ENOENT: no such file or directory, open &#39;./search.xml&#39;</code>请直接重试，仍然报错基本上markdown语法错误，请再次检查你的更改</li></ul><h1 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: [name]</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> null</span><br><span class="line">cover: /img/RUN.png</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> - 值得一提的文章</span><br><span class="line"><span class="bullet">  -</span> - 旅游&amp;摄影</span><br><span class="line"><span class="bullet">  -</span> - 日记本</span><br><span class="line"><span class="bullet">  -</span> - 整活&amp;游戏</span><br><span class="line"><span class="bullet">  -</span> - 文档&amp;笔记</span><br><span class="line"><span class="bullet">  -</span> - 折腾记录</span><br><span class="line"><span class="bullet">  -</span> - 作品&amp;项目总结</span><br><span class="line"><span class="bullet">  -</span> - 过时&amp;弃用&amp;无意义&amp;失败品</span><br><span class="line"><span class="bullet">  -</span> - 外部引用</span><br><span class="line"><span class="bullet">  -</span> - 无线电</span><br><span class="line">date: 2024-07-22 18:44:51</span><br><span class="line"><span class="section">description:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建的文章文件就包含上面的内容：</p><ul><li>title:文章标题，默认为设置的文章链接，可以修改为其他文字，可以为中文</li><li>tags:文章标签，可以参考标签页已有的进行设置，也可以新建自己的。如果不想设置请直接删除这一配置项</li><li>cover:文章封面图。文章封面图片统一保存于<code>hexo/source/img/</code>内</li><li>categories:文章分类，设置方法类似tag</li><li>data:文件新建时间，自动生成。主页文章排序依靠时间，修改为较大的值可用于置顶文章，但是一般不建议设置置顶</li><li>description:简介描述。随便写两句话介绍一下就好。建议在此处加入文章作者信息(如果不是Triority本人编辑的话)</li></ul><p>编辑完成应该类似这样，以本篇文章为例：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客文章编辑发布指南</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> hexo</span><br><span class="line"><span class="bullet">  -</span> 文档</span><br><span class="line">cover: /img/RUN.png</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 文档&amp;笔记</span><br><span class="line">date: 2024-07-22 18:33:41</span><br><span class="line"><span class="section">description: 博客帮助文件</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><div class="note danger modern"><p>不需要的配置项记得删除，比如你不想写description就把这一行全都删掉，否则文件生成会报错。<br>如果你添加了新的categories，请编辑模板文件加上你新增的分类字符串，模板文件位于<code>/hexo/scaffolds/post.md</code></p></div><h1 id="内容编辑"><a href="#内容编辑" class="headerlink" title="内容编辑"></a>内容编辑</h1><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p>markdown语言语法请自行学习，初期使用不熟练推荐使用开源项目：<a href="https://pandao.github.io/editor.md/">Editor.md</a></p><h2 id="资源文件路径"><a href="#资源文件路径" class="headerlink" title="资源文件路径"></a>资源文件路径</h2><p>新建文章时，除了文章的文本文件<code>/hexo/source/[year]/[name].md</code>同时还会新建<code>/hexo/source/[year]/[name]</code>文件夹，对于在文章中使用的文件，均应保存在此处，包括图片，文件等内容。调用时直接使用文件名即可。</p><p>例如文章中添加的图片<code>![](img.img)</code>，图片<code>img.img</code>直接保存在上述文件夹即可，文件同理</p><h2 id="标签外挂等特殊语法"><a href="#标签外挂等特殊语法" class="headerlink" title="标签外挂等特殊语法"></a>标签外挂等特殊语法</h2><p>这里只说一些常用的，因为标签外挂语法太多了，参见<a href="https://butterfly.js.org/posts/2df239ce/">文档</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//使用插件的语法</span><br><span class="line">&#123;% asset_img xxx.png 描述 %&#125;</span><br><span class="line">//Markdown语法</span><br><span class="line">![描述](xxx.png)</span><br></pre></td></tr></table></figure><h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=wwww.xxx.cn/xxx.mp4&quot; %&#125;</span><br><span class="line">&#123;% dplayer &quot;url=/video/xxx.mp4&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="站内跳转"><a href="#站内跳转" class="headerlink" title="站内跳转"></a>站内跳转</h3><p>虽然可以直接使用markdown超链接直接跳转，但是不建议这样做。因为一旦更改了域名所有文章内的链接都将失效。建议使用<code>post_link</code>标签。<a href="https://hexo.io/docs/tag-plugins#Include-Posts">官方文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>这样就会跳转到文件名为<code>filename.md</code>的文章，并显示标题为<code>[title]</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link CQWWRTTY2024 &#x27;RTTY竞赛&#x27; %&#125;</span><br></pre></td></tr></table></figure><a href="/2024/CQWWRTTY2024/" title="RTTY竞赛">RTTY竞赛</a><h3 id="并排的图片"><a href="#并排的图片" class="headerlink" title="并排的图片"></a>并排的图片</h3><p>并排图片一般使用表格来表示格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| ![](1.png) | ![](2.png) | ![](3.png) |</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">| str1 | str2 | str3 |</span><br></pre></td></tr></table></figure><p>如果图片宽度不一致可能导致看起来很奇怪，如果不想手动改变图片尺寸，可以直接在表格新增一行相同的超级长的假图片，就可以让表格均分宽度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| ![](1.png) | ![](2.png) | ![](3.png) |</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">| str1 | str2 | str3 |</span><br><span class="line">| &lt;img width=2000/&gt; | &lt;img width=2000/&gt; | &lt;img width=2000/&gt; |</span><br></pre></td></tr></table></figure><h3 id="文件下载链接"><a href="#文件下载链接" class="headerlink" title="文件下载链接"></a>文件下载链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[文字](xxx.zip)</span><br></pre></td></tr></table></figure><h3 id="哔哩哔哩视频"><a href="#哔哩哔哩视频" class="headerlink" title="哔哩哔哩视频"></a>哔哩哔哩视频</h3><p>需要替换的内容：<code>src</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=727587109&amp;bvid=BV1LS4y1v7Nj&amp;cid=748560556&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; height: 100%; Left: 0; top: 0;&quot; &gt;&lt;/iframe&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊提示"><a href="#特殊提示" class="headerlink" title="特殊提示"></a>特殊提示</h3><div class="note danger modern"><p>DANGER!!!</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">DANGER!!!</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h3 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h3><details>  <summary>来点击我</summary>  于是我就被展开啦</details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;点击时的区域标题&lt;/summary&gt;</span><br><span class="line">  xxx</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><h3 id="小黑块"><a href="#小黑块" class="headerlink" title="小黑块"></a>小黑块</h3><p>这是什么？哦原来<!-- spoiler-1ffd9:black -->  <span class="spoiler" onclick="this.classList.toggle('spoiler')">    <span class="spoiler-box spoiler-1ffd9">这是一个小黑块</span>  </span>哦！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% spoiler 被遮挡文字 %&#125;</span><br></pre></td></tr></table></figure><h1 id="文件生成和git提交"><a href="#文件生成和git提交" class="headerlink" title="文件生成和git提交"></a>文件生成和git提交</h1><p>文章编辑完成之后，在<code>/hexo</code>目录打开终端，输入<code>hexo g</code>进行html文件生成，如果报错请检查文章内是否有语法错误，特别是文章配置部分。</p><p>如果报错为以下内容，无需理会重新执行<code>hexo g</code>就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    errno: -2,</span><br><span class="line">    syscall: &#x27;open&#x27;,</span><br><span class="line">    code: &#x27;ENOENT&#x27;,</span><br><span class="line">    path: &#x27;./search.xml&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line">root@iZj6c9vpc0x2q5gkwla1erZ:/hexo#</span><br></pre></td></tr></table></figure><p>然后进行git提交和推送。别忘记这一步，git已经拯救了好几次这个博客</p>]]></content>
    
    
    <summary type="html">博客帮助文件</summary>
    
    
    
    <category term="文档&amp;笔记" scheme="http://triority.cc/categories/%E6%96%87%E6%A1%A3-%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="hexo" scheme="http://triority.cc/tags/hexo/"/>
    
    <category term="文档" scheme="http://triority.cc/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>超高速直线电机</title>
    <link href="http://triority.cc/2024/Ultra-high-speed-linear-motor/"/>
    <id>http://triority.cc/2024/Ultra-high-speed-linear-motor/</id>
    <published>2024-07-02T21:37:22.000Z</published>
    <updated>2025-10-16T14:58:41.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这个项目是我大学本科四年做的最复杂的一个，从大一下学期到大三结束一路磕磕绊绊走走停停终于到了可以写总结的时候，现在这个仅剩下一点无关紧要的收尾工作了。</p><div class="note danger modern"><p>警告：本文设计内容具有危险性，不提供任何制造文件资料，仅供科研交流使用，装置测试后已经拆除，严禁仿造用于其他用途。</p></div><p>说一下我的最终设计路线和目标：</p><ul><li>高压方案(&gt;300V)</li><li>快速连续工作(&lt;1s)</li><li>速度快(&gt;100m&#x2F;s)</li><li>效率有追求但不很重要(&gt;10%)</li></ul><h1 id="Maxwell电磁力运动仿真"><a href="#Maxwell电磁力运动仿真" class="headerlink" title="Maxwell电磁力运动仿真"></a>Maxwell电磁力运动仿真</h1><p>之前写的教程比较简略（晦涩难懂），步骤太多文字写起来很麻烦，直接录下来操作视频发b站了</p><p>视频中演示的结构为高压方案的单路boost拓扑，位置触发的时序控制，外电路激励源</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113007065564118&bvid=BV168WEeBEmV&cid=500001658823200&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><h1 id="4-LEVELS"><a href="#4-LEVELS" class="headerlink" title="4 LEVELS"></a>4 LEVELS</h1><h2 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h2><ul><li>加速体：A3材质M8x20圆柱定位销</li><li>轨道：内8.5外9.5钢管</li><li>电压：350V</li><li>拓扑：boost</li><li>IGBT：IRGPS4067d</li><li>线圈：0.45mm漆包铜线</li></ul><h2 id="Ansys-Maxwell仿真"><a href="#Ansys-Maxwell仿真" class="headerlink" title="Ansys Maxwell仿真"></a>Ansys Maxwell仿真</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"/2024/Ultra-high-speed-linear-motor/baaf983f8c3aca6c53c2238da466f09d.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/a39d70ac42f5250a742b76c01ecb0b3.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/16358072e8a10c489cf6da88cacde99.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/a77a7f8f7a4bb36dd2e99821d910b03.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/69911deecbd0ee65e2049c05d23a9d8.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/86de12335351f9e49a989d161d67152.png"></th></tr></thead><tbody><tr><td align="center">实体模型</td><td align="center">电路模型</td><td align="center">电流</td><td align="center">拉力</td><td align="center">速度</td></tr></tbody></table><p><a href="DCP_maxwell.zip">仿真工程文件</a></p><p>我还找到了一个maxwell的使用教程文档，不知道有没有用，因为太长了我没看，但是万一有人需要呢？</p><div class="row">    <embed src="MAXWELL基础教程电子版.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="功率电路"><a href="#功率电路" class="headerlink" title="功率电路"></a>功率电路</h2><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240719201740.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240719202048.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/f6e19e7d493377e57490c1ba6c95cbc.jpg"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/fb16ed462e5e7065995940dd605b93f.jpg"></th></tr></thead><tbody><tr><td align="center">功率板原理图</td><td align="center">驱动板原理图</td><td align="center">照片</td><td align="center">效果</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>线圈设计参数：</p><p><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240719202940.png"></p><p>实测速度基本稳定在45m&#x2F;s，如果连续使用线圈发热增加的电阻率会降低电流导致速度降低，实测温度到40度时速度会降低到40左右，因此未来的设计将会关注热管理问题。</p><h2 id="时序控制"><a href="#时序控制" class="headerlink" title="时序控制"></a>时序控制</h2><p>外接自制那个esp32开发板，代码在这里，时序使用循环计算，不再需要手动考虑高低电平切换顺序了，以及做了串口调参，节省一下flash的烧录寿命hhh</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cxx: control[just a str], level, 0:duration/1:start time//2:end time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start time</span></span><br><span class="line"><span class="type">int</span> c11_time = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c21_time = <span class="number">1650</span>;</span><br><span class="line"><span class="type">int</span> c31_time = <span class="number">2400</span>;</span><br><span class="line"><span class="type">int</span> c41_time = <span class="number">2950</span>;</span><br><span class="line"><span class="comment">// duration</span></span><br><span class="line"><span class="type">int</span> c10_time = <span class="number">1460</span>;</span><br><span class="line"><span class="type">int</span> c20_time = <span class="number">840</span>;</span><br><span class="line"><span class="type">int</span> c30_time = <span class="number">670</span>;</span><br><span class="line"><span class="type">int</span> c40_time = <span class="number">580</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// trigger status</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c1 = <span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c2 = <span class="number">27</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c3 = <span class="number">14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c4 = <span class="number">12</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c5 = <span class="number">13</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseStartTime = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseNowTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">String inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(c1, OUTPUT);</span><br><span class="line">  pinMode(c2, OUTPUT);</span><br><span class="line">  pinMode(c3, OUTPUT);</span><br><span class="line">  pinMode(c4, OUTPUT);</span><br><span class="line">  pinMode(c5, OUTPUT);</span><br><span class="line">  digitalWrite(c1, LOW);</span><br><span class="line">  digitalWrite(c2, LOW);</span><br><span class="line">  digitalWrite(c3, LOW);</span><br><span class="line">  digitalWrite(c4, LOW);</span><br><span class="line">  digitalWrite(c5, LOW);</span><br><span class="line"></span><br><span class="line">  pinMode(sw, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// serial</span></span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    delay(<span class="number">5</span>);</span><br><span class="line">    <span class="type">char</span> recieved = Serial.read();</span><br><span class="line">    inData += recieved;</span><br><span class="line">    <span class="keyword">if</span>(recieved == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (inData.length()&lt;<span class="number">4</span>)&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Too short&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String function = inData.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (function==<span class="string">&quot;c11 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c11_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c11 = &quot;</span>);</span><br><span class="line">        Serial.println(c11_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c10 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c10_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c10 = &quot;</span>);</span><br><span class="line">        Serial.println(c10_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c21 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c21_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c21 = &quot;</span>);</span><br><span class="line">        Serial.println(c21_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c20 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c20_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c20 = &quot;</span>);</span><br><span class="line">        Serial.println(c20_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c31 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c31_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c31 = &quot;</span>);</span><br><span class="line">        Serial.println(c31_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c30 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c30_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c30 = &quot;</span>);</span><br><span class="line">        Serial.println(c30_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c41 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c41_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c41 = &quot;</span>);</span><br><span class="line">        Serial.println(c41_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c40 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c40_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c40 = &quot;</span>);</span><br><span class="line">        Serial.println(c40_time);</span><br><span class="line">      &#125;</span><br><span class="line">      inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// switch</span></span><br><span class="line">  <span class="keyword">if</span> (digitalRead(sw)==LOW)&#123;</span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    <span class="type">int</span> c11 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c21 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c31 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c41 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c22 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c32 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c42 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12_time = c11_time + c10_time;</span><br><span class="line">    <span class="type">int</span> c22_time = c21_time + c20_time;</span><br><span class="line">    <span class="type">int</span> c32_time = c31_time + c30_time;</span><br><span class="line">    <span class="type">int</span> c42_time = c41_time + c40_time;</span><br><span class="line">    Serial.println(<span class="string">&quot;starting&quot;</span>);</span><br><span class="line">    pulseStartTime = micros();</span><br><span class="line">    pulseNowTime = micros();</span><br><span class="line">    <span class="keyword">while</span>(c11||c12||c21||c22||c31||c32||c41||c42)&#123;</span><br><span class="line">      pulseNowTime = micros();</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c11_time &amp;&amp; c11)&#123;</span><br><span class="line">        digitalWrite(c1, HIGH);</span><br><span class="line">        c11 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c12_time &amp;&amp; c12)&#123;</span><br><span class="line">        digitalWrite(c1, LOW);</span><br><span class="line">        c12 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c21_time &amp;&amp; c21)&#123;</span><br><span class="line">        digitalWrite(c2, HIGH);</span><br><span class="line">        c21 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c22_time &amp;&amp; c22)&#123;</span><br><span class="line">        digitalWrite(c2, LOW);</span><br><span class="line">        c22 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c31_time &amp;&amp; c31)&#123;</span><br><span class="line">        digitalWrite(c3, HIGH);</span><br><span class="line">        c31 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c32_time &amp;&amp; c32)&#123;</span><br><span class="line">        digitalWrite(c3, LOW);</span><br><span class="line">        c32 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c41_time &amp;&amp; c41)&#123;</span><br><span class="line">        digitalWrite(c4, HIGH);</span><br><span class="line">        c41 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c42_time &amp;&amp; c42)&#123;</span><br><span class="line">        digitalWrite(c4, LOW);</span><br><span class="line">        c42 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;<span class="number">1000000</span>)&#123;</span><br><span class="line">        Serial.print(<span class="string">&quot;ERROR, time out&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.println(<span class="string">&quot;releasing&quot;</span>);</span><br><span class="line"></span><br><span class="line">    digitalWrite(c5, HIGH);</span><br><span class="line">    delay(<span class="number">2000</span>);</span><br><span class="line">    digitalWrite(c5, LOW);</span><br><span class="line">    Serial.println(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ZVS升压电源"><a href="#ZVS升压电源" class="headerlink" title="ZVS升压电源"></a>ZVS升压电源</h2><p>电源有多种方案，最简单的ZVS谐振逆变升压，十分简单但是不够可控可靠，无法控制工作状态，而且在负载过流情况下一旦停止谐振就会直接在电源上短路，如果使用电池供电十分危险，不过只要重新接入电源重新进入谐振状态就可以继续正常工作。另一种使用开关电路逆变升压，较为复杂但是可控。当然我们的需求是给电容充电，使用恒流源更合适，具体实现参考论文《一种谐振型推挽式直流变换器》</p><p>不知道为什么这个电路被称为ZVS(零电压开关)电路，这只是一个恰好工作在零电压开关状态的谐振电路，不过这个名称和电路十分经典广为流传和使用，甚至淘宝所售套件的电源全都是这个方案，而且也足够简单，非常容易做</p><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_1.jpg"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839.jpg"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_2.jpg"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022221839_3.jpg"></th></tr></thead><tbody><tr><td align="center">洞洞板试验</td><td align="center">输入</td><td align="center">波形</td><td align="center">输出</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240704130314.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240704130544.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231113160735.jpg"></th></tr></thead><tbody><tr><td align="center">原理图</td><td align="center">3D模型</td><td align="center">照片</td></tr></tbody></table><p>缺失模型的元件是电感和变压器。电感一定要电流足够大，分享一下我的电感和变压器选型吧</p><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/80744d6641f6b1eeb3cd457683ebc8e.jpg"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/055435e79723270fdaf48b5150b58e2.jpg"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/11fc579bfb3f5c95989dac205c9dcf4.jpg"></th></tr></thead><tbody><tr><td align="center">电感</td><td align="center">现在用的电容</td><td align="center">打算以后换的电容</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>这个电路的问题我也说过了，就是一旦过载停振就会短路，所以我在前面加了一个PMos控制电源开关，短路可以及时关闭和重启。</p><h1 id="n-5-LEVELS"><a href="#n-5-LEVELS" class="headerlink" title="n*5 LEVELS"></a>n*5 LEVELS</h1><h2 id="电路设计"><a href="#电路设计" class="headerlink" title="电路设计"></a>电路设计</h2><p>这次采用了模块化设计，每个板子是5级功率回路，可以直接串联使用</p><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134109.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134138.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134204.png"></th></tr></thead><tbody><tr><td align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134123.png"></td><td align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134148.png"></td><td align="center"><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134215.png"></td></tr><tr><td align="center">放电电路</td><td align="center">驱动电路</td><td align="center">供电主板</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>线圈设计参数：<br><img src="/2024/Ultra-high-speed-linear-motor/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240910134526.png"></p><h2 id="时序控制-1"><a href="#时序控制-1" class="headerlink" title="时序控制"></a>时序控制</h2><h3 id="控制程序"><a href="#控制程序" class="headerlink" title="控制程序"></a>控制程序</h3><p>考虑到esp32引脚数量不足，主控芯片更换为stm32。以及这次可以进行电压测量和充电电流监控并主动控制，加入了这部分控制代码</p><details>  <summary>一些吐槽</summary>  这段代码实在是太不优雅了，真受不了这一堆if else，但是又一直懒得重构。。。至少暂时不耽误用。以及现在电压主动控制还没写，等写完了就删掉这句话</details><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cxx: control[just a str], level, 0:duration/1:start time//2:end time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start time</span></span><br><span class="line"><span class="type">int</span> c11_time = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c21_time = <span class="number">1350</span>;</span><br><span class="line"><span class="type">int</span> c31_time = <span class="number">2000</span>;</span><br><span class="line"><span class="type">int</span> c41_time = <span class="number">2630</span>;</span><br><span class="line"><span class="type">int</span> c51_time = <span class="number">3100</span>;</span><br><span class="line"><span class="type">int</span> c61_time = <span class="number">3490</span>;</span><br><span class="line"><span class="type">int</span> c71_time = <span class="number">3830</span>;</span><br><span class="line"><span class="type">int</span> c81_time = <span class="number">4140</span>;</span><br><span class="line"><span class="type">int</span> c91_time = <span class="number">4410</span>;</span><br><span class="line"><span class="comment">// duration</span></span><br><span class="line"><span class="type">int</span> c10_time = <span class="number">1340</span>;</span><br><span class="line"><span class="type">int</span> c20_time = <span class="number">880</span>;</span><br><span class="line"><span class="type">int</span> c30_time = <span class="number">770</span>;</span><br><span class="line"><span class="type">int</span> c40_time = <span class="number">590</span>;</span><br><span class="line"><span class="type">int</span> c50_time = <span class="number">500</span>;</span><br><span class="line"><span class="type">int</span> c60_time = <span class="number">470</span>;</span><br><span class="line"><span class="type">int</span> c70_time = <span class="number">400</span>;</span><br><span class="line"><span class="type">int</span> c80_time = <span class="number">360</span>;</span><br><span class="line"><span class="type">int</span> c90_time = <span class="number">340</span>;</span><br><span class="line"><span class="comment">// trigger status</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c1 = <span class="number">13</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c2 = <span class="number">12</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c3 = <span class="number">14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c4 = <span class="number">27</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c5 = <span class="number">26</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c6 = <span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c7 = <span class="number">33</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c8 = <span class="number">32</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c9 = <span class="number">23</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sw = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> serial_sw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseStartTime = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pulseNowTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">String inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(c1, OUTPUT);</span><br><span class="line">  pinMode(c2, OUTPUT);</span><br><span class="line">  pinMode(c3, OUTPUT);</span><br><span class="line">  pinMode(c4, OUTPUT);</span><br><span class="line">  pinMode(c5, OUTPUT);</span><br><span class="line">  pinMode(c6, OUTPUT);</span><br><span class="line">  pinMode(c7, OUTPUT);</span><br><span class="line">  pinMode(c8, OUTPUT);</span><br><span class="line">  pinMode(c9, OUTPUT);</span><br><span class="line">  digitalWrite(c1, LOW);</span><br><span class="line">  digitalWrite(c2, LOW);</span><br><span class="line">  digitalWrite(c3, LOW);</span><br><span class="line">  digitalWrite(c4, LOW);</span><br><span class="line">  digitalWrite(c5, LOW);</span><br><span class="line">  digitalWrite(c6, LOW);</span><br><span class="line">  digitalWrite(c7, LOW);</span><br><span class="line">  digitalWrite(c8, LOW);</span><br><span class="line">  digitalWrite(c9, LOW);</span><br><span class="line"></span><br><span class="line">  pinMode(sw, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// serial</span></span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    delay(<span class="number">5</span>);</span><br><span class="line">    <span class="type">char</span> recieved = Serial.read();</span><br><span class="line">    inData += recieved;</span><br><span class="line">    <span class="keyword">if</span>(recieved == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (inData.length()&lt;<span class="number">4</span>)&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Too short&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String function = inData.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">if</span> (function==<span class="string">&quot;shot&quot;</span>)&#123;</span><br><span class="line">        serial_sw = <span class="number">1</span>;</span><br><span class="line">        Serial.println(<span class="string">&quot;Shot after 1 second!&quot;</span>);</span><br><span class="line">        delay(<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (function==<span class="string">&quot;c11 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c11_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c11 = &quot;</span>);</span><br><span class="line">        Serial.println(c11_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c10 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c10_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c10 = &quot;</span>);</span><br><span class="line">        Serial.println(c10_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c21 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c21_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c21 = &quot;</span>);</span><br><span class="line">        Serial.println(c21_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c20 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c20_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c20 = &quot;</span>);</span><br><span class="line">        Serial.println(c20_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c31 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c31_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c31 = &quot;</span>);</span><br><span class="line">        Serial.println(c31_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c30 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c30_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c30 = &quot;</span>);</span><br><span class="line">        Serial.println(c30_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c41 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c41_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c41 = &quot;</span>);</span><br><span class="line">        Serial.println(c41_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c40 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c40_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c40 = &quot;</span>);</span><br><span class="line">        Serial.println(c40_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c51 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c51_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c51 = &quot;</span>);</span><br><span class="line">        Serial.println(c51_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c50 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c50_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c50 = &quot;</span>);</span><br><span class="line">        Serial.println(c50_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c61 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c61_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c61 = &quot;</span>);</span><br><span class="line">        Serial.println(c61_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c60 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c60_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c60 = &quot;</span>);</span><br><span class="line">        Serial.println(c60_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c71 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c71_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c71 = &quot;</span>);</span><br><span class="line">        Serial.println(c71_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c70 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c70_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c70 = &quot;</span>);</span><br><span class="line">        Serial.println(c70_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c81 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c81_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c81 = &quot;</span>);</span><br><span class="line">        Serial.println(c81_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c80 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c80_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c80 = &quot;</span>);</span><br><span class="line">        Serial.println(c80_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c91 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c91_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c91 = &quot;</span>);</span><br><span class="line">        Serial.println(c91_time);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (function==<span class="string">&quot;c90 &quot;</span>)&#123;</span><br><span class="line">        String value_str = inData.substring(<span class="number">4</span>, inData.length());</span><br><span class="line">        c90_time = value_str.toInt();</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Now c90 = &quot;</span>);</span><br><span class="line">        Serial.println(c90_time);</span><br><span class="line">      &#125;</span><br><span class="line">      inData=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// switch</span></span><br><span class="line">  <span class="keyword">if</span> (digitalRead(sw)==LOW||serial_sw)&#123;</span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    serial_sw = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c11 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c21 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c31 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c41 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c51 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c61 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c71 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c81 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c91 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c22 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c32 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c42 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c52 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c62 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c72 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c82 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c92 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c12_time = c11_time + c10_time;</span><br><span class="line">    <span class="type">int</span> c22_time = c21_time + c20_time;</span><br><span class="line">    <span class="type">int</span> c32_time = c31_time + c30_time;</span><br><span class="line">    <span class="type">int</span> c42_time = c41_time + c40_time;</span><br><span class="line">    <span class="type">int</span> c52_time = c51_time + c50_time;</span><br><span class="line">    <span class="type">int</span> c62_time = c61_time + c60_time;</span><br><span class="line">    <span class="type">int</span> c72_time = c71_time + c70_time;</span><br><span class="line">    <span class="type">int</span> c82_time = c81_time + c80_time;</span><br><span class="line">    <span class="type">int</span> c92_time = c91_time + c90_time;</span><br><span class="line">    Serial.println(<span class="string">&quot;starting&quot;</span>);</span><br><span class="line">    pulseStartTime = micros();</span><br><span class="line">    pulseNowTime = micros();</span><br><span class="line">    <span class="keyword">while</span>(c11||c12||c21||c22||c31||c32||c41||c42||c51||c52||c61||c62||c71||c72||c81||c82||c91||c92)&#123;</span><br><span class="line">      pulseNowTime = micros();</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c11_time &amp;&amp; c11)&#123;</span><br><span class="line">        digitalWrite(c1, HIGH);</span><br><span class="line">        c11 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c12_time &amp;&amp; c12)&#123;</span><br><span class="line">        digitalWrite(c1, LOW);</span><br><span class="line">        c12 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c21_time &amp;&amp; c21)&#123;</span><br><span class="line">        digitalWrite(c2, HIGH);</span><br><span class="line">        c21 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c22_time &amp;&amp; c22)&#123;</span><br><span class="line">        digitalWrite(c2, LOW);</span><br><span class="line">        c22 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c31_time &amp;&amp; c31)&#123;</span><br><span class="line">        digitalWrite(c3, HIGH);</span><br><span class="line">        c31 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c32_time &amp;&amp; c32)&#123;</span><br><span class="line">        digitalWrite(c3, LOW);</span><br><span class="line">        c32 = <span class="number">0</span>;&#125;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c41_time &amp;&amp; c41)&#123;</span><br><span class="line">        digitalWrite(c4, HIGH);</span><br><span class="line">        c41 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c42_time &amp;&amp; c42)&#123;</span><br><span class="line">        digitalWrite(c4, LOW);</span><br><span class="line">        c42 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c51_time &amp;&amp; c51)&#123;</span><br><span class="line">        digitalWrite(c5, HIGH);</span><br><span class="line">        c51 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c52_time &amp;&amp; c52)&#123;</span><br><span class="line">        digitalWrite(c5, LOW);</span><br><span class="line">        c52 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c61_time &amp;&amp; c61)&#123;</span><br><span class="line">        digitalWrite(c6, HIGH);</span><br><span class="line">        c61 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c72_time &amp;&amp; c62)&#123;</span><br><span class="line">        digitalWrite(c6, LOW);</span><br><span class="line">        c62 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c71_time &amp;&amp; c71)&#123;</span><br><span class="line">        digitalWrite(c7, HIGH);</span><br><span class="line">        c71 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c72_time &amp;&amp; c72)&#123;</span><br><span class="line">        digitalWrite(c7, LOW);</span><br><span class="line">        c72 = <span class="number">0</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c81_time &amp;&amp; c81)&#123;</span><br><span class="line">        digitalWrite(c8, HIGH);</span><br><span class="line">        c81 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c82_time &amp;&amp; c82)&#123;</span><br><span class="line">        digitalWrite(c8, LOW);</span><br><span class="line">        c82 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c91_time &amp;&amp; c91)&#123;</span><br><span class="line">        digitalWrite(c9, HIGH);</span><br><span class="line">        c91 = <span class="number">0</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;c92_time &amp;&amp; c92)&#123;</span><br><span class="line">        digitalWrite(c9, LOW);</span><br><span class="line">        c92 = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(pulseNowTime-pulseStartTime&gt;<span class="number">1000000</span>)&#123;</span><br><span class="line">        Serial.print(<span class="string">&quot;ERROR, time out&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// not release</span></span><br><span class="line">    <span class="comment">//Serial.println(&quot;releasing&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//digitalWrite(c5, HIGH);</span></span><br><span class="line">    delay(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//digitalWrite(c5, LOW);</span></span><br><span class="line">    Serial.println(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="电磁运动仿真计算"><a href="#电磁运动仿真计算" class="headerlink" title="电磁运动仿真计算"></a>电磁运动仿真计算</h3><p>maxwell计算结果和coilgun RLC基本一致，但是出现了一些新的问题，由于线圈电流的巨大变化率，会在相邻线圈产生感生电流，可能导致IGBT过压击穿，因此本来计划做15级破百，由于11-15级匝数更少电流更大产生的感生电流过大，因此打算只做10级，速度只能达到70-80。解决这个问题需要改成多路boost，需要重新设计PCB，所以等下一版本再说吧</p><p>经过计算发现，最佳的开启和关断位置是固定的，这一次仿真已经是完全由位置触发得到的了，效果非常好，甚至可以用于估算代码设置的延迟时间</p><table><thead><tr><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/Speed.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/Winding.png"></th><th align="center"><img src="/2024/Ultra-high-speed-linear-motor/NodeVoltage.png"></th></tr></thead><tbody><tr><td align="center">运动参数</td><td align="center">线圈电流</td><td align="center">电容电压</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><p>但是线圈电流仿真结果显示线圈匝数的设计还有优化空间，关断时的电流过大，降低了效率和IGBT可靠性</p><p><a href="DCP_maxwell.7z">Maxwell仿真文件</a></p><h3 id="设计优化"><a href="#设计优化" class="headerlink" title="设计优化"></a>设计优化</h3><p>对于线圈，首先应该用较大的匝数进行初始的加速，然后随着速度增加，线圈导通的时间越来越短，因此需要减少电感量来提高响应速度，即减少匝数。因此后级最佳的匝数应逐级减少。</p><p>当IGBT关断时，线圈的电流应该已经过了峰值，并且降低的足够低，这样可以降低电容剩余电压，提高加速度。因此可以根据关断时的电流值确定合适的匝数。如果刚过峰值就关断，就减少线圈的匝数。应该比较好的关断时机是电流峰值的2&#x2F;3到1&#x2F;2</p><p>当速度达到接近100时，由于匝数很小可能导致电感过小电流过大，此时可以降低电容容量，降低峰值电流避免IGBT出现故障</p><p>对于磁阻结构，能量的损耗在于电阻发热和磁场加速损耗，线圈使用更大的线径可以降低电阻，进一步提高效率。实际制造中，更粗的线圈会极大提高手工绕制难度，因此我自己的方案仍然使用0.45mm直径</p><p>线圈直径越大，在缝隙处的损耗就会占比更小，因此拥有更高的效率，我也因此把定位销尺寸从m6改为m8。为了减少缝隙的磁场损耗，缝隙处从1mm厚度的abs和1mm厚度线轴改为0.5mm的不锈钢缠绕高温胶带绝缘。减少缝隙可以极大提高效率。</p><p>根据其他人的实验，AUIRGPS4067D的峰值电流在驱动电压正20负5时，520V560uf100uh大概每隔30s放电一次，800A450us关断，极限测试了50次没有问题。不过保守使用3-500A应该不会有问题</p><h3 id="推挽升压电源"><a href="#推挽升压电源" class="headerlink" title="推挽升压电源"></a>推挽升压电源</h3><p>这种方案使用芯片产生的指定频率的互补的PWM波形控制MOS推挽升压，至少不会停振短路了。我用的是SG3525产生信号然后UCC27324驱动MOS，经过变压器升压，整流后输出高压直流。为了及时关断，使用单片机采集电压控制开关</p><h3 id="全桥恒流谐振"><a href="#全桥恒流谐振" class="headerlink" title="全桥恒流谐振"></a>全桥恒流谐振</h3><p>直接上论文：</p><div class="row">    <embed src="一种谐振型推挽式直流变换器_袁义生.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p><a href="https://www.kechuang.org/f/367">科创网</a><br><a href="https://www.jlc.com/">JLC</a><br><strong>QQX</strong></p>]]></content>
    
    
    <summary type="html">高功率高压高速直线电机</summary>
    
    
    
    <category term="值得一提的文章" scheme="http://triority.cc/categories/%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90%E7%9A%84%E6%96%87%E7%AB%A0/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    <category term="作品&amp;项目总结" scheme="http://triority.cc/categories/%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90%E7%9A%84%E6%96%87%E7%AB%A0/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/%E4%BD%9C%E5%93%81-%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="PCB设计" scheme="http://triority.cc/tags/PCB%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="电力电子" scheme="http://triority.cc/tags/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>FOC电机驱动器项目总结</title>
    <link href="http://triority.cc/2024/foc-driver-finally/"/>
    <id>http://triority.cc/2024/foc-driver-finally/</id>
    <published>2024-07-02T14:05:33.000Z</published>
    <updated>2025-10-16T14:58:41.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小功率主控驱动集成设计"><a href="#小功率主控驱动集成设计" class="headerlink" title="小功率主控驱动集成设计"></a>小功率主控驱动集成设计</h1><p>PCB专为4010&#x2F;4008无刷云台电机设计，集成了esp32主控，drv8313驱动，as5600磁编码器，can总线通讯控制，ina240在线三相电流采样放大(这部分独立出来可选插装，因为这个芯片太贵了而且不是每个板子都用)</p><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><h3 id="原理图下载"><a href="#原理图下载" class="headerlink" title="原理图下载"></a>原理图<a href="ProDoc_P1_2024-07-02.epro">下载</a></h3><div class="row">    <embed src="SCH_Schematic1_1_2024-07-02.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="PCB下载"><a href="#PCB下载" class="headerlink" title="PCB下载"></a>PCB<a href="ProDoc_PCB5_2024-07-02.epro">下载</a></h3><p><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702154730.png"></p><h3 id="3D及实物"><a href="#3D及实物" class="headerlink" title="3D及实物"></a>3D及实物</h3><h4 id="底板"><a href="#底板" class="headerlink" title="底板"></a>底板</h4><table><thead><tr><th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702155112.png"></th><th align="center"><img src="/2024/foc-driver-finally/3ff5fd67c30ac14c014e009861d6d0e.jpg"></th></tr></thead><tbody><tr><td align="center">3D</td><td align="center">照片</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><h4 id="电流检测插件"><a href="#电流检测插件" class="headerlink" title="电流检测插件"></a>电流检测插件</h4><table><thead><tr><th align="center">原理图</th><th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702160102.png"></th><th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702160152.png"></th></tr></thead><tbody><tr><td align="center">PCB</td><td align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702155918.png"></td><td align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702155932.png"></td></tr><tr><td align="center">说明</td><td align="center"><a href="ProDoc_PCB2_2024-07-02.epro">SOIC8封装的INA240A2DR</a></td><td align="center"><a href="ProDoc_PCB2_1_2024-07-02.epro">TSSOP8封装的INA240A2PWR</a></td></tr><tr><td align="center"></td><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><div class="note info modern"><p>这部分使用simplefoc，对硬件进行简单测试用。实际项目中使用的代码可以在项目的文章中找到</p></div><h3 id="位置闭环控制"><a href="#位置闭环控制" class="headerlink" title="位置闭环控制"></a>位置闭环控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// angle set point variable</span></span><br><span class="line"><span class="type">float</span> target_angle = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// instantiate the commander</span></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;target_angle, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensor</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link the motor and the driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// choose FOC modulation (optional)</span></span><br><span class="line">  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::angle;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// contoller configuration</span></span><br><span class="line">  <span class="comment">// default parameters in defaults.h</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity PI controller parameters</span></span><br><span class="line">  motor.PID_velocity.P = <span class="number">0.2f</span>;</span><br><span class="line">  motor.PID_velocity.I = <span class="number">20</span>;</span><br><span class="line">  motor.PID_velocity.D = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// maximal voltage to be set to the motor</span></span><br><span class="line">  motor.voltage_limit = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity low pass filtering time constant</span></span><br><span class="line">  <span class="comment">// the lower the less filtered</span></span><br><span class="line">  motor.LPF_velocity.Tf = <span class="number">0.01f</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// angle P controller</span></span><br><span class="line">  motor.P_angle.P = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// maximal velocity of the position control</span></span><br><span class="line">  motor.velocity_limit = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target angle&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Set the target angle using serial terminal:&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  <span class="comment">// the faster you run this function the better</span></span><br><span class="line">  <span class="comment">// Arduino UNO loop  ~1kHz</span></span><br><span class="line">  <span class="comment">// Bluepill loop ~10kHz</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  <span class="comment">// velocity, position or voltage (defined in motor.controller)</span></span><br><span class="line">  <span class="comment">// this function can be run at much lower frequency than loopFOC() function</span></span><br><span class="line">  <span class="comment">// You can also use motor.move() and set the motor.target in the code</span></span><br><span class="line">  motor.move(target_angle);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// function intended to be used with serial plotter to monitor motor variables</span></span><br><span class="line">  <span class="comment">// significantly slowing the execution down!!!!</span></span><br><span class="line">  <span class="comment">// motor.monitor();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="速度闭环控制"><a href="#速度闭环控制" class="headerlink" title="速度闭环控制"></a>速度闭环控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// velocity set point variable</span></span><br><span class="line"><span class="type">float</span> target_velocity = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// instantiate the commander</span></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;target_velocity, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensor</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">12</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link the motor and the driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::velocity;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// contoller configuration</span></span><br><span class="line">  <span class="comment">// default parameters in defaults.h</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity PI controller parameters</span></span><br><span class="line">  motor.PID_velocity.P = <span class="number">0.2f</span>;</span><br><span class="line">  motor.PID_velocity.I = <span class="number">20</span>;</span><br><span class="line">  motor.PID_velocity.D = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// default voltage_power_supply</span></span><br><span class="line">  motor.voltage_limit = <span class="number">6</span>;</span><br><span class="line">  <span class="comment">// jerk control using voltage voltage ramp</span></span><br><span class="line">  <span class="comment">// default value is 300 volts per sec  ~ 0.3V per millisecond</span></span><br><span class="line">  motor.PID_velocity.output_ramp = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// velocity low pass filtering</span></span><br><span class="line">  <span class="comment">// default 5ms - try different values to see what is the best.</span></span><br><span class="line">  <span class="comment">// the lower the less filtered</span></span><br><span class="line">  motor.LPF_velocity.Tf = <span class="number">0.01f</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target velocity&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  Serial.println(F(<span class="string">&quot;Set the target velocity using serial terminal:&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  <span class="comment">// the faster you run this function the better</span></span><br><span class="line">  <span class="comment">// Arduino UNO loop  ~1kHz</span></span><br><span class="line">  <span class="comment">// Bluepill loop ~10kHz</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  <span class="comment">// velocity, position or voltage (defined in motor.controller)</span></span><br><span class="line">  <span class="comment">// this function can be run at much lower frequency than loopFOC() function</span></span><br><span class="line">  <span class="comment">// You can also use motor.move() and set the motor.target in the code</span></span><br><span class="line">  motor.move(target_velocity);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// function intended to be used with serial plotter to monitor motor variables</span></span><br><span class="line">  <span class="comment">// significantly slowing the execution down!!!!</span></span><br><span class="line">  <span class="comment">// motor.monitor();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="力矩-foc电流-闭环控制"><a href="#力矩-foc电流-闭环控制" class="headerlink" title="力矩(foc电流)闭环控制"></a>力矩(foc电流)闭环控制</h3><p><img src="https://docs.simplefoc.com/extras/Images/foc_current_mode.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SimpleFOC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BLDC motor &amp; driver instance</span></span><br><span class="line">BLDCMotor motor = BLDCMotor(<span class="number">11</span>);</span><br><span class="line">BLDCDriver3PWM driver = BLDCDriver3PWM(<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">MagneticSensorI2C sensor = MagneticSensorI2C(AS5600_I2C);</span><br><span class="line"></span><br><span class="line"><span class="comment">// current sensor</span></span><br><span class="line">InlineCurrentSense current_sense = InlineCurrentSense(<span class="number">0.01f</span>, <span class="number">50.0f</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// instantiate the commander.2</span></span><br><span class="line"></span><br><span class="line">Commander command = Commander(Serial);</span><br><span class="line"><span class="type">void</span> <span class="title function_">doTarget</span><span class="params">(<span class="type">char</span>* cmd)</span> &#123; command.scalar(&amp;motor.target, cmd); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123; </span><br><span class="line">  <span class="comment">// initialise magnetic sensor hardware</span></span><br><span class="line">  sensor.init();</span><br><span class="line">  <span class="comment">// link the motor to the sensora</span></span><br><span class="line">  motor.linkSensor(&amp;sensor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver config</span></span><br><span class="line">  <span class="comment">// power supply voltage [V]</span></span><br><span class="line">  driver.voltage_power_supply = <span class="number">18</span>;</span><br><span class="line">  driver.init();</span><br><span class="line">  <span class="comment">// link driver</span></span><br><span class="line">  motor.linkDriver(&amp;driver);</span><br><span class="line">  <span class="comment">// link the driver to the current sense</span></span><br><span class="line">  current_sense.linkDriver(&amp;driver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// current sense init hardware</span></span><br><span class="line">  current_sense.init();</span><br><span class="line">  <span class="comment">// link the current sense to the motor</span></span><br><span class="line">  motor.linkCurrentSense(&amp;current_sense);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set torque mode:</span></span><br><span class="line">  motor.torque_controller = TorqueControlType::foc_current; </span><br><span class="line">  <span class="comment">// set motion control loop to be used</span></span><br><span class="line">  motor.controller = MotionControlType::torque;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// foc current control parameters (Arduino UNO/Mega)</span></span><br><span class="line">  motor.PID_current_q.P = <span class="number">5</span>;</span><br><span class="line">  motor.PID_current_q.I= <span class="number">300</span>;</span><br><span class="line">  motor.PID_current_d.P= <span class="number">5</span>;</span><br><span class="line">  motor.PID_current_d.I = <span class="number">300</span>;</span><br><span class="line">  motor.LPF_current_q.Tf = <span class="number">0.01</span>; </span><br><span class="line">  motor.LPF_current_d.Tf = <span class="number">0.01</span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// use monitoring with serial </span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// comment out if not needed</span></span><br><span class="line">  motor.useMonitoring(Serial);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize motor</span></span><br><span class="line">  motor.init();</span><br><span class="line">  <span class="comment">// align sensor and start FOC</span></span><br><span class="line">  motor.initFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add target command T</span></span><br><span class="line">  command.add(<span class="string">&#x27;T&#x27;</span>, doTarget, <span class="string">&quot;target current&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Serial.println(F(<span class="string">&quot;Motor ready.&quot;</span>));</span><br><span class="line">  _delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main FOC algorithm function</span></span><br><span class="line">  motor.loopFOC();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Motion control function</span></span><br><span class="line">  motor.move();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user communication</span></span><br><span class="line">  command.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>2023年电赛期间，当时虽然还没做力矩闭环，但是已经完成的位置闭环已经足够完成E类控制题了，当时用的网上买来的数字舵机精度不满足要求(激光笔云台3m外指向精度1cm以内),当场用两个4010做了个新云台，精度不知道高了几个数量级</p><p>到写这篇总结时候虽然已经过去一年了，但是东西还在，随手拿起来拍张照片吧，电赛那四天三夜也是很难忘的经历了</p><table><thead><tr><th align="center"><img src="/2024/foc-driver-finally/21b15661c5ad6a7de24ad9e7f6cc525.jpg"></th><th align="center">当时做的两轴激光笔云台，集成esp32,as5600,drv8313，当时还没做好电流检测，精度的限制已经不在于执行硬件了，变成激光定位算法了。</th></tr></thead><tbody><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><h1 id="大功率驱动设计"><a href="#大功率驱动设计" class="headerlink" title="大功率驱动设计"></a>大功率驱动设计</h1><p>这个驱动没有集成主控需要输入三相PWM信号进行控制</p><h2 id="原理图下载-1"><a href="#原理图下载-1" class="headerlink" title="原理图下载"></a>原理图<a href="SCH_EG2104+NCE6080_2024-07-02.json">下载</a></h2><div class="row">    <embed src="Schematic_EG2104+NCE6080_2024-07-02.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="PCB下载-1"><a href="#PCB下载-1" class="headerlink" title="PCB下载"></a>PCB<a href="PCB_PCB_EG2104+NCE6080_2_2024-07-02.json">下载</a></h2><p><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702152608.png"></p><h2 id="3D及实物-1"><a href="#3D及实物-1" class="headerlink" title="3D及实物"></a>3D及实物</h2><table><thead><tr><th align="center"><img src="/2024/foc-driver-finally/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240702152849.png"></th><th align="center"><img src="/2024/foc-driver-finally/3d9015afaf27f26da5a2927097fa7ce.jpg"></th></tr></thead><tbody><tr><td align="center">3D</td><td align="center">照片</td></tr><tr><td align="center"><img width=2000/></td><td align="center"><img width=2000/></td></tr></tbody></table><h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p><a href="https://www.simplefoc.com/">Simplefoc Project</a><br><a href="https://www.jlc.com/">JLC</a><br>2023年电赛电源组学长，QQX</p>]]></content>
    
    
    <summary type="html">simplefoc驱动all in one</summary>
    
    
    
    <category term="值得一提的文章" scheme="http://triority.cc/categories/%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90%E7%9A%84%E6%96%87%E7%AB%A0/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    <category term="作品&amp;项目总结" scheme="http://triority.cc/categories/%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90%E7%9A%84%E6%96%87%E7%AB%A0/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/%E4%BD%9C%E5%93%81-%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="PCB设计" scheme="http://triority.cc/tags/PCB%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="电力电子" scheme="http://triority.cc/tags/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90/"/>
    
    <category term="esp32" scheme="http://triority.cc/tags/esp32/"/>
    
    <category term="单片机" scheme="http://triority.cc/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>非常离谱的MC服务端启动程序</title>
    <link href="http://triority.cc/2024/minecraft-server-launcher/"/>
    <id>http://triority.cc/2024/minecraft-server-launcher/</id>
    <published>2024-05-20T21:21:40.000Z</published>
    <updated>2025-10-16T14:58:41.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本来是想写一个服务端自动重启的，但是闲的没事往里加了点别的功能，比如自动启动frp内网穿透，以及没有任何意义的等待进度条。如果以后更加无聊也许会往里增加更多没卵用的功能，比如frp的控制？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># minecraft</span></span><br><span class="line">server_jar_path = <span class="string">&quot;server.jar&quot;</span></span><br><span class="line">java_Xms = <span class="string">&quot;1024M&quot;</span></span><br><span class="line">java_Xmx = <span class="string">&quot;4096M&quot;</span></span><br><span class="line"><span class="comment"># frp</span></span><br><span class="line">frp_enable = <span class="literal">True</span></span><br><span class="line">frp_dir_path = <span class="string">&quot;frpc\\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># something useless</span></span><br><span class="line"><span class="keyword">import</span> os,time,sys</span><br><span class="line">GREEN_TEXT = (<span class="string">&#x27;\033[92m&#x27;</span>, <span class="string">&#x27;\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">frp_thread_func</span>(<span class="params">frp_dir_path</span>):</span><br><span class="line">    <span class="built_in">print</span> (GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Frpc thread starting&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">    os.system(<span class="string">&quot;.\\&quot;</span> + frp_dir_path+ <span class="string">&quot;frpc -c &quot;</span> + frp_dir_path + <span class="string">&quot;frpc.ini&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> frp_enable:</span><br><span class="line">    <span class="keyword">import</span> _thread</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _thread.start_new_thread(frp_thread_func, (frp_dir_path, ))</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Frp thread Error&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress_bar</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Waiting: &#123;&#125;%: &quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;▋&quot;</span> * (i // <span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Minecraft server Starting: ----- &quot;</span> + time.asctime(time.localtime(time.time())) + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.system(<span class="string">&quot;java -Xmx&quot;</span> + java_Xmx + <span class="string">&quot; -Xms&quot;</span> + java_Xms + <span class="string">&quot; -jar &quot;</span> + server_jar_path + <span class="string">&quot; nogui&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;ERROR, Stopped&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;Server Stopped. Restart in 5 seconds. Press Ctrl+C to exit.&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">        progress_bar()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(GREEN_TEXT[<span class="number">0</span>] + <span class="string">&quot;EXIT&quot;</span> + GREEN_TEXT[<span class="number">1</span>])</span><br><span class="line">        exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现效果：<br><img src="/2024/minecraft-server-launcher/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240520212634.png"></p>]]></content>
    
    
    <summary type="html">主打一个，花里胡哨</summary>
    
    
    
    <category term="整活&amp;游戏" scheme="http://triority.cc/categories/%E6%95%B4%E6%B4%BB-%E6%B8%B8%E6%88%8F/"/>
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E6%95%B4%E6%B4%BB-%E6%B8%B8%E6%88%8F/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="python" scheme="http://triority.cc/tags/python/"/>
    
    <category term="minecraft" scheme="http://triority.cc/tags/minecraft/"/>
    
  </entry>
  
  <entry>
    <title>在vscode中使用c语言开发raspberry-pico</title>
    <link href="http://triority.cc/2024/raspberry-pico-c/"/>
    <id>http://triority.cc/2024/raspberry-pico-c/</id>
    <published>2024-05-15T16:12:39.000Z</published>
    <updated>2025-10-16T14:58:41.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工具链环境安装"><a href="#工具链环境安装" class="headerlink" title="工具链环境安装"></a>工具链环境安装</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://www.raspberrypi.com/news/raspberry-pi-pico-windows-installer/">官方教程</a></p><p><a href="https://github.com/raspberrypi/pico-setup-windows">安装程序仓库</a></p><p>在仓库readme中<a href="https://github.com/raspberrypi/pico-setup-windows/releases/latest/download/pico-setup-windows-x64-standalone.exe">Download the latest release</a></p><p>程序安装完成后，打开位于开始菜单的<code>Raspberry Pi Pico SDK v1.5.1</code>文件夹，运行里面的<code>Pico - Visual Studio Code</code>。会自动启动vscode打开保存在我的文档中的<code>pico-examples</code>文件夹，并询问使用的编译设置，选择<code>带有 GCC arm-none-eabi 条目的 Pico ARM GCC - Pico SDK 工具链</code>。</p><p>添加环境变量：</p><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td><code>PICO_SDK_PATH</code></td><td><code>C:\Program Files\Raspberry Pi\Pico SDK v1.5.1\pico-sdk</code></td></tr><tr><td><code>PICO_EXAMPLES_PATH</code></td><td><code>C:\Users\Triority\Documents\Pico-v1.5.1\pico-examples</code></td></tr></tbody></table><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>新建文件夹，打开<code>powershell</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span> <span class="variable">$</span>&#123;env:PICO_SDK_PATH&#125;\external\pico_sdk_import.cmake .</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> <span class="variable">$</span>&#123;env:PICO_EXAMPLES_PATH&#125;\.vscode . <span class="literal">-recurse</span></span><br></pre></td></tr></table></figure><p>新建一个<code>CMakeLists.txt</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.13)</span><br><span class="line"></span><br><span class="line"># initialize the SDK based on PICO_SDK_PATH</span><br><span class="line"># note: this must happen before project()</span><br><span class="line">include(pico_sdk_import.cmake)</span><br><span class="line"></span><br><span class="line">project(my_project)</span><br><span class="line"></span><br><span class="line"># initialize the Raspberry Pi Pico SDK</span><br><span class="line">pico_sdk_init()</span><br><span class="line"></span><br><span class="line"># rest of your project</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>About the simplest you can do is a single source file (e.g. hello_world.c)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pico/stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setup_default_uart();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加到<code>CMakeLists.txt</code>文件的末尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add_executable(hello_world</span><br><span class="line">    hello_world.c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Add pico_stdlib library which aggregates commonly used features</span><br><span class="line">target_link_libraries(hello_world pico_stdlib)</span><br><span class="line"></span><br><span class="line"># create map/bin/hex/uf2 file in addition to ELF.</span><br><span class="line">pico_add_extra_outputs(hello_world)</span><br></pre></td></tr></table></figure><p>在开始菜单的<code>Pico - Visual Studio Code</code>打开刚才的文件夹即可，点击左下角的生成，会询问编译器配置，直接选择之前一样的<code>Pico ARM GCC - Pico SDK Toolchain with GCC arm-none-eabi entry</code>，如果编译成功到此配置完成</p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1>]]></content>
    
    
    <summary type="html">pico好c坏</summary>
    
    
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="C语言" scheme="http://triority.cc/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="树莓派" scheme="http://triority.cc/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="单片机" scheme="http://triority.cc/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Surface Pro使用rEFind引导Windows和Ubuntu双系统</title>
    <link href="http://triority.cc/2024/surface-rEFind/"/>
    <id>http://triority.cc/2024/surface-rEFind/</id>
    <published>2024-04-14T22:10:50.000Z</published>
    <updated>2025-10-16T14:58:41.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><p>最近换了新的平板，从surface pro 7 i5 8+128G换成了surface pro 7 plus i7 16+512G，可以说是解决了以前一切的使用痛点(也许有个LTE会更加完美?但是不太必要)，由于windows系统无与伦比的巨大功耗，准备再分出64G安装一个ubuntu用于应急情况</p><p>写这篇文章还有一个原因就是在我大一刚买电脑时候参考的C**N上一篇很好的双系统安装教程文章现在改成收费了，让我十分不爽，也重新写一份给入门的同学们看，最后有关surface的特定内容忽略就好。关于双系统中Ubuntu系统的卸载可以参考<a href="https://triority.cc/2022/windows-ubuntu-uninstall/">这篇之前的文章</a><!-- spoiler-1ffd9:black -->  <span class="spoiler" onclick="this.classList.toggle('spoiler')">    <span class="spoiler-box spoiler-1ffd9">（这篇文章的结尾还有C**N那篇文章的链接）</span>  </span></p><h1 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h1><p>提前准备了一个64G空白位置用于安装ubuntu22.04 LTS系统，启动盘制作好后，在按下音量+的时候按电源键开机，直到进入BIOS松开音量键，设置U盘启动，关闭安全启动(如果你有)，进入ubuntu安装程序。</p><div class="note warning disabled"><p>安全启动(Secureboot)仅允许受信任的系统在Surface上启动，安装非windows系统会无法直接启动<br>一旦关闭安全启动，如果你开启了bitlocker进入windows系统需要输入密钥，而且windows hello无法使用。<br>后面会写如何打开安全启动情况下使用linux</p></div><p>安装程序中一路continue在<code>install type</code>界面中选择<code>Something else</code>，然后<code>continue</code>，设置系统分区。</p><p>找到刚才留出的64G空间，也就是显示的<code>free space</code>，选择后点击加号新建分区。需要新建的分区如下：</p><ul><li><code>/swap</code>交换分区作为虚拟内存，逻辑分区，一般内存8G甚至更小的需要给8-16G左右，16G及以上看自己情况，我觉得我不需要所以没有设置</li><li><code>/boot</code>分区放置Ubuntu的启动引导文件，逻辑分区，默认ext4，大小512M即可</li><li><code>/</code> 根目录，逻辑分区，默认ext4，如果你不打算单独分出<code>/home</code>分区那么剩下的空间都给这里，否则给个几十G就足够了(如果你的总空间比较小给十几G也可以总之大概1&#x2F;4吧)</li><li><code>/home</code>用户目录，默认ext4，如果你单独设置了这个路径，那么剩下的空间都给这里就可以了</li></ul><p>然后下面<code>Device for boot loader installation</code>选择刚才设置的<code>/boot</code>的设备，我这里是<code>/dev/nvme0n1p5</code>然后继续continue，直到系统安装完成</p><p>如果你只是想安装一个双系统而不想用rEFind，可以用ubuntu来引导Windows启动，但是这样每次进入都会默认选择第一项进入ubuntu。我们可以把它改成保存上次设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/default/grub</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># If you change this file, run &#x27;update-grub&#x27; afterwards to update</span><br><span class="line"># /boot/grub/grub.cfg.</span><br><span class="line"># For full documentation of the options in this file, see:</span><br><span class="line">#   info -f grub -n &#x27;Simple configuration&#x27;</span><br><span class="line"># 下面这个默认是0改成saved即可</span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_TIMEOUT_STYLE=hidden</span><br><span class="line"># 这个是等待时间，默认10s没啥必要改成3了</span><br><span class="line">GRUB_TIMEOUT=3 </span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment to enable BadRAM filtering, modify to suit your needs</span><br><span class="line"># This works with Linux (no patch required) and with any kernel that obtains</span><br><span class="line"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)</span><br><span class="line">#GRUB_BADRAM=&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment to disable graphical terminal (grub-pc only)</span><br><span class="line">#GRUB_TERMINAL=console</span><br><span class="line"></span><br><span class="line"># The resolution used on graphical terminal</span><br><span class="line"># note that you can use only modes which your graphic card supports via VBE</span><br><span class="line"># you can see them in real GRUB with the command `vbeinfo&#x27;</span><br><span class="line">#GRUB_GFXMODE=640x480</span><br><span class="line"></span><br><span class="line"># Uncomment if you don&#x27;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux</span><br><span class="line">#GRUB_DISABLE_LINUX_UUID=true</span><br><span class="line"></span><br><span class="line"># Uncomment to disable generation of recovery mode menu entries</span><br><span class="line">#GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment to get a beep at grub start</span><br><span class="line">#GRUB_INIT_TUNE=&quot;480 440 1&quot;</span><br></pre></td></tr></table></figure><h1 id="安装rEFind"><a href="#安装rEFind" class="headerlink" title="安装rEFind"></a>安装rEFind</h1><p>rEFInd是一个非常好看好用的UEFI启动管理器，如果不用第三方引导，启动windows要么先启动ubuntu然后选择启动windows，要么BIOS设置windows优先然后每次启动ubuntu都要修改bios(然后再改回去十分离谱不建议)</p><p>rEFind在ubuntu或windows都可以安装，但是在windows下极其麻烦，强烈建议在ubuntu安装，下面也是这样做的。</p><p>进入ubuntu系统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:rodsmith/refind  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install refind</span><br></pre></td></tr></table></figure><p>安装过程中会有一些询问，不用看直接yes就好</p><p>完成到这一步，电脑默认会首选<code>rEFInd</code>引导，如果没有，去BIOS中设置一下引导顺序为<code>rEFind</code>优先</p><p>现在其实已经可以使用了，但是比较丑陋，所以接下来我们安装一个主题来美化</p><h1 id="可选-美化：rEFind主题设置"><a href="#可选-美化：rEFind主题设置" class="headerlink" title="(可选)美化：rEFind主题设置"></a>(可选)美化：rEFind主题设置</h1><h2 id="配置文件信息"><a href="#配置文件信息" class="headerlink" title="配置文件信息"></a>配置文件信息</h2><p><code>rEFind</code>的配置信息位于<code>/boot/efi/EFI/refind/refind.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"># refind.conf</span><br><span class="line"># Configuration file for the rEFInd boot menu</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line"># Timeout in seconds for the main menu screen. Setting the timeout to 0</span><br><span class="line"># disables automatic booting (i.e., no timeout). Setting it to -1 causes</span><br><span class="line"># an immediate boot to the default OS *UNLESS* a keypress is in the buffer</span><br><span class="line"># when rEFInd launches, in which case that keypress is interpreted as a</span><br><span class="line"># shortcut key. If no matching shortcut is found, rEFInd displays its</span><br><span class="line"># menu with no timeout.</span><br><span class="line">#</span><br><span class="line">#设置默认等待时间为5s</span><br><span class="line">#timeout 0代表无限等待 timeout -1代表立即进入对应的系统</span><br><span class="line">timeout 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set the screen&#x27;s video resolution. Pass this option either:</span><br><span class="line">#  * two values, corresponding to the X and Y resolutions</span><br><span class="line">#  * one value, corresponding to a GOP (UEFI) video mode</span><br><span class="line"># Note that not all resolutions are supported. On UEFI systems, passing</span><br><span class="line"># an incorrect value results in a message being shown on the screen to</span><br><span class="line"># that effect, along with a list of supported modes. On EFI 1.x systems</span><br><span class="line"># (e.g., Macintoshes), setting an incorrect mode silently fails. On both</span><br><span class="line"># types of systems, setting an incorrect resolution results in the default</span><br><span class="line"># resolution being used. A resolution of 1024x768 usually works, but higher</span><br><span class="line"># values often don&#x27;t.</span><br><span class="line"># Default is &quot;0 0&quot; (use the system default resolution, usually 800x600).</span><br><span class="line">#</span><br><span class="line">#分辨率设置，我建议这里别动，上面注释中也说了。1024*768以上的分辨率并不支持，我是默认的，没动它，所以没事别自己搞个1920 1080（更新：可用）</span><br><span class="line">#resolution 1024 768</span><br><span class="line">#resolution 1440 900</span><br><span class="line">#resolution 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Directories that should NOT be scanned for boot loaders. By default,</span><br><span class="line"># rEFInd doesn&#x27;t scan its own directory, the EFI/tools directory, the</span><br><span class="line"># EFI/memtest directory, the EFI/memtest86 directory, or the</span><br><span class="line"># com.apple.recovery.boot directory. Using the dont_scan_dirs option</span><br><span class="line"># enables you to &quot;blacklist&quot; other directories; but be sure to use &quot;+&quot;</span><br><span class="line"># as the first element if you want to continue blacklisting existing</span><br><span class="line"># directories. You might use this token to keep EFI/boot/bootx64.efi out</span><br><span class="line"># of the menu if that&#x27;s a duplicate of another boot loader or to exclude</span><br><span class="line"># a directory that holds drivers or non-bootloader utilities provided by</span><br><span class="line"># a hardware manufacturer. If a directory is listed both here and in</span><br><span class="line"># also_scan_dirs, dont_scan_dirs takes precedence. Note that this</span><br><span class="line"># blacklist applies to ALL the filesystems that rEFInd scans, not just</span><br><span class="line"># the ESP, unless you precede the directory name by a filesystem name or</span><br><span class="line"># partition unique GUID, as in &quot;myvol:EFI/somedir&quot; to exclude EFI/somedir</span><br><span class="line"># from the scan on the myvol volume but not on other volumes.</span><br><span class="line">#</span><br><span class="line">#这部分看注释的意思，应该是不扫描ESP分区的某些文件夹，我自己为了去除某些多余</span><br><span class="line">#的启动项，于是设置了dont_scan_dirs ESP:/EFI/ubuntu，但不知道为什么，没有用，启动项里仍会出现Ubuntu的引导项，所以我不建议在这部分选择屏蔽引导项.</span><br><span class="line">#dont_scan_dirs ESP:/EFI/boot,EFI/Dell,EFI/memtest86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Files that should NOT be included as EFI boot loaders (on the</span><br><span class="line"># first line of the display). If you&#x27;re using a boot loader that</span><br><span class="line"># relies on support programs or drivers that are installed alongside</span><br><span class="line"># the main binary or if you want to &quot;blacklist&quot; certain loaders by</span><br><span class="line"># name rather than location, use this option. Note that this will</span><br><span class="line"># NOT prevent certain binaries from showing up in the second-row</span><br><span class="line"># set of tools. Most notably, various Secure Boot and recovery</span><br><span class="line"># tools are present in this list, but may appear as second-row</span><br><span class="line"># items.</span><br><span class="line"># The file may be specified as a bare name (e.g., &quot;notme.efi&quot;), as</span><br><span class="line"># a complete pathname (e.g., &quot;/EFI/somedir/notme.efi&quot;), or as a</span><br><span class="line"># complete pathname with volume (e.g., &quot;SOMEDISK:/EFI/somedir/notme.efi&quot;</span><br><span class="line"># or 2C17D5ED-850D-4F76-BA31-47A561740082:/EFI/somedir/notme.efi&quot;).</span><br><span class="line"># OS tags hidden via the Delete or &#x27;-&#x27; key in the rEFInd menu are</span><br><span class="line"># added to this list, but stored in NVRAM.</span><br><span class="line"># The default is shim.efi,shim-fedora.efi,shimx64.efi,PreLoader.efi,</span><br><span class="line"># TextMode.efi,ebounce.efi,GraphicsConsole.efi,MokManager.efi,HashTool.efi,</span><br><span class="line"># HashTool-signed.efi,bootmgr.efi,fb&#123;arch&#125;.efi</span><br><span class="line"># (where &quot;&#123;arch&#125;&quot; is the architecture code, like &quot;x64&quot;).</span><br><span class="line">#</span><br><span class="line">#这部分和上面那部分类似，都是屏蔽之用，区别在于上面部分是针对文件夹，这部分是针</span><br><span class="line">#对具体文件，这部分在去除某些启动项有着极为关键的作用，我将详细展开叙述。</span><br><span class="line">#dont_scan_files shim.efi,MokManager.efi</span><br></pre></td></tr></table></figure><h2 id="删除多余启动项"><a href="#删除多余启动项" class="headerlink" title="删除多余启动项"></a>删除多余启动项</h2><p><code>refind</code>他针对某些<code>.efi</code>的文件会选择无脑的引导，因此我们为了简洁或者美观，需要屏蔽某些文件的引导，屏蔽不会修改原EFI分区中的系统引导文件。针对我的<code>ubuntu</code>，引导文件位于<code>ubuntu/grubx64.efi</code>（EFI分区的相对路径），以及我的<code>windows</code>引导文件，位于<code>Microsoft/Boot/bootmgfw.efi</code>，而我们需要保留的就这两个，其他的一律屏蔽。下面命令代表屏蔽了<code>ubuntu</code>文件夹下的<code>shim.efi</code>引导文件和其他文件XXX</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dont_scan_files /EFI/ubuntu/shim.efi,XXX,XXX</span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>在<code>refind.conf</code>文件最后需要加一行指令来加载主题文件(（相对路径是指你的主题配置文件<code>theme.config</code>在以<code>refind</code>目录为根目录的文件路径）)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &lt;相对路径&gt;/theme.config </span><br></pre></td></tr></table></figure><p>比如我的theme文件位于<code>refind</code>目录下的<code>themes/rEFInd-minimal</code>处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include themes/rEFInd-minimal/theme.conf</span><br></pre></td></tr></table></figure><p><code>refind</code>文件夹位于EFI分区目录，<code>theme</code>文件夹位于<code>refind</code>文件夹，主题文件位于<code>theme</code>文件夹</p><p>关于<code>theme.conf</code>文件，这是<a href="https://github.com/topics/refind-theme">官方介绍文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># Minimal refind theme</span><br><span class="line"></span><br><span class="line"># Hide user interface elements for personal preference or to increase</span><br><span class="line"># security:</span><br><span class="line">#  banner      - the rEFInd title banner (built-in or loaded via &quot;banner&quot;)</span><br><span class="line">#  label       - boot option text label in the menu</span><br><span class="line">#  singleuser  - remove the submenu options to boot Mac OS X in single-user</span><br><span class="line">#                or verbose modes; affects ONLY MacOS X</span><br><span class="line">#  safemode    - remove the submenu option to boot Mac OS X in &quot;safe mode&quot;</span><br><span class="line">#  hwtest      - the submenu option to run Apple&#x27;s hardware test</span><br><span class="line">#  arrows      - scroll arrows on the OS selection tag line</span><br><span class="line">#  hints       - brief command summary in the menu</span><br><span class="line">#  editor      - the options editor (+, F2, or Insert on boot options menu)</span><br><span class="line">#  all         - all of the above</span><br><span class="line"># Default is none of these (all elements active)</span><br><span class="line">#</span><br><span class="line">hideui singleuser,hints,arrows,label,badges</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set the name of a subdirectory in which icons are stored. Icons must</span><br><span class="line"># have the same names they have in the standard directory. The directory</span><br><span class="line"># name is specified relative to the main rEFInd binary&#x27;s directory. If</span><br><span class="line"># an icon can&#x27;t be found in the specified directory, an attempt is made</span><br><span class="line"># to load it from the default directory; thus, you can replace just some</span><br><span class="line"># icons in your own directory and rely on the default for others.</span><br><span class="line"># Default is &quot;icons&quot;.</span><br><span class="line">#各种系统的启动图标</span><br><span class="line">icons_dir themes/rEFInd-minimal/icons</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Use a custom title banner instead of the rEFInd icon and name. The file</span><br><span class="line"># path is relative to the directory where refind.efi is located. The color</span><br><span class="line"># in the top left corner of the image is used as the background color</span><br><span class="line"># for the menu screens. Currently uncompressed BMP images with color</span><br><span class="line"># depths of 24, 8, 4 or 1 bits are supported, as well as PNG images.</span><br><span class="line">#这是启动界面背景图片路径，也是相对路径，且暂时似乎只支持png格式的图片</span><br><span class="line">banner themes/rEFInd-minimal/background.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tells rEFInd whether to display banner images pixel-for-pixel (noscale)</span><br><span class="line"># or to scale banner images to fill the screen (fillscreen). The former is</span><br><span class="line"># the default.</span><br><span class="line">#默认全屏填充</span><br><span class="line">banner_scale fillscreen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Custom images for the selection background. There is a big one (144 x 144)</span><br><span class="line"># for the OS icons, and a small one (64 x 64) for the function icons in the</span><br><span class="line"># second row. If only a small image is given, that one is also used for</span><br><span class="line"># the big icons by stretching it in the middle. If only a big one is given,</span><br><span class="line"># the built-in default will be used for the small icons.</span><br><span class="line">#</span><br><span class="line"># Like the banner option above, these options take a filename of an</span><br><span class="line"># uncompressed BMP image file with a color depth of 24, 8, 4, or 1 bits,</span><br><span class="line"># or a PNG image. The PNG format is required if you need transparency</span><br><span class="line"># support (to let you &quot;see through&quot; to a full-screen banner).</span><br><span class="line">#</span><br><span class="line">selection_big   themes/rEFInd-minimal/selection_big.png</span><br><span class="line">selection_small themes/rEFInd-minimal/selection_small.png</span><br><span class="line"></span><br><span class="line"># Which non-bootloader tools to show on the tools line, and in what</span><br><span class="line"># order to display them:</span><br><span class="line">#  shell           - the EFI shell (requires external program; see rEFInd</span><br><span class="line">#                    documentation for details)</span><br><span class="line">#  gptsync         - the (dangerous) gptsync.efi utility (requires external</span><br><span class="line">#                    program; see rEFInd documentation for details)</span><br><span class="line">#  apple_recovery  - boots the Apple Recovery HD partition, if present</span><br><span class="line">#  mok_tool        - makes available the Machine Owner Key (MOK) maintenance</span><br><span class="line">#                    tool, MokManager.efi, used on Secure Boot systems</span><br><span class="line">#  about           - an &quot;about this program&quot; option</span><br><span class="line">#  exit            - a tag to exit from rEFInd</span><br><span class="line">#  shutdown        - shuts down the computer (a bug causes this to reboot</span><br><span class="line">#                    EFI systems)</span><br><span class="line">#  reboot          - a tag to reboot the computer</span><br><span class="line">#  firmware        - a tag to reboot the computer into the firmware&#x27;s</span><br><span class="line">#                    user interface (ignored on older computers)</span><br><span class="line"># Default is shell,apple_recovery,mok_tool,about,shutdown,reboot,firmware</span><br><span class="line">#</span><br><span class="line">showtools shutdown</span><br></pre></td></tr></table></figure><h1 id="可选-安装Ubuntu下的surface硬件驱动"><a href="#可选-安装Ubuntu下的surface硬件驱动" class="headerlink" title="(可选)安装Ubuntu下的surface硬件驱动"></a>(可选)安装Ubuntu下的surface硬件驱动</h1><div class="note info modern"><p>感谢<a href="https://github.com/linux-surface/linux-surface">linux-surface项目的贡献</a></p></div><p>导入用于签名软件包的密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc \</span><br><span class="line">    | gpg --dearmor | sudo dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg</span><br></pre></td></tr></table></figure><p>如果你的网络不是特别好可能会报错，你可以把这个命令的下载和导入分开执行，下载链接可以直接使用文件替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc</span><br><span class="line">cat surface.asc | gpg --dearmor | sudo dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg</span><br></pre></td></tr></table></figure><p>然后添加存储库配置并更新APT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch=amd64] https://pkg.surfacelinux.com/debian release main&quot; \</span><br><span class="line">| sudo tee /etc/apt/sources.list.d/linux-surface.list</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装linux-surface内核及其依赖项，还可以启用iptsd服务以使用触摸屏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-image-surface linux-headers-surface iptsd libwacom-surface</span><br><span class="line">sudo systemctl enable iptsd</span><br></pre></td></tr></table></figure><p>如果在启用服务时候报错没有找到服务配置文件可能需要自己创建然后写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /lib/systemd/system/iptsd.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Intel Precise Touch &amp; Stylus Daemon</span><br><span class="line">Documentation=https://github.com/linux-surface/iptsd</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/bin/iptsd</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure><p>重启电脑，surface硬件基本都可以使用了</p><h1 id="对于下面的可选项十分重要重要重要-风险提示和过程解释"><a href="#对于下面的可选项十分重要重要重要-风险提示和过程解释" class="headerlink" title="(对于下面的可选项十分重要重要重要)风险提示和过程解释"></a>(对于下面的可选项十分重要重要重要)风险提示和过程解释</h1><div class="note danger modern"><p>接下来的操作涉及系统引导等底层的重要内容，如果你没有基本的计算机知识建议到这里点到为止。要进行下面的操作务必了解你在做什么以及如何修复或回滚你的操作，最严重的后果可能会让你的电脑变成砖头。请先看下图，这是写这篇文章时候我遇到的错误<br><img src="/img/b3ebe4434dfdbe95d46db4c08a30255.jpg"></p></div><p>下面简要介绍一下我们在做什么以及为什么要这样做</p><h1 id="可选-surface开启安全启动：签名ubuntu的内核"><a href="#可选-surface开启安全启动：签名ubuntu的内核" class="headerlink" title="(可选)surface开启安全启动：签名ubuntu的内核"></a>(可选)surface开启安全启动：签名ubuntu的内核</h1><p>由于我们在安装surface驱动的时候更改了系统内核，会导致<code>secure boot</code>在开启状态下无法直接引导系统，所以我们需要将内核进行签名，将Linux-Surface内核的密钥导入到引导加载程序中，以便内核可以引导而不禁用<code>secure boot</code></p><p>安装签名工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-surface-secureboot-mok</span><br></pre></td></tr></table></figure><p>有的版本的mok会直接给你一个密码来给你，后面导入的流程里就不会再需要输入密码了。安装时候终端输出都会告诉你，类似这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> apt install linux-surface-secureboot-mok</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> triority: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  linux-surface-secureboot-mok</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 94 not upgraded.</span><br><span class="line">Need to get 5,616 B of archives.</span><br><span class="line">After this operation, 18.4 kB of additional disk space will be used.</span><br><span class="line">Get:1 https://pkg.surfacelinux.com/debian release/main amd64 linux-surface-secureboot-mok amd64 20231003-1 [5,616 B]</span><br><span class="line">Fetched 5,616 B <span class="keyword">in</span> 8s (678 B/s)                          </span><br><span class="line">Selecting previously unselected package linux-surface-secureboot-mok.</span><br><span class="line">(Reading database ... 195210 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../linux-surface-secureboot-mok_20231003-1_amd64.deb ...</span><br><span class="line">Unpacking linux-surface-secureboot-mok (20231003-1) ...</span><br><span class="line">Setting up linux-surface-secureboot-mok (20231003-1) ...</span><br><span class="line"></span><br><span class="line">The secure-boot certificate has been installed to</span><br><span class="line"></span><br><span class="line">    /usr/share/linux-surface-secureboot/surface.cer</span><br><span class="line"></span><br><span class="line">It will now be automatically enrolled <span class="keyword">for</span> you and guarded with the password</span><br><span class="line"></span><br><span class="line">    surface</span><br><span class="line"></span><br><span class="line">To finish the enrollment process you need to reboot, <span class="built_in">where</span> you will <span class="keyword">then</span> be</span><br><span class="line">asked to enroll the certificate. During the import, you will be prompted <span class="keyword">for</span></span><br><span class="line">the password mentioned above. Please make sure that you are indeed adding</span><br><span class="line">the right key and confirm by entering <span class="string">&#x27;surface&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Note that you can always manage your secure-boot keys, including the one</span><br><span class="line">just enrolled, from inside Linux via the <span class="string">&#x27;mokutil&#x27;</span> tool.</span><br></pre></td></tr></table></figure><p>然后下载<a href="https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.cer">linux-surface签名公钥</a></p><p>导入公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mokutil --import surface.cer</span><br></pre></td></tr></table></figure><p>此过程会要求你输入一个一次性密码，一定要记住一会要用，但是只会用这一次</p><p>重启后会进入一个比较原始的蓝色界面，回车后选择<code>import mok</code>，然后continue直到要求你输入刚才设置的密码，然后完成即可</p><p>完成后即可进入UEFI，在<code>secure boot</code>中将<code>boot configuration</code>改为<code>Microsoft &amp; 3rd party CA</code>就可以使用安全启动了</p><h1 id="可选-surface开启安全启动：签名rEFind"><a href="#可选-surface开启安全启动：签名rEFind" class="headerlink" title="(可选)surface开启安全启动：签名rEFind"></a>(可选)surface开启安全启动：签名rEFind</h1><p>其实最开始跟上面差不多，看看目录内容(我闲的,没必要)然后导入密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI</span><br><span class="line">Boot  Microsoft  refind  tools ubuntu</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI/ubuntu</span><br><span class="line">BOOTX64.CSV  grub.cfg  grubx64.efi  mmx64.efi  shimx64.efi</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI/refind/keys</span><br><span class="line">altlinux.cer          openSUSE-UEFI-CA-Certificate.cer</span><br><span class="line">canonical-uefi-ca.cer         redhatsecureboot003.cer</span><br><span class="line">centossecureboot201.cer         redhatsecureboot401.cer</span><br><span class="line">centossecurebootca2.cer         redhatsecurebootca2.cer</span><br><span class="line">debian.cer          redhatsecurebootca4.cer</span><br><span class="line">fedora-ca.cer          refind.cer</span><br><span class="line">microsoft-kekca-public.cer        refind_local.cer</span><br><span class="line">microsoft-pca-public.cer        refind_local.crt</span><br><span class="line">microsoft-uefica-public.cer        SLES-UEFI-CA-Certificate.cer</span><br><span class="line">openSUSE-UEFI-CA-Certificate-4096.cer</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">ls</span> /boot/efi/EFI/refind</span><br><span class="line">BOOT.CSV  drivers_x64  icons  keys  refind.conf  refind_x64.efi  vars</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /boot/efi/EFI/ubuntu/shimx64.efi /boot/efi/EFI/refind</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /boot/efi/EFI/ubuntu/mmx64.efi /boot/efi/EFI/refind</span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$ <span class="built_in">sudo</span> mokutil -i /boot/efi/EFI/refind/keys/refind.cer</span><br><span class="line">input password: </span><br><span class="line">input password again: </span><br><span class="line">triority@triority-Surface-Pro-7-PLUS:~$</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">优雅的双系统引导</summary>
    
    
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="linux" scheme="http://triority.cc/tags/linux/"/>
    
    <category term="教程" scheme="http://triority.cc/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SDR使用FT8模式通联信号接收</title>
    <link href="http://triority.cc/2024/sdr-ft8/"/>
    <id>http://triority.cc/2024/sdr-ft8/</id>
    <published>2024-04-13T20:21:30.000Z</published>
    <updated>2025-10-16T14:58:41.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FT8简介"><a href="#FT8简介" class="headerlink" title="FT8简介"></a>FT8简介</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FT8 于 2017 年 7 月推出，由 Steve Franke ，K9AN 和 Bill Somerille，G4WJS 制作。</span><br><span class="line">设计用于 6 米波段的突发 E 层通联，然后被引入短波，迅速风靡全球。</span><br><span class="line">和 JT65 一样，它不适合随意聊天，仅仅是为了完成最基本的通联</span><br><span class="line"></span><br><span class="line">FT8 极强的弱信号通联为很多短波爱好者提供了更多的 DX 机会。</span><br><span class="line">FT8 减少了人类活动的参与，降低了错误的出现，效率极高。</span><br><span class="line">可以在很短的时间内获取更多的 DXCC。7天时间完成DXCC100，FT8创造奇迹</span><br><span class="line"></span><br><span class="line">---- BH4IWK</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">场景：BG2KSI在PN33进行CQ，BG2XXX在PN35抄收并回复，并假定双方接收的信号报告均为-10</span><br><span class="line">BG2KSI：CQ BG2KSI PN33</span><br><span class="line">BG2XXX：BG2KSI BG2XXX PN35</span><br><span class="line">BG2KSI：BG2XXX BG2KSI -10</span><br><span class="line">BG2XXX：BG2KSI BG2XXX R -10</span><br><span class="line">BG2KSI：BG2XXX BG2KSI RR 73</span><br><span class="line">BG2XXX：BG2KSI BG2XXX 73</span><br><span class="line"></span><br><span class="line">以上内容含义如下：</span><br><span class="line">BG2KSI：CQ 我是BG2KSI 我的位置是PN33</span><br><span class="line">BG2XXX：BG2KSI 我是BG2XXX 我的位置是PN35</span><br><span class="line">BG2KSI：BG2XXX 我是BG2KSI 我收到你的信号报告为-10</span><br><span class="line">BG2XXX：BG2KSI 我是BG2XXX 收到 我收到你的信号报告为-10</span><br><span class="line">BG2KSI：BG2XXX 我是BG2KSI 收到收到 73</span><br><span class="line">BG2XXX：BG2KSI 我是BG2XXX 73</span><br><span class="line"></span><br><span class="line">---- BG2KSI</span><br></pre></td></tr></table></figure><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><ul><li>SDRuno(SDR信号接收)</li><li><a href="VBCABLE_Driver_Pack43.zip">VB-Audio cable(虚拟声卡)</a></li><li>JTDX(FT8信号解码)</li><li>GridTracker(可选，网格可视化)</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>QTH：北京市海淀区学院路某楼9层向东阳台<br>SDR：RSP1(BG7YZF)<br>ANT：有源小环天线(BG7YZF)<br>FREQ：10.136MHz<br>TIME：文章创建时间</p><p><img src="/2024/sdr-ft8/88057845a059ca6c10a9feb6498515d.png"></p><p>可能是天线朝向原因收到几个十分活跃的日本友台，以及一些中国韩国俄罗斯友台</p><p>第一次尝试不过感觉有点怪，虽然FT8据说十分流行，但是通联成为了电脑全自动完成的过程还是少了很多乐趣，不过FT8的弱信号接收能力是真的强，这一点真的离谱</p><p><img src="/2024/sdr-ft8/c7c9077c6632ce35692c4fa5dcf36b9.png"></p><p>要是SSB模式你跟我说这是有信息？？？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>Orange pi 5 plus开发板在ubuntu系统下使用docker安装openwrt</title>
    <link href="http://triority.cc/2024/orangepi5plus-openwrt/"/>
    <id>http://triority.cc/2024/orangepi5plus-openwrt/</id>
    <published>2024-04-10T19:28:10.000Z</published>
    <updated>2025-10-16T14:58:41.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h1><p>香橙派新出了一个orangepi 5 plus，外设非常适合日常折腾，两个2.5G网口，两个USB3.0，还有pciex4的2280规格m2硬盘接口，算力也是足够强大，CPU是著名的RK3588，NPU算力6TOP，完全可以胜任绝大多数任务。于是入手一个8G内存版本，可以作为软理由+NAS，日常挂载一些服务也毫无压力</p><table><thead><tr><th align="center"><img src="/2024/orangepi5plus-openwrt/pi5-plus-17.png"></th><th align="center"><img src="/2024/orangepi5plus-openwrt/pi5-plus-16.png"></th></tr></thead><tbody><tr><td align="center">正面</td><td align="center">背面</td></tr></tbody></table><p>原计划是作为主路由用的，但是由于没有认真阅读官方文档，官方出售的orangepi5plus专用网卡是不支持openwrt镜像的，本来想自己打个驱动，然后看了一下发现官方没做支持是有原因的。只好拿来做旁路由，除非再去买支持的ax200或ax210芯片的网卡</p><h1 id="在docker内安装openwrt"><a href="#在docker内安装openwrt" class="headerlink" title="在docker内安装openwrt"></a>在docker内安装openwrt</h1><p>这是我第一次使用docker，但是配置过程还算顺利，指只折腾我一个下午然后发现原因是ip写错了才不能用</p><p>首先拉取docker镜像，我使用的镜像是这个:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hub.docker.com/r/sulinggg/openwrt</span><br></pre></td></tr></table></figure><p>作者还为我们提供了不同CPU架构下的阿里云镜像站地址，RK3588是ARMv8架构，so</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:armv8</span><br></pre></td></tr></table></figure><p>然后开始网路配置，打开网卡混杂模式，首先查看网卡名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5plus:~# ifconfig</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:2e:0e:eb:05  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enP3p49s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether c0:74:2b:fe:72:fc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 142</span><br><span class="line"></span><br><span class="line">enP4p65s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.125  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::42e5:883e:acef:1760  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether c0:74:2b:fe:72:fd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 32116  bytes 6923836 (6.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 51813  bytes 23028566 (23.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 154</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 29409  bytes 19939785 (19.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 29409  bytes 19939785 (19.9 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlP2p33s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether c2:4b:24:c1:3e:d4  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether c0:4b:24:c1:3e:d4  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>可以看出设备的网卡<code>enP4p65s0</code>及当前的IP地址是<code>192.168.1.125</code>，然后打开这个网卡的混杂模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link set enP4p65s0 promisc on </span><br></pre></td></tr></table></figure><p>然后为未来的容器创建一个网络：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=enP4p65s0 macnet</span><br></pre></td></tr></table></figure><p>如果网段不一致要修改成使用环境下的网段</p><p>然后就可以创建和启动容器了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:armv8 /sbin/init</span><br></pre></td></tr></table></figure><p>这是设置了容器总是自动重启，名称为<code>openwrt</code>，<code>-d</code>参数为容器运行在 Daemon 模式，加入<code>macnet</code>网络，<code>--privileged</code> 参数定义容器运行在特权模式下，启动命令是<code>/sbin/init</code></p><p>接下来进入容器，修改相关配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it openwrt bash</span><br></pre></td></tr></table></figure><p>首先，我们需要编辑 OpenWrt 的网络配置文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/config/network</span><br></pre></td></tr></table></figure><p>更改 Lan 口设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">        option type &#x27;bridge&#x27;</span><br><span class="line">        option ifname &#x27;eth0&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.1.126&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ip6assign &#x27;60&#x27;</span><br><span class="line">        option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">        option broadcast &#x27;192.168.1.255&#x27;</span><br><span class="line">        option dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure><p>注意由于已经在容器的虚拟环境下这时的网卡已经是<code>eth0</code>，以及<code>ipaddr</code>是访问<code>openwrt</code>的地址而不是开发板本身的地址，开发板是<code>192.168.1.125</code>，为了方便我就给<code>openwrt</code>地址<code>192.168.1.126</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bash-5.1# ifconfig</span><br><span class="line">br-lan    Link encap:Ethernet  HWaddr 02:42:C0:A8:01:02</span><br><span class="line">          inet addr:192.168.123.100  Bcast:192.168.123.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:34 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:58 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:2648 (2.5 KiB)  TX bytes:6292 (6.1 KiB)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:01:02</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:37 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:59 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:3304 (3.2 KiB)  TX bytes:7335 (7.1 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:20 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:20 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:1760 (1.7 KiB)  TX bytes:1760 (1.7 KiB)</span><br></pre></td></tr></table></figure><p>重启网络：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure><p>之后就可以打开<code>192.168.1.126</code>的openwrt后台了，默认账号<code>root</code>密码<code>password</code>、</p><h1 id="openwrt配置"><a href="#openwrt配置" class="headerlink" title="openwrt配置"></a>openwrt配置</h1>]]></content>
    
    
    <summary type="html">买了个香橙派导致的</summary>
    
    
    
    <category term="折腾记录" scheme="http://triority.cc/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="linux" scheme="http://triority.cc/tags/linux/"/>
    
    <category term="香橙派" scheme="http://triority.cc/tags/%E9%A6%99%E6%A9%99%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>sdruno使用说明</title>
    <link href="http://triority.cc/2024/sdruno/"/>
    <id>http://triority.cc/2024/sdruno/</id>
    <published>2024-03-16T12:51:14.000Z</published>
    <updated>2025-10-16T14:58:41.519Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sdr-Software-Defined-Radio-设备"><a href="#sdr-Software-Defined-Radio-设备" class="headerlink" title="sdr(Software Defined Radio)设备"></a>sdr(Software Defined Radio)设备</h1><p>前段时间买了RSP1接收机，搭配天线是直径大概在40cm的小环有源天线(用于短波段)挂在我宿舍的衣柜上，然后从<code>BI1PTK</code>那里白嫖了一根大概45cm的中心频率在u段和v段玻璃钢天线，架设在宿舍阳台上。</p><h1 id="sdr软件"><a href="#sdr软件" class="headerlink" title="sdr软件"></a>sdr软件</h1><p>sdr常用软件一般是<code>sdr#</code>(sdrsharp)和<code>sdruno</code>，sdr#有汉化版本，但是由于某些未知原因我的电脑使用sdr#无法读取到sdr设备，因此只能使用sdruno。</p><p><code>sdruno</code>是<code>sdrplay</code>官方支持的接收软件，但是没有中文版本，而且功能按钮众多难以记忆，广泛流传的中文说明明显是机器翻译难以使用，因此写一篇常用功能的使用说明。</p><p><code>sdruno</code>的GUI：</p><p><img src="/2024/sdruno/8ee1a3e43724e841907bb7aff58b8b2.png"></p><h1 id="操作面板"><a href="#操作面板" class="headerlink" title="操作面板"></a>操作面板</h1><h2 id="main-主控面板"><a href="#main-主控面板" class="headerlink" title="main(主控面板)"></a>main(主控面板)</h2><p><img src="/2024/sdruno/main.png"></p><p>最上面的<code>PLUGINS</code>可以打开<a href="#plugins%E6%8F%92%E4%BB%B6%E5%B7%B2%E5%8A%A0%E8%BD%BDrec%E6%8F%92%E4%BB%B6">插件面板</a></p><p>左上角的<code>OPT</code>可以修改操作面板设置，例如将窗口恢复默认排布。当你调整好了窗口之后可以按<code>ctrl+w</code>保存你当前的窗口设置。<code>SCAN``SCHEDULER``SP1``SP2``RX</code>分别可以打开其他几个窗口，分别是扫描器大小瀑布和接收控制面板</p><p>右侧<code>ADD VRX</code>和<code>DEL VRX</code>可以在同频段内设置多个收听频率。<br><code>LO LOCK</code>可以锁定瀑布中的频率选择线。开关可以选择是移动频率选择线还是水平频率坐标轴。</p><p><code>IF MODE</code>设置为<code>ZIF</code>时可以在右侧调节总频宽(图中为10M宽度)</p><p><code>PLAY</code>和<code>STOP</code>可以打开必应翻译查看按键功能。</p><h2 id="rx-control-接收控制"><a href="#rx-control-接收控制" class="headerlink" title="rx control(接收控制)"></a>rx control(接收控制)</h2><p><img src="/2024/sdruno/rx.png"></p><p>上面最显眼的就是频率，可以鼠标滚轮调节每一位数字。下面可以选择各种接收模式，<code>AM</code>调幅，<code>SAM</code>，<code>FM</code>调频，<code>CW</code>短幅报，<code>DSB</code>双边带<code>LSB</code>下边带<code>USB</code>上边带，<code>DIGTIAL</code>数字模式</p><p>如果选择<code>FM</code>下面需要选择<code>NFM</code>还是<code>WFM</code>等，每种模式都有自己的滤波器设置和宽度</p><p>如果选择<code>CW</code>下面的<code>CW OP</code>可以设置</p><p>右侧<code>FILTER</code>可以设置信号宽度</p><p><code>NB</code>可以选择</p><p>最右侧<code>NORCH</code>陷波器可以添加最多四个陷波器</p><p>左下侧<code>MUTE</code>可以一键静音</p><p><code>SQLC</code>可以设置静噪，<code>VOLUME</code>设置音量</p><p>右下侧<code>AGC</code>是自动增益控制</p><p>面板最右侧可以快捷调整接收波段</p><h2 id="rx-ex-其他接收控制选项"><a href="#rx-ex-其他接收控制选项" class="headerlink" title="rx ex(其他接收控制选项)"></a>rx ex(其他接收控制选项)</h2><p><img src="/2024/sdruno/rx_ex.png"></p><p>中间几个滑块，<code>AGC</code>,<code>NB</code>一般保持默认即可，<code>NR</code>降噪效果取决于信号强度</p><p><code>DEEM</code>是去重控制，除美国外一般设置<code>50us</code></p><p><code>AFC</code>是自动频率控制，可以追踪中心频点</p><p><code>MONO</code>是在SFM模式中关闭立体声接收</p><p><code>FMS-NR</code>是FM立体声降噪</p><p><code>PDBPF</code>带通滤波器可以设置音频输出频率范围到<code>LC</code>和<code>HC</code>，可以用于去除模拟哑音信号</p><h2 id="main-sp-大瀑布"><a href="#main-sp-大瀑布" class="headerlink" title="main sp(大瀑布)"></a>main sp(大瀑布)</h2><p><img src="/2024/sdruno/main_sp.png"></p><p>左上的<code>sett</code>可以设置瀑布图的对比度增益刷新速度等，下面的<code>SP</code>,<code>WF</code>,<code>SP+WF</code>设置显示频谱或者瀑布图或二者都显示，<code>COMBO</code>是叠加显示</p><p>放大时点击<code>VFO</code>可以将中心频点设置为屏幕中央</p><h2 id="aux-sp-小瀑布"><a href="#aux-sp-小瀑布" class="headerlink" title="aux sp(小瀑布)"></a>aux sp(小瀑布)</h2><p><img src="/aux.png"></p><p>这里显示的是音频频谱，与大瀑布非常相似</p><p>点击<code>F</code>只显示过滤后的音频信号，点击<code>FMAF</code>将显示FM信号</p><h2 id="plugins-插件-已加载rec插件"><a href="#plugins-插件-已加载rec插件" class="headerlink" title="plugins(插件,已加载rec插件)"></a>plugins(插件,已加载rec插件)</h2><p><img src="/2024/sdruno/plugins_rec.png"></p><p>插件就没什么好说的了用哪个就去安装然后load，图片右边是录音插件，只有一项提一嘴，<code>Use Squesch</code>开关控制静噪录音，勾选后信号只有高于静噪强度之后才会开启录音</p>]]></content>
    
    
    <summary type="html">sdruno简明教程</summary>
    
    
    
    <category term="文档&amp;笔记" scheme="http://triority.cc/categories/%E6%96%87%E6%A1%A3-%E7%AC%94%E8%AE%B0/"/>
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%96%87%E6%A1%A3-%E7%AC%94%E8%AE%B0/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>KSP引力弹弓</title>
    <link href="http://triority.cc/2024/gravitational-slingshot-try/"/>
    <id>http://triority.cc/2024/gravitational-slingshot-try/</id>
    <published>2024-02-28T21:49:42.000Z</published>
    <updated>2025-10-16T14:58:41.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>尝试用引力弹弓只用3000m&#x2F;s的△v从kerbin的100km低轨道转移到jool</p><p><img src="/2024/gravitational-slingshot-try/0651d48ff8a413923a00bcf86842cae.png"></p><p>首先进入地球100km低轨道，携带3000m&#x2F;s的△v，先使用了800m&#x2F;s进入月球转移轨道，经过两次月球引力弹弓加速离开地球引力范围</p><p>然后使用2000m&#x2F;s加速到了地球共振轨道，一个轨道周期后利用地球引力弹弓加速进入木星转移轨道，终于可以飞掠jool了</p><p>​然发后现到达木星近地点的速度为10km&#x2F;s，木星大气层厚度200km我降低到了185km进行气大制动也会过爆热炸……</p><p>​尝用试卫星的引力弓弹制动，然发后现最快卫星的速度是2.5km&#x2F;s，就算理论大最效率动制也超过了木星的逃逸速度……</p><p>​好吧没救了合个影先<br><img src="/img/62e4fa302f27ac7d1292d0c36a11364.png"></p><p>然后alt+F12开调试模式（写这篇文章就为了记一下这个快捷键永远想不起来永远查不到）</p><p><img src="/2024/gravitational-slingshot-try/5b18efa10bd08494ea04f5ab9bac0f9.png"></p><p>短暂的看一眼jool的日出之后到达海拔高度0，即使开了无损坏也会直接爆炸</p><p><img src="/2024/gravitational-slingshot-try/8119ca77c5a35013bf2cb924a828976.png"></p><p>附赠一张高清dv图，维基百科的太糊了<br><img src="/2024/gravitational-slingshot-try/f301b63d683434dafa9b8779080f40a17105e555.jpg@1256w_1776h_!web-article-pic.avif"></p>]]></content>
    
    
    <summary type="html">KSP使用引力弹弓前往jool</summary>
    
    
    
    <category term="整活&amp;游戏" scheme="http://triority.cc/categories/%E6%95%B4%E6%B4%BB-%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="Kerbal Space Program" scheme="http://triority.cc/tags/Kerbal-Space-Program/"/>
    
  </entry>
  
  <entry>
    <title>QSL卡片</title>
    <link href="http://triority.cc/2023/QSL/"/>
    <id>http://triority.cc/2023/QSL/</id>
    <published>2023-12-23T15:15:40.000Z</published>
    <updated>2025-10-16T14:58:40.910Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>昨天晚上(今天早上)设计了一下自己的QSL卡片，填写表格的一面已经完成了，还在考虑另一面放一张什么照片</p><p><img src="/2023/QSL/QSLCard.png"></p><p>本来想用ps画的，瞪眼一个小时也没画出来(也许ps更适合图片处理?)最终还是用的ppt</p><p>自我感觉良好乐乐乐，至于照片，想好了再来接着写</p>]]></content>
    
    
    <summary type="html">QSL卡片设计</summary>
    
    
    
    <category term="无线电" scheme="http://triority.cc/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
    <category term="无线电" scheme="http://triority.cc/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
</feed>
